public final class android.R$anim {
  public android.R$anim();
public final class android.R$array {
  public android.R$array();
public final class android.R$attr {
  public android.R$attr();
public final class android.R$bool {
  public android.R$bool();
public final class android.R$color {
  public android.R$color();
public final class android.R$dimen {
  public android.R$dimen();
public final class android.R$drawable {
  public android.R$drawable();
public final class android.R$id {
  public android.R$id();
public final class android.R$integer {
  public android.R$integer();
public final class android.R$layout {
  public android.R$layout();
public final class android.R$plurals {
  public android.R$plurals();
public final class android.R$raw {
  public android.R$raw();
public final class android.R$string {
  public android.R$string();
public final class android.R$style {
  public android.R$style();
public final class android.R$styleable {
  public android.R$styleable();
public final class android.R$xml {
  public android.R$xml();
public final class android.R {
  public android.R();
  public android.accessibilityservice.AccessibilityServiceInfo createFromParcel(android.os.Parcel);
  public android.accessibilityservice.AccessibilityServiceInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.accessibilityservice.AccessibilityServiceInfo implements android.os.Parcelable {
  public android.accessibilityservice.AccessibilityServiceInfo();
  public void updateDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo);
  public java.lang.String getId();
  public android.content.pm.ResolveInfo getResolveInfo();
  public java.lang.String getSettingsActivityName();
  public boolean getCanRetrieveWindowContent();
  public java.lang.String getDescription();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static java.lang.String feedbackTypeToString(int);
  public static java.lang.String flagToString(int);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.accessibilityservice.IAccessibilityServiceConnection$Stub extends android.os.Binder implements android.accessibilityservice.IAccessibilityServiceConnection {
  public android.accessibilityservice.IAccessibilityServiceConnection$Stub();
  public static android.accessibilityservice.IAccessibilityServiceConnection asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.accessibilityservice.IAccessibilityServiceConnection extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.accessibilityservice.IEventListener$Stub extends android.os.Binder implements android.accessibilityservice.IEventListener {
  public android.accessibilityservice.IEventListener$Stub();
  public static android.accessibilityservice.IEventListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.accessibilityservice.IEventListener extends android.os.IInterface {
  public android.accounts.Account createFromParcel(android.os.Parcel);
  public android.accounts.Account[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.accounts.Account implements android.os.Parcelable {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.accounts.Account(java.lang.String, java.lang.String);
  public android.accounts.Account(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public void run();
  public void run();
  public void onReceive(android.content.Context, android.content.Intent);
  public void onResult(android.os.Bundle);
  public void onError(int, java.lang.String);
  public android.accounts.AccountManager$AmsTask(android.app.Activity, android.os.Handler, android.accounts.AccountManagerCallback<android.os.Bundle>);
  public final android.accounts.AccountManagerFuture<android.os.Bundle> start();
public class android.accounts.AccountManager$BaseFutureTask$Response extends android.accounts.IAccountManagerResponse$Stub {
  public void onResult(android.os.Bundle);
  public void onError(int, java.lang.String);
  public android.accounts.AccountManager$BaseFutureTask(android.accounts.AccountManager, android.os.Handler);
  public void run();
  public android.accounts.AccountManager$Future2Task(android.os.Handler, android.accounts.AccountManagerCallback<T>);
  public android.accounts.AccountManager$Future2Task<T> start();
  public void run(android.accounts.AccountManagerFuture<android.accounts.Account[]>);
  public void run(android.accounts.AccountManagerFuture<android.os.Bundle>);
public class android.accounts.AccountManager {
  public android.accounts.AccountManager(android.content.Context, android.accounts.IAccountManager);
  public android.accounts.AccountManager(android.content.Context, android.accounts.IAccountManager, android.os.Handler);
  public static android.os.Bundle sanitizeResult(android.os.Bundle);
  public static android.accounts.AccountManager get(android.content.Context);
  public java.lang.String getPassword(android.accounts.Account);
  public java.lang.String getUserData(android.accounts.Account, java.lang.String);
  public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes();
  public android.accounts.Account[] getAccounts();
  public android.accounts.Account[] getAccountsByType(java.lang.String);
  public android.accounts.AccountManagerFuture<java.lang.Boolean> hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback<java.lang.Boolean>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.accounts.Account[]> getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback<android.accounts.Account[]>, android.os.Handler);
  public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle);
  public android.accounts.AccountManagerFuture<java.lang.Boolean> removeAccount(android.accounts.Account, android.accounts.AccountManagerCallback<java.lang.Boolean>, android.os.Handler);
  public void invalidateAuthToken(java.lang.String, java.lang.String);
  public java.lang.String peekAuthToken(android.accounts.Account, java.lang.String);
  public void setPassword(android.accounts.Account, java.lang.String);
  public void clearPassword(android.accounts.Account);
  public void setUserData(android.accounts.Account, java.lang.String, java.lang.String);
  public void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String);
  public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account, java.lang.String, boolean, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, boolean, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> confirmCredentials(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> updateCredentials(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> editProperties(java.lang.String, android.app.Activity, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthTokenByFeatures(java.lang.String, java.lang.String, java.lang.String[], android.app.Activity, android.os.Bundle, android.os.Bundle, android.accounts.AccountManagerCallback<android.os.Bundle>, android.os.Handler);
  public static android.content.Intent newChooseAccountIntent(android.accounts.Account, java.util.ArrayList<android.accounts.Account>, java.lang.String[], boolean, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle);
  public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean);
  public void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener);
public interface android.accounts.AccountManagerCallback<V> {
  public abstract void run(android.accounts.AccountManagerFuture<V>);
public interface android.accounts.AccountManagerFuture<V> {
  public abstract boolean cancel(boolean);
  public abstract boolean isCancelled();
  public abstract boolean isDone();
  public android.accounts.AccountManagerResponse createFromParcel(android.os.Parcel);
  public android.accounts.AccountManagerResponse[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.accounts.AccountManagerResponse implements android.os.Parcelable {
  public android.accounts.AccountManagerResponse(android.accounts.IAccountManagerResponse);
  public android.accounts.AccountManagerResponse(android.os.Parcel);
  public void onResult(android.os.Bundle);
  public void onError(int, java.lang.String);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.accounts.AccountsException extends java.lang.Exception {
  public android.accounts.AccountsException();
  public android.accounts.AccountsException(java.lang.String);
  public android.accounts.AccountsException(java.lang.String, java.lang.Throwable);
  public android.accounts.AccountsException(java.lang.Throwable);
  public android.accounts.AuthenticatorDescription createFromParcel(android.os.Parcel);
  public android.accounts.AuthenticatorDescription[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.accounts.AuthenticatorDescription implements android.os.Parcelable {
  public android.accounts.AuthenticatorDescription(java.lang.String, java.lang.String, int, int, int, int, boolean);
  public android.accounts.AuthenticatorDescription(java.lang.String, java.lang.String, int, int, int, int);
  public static android.accounts.AuthenticatorDescription newKey(java.lang.String);
  public int describeContents();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
public class android.accounts.AuthenticatorException extends android.accounts.AccountsException {
  public android.accounts.AuthenticatorException();
  public android.accounts.AuthenticatorException(java.lang.String);
  public android.accounts.AuthenticatorException(java.lang.String, java.lang.Throwable);
  public android.accounts.AuthenticatorException(java.lang.Throwable);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.accounts.IAccountManager$Stub extends android.os.Binder implements android.accounts.IAccountManager {
  public android.accounts.IAccountManager$Stub();
  public static android.accounts.IAccountManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.accounts.IAccountManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.accounts.IAccountManagerResponse$Stub extends android.os.Binder implements android.accounts.IAccountManagerResponse {
  public android.accounts.IAccountManagerResponse$Stub();
  public static android.accounts.IAccountManagerResponse asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.accounts.IAccountManagerResponse extends android.os.IInterface {
public interface android.accounts.OnAccountsUpdateListener {
  public abstract void onAccountsUpdated(android.accounts.Account[]);
public class android.accounts.OperationCanceledException extends android.accounts.AccountsException {
  public android.accounts.OperationCanceledException();
  public android.accounts.OperationCanceledException(java.lang.String);
  public android.accounts.OperationCanceledException(java.lang.String, java.lang.Throwable);
  public android.accounts.OperationCanceledException(java.lang.Throwable);
public interface android.animation.Animator$AnimatorListener {
  public abstract void onAnimationStart(android.animation.Animator);
  public abstract void onAnimationEnd(android.animation.Animator);
  public abstract void onAnimationCancel(android.animation.Animator);
  public abstract void onAnimationRepeat(android.animation.Animator);
public abstract class android.animation.Animator implements java.lang.Cloneable {
  public android.animation.Animator();
  public void start();
  public void cancel();
  public void end();
  public abstract long getStartDelay();
  public abstract void setStartDelay(long);
  public abstract android.animation.Animator setDuration(long);
  public abstract long getDuration();
  public abstract void setInterpolator(android.animation.TimeInterpolator);
  public abstract boolean isRunning();
  public boolean isStarted();
  public void addListener(android.animation.Animator$AnimatorListener);
  public void removeListener(android.animation.Animator$AnimatorListener);
  public java.util.ArrayList<android.animation.Animator$AnimatorListener> getListeners();
  public void removeAllListeners();
  public android.animation.Animator clone();
  public void setupStartValues();
  public void setupEndValues();
  public void setTarget(java.lang.Object);
public class android.animation.AnimatorInflater {
  public android.animation.AnimatorInflater();
public abstract class android.animation.AnimatorListenerAdapter implements android.animation.Animator$AnimatorListener {
  public android.animation.AnimatorListenerAdapter();
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public void onAnimationStart(android.animation.Animator);
public class android.animation.AnimatorSet$Builder {
  public android.animation.AnimatorSet$Builder with(android.animation.Animator);
  public android.animation.AnimatorSet$Builder before(android.animation.Animator);
  public android.animation.AnimatorSet$Builder after(android.animation.Animator);
  public android.animation.AnimatorSet$Builder after(long);
  public android.animation.AnimatorSet$Dependency(android.animation.AnimatorSet$Node, int);
  public android.animation.AnimatorSet$DependencyListener(android.animation.AnimatorSet, android.animation.AnimatorSet$Node, int);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public void onAnimationStart(android.animation.Animator);
  public android.animation.AnimatorSet$Node(android.animation.Animator);
  public void addDependency(android.animation.AnimatorSet$Dependency);
  public android.animation.AnimatorSet$Node clone();
public final class android.animation.AnimatorSet extends android.animation.Animator {
  public android.animation.AnimatorSet();
  public void playTogether(android.animation.Animator...);
  public void playTogether(java.util.Collection<android.animation.Animator>);
  public void playSequentially(android.animation.Animator...);
  public void playSequentially(java.util.List<android.animation.Animator>);
  public java.util.ArrayList<android.animation.Animator> getChildAnimations();
  public void setTarget(java.lang.Object);
  public void setInterpolator(android.animation.TimeInterpolator);
  public android.animation.AnimatorSet$Builder play(android.animation.Animator);
  public void cancel();
  public void end();
  public boolean isRunning();
  public boolean isStarted();
  public long getStartDelay();
  public void setStartDelay(long);
  public long getDuration();
  public android.animation.AnimatorSet setDuration(long);
  public void setupStartValues();
  public void setupEndValues();
  public void start();
  public android.animation.AnimatorSet clone();
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
public class android.animation.ArgbEvaluator implements android.animation.TypeEvaluator {
  public android.animation.ArgbEvaluator();
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
public class android.animation.FloatEvaluator implements android.animation.TypeEvaluator<java.lang.Number> {
  public android.animation.FloatEvaluator();
  public java.lang.Float evaluate(float, java.lang.Number, java.lang.Number);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
  public android.animation.FloatKeyframeSet(android.animation.Keyframe$FloatKeyframe...);
  public java.lang.Object getValue(float);
  public android.animation.FloatKeyframeSet clone();
  public float getFloatValue(float);
  public android.animation.KeyframeSet clone();
public class android.animation.IntEvaluator implements android.animation.TypeEvaluator<java.lang.Integer> {
  public android.animation.IntEvaluator();
  public java.lang.Integer evaluate(float, java.lang.Integer, java.lang.Integer);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
  public android.animation.IntKeyframeSet(android.animation.Keyframe$IntKeyframe...);
  public java.lang.Object getValue(float);
  public android.animation.IntKeyframeSet clone();
  public int getIntValue(float);
  public android.animation.KeyframeSet clone();
  public float getFloatValue();
  public java.lang.Object getValue();
  public void setValue(java.lang.Object);
  public android.animation.Keyframe$FloatKeyframe clone();
  public android.animation.Keyframe clone();
  public int getIntValue();
  public java.lang.Object getValue();
  public void setValue(java.lang.Object);
  public android.animation.Keyframe$IntKeyframe clone();
  public android.animation.Keyframe clone();
  public java.lang.Object getValue();
  public void setValue(java.lang.Object);
  public android.animation.Keyframe$ObjectKeyframe clone();
  public android.animation.Keyframe clone();
public abstract class android.animation.Keyframe implements java.lang.Cloneable {
  public android.animation.Keyframe();
  public static android.animation.Keyframe ofInt(float, int);
  public static android.animation.Keyframe ofInt(float);
  public static android.animation.Keyframe ofFloat(float, float);
  public static android.animation.Keyframe ofFloat(float);
  public static android.animation.Keyframe ofObject(float, java.lang.Object);
  public static android.animation.Keyframe ofObject(float);
  public boolean hasValue();
  public abstract java.lang.Object getValue();
  public abstract void setValue(java.lang.Object);
  public float getFraction();
  public void setFraction(float);
  public android.animation.TimeInterpolator getInterpolator();
  public void setInterpolator(android.animation.TimeInterpolator);
  public java.lang.Class getType();
  public abstract android.animation.Keyframe clone();
  public android.animation.KeyframeSet(android.animation.Keyframe...);
  public static android.animation.KeyframeSet ofInt(int...);
  public static android.animation.KeyframeSet ofFloat(float...);
  public static android.animation.KeyframeSet ofKeyframe(android.animation.Keyframe...);
  public static android.animation.KeyframeSet ofObject(java.lang.Object...);
  public void setEvaluator(android.animation.TypeEvaluator);
  public android.animation.KeyframeSet clone();
  public java.lang.Object getValue(float);
  public java.lang.String toString();
  public boolean onPreDraw();
  public void onAnimationEnd(android.animation.Animator);
  public void onLayoutChange(android.view.View, int, int, int, int, int, int, int, int);
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
public interface android.animation.LayoutTransition$TransitionListener {
  public abstract void startTransition(android.animation.LayoutTransition, android.view.ViewGroup, android.view.View, int);
  public abstract void endTransition(android.animation.LayoutTransition, android.view.ViewGroup, android.view.View, int);
public class android.animation.LayoutTransition {
  public android.animation.LayoutTransition();
  public void setDuration(long);
  public void setStartDelay(int, long);
  public long getStartDelay(int);
  public void setDuration(int, long);
  public long getDuration(int);
  public void setStagger(int, long);
  public long getStagger(int);
  public void setInterpolator(int, android.animation.TimeInterpolator);
  public android.animation.TimeInterpolator getInterpolator(int);
  public void setAnimator(int, android.animation.Animator);
  public android.animation.Animator getAnimator(int);
  public void setAnimateParentHierarchy(boolean);
  public void startChangingAnimations();
  public void endChangingAnimations();
  public boolean isChangingLayout();
  public boolean isRunning();
  public void cancel();
  public void cancel(int);
  public void addChild(android.view.ViewGroup, android.view.View);
  public void showChild(android.view.ViewGroup, android.view.View);
  public void removeChild(android.view.ViewGroup, android.view.View);
  public void hideChild(android.view.ViewGroup, android.view.View);
  public void addTransitionListener(android.animation.LayoutTransition$TransitionListener);
  public void removeTransitionListener(android.animation.LayoutTransition$TransitionListener);
  public java.util.List<android.animation.LayoutTransition$TransitionListener> getTransitionListeners();
public final class android.animation.ObjectAnimator extends android.animation.ValueAnimator {
  public void setPropertyName(java.lang.String);
  public void setProperty(android.util.Property);
  public java.lang.String getPropertyName();
  public android.animation.ObjectAnimator();
  public static android.animation.ObjectAnimator ofInt(java.lang.Object, java.lang.String, int...);
  public static <T extends java/lang/Object> android.animation.ObjectAnimator ofInt(T, android.util.Property<T, java.lang.Integer>, int...);
  public static android.animation.ObjectAnimator ofFloat(java.lang.Object, java.lang.String, float...);
  public static <T extends java/lang/Object> android.animation.ObjectAnimator ofFloat(T, android.util.Property<T, java.lang.Float>, float...);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, java.lang.String, android.animation.TypeEvaluator, java.lang.Object...);
  public static <T extends java/lang/Object, V extends java/lang/Object> android.animation.ObjectAnimator ofObject(T, android.util.Property<T, V>, android.animation.TypeEvaluator<V>, V...);
  public static android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder...);
  public void setIntValues(int...);
  public void setFloatValues(float...);
  public void setObjectValues(java.lang.Object...);
  public void start();
  public android.animation.ObjectAnimator setDuration(long);
  public java.lang.Object getTarget();
  public void setTarget(java.lang.Object);
  public void setupStartValues();
  public void setupEndValues();
  public android.animation.ObjectAnimator clone();
  public java.lang.String toString();
  public android.animation.ValueAnimator clone();
  public android.animation.ValueAnimator setDuration(long);
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
  public android.animation.PropertyValuesHolder$FloatPropertyValuesHolder(java.lang.String, android.animation.FloatKeyframeSet);
  public android.animation.PropertyValuesHolder$FloatPropertyValuesHolder(android.util.Property, android.animation.FloatKeyframeSet);
  public android.animation.PropertyValuesHolder$FloatPropertyValuesHolder(java.lang.String, float...);
  public android.animation.PropertyValuesHolder$FloatPropertyValuesHolder(android.util.Property, float...);
  public void setFloatValues(float...);
  public android.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone();
  public android.animation.PropertyValuesHolder clone();
  public android.animation.PropertyValuesHolder$IntPropertyValuesHolder(java.lang.String, android.animation.IntKeyframeSet);
  public android.animation.PropertyValuesHolder$IntPropertyValuesHolder(android.util.Property, android.animation.IntKeyframeSet);
  public android.animation.PropertyValuesHolder$IntPropertyValuesHolder(java.lang.String, int...);
  public android.animation.PropertyValuesHolder$IntPropertyValuesHolder(android.util.Property, int...);
  public void setIntValues(int...);
  public android.animation.PropertyValuesHolder$IntPropertyValuesHolder clone();
  public android.animation.PropertyValuesHolder clone();
public class android.animation.PropertyValuesHolder implements java.lang.Cloneable {
  public static android.animation.PropertyValuesHolder ofInt(java.lang.String, int...);
  public static android.animation.PropertyValuesHolder ofInt(android.util.Property<?, java.lang.Integer>, int...);
  public static android.animation.PropertyValuesHolder ofFloat(java.lang.String, float...);
  public static android.animation.PropertyValuesHolder ofFloat(android.util.Property<?, java.lang.Float>, float...);
  public static android.animation.PropertyValuesHolder ofObject(java.lang.String, android.animation.TypeEvaluator, java.lang.Object...);
  public static <V extends java/lang/Object> android.animation.PropertyValuesHolder ofObject(android.util.Property, android.animation.TypeEvaluator<V>, V...);
  public static android.animation.PropertyValuesHolder ofKeyframe(java.lang.String, android.animation.Keyframe...);
  public static android.animation.PropertyValuesHolder ofKeyframe(android.util.Property, android.animation.Keyframe...);
  public void setIntValues(int...);
  public void setFloatValues(float...);
  public void setKeyframes(android.animation.Keyframe...);
  public void setObjectValues(java.lang.Object...);
  public android.animation.PropertyValuesHolder clone();
  public void setEvaluator(android.animation.TypeEvaluator);
  public void setPropertyName(java.lang.String);
  public void setProperty(android.util.Property);
  public java.lang.String getPropertyName();
  public java.lang.String toString();
public interface android.animation.TimeInterpolator {
  public abstract float getInterpolation(float);
public interface android.animation.TypeEvaluator<T> {
  public abstract T evaluate(float, T, T);
  public void handleMessage(android.os.Message);
public interface android.animation.ValueAnimator$AnimatorUpdateListener {
  public abstract void onAnimationUpdate(android.animation.ValueAnimator);
public class android.animation.ValueAnimator extends android.animation.Animator {
  public android.animation.ValueAnimator();
  public static android.animation.ValueAnimator ofInt(int...);
  public static android.animation.ValueAnimator ofFloat(float...);
  public static android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder...);
  public static android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator, java.lang.Object...);
  public void setIntValues(int...);
  public void setFloatValues(float...);
  public void setObjectValues(java.lang.Object...);
  public void setValues(android.animation.PropertyValuesHolder...);
  public android.animation.PropertyValuesHolder[] getValues();
  public android.animation.ValueAnimator setDuration(long);
  public long getDuration();
  public void setCurrentPlayTime(long);
  public long getCurrentPlayTime();
  public long getStartDelay();
  public void setStartDelay(long);
  public static long getFrameDelay();
  public static void setFrameDelay(long);
  public java.lang.Object getAnimatedValue();
  public java.lang.Object getAnimatedValue(java.lang.String);
  public void setRepeatCount(int);
  public int getRepeatCount();
  public void setRepeatMode(int);
  public int getRepeatMode();
  public void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener);
  public void removeAllUpdateListeners();
  public void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener);
  public void setInterpolator(android.animation.TimeInterpolator);
  public android.animation.TimeInterpolator getInterpolator();
  public void setEvaluator(android.animation.TypeEvaluator);
  public void start();
  public void cancel();
  public void end();
  public boolean isRunning();
  public boolean isStarted();
  public void reverse();
  public float getAnimatedFraction();
  public android.animation.ValueAnimator clone();
  public static int getCurrentAnimationsCount();
  public static void clearAllAnimations();
  public java.lang.String toString();
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
public class android.app.ActionBar$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
  public android.app.ActionBar$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.app.ActionBar$LayoutParams(int, int);
  public android.app.ActionBar$LayoutParams(int, int, int);
  public android.app.ActionBar$LayoutParams(int);
  public android.app.ActionBar$LayoutParams(android.app.ActionBar$LayoutParams);
  public android.app.ActionBar$LayoutParams(android.view.ViewGroup$LayoutParams);
public interface android.app.ActionBar$OnMenuVisibilityListener {
  public abstract void onMenuVisibilityChanged(boolean);
public interface android.app.ActionBar$OnNavigationListener {
  public abstract boolean onNavigationItemSelected(int, long);
public abstract class android.app.ActionBar$Tab {
  public android.app.ActionBar$Tab();
  public abstract int getPosition();
  public abstract android.graphics.drawable.Drawable getIcon();
  public abstract java.lang.CharSequence getText();
  public abstract android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable);
  public abstract android.app.ActionBar$Tab setIcon(int);
  public abstract android.app.ActionBar$Tab setText(java.lang.CharSequence);
  public abstract android.app.ActionBar$Tab setText(int);
  public abstract android.app.ActionBar$Tab setCustomView(android.view.View);
  public abstract android.app.ActionBar$Tab setCustomView(int);
  public abstract android.view.View getCustomView();
  public abstract android.app.ActionBar$Tab setTag(java.lang.Object);
  public abstract java.lang.Object getTag();
  public abstract android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener);
  public abstract void select();
  public abstract android.app.ActionBar$Tab setContentDescription(int);
  public abstract android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence);
  public abstract java.lang.CharSequence getContentDescription();
public interface android.app.ActionBar$TabListener {
  public abstract void onTabSelected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
  public abstract void onTabUnselected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
  public abstract void onTabReselected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
public abstract class android.app.ActionBar {
  public android.app.ActionBar();
  public abstract void setCustomView(android.view.View);
  public abstract void setCustomView(android.view.View, android.app.ActionBar$LayoutParams);
  public abstract void setCustomView(int);
  public abstract void setIcon(int);
  public abstract void setIcon(android.graphics.drawable.Drawable);
  public abstract void setLogo(int);
  public abstract void setLogo(android.graphics.drawable.Drawable);
  public abstract void setListNavigationCallbacks(android.widget.SpinnerAdapter, android.app.ActionBar$OnNavigationListener);
  public abstract void setSelectedNavigationItem(int);
  public abstract int getSelectedNavigationIndex();
  public abstract int getNavigationItemCount();
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void setTitle(int);
  public abstract void setSubtitle(java.lang.CharSequence);
  public abstract void setSubtitle(int);
  public abstract void setDisplayOptions(int);
  public abstract void setDisplayOptions(int, int);
  public abstract void setDisplayUseLogoEnabled(boolean);
  public abstract void setDisplayShowHomeEnabled(boolean);
  public abstract void setDisplayHomeAsUpEnabled(boolean);
  public abstract void setDisplayShowTitleEnabled(boolean);
  public abstract void setDisplayShowCustomEnabled(boolean);
  public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable);
  public abstract android.view.View getCustomView();
  public abstract java.lang.CharSequence getTitle();
  public abstract java.lang.CharSequence getSubtitle();
  public abstract int getNavigationMode();
  public abstract void setNavigationMode(int);
  public abstract int getDisplayOptions();
  public abstract android.app.ActionBar$Tab newTab();
  public abstract void addTab(android.app.ActionBar$Tab);
  public abstract void addTab(android.app.ActionBar$Tab, boolean);
  public abstract void addTab(android.app.ActionBar$Tab, int);
  public abstract void addTab(android.app.ActionBar$Tab, int, boolean);
  public abstract void removeTab(android.app.ActionBar$Tab);
  public abstract void removeTabAt(int);
  public abstract void removeAllTabs();
  public abstract void selectTab(android.app.ActionBar$Tab);
  public abstract android.app.ActionBar$Tab getSelectedTab();
  public abstract android.app.ActionBar$Tab getTabAt(int);
  public abstract int getTabCount();
  public abstract int getHeight();
  public abstract void show();
  public abstract void hide();
  public abstract boolean isShowing();
  public abstract void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public abstract void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public void setHomeButtonEnabled(boolean);
  public android.content.Context getThemedContext();
public class android.app.Activity extends android.view.ContextThemeWrapper implements android.view.LayoutInflater$Factory2,android.view.Window$Callback,android.view.KeyEvent$Callback,android.view.View$OnCreateContextMenuListener,android.content.ComponentCallbacks2 {
  public android.app.Activity();
  public android.content.Intent getIntent();
  public void setIntent(android.content.Intent);
  public final android.app.Application getApplication();
  public final boolean isChild();
  public final android.app.Activity getParent();
  public android.view.WindowManager getWindowManager();
  public android.view.Window getWindow();
  public android.app.LoaderManager getLoaderManager();
  public android.view.View getCurrentFocus();
  public boolean onCreateThumbnail(android.graphics.Bitmap, android.graphics.Canvas);
  public java.lang.CharSequence onCreateDescription();
  public void onConfigurationChanged(android.content.res.Configuration);
  public int getChangingConfigurations();
  public java.lang.Object getLastNonConfigurationInstance();
  public java.lang.Object onRetainNonConfigurationInstance();
  public void onLowMemory();
  public void onTrimMemory(int);
  public android.app.FragmentManager getFragmentManager();
  public void onAttachFragment(android.app.Fragment);
  public final android.database.Cursor managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String);
  public final android.database.Cursor managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public void startManagingCursor(android.database.Cursor);
  public void stopManagingCursor(android.database.Cursor);
  public void setPersistent(boolean);
  public android.view.View findViewById(int);
  public android.app.ActionBar getActionBar();
  public void setContentView(int);
  public void setContentView(android.view.View);
  public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setFinishOnTouchOutside(boolean);
  public final void setDefaultKeyMode(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public void onBackPressed();
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public void onUserInteraction();
  public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public void onContentChanged();
  public void onWindowFocusChanged(boolean);
  public void onAttachedToWindow();
  public void onDetachedFromWindow();
  public boolean hasWindowFocus();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.view.View onCreatePanelView(int);
  public boolean onCreatePanelMenu(int, android.view.Menu);
  public boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public boolean onMenuOpened(int, android.view.Menu);
  public boolean onMenuItemSelected(int, android.view.MenuItem);
  public void onPanelClosed(int, android.view.Menu);
  public void invalidateOptionsMenu();
  public boolean onCreateOptionsMenu(android.view.Menu);
  public boolean onPrepareOptionsMenu(android.view.Menu);
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public void onOptionsMenuClosed(android.view.Menu);
  public void openOptionsMenu();
  public void closeOptionsMenu();
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void registerForContextMenu(android.view.View);
  public void unregisterForContextMenu(android.view.View);
  public void openContextMenu(android.view.View);
  public void closeContextMenu();
  public boolean onContextItemSelected(android.view.MenuItem);
  public void onContextMenuClosed(android.view.Menu);
  public final void showDialog(int);
  public final boolean showDialog(int, android.os.Bundle);
  public final void dismissDialog(int);
  public final void removeDialog(int);
  public boolean onSearchRequested();
  public void startSearch(java.lang.String, boolean, android.os.Bundle, boolean);
  public void triggerSearch(java.lang.String, android.os.Bundle);
  public void takeKeyEvents(boolean);
  public final boolean requestWindowFeature(int);
  public final void setFeatureDrawableResource(int, int);
  public final void setFeatureDrawableUri(int, android.net.Uri);
  public final void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public final void setFeatureDrawableAlpha(int, int);
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.MenuInflater getMenuInflater();
  public void startActivityForResult(android.content.Intent, int);
  public void startActivity(android.content.Intent);
  public void startActivities(android.content.Intent[]);
  public boolean startActivityIfNeeded(android.content.Intent, int);
  public boolean startNextMatchingActivity(android.content.Intent);
  public void startActivityFromChild(android.app.Activity, android.content.Intent, int);
  public void startActivityFromFragment(android.app.Fragment, android.content.Intent, int);
  public void overridePendingTransition(int, int);
  public final void setResult(int);
  public final void setResult(int, android.content.Intent);
  public java.lang.String getCallingPackage();
  public android.content.ComponentName getCallingActivity();
  public void setVisible(boolean);
  public boolean isFinishing();
  public boolean isChangingConfigurations();
  public void recreate();
  public void finish();
  public void finishFromChild(android.app.Activity);
  public void finishActivity(int);
  public void finishActivityFromChild(android.app.Activity, int);
  public android.app.PendingIntent createPendingResult(int, android.content.Intent, int);
  public void setRequestedOrientation(int);
  public int getRequestedOrientation();
  public int getTaskId();
  public boolean isTaskRoot();
  public boolean moveTaskToBack(boolean);
  public java.lang.String getLocalClassName();
  public android.content.ComponentName getComponentName();
  public android.content.SharedPreferences getPreferences(int);
  public java.lang.Object getSystemService(java.lang.String);
  public void setTitle(java.lang.CharSequence);
  public void setTitle(int);
  public void setTitleColor(int);
  public final java.lang.CharSequence getTitle();
  public final int getTitleColor();
  public final void setProgressBarVisibility(boolean);
  public final void setProgressBarIndeterminateVisibility(boolean);
  public final void setProgressBarIndeterminate(boolean);
  public final void setProgress(int);
  public final void setSecondaryProgress(int);
  public final void setVolumeControlStream(int);
  public final int getVolumeControlStream();
  public final void runOnUiThread(java.lang.Runnable);
  public android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet);
  public android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public boolean isImmersive();
  public void setImmersive(boolean);
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public void onActionModeStarted(android.view.ActionMode);
  public void onActionModeFinished(android.view.ActionMode);
  public final boolean isResumed();
  public android.app.ActivityManager$MemoryInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$MemoryInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$MemoryInfo implements android.os.Parcelable {
  public android.app.ActivityManager$MemoryInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$ProcessErrorStateInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$ProcessErrorStateInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$ProcessErrorStateInfo implements android.os.Parcelable {
  public android.app.ActivityManager$ProcessErrorStateInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RecentTaskInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RecentTaskInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$RecentTaskInfo implements android.os.Parcelable {
  public android.app.ActivityManager$RecentTaskInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningAppProcessInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningAppProcessInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$RunningAppProcessInfo implements android.os.Parcelable {
  public android.app.ActivityManager$RunningAppProcessInfo();
  public android.app.ActivityManager$RunningAppProcessInfo(java.lang.String, int, java.lang.String[]);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningServiceInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningServiceInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$RunningServiceInfo implements android.os.Parcelable {
  public android.app.ActivityManager$RunningServiceInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningTaskInfo createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$RunningTaskInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$RunningTaskInfo implements android.os.Parcelable {
  public android.app.ActivityManager$RunningTaskInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.app.ActivityManager$TaskThumbnails createFromParcel(android.os.Parcel);
  public android.app.ActivityManager$TaskThumbnails[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ActivityManager$TaskThumbnails implements android.os.Parcelable {
  public android.app.ActivityManager$TaskThumbnails();
  public android.graphics.Bitmap getSubThumbnail(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
public class android.app.ActivityManager {
  public int getFrontActivityScreenCompatMode();
  public void setFrontActivityScreenCompatMode(int);
  public int getPackageScreenCompatMode(java.lang.String);
  public void setPackageScreenCompatMode(java.lang.String, int);
  public boolean getPackageAskScreenCompat(java.lang.String);
  public void setPackageAskScreenCompat(java.lang.String, boolean);
  public int getMemoryClass();
  public static int staticGetMemoryClass();
  public int getLargeMemoryClass();
  public static int staticGetLargeMemoryClass();
  public static boolean isHighEndGfx(android.view.Display);
  public static boolean isLargeRAM();
  public void moveTaskToFront(int, int);
  public void getMemoryInfo(android.app.ActivityManager$MemoryInfo);
  public boolean clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver);
  public java.util.List<android.app.ActivityManager$ProcessErrorStateInfo> getProcessesInErrorState();
  public java.util.List<android.content.pm.ApplicationInfo> getRunningExternalApplications();
  public java.util.List<android.app.ActivityManager$RunningAppProcessInfo> getRunningAppProcesses();
  public android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[]);
  public void restartPackage(java.lang.String);
  public void killBackgroundProcesses(java.lang.String);
  public void forceStopPackage(java.lang.String);
  public android.content.pm.ConfigurationInfo getDeviceConfigurationInfo();
  public int getLauncherLargeIconDensity();
  public int getLauncherLargeIconSize();
  public static boolean isUserAMonkey();
  public static boolean isRunningInTestHarness();
  public java.util.Map<java.lang.String, java.lang.Integer> getAllPackageLaunchCounts();
  public com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats();
  public boolean switchUser(int);
public abstract class android.app.ActivityManagerNative extends android.os.Binder implements android.app.IActivityManager {
  public static android.app.IActivityManager asInterface(android.os.IBinder);
  public static android.app.IActivityManager getDefault();
  public static boolean isSystemReady();
  public static void broadcastStickyIntent(android.content.Intent, java.lang.String);
  public static void noteWakeupAlarm(android.app.PendingIntent);
  public android.app.ActivityManagerNative();
  public android.os.IBinder asBinder();
  public android.app.ActivityManagerProxy(android.os.IBinder);
  public android.os.IBinder asBinder();
  public boolean testIsSystemReady();
  public void run();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public boolean isPreHoneycomb();
  public java.lang.String toString();
  public java.lang.String toString();
  public final void schedulePauseActivity(android.os.IBinder, boolean, boolean, int);
  public final void scheduleStopActivity(android.os.IBinder, boolean, int);
  public final void scheduleWindowVisibility(android.os.IBinder, boolean);
  public final void scheduleSleeping(android.os.IBinder, boolean);
  public final void scheduleResumeActivity(android.os.IBinder, boolean);
  public final void scheduleSendResult(android.os.IBinder, java.util.List<android.app.ResultInfo>);
  public final void scheduleLaunchActivity(android.content.Intent, android.os.IBinder, int, android.content.pm.ActivityInfo, android.content.res.Configuration, android.content.res.CompatibilityInfo, android.os.Bundle, java.util.List<android.app.ResultInfo>, java.util.List<android.content.Intent>, boolean, boolean, java.lang.String, android.os.ParcelFileDescriptor, boolean);
  public final void scheduleRelaunchActivity(android.os.IBinder, java.util.List<android.app.ResultInfo>, java.util.List<android.content.Intent>, int, boolean, android.content.res.Configuration);
  public final void scheduleNewIntent(java.util.List<android.content.Intent>, android.os.IBinder);
  public final void scheduleDestroyActivity(android.os.IBinder, boolean, int);
  public final void scheduleReceiver(android.content.Intent, android.content.pm.ActivityInfo, android.content.res.CompatibilityInfo, int, java.lang.String, android.os.Bundle, boolean);
  public final void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int);
  public final void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo);
  public final void scheduleCreateService(android.os.IBinder, android.content.pm.ServiceInfo, android.content.res.CompatibilityInfo);
  public final void scheduleBindService(android.os.IBinder, android.content.Intent, boolean);
  public final void scheduleUnbindService(android.os.IBinder, android.content.Intent);
  public final void scheduleServiceArgs(android.os.IBinder, boolean, int, int, android.content.Intent);
  public final void scheduleStopService(android.os.IBinder);
  public final void bindApplication(java.lang.String, android.content.pm.ApplicationInfo, java.util.List<android.content.pm.ProviderInfo>, android.content.ComponentName, java.lang.String, android.os.ParcelFileDescriptor, boolean, android.os.Bundle, android.app.IInstrumentationWatcher, int, boolean, boolean, android.content.res.Configuration, android.content.res.CompatibilityInfo, java.util.Map<java.lang.String, android.os.IBinder>, android.os.Bundle);
  public final void scheduleExit();
  public final void scheduleSuicide();
  public void requestThumbnail(android.os.IBinder);
  public void scheduleConfigurationChanged(android.content.res.Configuration);
  public void updateTimeZone();
  public void clearDnsCache();
  public void setHttpProxy(java.lang.String, java.lang.String, java.lang.String);
  public void processInBackground();
  public void dumpService(java.io.FileDescriptor, android.os.IBinder, java.lang.String[]);
  public void scheduleLowMemory();
  public void scheduleActivityConfigurationChanged(android.os.IBinder);
  public void profilerControl(boolean, java.lang.String, android.os.ParcelFileDescriptor, int);
  public void dumpHeap(boolean, java.lang.String, android.os.ParcelFileDescriptor);
  public void setSchedulingGroup(int);
  public void getMemoryInfo(android.os.Debug$MemoryInfo);
  public void dispatchPackageBroadcast(int, java.lang.String[]);
  public void scheduleCrash(java.lang.String);
  public void dumpActivity(java.io.FileDescriptor, android.os.IBinder, java.lang.String, java.lang.String[]);
  public android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor, boolean, boolean, java.lang.String[]);
  public void dumpGfxInfo(java.io.FileDescriptor, java.lang.String[]);
  public void setCoreSettings(android.os.Bundle);
  public void updatePackageCompatibilityInfo(java.lang.String, android.content.res.CompatibilityInfo);
  public void scheduleTrimMemory(int);
  public java.lang.String toString();
  public java.lang.String toString();
  public java.lang.String toString();
  public final boolean queueIdle();
  public void handleMessage(android.os.Message);
  public final boolean queueIdle();
  public java.lang.String toString();
  public void setProfiler(java.lang.String, android.os.ParcelFileDescriptor);
  public void startProfiling();
  public void stopProfiling();
  public void binderDied();
  public android.app.ActivityThread$ReceiverData(android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean, android.os.IBinder);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.String toString();
public final class android.app.ActivityThread {
  public static android.app.ActivityThread currentActivityThread();
  public static java.lang.String currentPackageName();
  public static android.app.Application currentApplication();
  public static android.content.pm.IPackageManager getPackageManager();
  public final android.app.LoadedApk getPackageInfo(java.lang.String, android.content.res.CompatibilityInfo, int);
  public final android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int);
  public final android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo);
  public final android.app.LoadedApk peekPackageInfo(java.lang.String, boolean);
  public android.app.ActivityThread$ApplicationThread getApplicationThread();
  public android.app.Instrumentation getInstrumentation();
  public android.content.res.Configuration getConfiguration();
  public boolean isProfiling();
  public java.lang.String getProfileFilePath();
  public android.os.Looper getLooper();
  public android.app.Application getApplication();
  public java.lang.String getProcessName();
  public android.app.ContextImpl getSystemContext();
  public void installSystemApplicationInfo(android.content.pm.ApplicationInfo);
  public void registerOnActivityPausedListener(android.app.Activity, android.app.OnActivityPausedListener);
  public void unregisterOnActivityPausedListener(android.app.Activity, android.app.OnActivityPausedListener);
  public final android.content.pm.ActivityInfo resolveActivityInfo(android.content.Intent);
  public final android.app.Activity startActivityNow(android.app.Activity, java.lang.String, android.content.Intent, android.content.pm.ActivityInfo, android.os.IBinder, android.os.Bundle, android.app.Activity$NonConfigurationInstances);
  public final android.app.Activity getActivity(android.os.IBinder);
  public final void sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent);
  public final void performNewIntents(android.os.IBinder, java.util.List<android.content.Intent>);
  public static android.content.Intent getIntentBeingBroadcast();
  public final android.app.ActivityThread$ActivityClientRecord performResumeActivity(android.os.IBinder, boolean);
  public final android.app.ActivityThread$ActivityClientRecord performDestroyActivity(android.os.IBinder, boolean);
  public final void requestRelaunchActivity(android.os.IBinder, java.util.List<android.app.ResultInfo>, java.util.List<android.content.Intent>, int, boolean, android.content.res.Configuration, boolean);
  public final void applyConfigurationToResources(android.content.res.Configuration);
  public final android.content.IContentProvider acquireProvider(android.content.Context, java.lang.String);
  public final android.content.IContentProvider acquireExistingProvider(android.content.Context, java.lang.String);
  public final boolean releaseProvider(android.content.IContentProvider);
  public static final android.app.ActivityThread systemMain();
  public final void installSystemProviders(java.util.List<android.content.pm.ProviderInfo>);
  public int getIntCoreSetting(java.lang.String, int);
  public static void main(java.lang.String[]);
public class android.app.AlarmManager {
  public void set(int, long, android.app.PendingIntent);
  public void setRepeating(int, long, long, android.app.PendingIntent);
  public void setInexactRepeating(int, long, long, android.app.PendingIntent);
  public void cancel(android.app.PendingIntent);
  public void setTime(long);
  public void setTimeZone(java.lang.String);
public class android.app.AlertDialog$Builder {
  public android.app.AlertDialog$Builder(android.content.Context);
  public android.app.AlertDialog$Builder(android.content.Context, int);
  public android.content.Context getContext();
  public android.app.AlertDialog$Builder setTitle(int);
  public android.app.AlertDialog$Builder setTitle(java.lang.CharSequence);
  public android.app.AlertDialog$Builder setCustomTitle(android.view.View);
  public android.app.AlertDialog$Builder setMessage(int);
  public android.app.AlertDialog$Builder setMessage(java.lang.CharSequence);
  public android.app.AlertDialog$Builder setIcon(int);
  public android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable);
  public android.app.AlertDialog$Builder setIconAttribute(int);
  public android.app.AlertDialog$Builder setPositiveButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNegativeButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNeutralButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setCancelable(boolean);
  public android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener);
  public android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener);
  public android.app.AlertDialog$Builder setItems(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setItems(java.lang.CharSequence[], android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setCursor(android.database.Cursor, android.content.DialogInterface$OnClickListener, java.lang.String);
  public android.app.AlertDialog$Builder setMultiChoiceItems(int, boolean[], android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[], boolean[], android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor, java.lang.String, java.lang.String, android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(int, int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor, int, java.lang.String, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[], int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter, int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public android.app.AlertDialog$Builder setView(android.view.View);
  public android.app.AlertDialog$Builder setView(android.view.View, int, int, int, int);
  public android.app.AlertDialog$Builder setInverseBackgroundForced(boolean);
  public android.app.AlertDialog$Builder setRecycleOnMeasureEnabled(boolean);
  public android.app.AlertDialog create();
  public android.app.AlertDialog show();
public class android.app.AlertDialog extends android.app.Dialog implements android.content.DialogInterface {
  public android.widget.Button getButton(int);
  public android.widget.ListView getListView();
  public void setTitle(java.lang.CharSequence);
  public void setCustomTitle(android.view.View);
  public void setMessage(java.lang.CharSequence);
  public void setView(android.view.View);
  public void setView(android.view.View, int, int, int, int);
  public void setButton(int, java.lang.CharSequence, android.os.Message);
  public void setButton(int, java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton(java.lang.CharSequence, android.os.Message);
  public void setButton2(java.lang.CharSequence, android.os.Message);
  public void setButton3(java.lang.CharSequence, android.os.Message);
  public void setButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton2(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton3(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setIcon(int);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setIconAttribute(int);
  public void setInverseBackgroundForced(boolean);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
public class android.app.AppGlobals {
  public android.app.AppGlobals();
  public static android.app.Application getInitialApplication();
  public static java.lang.String getInitialPackage();
  public static android.content.pm.IPackageManager getPackageManager();
  public static int getIntCoreSetting(java.lang.String, int);
public interface android.app.Application$ActivityLifecycleCallbacks {
  public abstract void onActivityCreated(android.app.Activity, android.os.Bundle);
  public abstract void onActivityStarted(android.app.Activity);
  public abstract void onActivityResumed(android.app.Activity);
  public abstract void onActivityPaused(android.app.Activity);
  public abstract void onActivityStopped(android.app.Activity);
  public abstract void onActivitySaveInstanceState(android.app.Activity, android.os.Bundle);
  public abstract void onActivityDestroyed(android.app.Activity);
public class android.app.Application extends android.content.ContextWrapper implements android.content.ComponentCallbacks2 {
  public android.app.Application();
  public void onCreate();
  public void onTerminate();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public void registerComponentCallbacks(android.content.ComponentCallbacks);
  public void unregisterComponentCallbacks(android.content.ComponentCallbacks);
  public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks);
  public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks);
  public android.app.ApplicationErrorReport createFromParcel(android.os.Parcel);
  public android.app.ApplicationErrorReport[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ApplicationErrorReport$AnrInfo {
  public android.app.ApplicationErrorReport$AnrInfo();
  public android.app.ApplicationErrorReport$AnrInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void dump(android.util.Printer, java.lang.String);
public class android.app.ApplicationErrorReport$BatteryInfo {
  public android.app.ApplicationErrorReport$BatteryInfo();
  public android.app.ApplicationErrorReport$BatteryInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void dump(android.util.Printer, java.lang.String);
public class android.app.ApplicationErrorReport$CrashInfo {
  public android.app.ApplicationErrorReport$CrashInfo();
  public android.app.ApplicationErrorReport$CrashInfo(java.lang.Throwable);
  public android.app.ApplicationErrorReport$CrashInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void dump(android.util.Printer, java.lang.String);
public class android.app.ApplicationErrorReport$RunningServiceInfo {
  public android.app.ApplicationErrorReport$RunningServiceInfo();
  public android.app.ApplicationErrorReport$RunningServiceInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void dump(android.util.Printer, java.lang.String);
public class android.app.ApplicationErrorReport implements android.os.Parcelable {
  public android.app.ApplicationErrorReport();
  public static android.content.ComponentName getErrorReportReceiver(android.content.Context, java.lang.String, int);
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public static android.app.ApplicationLoaders getDefault();
  public java.lang.ClassLoader getClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[]);
  public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[]);
  public android.content.Intent getLaunchIntentForPackage(java.lang.String);
  public java.util.List<android.content.pm.PermissionGroupInfo> getAllPermissionGroups(int);
  public java.lang.String[] getSystemSharedLibraryNames();
  public android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
  public boolean hasSystemFeature(java.lang.String);
  public int checkPermission(java.lang.String, java.lang.String);
  public boolean addPermission(android.content.pm.PermissionInfo);
  public boolean addPermissionAsync(android.content.pm.PermissionInfo);
  public void removePermission(java.lang.String);
  public int checkSignatures(java.lang.String, java.lang.String);
  public int checkSignatures(int, int);
  public java.lang.String[] getPackagesForUid(int);
  public java.lang.String getNameForUid(int);
  public java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int);
  public java.util.List<android.content.pm.ApplicationInfo> getInstalledApplications(int);
  public android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int);
  public java.util.List<android.content.pm.ResolveInfo> queryIntentActivities(android.content.Intent, int);
  public java.util.List<android.content.pm.ResolveInfo> queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int);
  public java.util.List<android.content.pm.ResolveInfo> queryBroadcastReceivers(android.content.Intent, int);
  public android.content.pm.ResolveInfo resolveService(android.content.Intent, int);
  public java.util.List<android.content.pm.ResolveInfo> queryIntentServices(android.content.Intent, int);
  public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int);
  public java.util.List<android.content.pm.ProviderInfo> queryContentProviders(java.lang.String, int, int);
  public java.util.List<android.content.pm.InstrumentationInfo> queryInstrumentation(java.lang.String, int);
  public android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getDefaultActivityIcon();
  public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo);
  public boolean isSafeMode();
  public java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo);
  public android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo);
  public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo);
  public void installPackage(android.net.Uri, android.content.pm.IPackageInstallObserver, int, java.lang.String);
  public void installPackageWithVerification(android.net.Uri, android.content.pm.IPackageInstallObserver, int, java.lang.String, android.net.Uri, android.content.pm.ManifestDigest);
  public void verifyPendingInstall(int, int);
  public void setInstallerPackageName(java.lang.String, java.lang.String);
  public void movePackage(java.lang.String, android.content.pm.IPackageMoveObserver, int);
  public java.lang.String getInstallerPackageName(java.lang.String);
  public void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver, int);
  public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver);
  public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver);
  public void freeStorageAndNotify(long, android.content.pm.IPackageDataObserver);
  public void freeStorage(long, android.content.IntentSender);
  public void getPackageSizeInfo(java.lang.String, android.content.pm.IPackageStatsObserver);
  public void addPackageToPreferred(java.lang.String);
  public void removePackageFromPreferred(java.lang.String);
  public java.util.List<android.content.pm.PackageInfo> getPreferredPackages(int);
  public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public void clearPackagePreferredActivities(java.lang.String);
  public int getPreferredActivities(java.util.List<android.content.IntentFilter>, java.util.List<android.content.ComponentName>, java.lang.String);
  public void setComponentEnabledSetting(android.content.ComponentName, int, int);
  public int getComponentEnabledSetting(android.content.ComponentName);
  public void setApplicationEnabledSetting(java.lang.String, int, int);
  public int getApplicationEnabledSetting(java.lang.String);
  public android.content.pm.UserInfo createUser(java.lang.String, int);
  public java.util.List<android.content.pm.UserInfo> getUsers();
  public boolean removeUser(int);
  public void updateUserName(int, java.lang.String);
  public void updateUserFlags(int, int);
  public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity();
public abstract class android.app.ApplicationThreadNative extends android.os.Binder implements android.app.IApplicationThread {
  public static android.app.IApplicationThread asInterface(android.os.IBinder);
  public android.app.ApplicationThreadNative();
  public android.os.IBinder asBinder();
  public android.app.ApplicationThreadProxy(android.os.IBinder);
  public final android.os.IBinder asBinder();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public android.app.BackStackRecord(android.app.FragmentManagerImpl);
  public int getId();
  public int getBreadCrumbTitleRes();
  public int getBreadCrumbShortTitleRes();
  public java.lang.CharSequence getBreadCrumbTitle();
  public java.lang.CharSequence getBreadCrumbShortTitle();
  public android.app.FragmentTransaction add(android.app.Fragment, java.lang.String);
  public android.app.FragmentTransaction add(int, android.app.Fragment);
  public android.app.FragmentTransaction add(int, android.app.Fragment, java.lang.String);
  public android.app.FragmentTransaction replace(int, android.app.Fragment);
  public android.app.FragmentTransaction replace(int, android.app.Fragment, java.lang.String);
  public android.app.FragmentTransaction remove(android.app.Fragment);
  public android.app.FragmentTransaction hide(android.app.Fragment);
  public android.app.FragmentTransaction show(android.app.Fragment);
  public android.app.FragmentTransaction detach(android.app.Fragment);
  public android.app.FragmentTransaction attach(android.app.Fragment);
  public android.app.FragmentTransaction setCustomAnimations(int, int);
  public android.app.FragmentTransaction setCustomAnimations(int, int, int, int);
  public android.app.FragmentTransaction setTransition(int);
  public android.app.FragmentTransaction setTransitionStyle(int);
  public android.app.FragmentTransaction addToBackStack(java.lang.String);
  public boolean isAddToBackStackAllowed();
  public android.app.FragmentTransaction disallowAddToBackStack();
  public android.app.FragmentTransaction setBreadCrumbTitle(int);
  public android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence);
  public android.app.FragmentTransaction setBreadCrumbShortTitle(int);
  public android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence);
  public int commit();
  public int commitAllowingStateLoss();
  public void run();
  public void popFromBackStack(boolean);
  public java.lang.String getName();
  public int getTransition();
  public int getTransitionStyle();
  public boolean isEmpty();
  public android.app.BackStackState createFromParcel(android.os.Parcel);
  public android.app.BackStackState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.app.BackStackState(android.app.FragmentManagerImpl, android.app.BackStackRecord);
  public android.app.BackStackState(android.os.Parcel);
  public android.app.BackStackRecord instantiate(android.app.FragmentManagerImpl);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.ContextImpl$ApplicationContentResolver(android.content.Context, android.app.ActivityThread);
  public boolean releaseProvider(android.content.IContentProvider);
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.pm.PackageManager getPackageManager();
  public android.content.ContentResolver getContentResolver();
  public android.os.Looper getMainLooper();
  public android.content.Context getApplicationContext();
  public void setTheme(int);
  public int getThemeResId();
  public android.content.res.Resources$Theme getTheme();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.String getPackageName();
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public java.lang.String getPackageResourcePath();
  public java.lang.String getPackageCodePath();
  public java.io.File getSharedPrefsFile(java.lang.String);
  public android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public boolean deleteFile(java.lang.String);
  public java.io.File getFilesDir();
  public java.io.File getExternalFilesDir(java.lang.String);
  public java.io.File getObbDir();
  public java.io.File getCacheDir();
  public java.io.File getExternalCacheDir();
  public java.io.File getFileStreamPath(java.lang.String);
  public java.lang.String[] fileList();
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public boolean deleteDatabase(java.lang.String);
  public java.io.File getDatabasePath(java.lang.String);
  public java.lang.String[] databaseList();
  public android.graphics.drawable.Drawable getWallpaper();
  public android.graphics.drawable.Drawable peekWallpaper();
  public int getWallpaperDesiredMinimumWidth();
  public int getWallpaperDesiredMinimumHeight();
  public void startActivity(android.content.Intent);
  public void startActivities(android.content.Intent[]);
  public void sendBroadcast(android.content.Intent);
  public void sendBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyBroadcast(android.content.Intent);
  public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void removeStickyBroadcast(android.content.Intent);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ComponentName startService(android.content.Intent);
  public boolean stopService(android.content.Intent);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public void unbindService(android.content.ServiceConnection);
  public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public java.lang.Object getSystemService(java.lang.String);
  public int checkPermission(java.lang.String, int, int);
  public int checkCallingPermission(java.lang.String);
  public int checkCallingOrSelfPermission(java.lang.String);
  public void enforcePermission(java.lang.String, int, int, java.lang.String);
  public void enforceCallingPermission(java.lang.String, java.lang.String);
  public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public void grantUriPermission(java.lang.String, android.net.Uri, int);
  public void revokeUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkCallingUriPermission(android.net.Uri, int);
  public int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public boolean isRestricted();
  public java.io.File getDir(java.lang.String, int);
  public android.app.ContextImpl(android.app.ContextImpl);
public interface android.app.DatePickerDialog$OnDateSetListener {
  public abstract void onDateSet(android.widget.DatePicker, int, int, int);
public class android.app.DatePickerDialog extends android.app.AlertDialog implements android.content.DialogInterface$OnClickListener,android.widget.DatePicker$OnDateChangedListener {
  public android.app.DatePickerDialog(android.content.Context, android.app.DatePickerDialog$OnDateSetListener, int, int, int);
  public android.app.DatePickerDialog(android.content.Context, int, android.app.DatePickerDialog$OnDateSetListener, int, int, int);
  public void onClick(android.content.DialogInterface, int);
  public void onDateChanged(android.widget.DatePicker, int, int, int);
  public android.widget.DatePicker getDatePicker();
  public void updateDate(int, int, int);
  public android.os.Bundle onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Bundle);
  public void run();
  public android.app.Dialog$ListenersHandler(android.app.Dialog);
  public void handleMessage(android.os.Message);
public class android.app.Dialog implements android.content.DialogInterface,android.view.Window$Callback,android.view.KeyEvent$Callback,android.view.View$OnCreateContextMenuListener {
  public android.app.Dialog(android.content.Context);
  public android.app.Dialog(android.content.Context, int);
  public final android.content.Context getContext();
  public android.app.ActionBar getActionBar();
  public final void setOwnerActivity(android.app.Activity);
  public final android.app.Activity getOwnerActivity();
  public boolean isShowing();
  public void show();
  public void hide();
  public void dismiss();
  public android.os.Bundle onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Bundle);
  public android.view.Window getWindow();
  public android.view.View getCurrentFocus();
  public android.view.View findViewById(int);
  public void setContentView(int);
  public void setContentView(android.view.View);
  public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setTitle(java.lang.CharSequence);
  public void setTitle(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public void onBackPressed();
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public void onContentChanged();
  public void onWindowFocusChanged(boolean);
  public void onAttachedToWindow();
  public void onDetachedFromWindow();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.view.View onCreatePanelView(int);
  public boolean onCreatePanelMenu(int, android.view.Menu);
  public boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public boolean onMenuOpened(int, android.view.Menu);
  public boolean onMenuItemSelected(int, android.view.MenuItem);
  public void onPanelClosed(int, android.view.Menu);
  public boolean onCreateOptionsMenu(android.view.Menu);
  public boolean onPrepareOptionsMenu(android.view.Menu);
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public void onOptionsMenuClosed(android.view.Menu);
  public void openOptionsMenu();
  public void closeOptionsMenu();
  public void invalidateOptionsMenu();
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void registerForContextMenu(android.view.View);
  public void unregisterForContextMenu(android.view.View);
  public void openContextMenu(android.view.View);
  public boolean onContextItemSelected(android.view.MenuItem);
  public void onContextMenuClosed(android.view.Menu);
  public boolean onSearchRequested();
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public void onActionModeStarted(android.view.ActionMode);
  public void onActionModeFinished(android.view.ActionMode);
  public void takeKeyEvents(boolean);
  public final boolean requestWindowFeature(int);
  public final void setFeatureDrawableResource(int, int);
  public final void setFeatureDrawableUri(int, android.net.Uri);
  public final void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public final void setFeatureDrawableAlpha(int, int);
  public android.view.LayoutInflater getLayoutInflater();
  public void setCancelable(boolean);
  public void setCanceledOnTouchOutside(boolean);
  public void cancel();
  public void setOnCancelListener(android.content.DialogInterface$OnCancelListener);
  public void setCancelMessage(android.os.Message);
  public void setOnDismissListener(android.content.DialogInterface$OnDismissListener);
  public void setOnShowListener(android.content.DialogInterface$OnShowListener);
  public void setDismissMessage(android.os.Message);
  public boolean takeCancelAndDismissListeners(java.lang.String, android.content.DialogInterface$OnCancelListener, android.content.DialogInterface$OnDismissListener);
  public final void setVolumeControlStream(int);
  public final int getVolumeControlStream();
  public void setOnKeyListener(android.content.DialogInterface$OnKeyListener);
public class android.app.DialogFragment extends android.app.Fragment implements android.content.DialogInterface$OnCancelListener,android.content.DialogInterface$OnDismissListener {
  public android.app.DialogFragment();
  public void setStyle(int, int);
  public void show(android.app.FragmentManager, java.lang.String);
  public int show(android.app.FragmentTransaction, java.lang.String);
  public void dismiss();
  public void dismissAllowingStateLoss();
  public android.app.Dialog getDialog();
  public int getTheme();
  public void setCancelable(boolean);
  public boolean isCancelable();
  public void setShowsDialog(boolean);
  public boolean getShowsDialog();
  public void onAttach(android.app.Activity);
  public void onDetach();
  public void onCreate(android.os.Bundle);
  public android.view.LayoutInflater getLayoutInflater(android.os.Bundle);
  public android.app.Dialog onCreateDialog(android.os.Bundle);
  public void onCancel(android.content.DialogInterface);
  public void onDismiss(android.content.DialogInterface);
  public void onActivityCreated(android.os.Bundle);
  public void onStart();
  public void onSaveInstanceState(android.os.Bundle);
  public void onStop();
  public void onDestroyView();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public android.app.DownloadManager$CursorTranslator(android.database.Cursor, android.net.Uri);
  public int getInt(int);
  public long getLong(int);
  public java.lang.String getString(int);
public class android.app.DownloadManager$Query {
  public android.app.DownloadManager$Query();
  public android.app.DownloadManager$Query setFilterById(long...);
  public android.app.DownloadManager$Query setFilterByStatus(int);
  public android.app.DownloadManager$Query setOnlyIncludeVisibleInDownloadsUi(boolean);
  public android.app.DownloadManager$Query orderBy(java.lang.String, int);
public class android.app.DownloadManager$Request {
  public android.app.DownloadManager$Request(android.net.Uri);
  public android.app.DownloadManager$Request setDestinationUri(android.net.Uri);
  public android.app.DownloadManager$Request setDestinationToSystemCache();
  public android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context, java.lang.String, java.lang.String);
  public android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String, java.lang.String);
  public void allowScanningByMediaScanner();
  public android.app.DownloadManager$Request addRequestHeader(java.lang.String, java.lang.String);
  public android.app.DownloadManager$Request setTitle(java.lang.CharSequence);
  public android.app.DownloadManager$Request setDescription(java.lang.CharSequence);
  public android.app.DownloadManager$Request setMimeType(java.lang.String);
  public android.app.DownloadManager$Request setShowRunningNotification(boolean);
  public android.app.DownloadManager$Request setNotificationVisibility(int);
  public android.app.DownloadManager$Request setAllowedNetworkTypes(int);
  public android.app.DownloadManager$Request setAllowedOverRoaming(boolean);
  public android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean);
public class android.app.DownloadManager {
  public android.app.DownloadManager(android.content.ContentResolver, java.lang.String);
  public void setAccessAllDownloads(boolean);
  public long enqueue(android.app.DownloadManager$Request);
  public int markRowDeleted(long...);
  public int remove(long...);
  public android.database.Cursor query(android.app.DownloadManager$Query);
  public android.net.Uri getUriForDownloadedFile(long);
  public java.lang.String getMimeTypeForDownloadedFile(long);
  public void restartDownload(long...);
  public static java.lang.Long getMaxBytesOverMobile(android.content.Context);
  public static java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context);
  public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean);
public class android.app.Fragment$InstantiationException extends android.util.AndroidRuntimeException {
  public android.app.Fragment$InstantiationException(java.lang.String, java.lang.Exception);
  public android.app.Fragment$SavedState createFromParcel(android.os.Parcel);
  public android.app.Fragment$SavedState createFromParcel(android.os.Parcel, java.lang.ClassLoader);
  public android.app.Fragment$SavedState[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel, java.lang.ClassLoader);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.Fragment$SavedState implements android.os.Parcelable {
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.app.Fragment implements android.content.ComponentCallbacks2,android.view.View$OnCreateContextMenuListener {
  public android.app.Fragment();
  public static android.app.Fragment instantiate(android.content.Context, java.lang.String);
  public static android.app.Fragment instantiate(android.content.Context, java.lang.String, android.os.Bundle);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String toString();
  public final int getId();
  public final java.lang.String getTag();
  public void setArguments(android.os.Bundle);
  public final android.os.Bundle getArguments();
  public void setInitialSavedState(android.app.Fragment$SavedState);
  public void setTargetFragment(android.app.Fragment, int);
  public final android.app.Fragment getTargetFragment();
  public final int getTargetRequestCode();
  public final android.app.Activity getActivity();
  public final android.content.res.Resources getResources();
  public final java.lang.CharSequence getText(int);
  public final java.lang.String getString(int);
  public final java.lang.String getString(int, java.lang.Object...);
  public final android.app.FragmentManager getFragmentManager();
  public final boolean isAdded();
  public final boolean isDetached();
  public final boolean isRemoving();
  public final boolean isInLayout();
  public final boolean isResumed();
  public final boolean isVisible();
  public final boolean isHidden();
  public void onHiddenChanged(boolean);
  public void setRetainInstance(boolean);
  public final boolean getRetainInstance();
  public void setHasOptionsMenu(boolean);
  public void setMenuVisibility(boolean);
  public void setUserVisibleHint(boolean);
  public boolean getUserVisibleHint();
  public android.app.LoaderManager getLoaderManager();
  public void startActivity(android.content.Intent);
  public void startActivityForResult(android.content.Intent, int);
  public void onActivityResult(int, int, android.content.Intent);
  public android.view.LayoutInflater getLayoutInflater(android.os.Bundle);
  public void onInflate(android.util.AttributeSet, android.os.Bundle);
  public void onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle);
  public void onAttach(android.app.Activity);
  public android.animation.Animator onCreateAnimator(int, boolean, int);
  public void onCreate(android.os.Bundle);
  public void onViewCreated(android.view.View, android.os.Bundle);
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public android.view.View getView();
  public void onActivityCreated(android.os.Bundle);
  public void onStart();
  public void onResume();
  public void onSaveInstanceState(android.os.Bundle);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onPause();
  public void onStop();
  public void onLowMemory();
  public void onTrimMemory(int);
  public void onDestroyView();
  public void onDestroy();
  public void onDetach();
  public void onCreateOptionsMenu(android.view.Menu, android.view.MenuInflater);
  public void onPrepareOptionsMenu(android.view.Menu);
  public void onDestroyOptionsMenu();
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public void onOptionsMenuClosed(android.view.Menu);
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void registerForContextMenu(android.view.View);
  public void unregisterForContextMenu(android.view.View);
  public boolean onContextItemSelected(android.view.MenuItem);
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
public interface android.app.FragmentManager$BackStackEntry {
  public abstract int getId();
  public abstract java.lang.String getName();
  public abstract int getBreadCrumbTitleRes();
  public abstract int getBreadCrumbShortTitleRes();
  public abstract java.lang.CharSequence getBreadCrumbTitle();
  public abstract java.lang.CharSequence getBreadCrumbShortTitle();
public interface android.app.FragmentManager$OnBackStackChangedListener {
  public abstract void onBackStackChanged();
public abstract class android.app.FragmentManager {
  public android.app.FragmentManager();
  public abstract android.app.FragmentTransaction beginTransaction();
  public android.app.FragmentTransaction openTransaction();
  public abstract boolean executePendingTransactions();
  public abstract android.app.Fragment findFragmentById(int);
  public abstract android.app.Fragment findFragmentByTag(java.lang.String);
  public abstract void popBackStack();
  public abstract boolean popBackStackImmediate();
  public abstract void popBackStack(java.lang.String, int);
  public abstract boolean popBackStackImmediate(java.lang.String, int);
  public abstract void popBackStack(int, int);
  public abstract boolean popBackStackImmediate(int, int);
  public abstract int getBackStackEntryCount();
  public abstract android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int);
  public abstract void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public abstract void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public abstract void putFragment(android.os.Bundle, java.lang.String, android.app.Fragment);
  public abstract android.app.Fragment getFragment(android.os.Bundle, java.lang.String);
  public abstract android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment);
  public abstract void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static void enableDebugLogging(boolean);
  public void invalidateOptionsMenu();
  public void run();
  public void run();
  public void run();
  public void run();
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public android.app.FragmentTransaction beginTransaction();
  public boolean executePendingTransactions();
  public void popBackStack();
  public boolean popBackStackImmediate();
  public void popBackStack(java.lang.String, int);
  public boolean popBackStackImmediate(java.lang.String, int);
  public void popBackStack(int, int);
  public boolean popBackStackImmediate(int, int);
  public int getBackStackEntryCount();
  public android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int);
  public void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public void putFragment(android.os.Bundle, java.lang.String, android.app.Fragment);
  public android.app.Fragment getFragment(android.os.Bundle, java.lang.String);
  public android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment);
  public java.lang.String toString();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void performPendingDeferredStart(android.app.Fragment);
  public void addFragment(android.app.Fragment, boolean);
  public void removeFragment(android.app.Fragment, int, int);
  public void hideFragment(android.app.Fragment, int, int);
  public void showFragment(android.app.Fragment, int, int);
  public void detachFragment(android.app.Fragment, int, int);
  public void attachFragment(android.app.Fragment, int, int);
  public android.app.Fragment findFragmentById(int);
  public android.app.Fragment findFragmentByTag(java.lang.String);
  public android.app.Fragment findFragmentByWho(java.lang.String);
  public void enqueueAction(java.lang.Runnable, boolean);
  public int allocBackStackIndex(android.app.BackStackRecord);
  public void setBackStackIndex(int, android.app.BackStackRecord);
  public void freeBackStackIndex(int);
  public boolean execPendingActions();
  public void attachActivity(android.app.Activity);
  public void noteStateNotSaved();
  public void dispatchCreate();
  public void dispatchActivityCreated();
  public void dispatchStart();
  public void dispatchResume();
  public void dispatchPause();
  public void dispatchStop();
  public void dispatchDestroy();
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void dispatchLowMemory();
  public void dispatchTrimMemory(int);
  public boolean dispatchCreateOptionsMenu(android.view.Menu, android.view.MenuInflater);
  public boolean dispatchPrepareOptionsMenu(android.view.Menu);
  public boolean dispatchOptionsItemSelected(android.view.MenuItem);
  public boolean dispatchContextItemSelected(android.view.MenuItem);
  public void dispatchOptionsMenuClosed(android.view.Menu);
  public void invalidateOptionsMenu();
  public static int reverseTransit(int);
  public static int transitToStyleIndex(int, boolean);
  public android.app.FragmentManagerState createFromParcel(android.os.Parcel);
  public android.app.FragmentManagerState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.app.FragmentManagerState();
  public android.app.FragmentManagerState(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.FragmentState createFromParcel(android.os.Parcel);
  public android.app.FragmentState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.app.FragmentState(android.app.Fragment);
  public android.app.FragmentState(android.os.Parcel);
  public android.app.Fragment instantiate(android.app.Activity);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public abstract class android.app.FragmentTransaction {
  public android.app.FragmentTransaction();
  public abstract android.app.FragmentTransaction add(android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction add(int, android.app.Fragment);
  public abstract android.app.FragmentTransaction add(int, android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction replace(int, android.app.Fragment);
  public abstract android.app.FragmentTransaction replace(int, android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction remove(android.app.Fragment);
  public abstract android.app.FragmentTransaction hide(android.app.Fragment);
  public abstract android.app.FragmentTransaction show(android.app.Fragment);
  public abstract android.app.FragmentTransaction detach(android.app.Fragment);
  public abstract android.app.FragmentTransaction attach(android.app.Fragment);
  public abstract boolean isEmpty();
  public abstract android.app.FragmentTransaction setCustomAnimations(int, int);
  public abstract android.app.FragmentTransaction setCustomAnimations(int, int, int, int);
  public abstract android.app.FragmentTransaction setTransition(int);
  public abstract android.app.FragmentTransaction setTransitionStyle(int);
  public abstract android.app.FragmentTransaction addToBackStack(java.lang.String);
  public abstract boolean isAddToBackStackAllowed();
  public abstract android.app.FragmentTransaction disallowAddToBackStack();
  public abstract android.app.FragmentTransaction setBreadCrumbTitle(int);
  public abstract android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence);
  public abstract android.app.FragmentTransaction setBreadCrumbShortTitle(int);
  public abstract android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence);
  public abstract int commit();
  public abstract int commitAllowingStateLoss();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IActivityController$Stub extends android.os.Binder implements android.app.IActivityController {
  public android.app.IActivityController$Stub();
  public static android.app.IActivityController asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IActivityController extends android.os.IInterface {
  public android.app.IActivityManager$ContentProviderHolder createFromParcel(android.os.Parcel);
  public android.app.IActivityManager$ContentProviderHolder[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.IActivityManager$ContentProviderHolder implements android.os.Parcelable {
  public android.app.IActivityManager$ContentProviderHolder(android.content.pm.ProviderInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.IActivityManager$WaitResult createFromParcel(android.os.Parcel);
  public android.app.IActivityManager$WaitResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.IActivityManager$WaitResult implements android.os.Parcelable {
  public android.app.IActivityManager$WaitResult();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.app.IActivityManager extends android.os.IInterface {
  public abstract boolean testIsSystemReady();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IActivityWatcher$Stub extends android.os.Binder implements android.app.IActivityWatcher {
  public android.app.IActivityWatcher$Stub();
  public static android.app.IActivityWatcher asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IActivityWatcher extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IAlarmManager$Stub extends android.os.Binder implements android.app.IAlarmManager {
  public android.app.IAlarmManager$Stub();
  public static android.app.IAlarmManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IAlarmManager extends android.os.IInterface {
public interface android.app.IApplicationThread extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IBackupAgent$Stub extends android.os.Binder implements android.app.IBackupAgent {
  public android.app.IBackupAgent$Stub();
  public static android.app.IBackupAgent asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IBackupAgent extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IInstrumentationWatcher$Stub extends android.os.Binder implements android.app.IInstrumentationWatcher {
  public android.app.IInstrumentationWatcher$Stub();
  public static android.app.IInstrumentationWatcher asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IInstrumentationWatcher extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.INotificationManager$Stub extends android.os.Binder implements android.app.INotificationManager {
  public android.app.INotificationManager$Stub();
  public static android.app.INotificationManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.INotificationManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IProcessObserver$Stub extends android.os.Binder implements android.app.IProcessObserver {
  public android.app.IProcessObserver$Stub();
  public static android.app.IProcessObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IProcessObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.ISearchManager$Stub extends android.os.Binder implements android.app.ISearchManager {
  public android.app.ISearchManager$Stub();
  public static android.app.ISearchManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.ISearchManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IServiceConnection$Stub extends android.os.Binder implements android.app.IServiceConnection {
  public android.app.IServiceConnection$Stub();
  public static android.app.IServiceConnection asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IServiceConnection extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IThumbnailReceiver$Stub extends android.os.Binder implements android.app.IThumbnailReceiver {
  public android.app.IThumbnailReceiver$Stub();
  public static android.app.IThumbnailReceiver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IThumbnailReceiver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IThumbnailRetriever$Stub extends android.os.Binder implements android.app.IThumbnailRetriever {
  public android.app.IThumbnailRetriever$Stub();
  public static android.app.IThumbnailRetriever asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IThumbnailRetriever extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.ITransientNotification$Stub extends android.os.Binder implements android.app.ITransientNotification {
  public android.app.ITransientNotification$Stub();
  public static android.app.ITransientNotification asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.ITransientNotification extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IUiModeManager$Stub extends android.os.Binder implements android.app.IUiModeManager {
  public android.app.IUiModeManager$Stub();
  public static android.app.IUiModeManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IUiModeManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IWallpaperManager$Stub extends android.os.Binder implements android.app.IWallpaperManager {
  public android.app.IWallpaperManager$Stub();
  public static android.app.IWallpaperManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IWallpaperManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.IWallpaperManagerCallback$Stub extends android.os.Binder implements android.app.IWallpaperManagerCallback {
  public android.app.IWallpaperManagerCallback$Stub();
  public static android.app.IWallpaperManagerCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.IWallpaperManagerCallback extends android.os.IInterface {
  public android.app.Instrumentation$1ContextMenuRunnable(android.app.Instrumentation, android.app.Activity, int, int);
  public void run();
  public android.app.Instrumentation$1MenuRunnable(android.app.Instrumentation, android.app.Activity, int, int);
  public void run();
  public android.app.Instrumentation$ActivityGoing(android.app.Instrumentation, android.app.Instrumentation$ActivityWaiter);
  public final boolean queueIdle();
public class android.app.Instrumentation$ActivityMonitor {
  public android.app.Instrumentation$ActivityMonitor(android.content.IntentFilter, android.app.Instrumentation$ActivityResult, boolean);
  public android.app.Instrumentation$ActivityMonitor(java.lang.String, android.app.Instrumentation$ActivityResult, boolean);
  public final android.content.IntentFilter getFilter();
  public final android.app.Instrumentation$ActivityResult getResult();
  public final boolean isBlocking();
  public final int getHits();
  public final android.app.Activity getLastActivity();
  public final android.app.Activity waitForActivity();
  public final android.app.Activity waitForActivityWithTimeout(long);
public final class android.app.Instrumentation$ActivityResult {
  public android.app.Instrumentation$ActivityResult(int, android.content.Intent);
  public int getResultCode();
  public android.content.Intent getResultData();
  public android.app.Instrumentation$ActivityWaiter(android.content.Intent);
  public void run();
  public android.app.Instrumentation$Idler(java.lang.Runnable);
  public final boolean queueIdle();
  public void waitForIdle();
  public android.app.Instrumentation$InstrumentationThread(android.app.Instrumentation, java.lang.String);
  public void run();
  public android.app.Instrumentation$SyncRunnable(java.lang.Runnable);
  public void run();
  public void waitForComplete();
public class android.app.Instrumentation {
  public android.app.Instrumentation();
  public void onCreate(android.os.Bundle);
  public void start();
  public void onStart();
  public boolean onException(java.lang.Object, java.lang.Throwable);
  public void sendStatus(int, android.os.Bundle);
  public void finish(int, android.os.Bundle);
  public void setAutomaticPerformanceSnapshots();
  public void startPerformanceSnapshot();
  public void endPerformanceSnapshot();
  public void onDestroy();
  public android.content.Context getContext();
  public android.content.ComponentName getComponentName();
  public android.content.Context getTargetContext();
  public boolean isProfiling();
  public void startProfiling();
  public void stopProfiling();
  public void setInTouchMode(boolean);
  public void waitForIdle(java.lang.Runnable);
  public void waitForIdleSync();
  public void runOnMainSync(java.lang.Runnable);
  public android.app.Activity startActivitySync(android.content.Intent);
  public void addMonitor(android.app.Instrumentation$ActivityMonitor);
  public android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter, android.app.Instrumentation$ActivityResult, boolean);
  public android.app.Instrumentation$ActivityMonitor addMonitor(java.lang.String, android.app.Instrumentation$ActivityResult, boolean);
  public boolean checkMonitorHit(android.app.Instrumentation$ActivityMonitor, int);
  public android.app.Activity waitForMonitor(android.app.Instrumentation$ActivityMonitor);
  public android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation$ActivityMonitor, long);
  public void removeMonitor(android.app.Instrumentation$ActivityMonitor);
  public boolean invokeMenuActionSync(android.app.Activity, int, int);
  public boolean invokeContextMenuAction(android.app.Activity, int, int);
  public void sendStringSync(java.lang.String);
  public void sendKeySync(android.view.KeyEvent);
  public void sendKeyDownUpSync(int);
  public void sendCharacterSync(int);
  public void sendPointerSync(android.view.MotionEvent);
  public void sendTrackballEventSync(android.view.MotionEvent);
  public void callApplicationOnCreate(android.app.Application);
  public void callActivityOnCreate(android.app.Activity, android.os.Bundle);
  public void callActivityOnDestroy(android.app.Activity);
  public void callActivityOnRestoreInstanceState(android.app.Activity, android.os.Bundle);
  public void callActivityOnPostCreate(android.app.Activity, android.os.Bundle);
  public void callActivityOnNewIntent(android.app.Activity, android.content.Intent);
  public void callActivityOnStart(android.app.Activity);
  public void callActivityOnRestart(android.app.Activity);
  public void callActivityOnResume(android.app.Activity);
  public void callActivityOnStop(android.app.Activity);
  public void callActivityOnSaveInstanceState(android.app.Activity, android.os.Bundle);
  public void callActivityOnPause(android.app.Activity);
  public void callActivityOnUserLeaving(android.app.Activity);
  public void startAllocCounting();
  public void stopAllocCounting();
  public android.os.Bundle getAllocCounts();
  public android.os.Bundle getBinderCounts();
  public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int);
  public void execStartActivities(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent[]);
  public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Fragment, android.content.Intent, int);
  public android.app.IntentReceiverLeaked(java.lang.String);
  public android.app.IntentService$ServiceHandler(android.app.IntentService, android.os.Looper);
  public void handleMessage(android.os.Message);
public abstract class android.app.IntentService extends android.app.Service {
  public android.app.IntentService(java.lang.String);
  public void setIntentRedelivery(boolean);
  public void onCreate();
  public void onStart(android.content.Intent, int);
  public int onStartCommand(android.content.Intent, int, int);
  public void onDestroy();
  public android.os.IBinder onBind(android.content.Intent);
public class android.app.KeyguardManager$KeyguardLock {
  public void disableKeyguard();
  public void reenableKeyguard();
public interface android.app.KeyguardManager$OnKeyguardExitResult {
  public abstract void onKeyguardExitResult(boolean);
public class android.app.KeyguardManager {
  public android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String);
  public boolean isKeyguardLocked();
  public boolean isKeyguardSecure();
  public boolean inKeyguardRestrictedInputMode();
  public void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult);
  public void run();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
public class android.app.ListActivity extends android.app.Activity {
  public android.app.ListActivity();
  public void onContentChanged();
  public void setListAdapter(android.widget.ListAdapter);
  public void setSelection(int);
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public android.widget.ListView getListView();
  public android.widget.ListAdapter getListAdapter();
  public void run();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
public class android.app.ListFragment extends android.app.Fragment {
  public android.app.ListFragment();
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public void onViewCreated(android.view.View, android.os.Bundle);
  public void onDestroyView();
  public void onListItemClick(android.widget.ListView, android.view.View, int, long);
  public void setListAdapter(android.widget.ListAdapter);
  public void setSelection(int);
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public android.widget.ListView getListView();
  public void setEmptyText(java.lang.CharSequence);
  public void setListShown(boolean);
  public void setListShownNoAnimation(boolean);
  public android.widget.ListAdapter getListAdapter();
  public android.app.LoadedApk$ReceiverDispatcher$Args(android.app.LoadedApk$ReceiverDispatcher, android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean);
  public void run();
  public void performReceive(android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean);
  public void performReceive(android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean);
  public void binderDied();
  public void run();
  public void connected(android.content.ComponentName, android.os.IBinder);
  public void death(android.content.ComponentName, android.os.IBinder);
  public void doConnected(android.content.ComponentName, android.os.IBinder);
  public void doDeath(android.content.ComponentName, android.os.IBinder);
  public java.net.URL getResource(java.lang.String);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public void setClassAssertionStatus(java.lang.String, boolean);
  public void setPackageAssertionStatus(java.lang.String, boolean);
  public void setDefaultAssertionStatus(boolean);
  public void clearAssertionStatus();
public final class android.app.LoadedApk {
  public android.app.LoadedApk(android.app.ActivityThread, android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, android.app.ActivityThread, java.lang.ClassLoader, boolean, boolean);
  public android.app.LoadedApk(android.app.ActivityThread, java.lang.String, android.content.Context, android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo);
  public java.lang.String getPackageName();
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public boolean isSecurityViolation();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.String getAppDir();
  public java.lang.String getResDir();
  public java.lang.String getDataDir();
  public java.io.File getDataDirFile();
  public android.content.res.AssetManager getAssets(android.app.ActivityThread);
  public android.content.res.Resources getResources(android.app.ActivityThread);
  public android.app.Application makeApplication(boolean, android.app.Instrumentation);
  public void removeContextRegistrations(android.content.Context, java.lang.String, java.lang.String);
  public android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver, android.content.Context, android.os.Handler, android.app.Instrumentation, boolean);
  public android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context, android.content.BroadcastReceiver);
  public final android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection, android.content.Context, android.os.Handler, int);
  public final android.app.IServiceConnection forgetServiceDispatcher(android.content.Context, android.content.ServiceConnection);
public interface android.app.LoaderManager$LoaderCallbacks<D> {
  public abstract android.content.Loader<D> onCreateLoader(int, android.os.Bundle);
  public abstract void onLoadFinished(android.content.Loader<D>, D);
  public abstract void onLoaderReset(android.content.Loader<D>);
public abstract class android.app.LoaderManager {
  public android.app.LoaderManager();
  public abstract <D extends java/lang/Object> android.content.Loader<D> initLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks<D>);
  public abstract <D extends java/lang/Object> android.content.Loader<D> restartLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks<D>);
  public abstract void destroyLoader(int);
  public abstract <D extends java/lang/Object> android.content.Loader<D> getLoader(int);
  public abstract void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static void enableDebugLogging(boolean);
  public android.app.LoaderManagerImpl$LoaderInfo(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks<java.lang.Object>);
  public void onLoadComplete(android.content.Loader<java.lang.Object>, java.lang.Object);
  public java.lang.String toString();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public <D extends java/lang/Object> android.content.Loader<D> initLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks<D>);
  public <D extends java/lang/Object> android.content.Loader<D> restartLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks<D>);
  public void destroyLoader(int);
  public <D extends java/lang/Object> android.content.Loader<D> getLoader(int);
  public java.lang.String toString();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public boolean hasRunningLoaders();
public class android.app.LocalActivityManager {
  public android.app.LocalActivityManager(android.app.Activity, boolean);
  public android.view.Window startActivity(java.lang.String, android.content.Intent);
  public android.view.Window destroyActivity(java.lang.String, boolean);
  public android.app.Activity getCurrentActivity();
  public java.lang.String getCurrentId();
  public android.app.Activity getActivity(java.lang.String);
  public void dispatchCreate(android.os.Bundle);
  public android.os.Bundle saveInstanceState();
  public void dispatchResume();
  public void dispatchPause(boolean);
  public void dispatchStop();
  public java.util.HashMap<java.lang.String, java.lang.Object> dispatchRetainNonConfigurationInstance();
  public void removeAllActivities();
  public void dispatchDestroy(boolean);
  public android.app.Notification createFromParcel(android.os.Parcel);
  public android.app.Notification[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.Notification$Builder {
  public android.app.Notification$Builder(android.content.Context);
  public android.app.Notification$Builder setWhen(long);
  public android.app.Notification$Builder setSmallIcon(int);
  public android.app.Notification$Builder setSmallIcon(int, int);
  public android.app.Notification$Builder setContentTitle(java.lang.CharSequence);
  public android.app.Notification$Builder setContentText(java.lang.CharSequence);
  public android.app.Notification$Builder setNumber(int);
  public android.app.Notification$Builder setContentInfo(java.lang.CharSequence);
  public android.app.Notification$Builder setProgress(int, int, boolean);
  public android.app.Notification$Builder setContent(android.widget.RemoteViews);
  public android.app.Notification$Builder setContentIntent(android.app.PendingIntent);
  public android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent);
  public android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent, boolean);
  public android.app.Notification$Builder setTicker(java.lang.CharSequence);
  public android.app.Notification$Builder setTicker(java.lang.CharSequence, android.widget.RemoteViews);
  public android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap);
  public android.app.Notification$Builder setSound(android.net.Uri);
  public android.app.Notification$Builder setSound(android.net.Uri, int);
  public android.app.Notification$Builder setVibrate(long[]);
  public android.app.Notification$Builder setLights(int, int, int);
  public android.app.Notification$Builder setOngoing(boolean);
  public android.app.Notification$Builder setOnlyAlertOnce(boolean);
  public android.app.Notification$Builder setAutoCancel(boolean);
  public android.app.Notification$Builder setDefaults(int);
  public android.app.Notification getNotification();
public class android.app.Notification implements android.os.Parcelable {
  public android.app.Notification();
  public android.app.Notification(android.content.Context, int, java.lang.CharSequence, long, java.lang.CharSequence, java.lang.CharSequence, android.content.Intent);
  public android.app.Notification(int, java.lang.CharSequence, long);
  public android.app.Notification(android.os.Parcel);
  public android.app.Notification clone();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void setLatestEventInfo(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent);
  public java.lang.String toString();
public class android.app.NotificationManager {
  public static android.app.INotificationManager getService();
  public void notify(int, android.app.Notification);
  public void notify(java.lang.String, int, android.app.Notification);
  public void cancel(int);
  public void cancel(java.lang.String, int);
  public void cancelAll();
public interface android.app.OnActivityPausedListener {
  public abstract void onPaused(android.app.Activity);
  public android.app.PendingIntent createFromParcel(android.os.Parcel);
  public android.app.PendingIntent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.PendingIntent$CanceledException extends android.util.AndroidException {
  public android.app.PendingIntent$CanceledException();
  public android.app.PendingIntent$CanceledException(java.lang.String);
  public android.app.PendingIntent$CanceledException(java.lang.Exception);
  public void performReceive(android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean);
  public void run();
public interface android.app.PendingIntent$OnFinished {
  public abstract void onSendFinished(android.app.PendingIntent, android.content.Intent, int, java.lang.String, android.os.Bundle);
public final class android.app.PendingIntent implements android.os.Parcelable {
  public static android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int);
  public static android.app.PendingIntent getActivities(android.content.Context, int, android.content.Intent[], int);
  public static android.app.PendingIntent getBroadcast(android.content.Context, int, android.content.Intent, int);
  public static android.app.PendingIntent getService(android.content.Context, int, android.content.Intent, int);
  public android.content.IntentSender getIntentSender();
  public void cancel();
  public java.lang.String getTargetPackage();
  public boolean isTargetedToPackage();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static void writePendingIntentOrNullToParcel(android.app.PendingIntent, android.os.Parcel);
  public static android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel);
  public android.content.IIntentSender getTarget();
  public void handleMessage(android.os.Message);
public class android.app.ProgressDialog extends android.app.AlertDialog {
  public android.app.ProgressDialog(android.content.Context);
  public android.app.ProgressDialog(android.content.Context, int);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean, boolean);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean, boolean, android.content.DialogInterface$OnCancelListener);
  public void onStart();
  public void setProgress(int);
  public void setSecondaryProgress(int);
  public int getProgress();
  public int getSecondaryProgress();
  public int getMax();
  public void setMax(int);
  public void incrementProgressBy(int);
  public void incrementSecondaryProgressBy(int);
  public void setProgressDrawable(android.graphics.drawable.Drawable);
  public void setIndeterminateDrawable(android.graphics.drawable.Drawable);
  public void setIndeterminate(boolean);
  public boolean isIndeterminate();
  public void setMessage(java.lang.CharSequence);
  public void setProgressStyle(int);
  public void setProgressNumberFormat(java.lang.String);
  public void setProgressPercentFormat(java.text.NumberFormat);
public class android.app.QueuedWork {
  public android.app.QueuedWork();
  public static java.util.concurrent.ExecutorService singleThreadExecutor();
  public static void add(java.lang.Runnable);
  public static void remove(java.lang.Runnable);
  public static void waitToFinish();
  public static boolean hasPendingWork();
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public android.app.RemoteServiceException(java.lang.String);
  public android.app.ResultInfo createFromParcel(android.os.Parcel);
  public android.app.ResultInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.ResultInfo implements android.os.Parcelable {
  public android.app.ResultInfo(java.lang.String, int, int, android.content.Intent);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.ResultInfo(android.os.Parcel);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onClick(android.view.View);
  public boolean onClose();
  public boolean onQueryTextSubmit(java.lang.String);
  public boolean onQueryTextChange(java.lang.String);
  public boolean onSuggestionSelect(int);
  public boolean onSuggestionClick(int);
public class android.app.SearchDialog$SearchBar extends android.widget.LinearLayout {
  public android.app.SearchDialog$SearchBar(android.content.Context, android.util.AttributeSet);
  public android.app.SearchDialog$SearchBar(android.content.Context);
  public void setSearchDialog(android.app.SearchDialog);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
public class android.app.SearchDialog extends android.app.Dialog {
  public android.app.SearchDialog(android.content.Context, android.app.SearchManager);
  public boolean show(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle);
  public void onStart();
  public void onStop();
  public void setWorking(boolean);
  public android.os.Bundle onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Bundle);
  public void onConfigurationChanged();
  public boolean onTouchEvent(android.view.MotionEvent);
  public void hide();
  public void launchQuerySearch();
  public void setListSelection(int);
  public void onBackPressed();
public interface android.app.SearchManager$OnCancelListener {
  public abstract void onCancel();
public interface android.app.SearchManager$OnDismissListener {
  public abstract void onDismiss();
public class android.app.SearchManager implements android.content.DialogInterface$OnDismissListener,android.content.DialogInterface$OnCancelListener {
  public void startSearch(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle, boolean);
  public void startSearch(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle, boolean, android.graphics.Rect);
  public java.util.List<android.content.pm.ResolveInfo> getGlobalSearchActivities();
  public android.content.ComponentName getGlobalSearchActivity();
  public android.content.ComponentName getWebSearchActivity();
  public void triggerSearch(java.lang.String, android.content.ComponentName, android.os.Bundle);
  public void stopSearch();
  public boolean isVisible();
  public void setOnDismissListener(android.app.SearchManager$OnDismissListener);
  public void setOnCancelListener(android.app.SearchManager$OnCancelListener);
  public void onCancel(android.content.DialogInterface);
  public void onDismiss(android.content.DialogInterface);
  public android.app.SearchableInfo getSearchableInfo(android.content.ComponentName);
  public android.database.Cursor getSuggestions(android.app.SearchableInfo, java.lang.String);
  public android.database.Cursor getSuggestions(android.app.SearchableInfo, java.lang.String, int);
  public java.util.List<android.app.SearchableInfo> getSearchablesInGlobalSearch();
  public android.app.SearchableInfo createFromParcel(android.os.Parcel);
  public android.app.SearchableInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.SearchableInfo$ActionKeyInfo implements android.os.Parcelable {
  public int getKeyCode();
  public java.lang.String getQueryActionMsg();
  public java.lang.String getSuggestActionMsg();
  public java.lang.String getSuggestActionMsgColumn();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class android.app.SearchableInfo implements android.os.Parcelable {
  public java.lang.String getSuggestAuthority();
  public java.lang.String getSuggestPackage();
  public android.content.ComponentName getSearchActivity();
  public boolean useBadgeLabel();
  public boolean useBadgeIcon();
  public boolean shouldRewriteQueryFromData();
  public boolean shouldRewriteQueryFromText();
  public int getSettingsDescriptionId();
  public java.lang.String getSuggestPath();
  public java.lang.String getSuggestSelection();
  public java.lang.String getSuggestIntentAction();
  public java.lang.String getSuggestIntentData();
  public int getSuggestThreshold();
  public android.content.Context getActivityContext(android.content.Context);
  public android.content.Context getProviderContext(android.content.Context, android.content.Context);
  public android.app.SearchableInfo$ActionKeyInfo findActionKey(int);
  public static android.app.SearchableInfo getActivityMetaData(android.content.Context, android.content.pm.ActivityInfo);
  public int getLabelId();
  public int getHintId();
  public int getIconId();
  public boolean getVoiceSearchEnabled();
  public boolean getVoiceSearchLaunchWebSearch();
  public boolean getVoiceSearchLaunchRecognizer();
  public int getVoiceLanguageModeId();
  public int getVoicePromptTextId();
  public int getVoiceLanguageId();
  public int getVoiceMaxResults();
  public int getSearchButtonText();
  public int getInputType();
  public int getImeOptions();
  public boolean shouldIncludeInGlobalSearch();
  public boolean queryAfterZeroResults();
  public boolean autoUrlDetect();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public abstract class android.app.Service extends android.content.ContextWrapper implements android.content.ComponentCallbacks2 {
  public android.app.Service();
  public final android.app.Application getApplication();
  public void onCreate();
  public void onStart(android.content.Intent, int);
  public int onStartCommand(android.content.Intent, int, int);
  public void onDestroy();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public abstract android.os.IBinder onBind(android.content.Intent);
  public boolean onUnbind(android.content.Intent);
  public void onRebind(android.content.Intent);
  public void onTaskRemoved(android.content.Intent);
  public final void stopSelf();
  public final void stopSelf(int);
  public final boolean stopSelfResult(int);
  public final void setForeground(boolean);
  public final void startForeground(int, android.app.Notification);
  public final void stopForeground(boolean);
  public final void attach(android.content.Context, android.app.ActivityThread, java.lang.String, android.os.IBinder, android.app.Application, java.lang.Object);
  public android.app.ServiceConnectionLeaked(java.lang.String);
  public void run();
  public void run();
  public void run();
  public void run();
  public void run();
public final class android.app.SharedPreferencesImpl$EditorImpl implements android.content.SharedPreferences$Editor {
  public android.app.SharedPreferencesImpl$EditorImpl(android.app.SharedPreferencesImpl);
  public android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String);
  public android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set<java.lang.String>);
  public android.content.SharedPreferences$Editor putInt(java.lang.String, int);
  public android.content.SharedPreferences$Editor putLong(java.lang.String, long);
  public android.content.SharedPreferences$Editor putFloat(java.lang.String, float);
  public android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean);
  public android.content.SharedPreferences$Editor remove(java.lang.String);
  public android.content.SharedPreferences$Editor clear();
  public void apply();
  public boolean commit();
  public void setDiskWriteResult(boolean);
  public void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
  public void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
  public java.util.Map<java.lang.String, ?> getAll();
  public java.lang.String getString(java.lang.String, java.lang.String);
  public java.util.Set<java.lang.String> getStringSet(java.lang.String, java.util.Set<java.lang.String>);
  public int getInt(java.lang.String, int);
  public long getLong(java.lang.String, long);
  public float getFloat(java.lang.String, float);
  public boolean getBoolean(java.lang.String, boolean);
  public boolean contains(java.lang.String);
  public android.content.SharedPreferences$Editor edit();
public class android.app.StatusBarManager {
  public void disable(int);
  public void expand();
  public void collapse();
  public void setIcon(java.lang.String, int, int, java.lang.String);
  public void removeIcon(java.lang.String);
  public void setIconVisibility(java.lang.String, boolean);
  public android.app.SuperNotCalledException(java.lang.String);
public class android.app.TabActivity extends android.app.ActivityGroup {
  public android.app.TabActivity();
  public void setDefaultTab(java.lang.String);
  public void setDefaultTab(int);
  public void onContentChanged();
  public android.widget.TabHost getTabHost();
  public android.widget.TabWidget getTabWidget();
public class android.app.UiModeManager {
  public void enableCarMode(int);
  public void disableCarMode(int);
  public int getCurrentModeType();
  public void setNightMode(int);
  public int getNightMode();
  public android.app.WallpaperInfo createFromParcel(android.os.Parcel);
  public android.app.WallpaperInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.app.WallpaperInfo implements android.os.Parcelable {
  public java.lang.String getPackageName();
  public java.lang.String getServiceName();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.content.ComponentName getComponent();
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager);
  public java.lang.String getSettingsActivity();
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public void run();
  public void draw(android.graphics.Canvas);
  public int getOpacity();
  public void setBounds(int, int, int, int);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getMinimumWidth();
  public int getMinimumHeight();
  public void handleMessage(android.os.Message);
  public void onWallpaperChanged();
  public android.os.Handler getHandler();
  public android.graphics.Bitmap peekWallpaperBitmap(android.content.Context, boolean);
  public void forgetLoadedWallpaper();
public class android.app.WallpaperManager {
  public static android.app.WallpaperManager getInstance(android.content.Context);
  public android.app.IWallpaperManager getIWallpaperManager();
  public android.graphics.drawable.Drawable getDrawable();
  public android.graphics.drawable.Drawable peekDrawable();
  public android.graphics.drawable.Drawable getFastDrawable();
  public android.graphics.drawable.Drawable peekFastDrawable();
  public android.graphics.Bitmap getBitmap();
  public void forgetLoadedWallpaper();
  public android.app.WallpaperInfo getWallpaperInfo();
  public int getDesiredMinimumWidth();
  public int getDesiredMinimumHeight();
  public void suggestDesiredDimensions(int, int);
  public void setWallpaperOffsets(android.os.IBinder, float, float);
  public void setWallpaperOffsetSteps(float, float);
  public void sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle);
  public void clearWallpaperOffsets(android.os.IBinder);
  public android.app.admin.DeviceAdminInfo createFromParcel(android.os.Parcel);
  public android.app.admin.DeviceAdminInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.admin.DeviceAdminInfo$PolicyInfo {
  public android.app.admin.DeviceAdminInfo$PolicyInfo(int, java.lang.String, int, int);
public final class android.app.admin.DeviceAdminInfo implements android.os.Parcelable {
  public java.lang.String getPackageName();
  public java.lang.String getReceiverName();
  public android.content.pm.ActivityInfo getActivityInfo();
  public android.content.ComponentName getComponent();
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public boolean isVisible();
  public boolean usesPolicy(int);
  public java.lang.String getTagForPolicy(int);
  public java.util.ArrayList<android.app.admin.DeviceAdminInfo$PolicyInfo> getUsedPolicies();
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
public class android.app.admin.DeviceAdminReceiver extends android.content.BroadcastReceiver {
  public android.app.admin.DeviceAdminReceiver();
  public android.app.admin.DevicePolicyManager getManager(android.content.Context);
  public android.content.ComponentName getWho(android.content.Context);
  public void onEnabled(android.content.Context, android.content.Intent);
  public java.lang.CharSequence onDisableRequested(android.content.Context, android.content.Intent);
  public void onDisabled(android.content.Context, android.content.Intent);
  public void onPasswordChanged(android.content.Context, android.content.Intent);
  public void onPasswordFailed(android.content.Context, android.content.Intent);
  public void onPasswordSucceeded(android.content.Context, android.content.Intent);
  public void onPasswordExpiring(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
public class android.app.admin.DevicePolicyManager {
  public static android.app.admin.DevicePolicyManager create(android.content.Context, android.os.Handler);
  public boolean isAdminActive(android.content.ComponentName);
  public java.util.List<android.content.ComponentName> getActiveAdmins();
  public boolean packageHasActiveAdmins(java.lang.String);
  public void removeActiveAdmin(android.content.ComponentName);
  public boolean hasGrantedPolicy(android.content.ComponentName, int);
  public void setPasswordQuality(android.content.ComponentName, int);
  public int getPasswordQuality(android.content.ComponentName);
  public void setPasswordMinimumLength(android.content.ComponentName, int);
  public int getPasswordMinimumLength(android.content.ComponentName);
  public void setPasswordMinimumUpperCase(android.content.ComponentName, int);
  public int getPasswordMinimumUpperCase(android.content.ComponentName);
  public void setPasswordMinimumLowerCase(android.content.ComponentName, int);
  public int getPasswordMinimumLowerCase(android.content.ComponentName);
  public void setPasswordMinimumLetters(android.content.ComponentName, int);
  public int getPasswordMinimumLetters(android.content.ComponentName);
  public void setPasswordMinimumNumeric(android.content.ComponentName, int);
  public int getPasswordMinimumNumeric(android.content.ComponentName);
  public void setPasswordMinimumSymbols(android.content.ComponentName, int);
  public int getPasswordMinimumSymbols(android.content.ComponentName);
  public void setPasswordMinimumNonLetter(android.content.ComponentName, int);
  public int getPasswordMinimumNonLetter(android.content.ComponentName);
  public void setPasswordHistoryLength(android.content.ComponentName, int);
  public void setPasswordExpirationTimeout(android.content.ComponentName, long);
  public long getPasswordExpirationTimeout(android.content.ComponentName);
  public long getPasswordExpiration(android.content.ComponentName);
  public int getPasswordHistoryLength(android.content.ComponentName);
  public int getPasswordMaximumLength(int);
  public boolean isActivePasswordSufficient();
  public int getCurrentFailedPasswordAttempts();
  public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int);
  public int getMaximumFailedPasswordsForWipe(android.content.ComponentName);
  public boolean resetPassword(java.lang.String, int);
  public void setMaximumTimeToLock(android.content.ComponentName, long);
  public long getMaximumTimeToLock(android.content.ComponentName);
  public void lockNow();
  public void wipeData(int);
  public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.net.Proxy, java.util.List<java.lang.String>);
  public android.content.ComponentName getGlobalProxyAdmin();
  public int setStorageEncryption(android.content.ComponentName, boolean);
  public boolean getStorageEncryption(android.content.ComponentName);
  public int getStorageEncryptionStatus();
  public void setCameraDisabled(android.content.ComponentName, boolean);
  public boolean getCameraDisabled(android.content.ComponentName);
  public void setActiveAdmin(android.content.ComponentName, boolean);
  public android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName);
  public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback);
  public void setActivePasswordState(int, int, int, int, int, int, int, int);
  public void reportFailedPasswordAttempt();
  public void reportSuccessfulPasswordAttempt();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.admin.IDevicePolicyManager$Stub extends android.os.Binder implements android.app.admin.IDevicePolicyManager {
  public android.app.admin.IDevicePolicyManager$Stub();
  public static android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.admin.IDevicePolicyManager extends android.os.IInterface {
  public void doFullBackup(android.os.ParcelFileDescriptor, int, android.app.backup.IBackupManager);
public abstract class android.app.backup.BackupAgent extends android.content.ContextWrapper {
  public android.app.backup.BackupAgent();
  public void onCreate();
  public void onDestroy();
  public final void fullBackupFile(java.io.File, android.app.backup.FullBackupDataOutput);
  public final android.os.IBinder onBind();
  public void attach(android.content.Context);
public class android.app.backup.BackupAgentHelper extends android.app.backup.BackupAgent {
  public android.app.backup.BackupAgentHelper();
  public android.app.backup.BackupHelperDispatcher getDispatcher();
  public void addHelper(java.lang.String, android.app.backup.BackupHelper);
public class android.app.backup.BackupDataInput {
  public android.app.backup.BackupDataInput(java.io.FileDescriptor);
  public java.lang.String getKey();
  public int getDataSize();
public class android.app.backup.BackupDataInputStream extends java.io.InputStream {
  public java.lang.String getKey();
  public int size();
public class android.app.backup.BackupDataOutput {
  public android.app.backup.BackupDataOutput(java.io.FileDescriptor);
  public void setKeyPrefix(java.lang.String);
public interface android.app.backup.BackupHelper {
  public abstract void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public abstract void restoreEntity(android.app.backup.BackupDataInputStream);
  public abstract void writeNewStateDescription(android.os.ParcelFileDescriptor);
public class android.app.backup.BackupHelperDispatcher {
  public android.app.backup.BackupHelperDispatcher();
  public void addHelper(java.lang.String, android.app.backup.BackupHelper);
public class android.app.backup.BackupManager {
  public android.app.backup.BackupManager(android.content.Context);
  public void dataChanged();
  public static void dataChanged(java.lang.String);
  public int requestRestore(android.app.backup.RestoreObserver);
  public android.app.backup.RestoreSession beginRestoreSession();
public class android.app.backup.FileBackupHelper extends android.app.backup.FileBackupHelperBase implements android.app.backup.BackupHelper {
  public android.app.backup.FileBackupHelper(android.content.Context, java.lang.String...);
  public void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public void restoreEntity(android.app.backup.BackupDataInputStream);
  public void writeNewStateDescription(android.os.ParcelFileDescriptor);
  public void writeNewStateDescription(android.os.ParcelFileDescriptor);
public class android.app.backup.FullBackup {
  public android.app.backup.FullBackup();
  public static native int backupToTar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.backup.BackupDataOutput);
public class android.app.backup.FullBackupDataOutput {
  public android.app.backup.FullBackupDataOutput(android.os.ParcelFileDescriptor);
  public android.app.backup.BackupDataOutput getData();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.backup.IBackupManager$Stub extends android.os.Binder implements android.app.backup.IBackupManager {
  public android.app.backup.IBackupManager$Stub();
  public static android.app.backup.IBackupManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.backup.IBackupManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.backup.IFullBackupRestoreObserver$Stub extends android.os.Binder implements android.app.backup.IFullBackupRestoreObserver {
  public android.app.backup.IFullBackupRestoreObserver$Stub();
  public static android.app.backup.IFullBackupRestoreObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.backup.IFullBackupRestoreObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.backup.IRestoreObserver$Stub extends android.os.Binder implements android.app.backup.IRestoreObserver {
  public android.app.backup.IRestoreObserver$Stub();
  public static android.app.backup.IRestoreObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.backup.IRestoreObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.app.backup.IRestoreSession$Stub extends android.os.Binder implements android.app.backup.IRestoreSession {
  public android.app.backup.IRestoreSession$Stub();
  public static android.app.backup.IRestoreSession asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.app.backup.IRestoreSession extends android.os.IInterface {
public abstract class android.app.backup.RestoreObserver {
  public android.app.backup.RestoreObserver();
  public void restoreSetsAvailable(android.app.backup.RestoreSet[]);
  public void restoreStarting(int);
  public void onUpdate(int, java.lang.String);
  public void restoreFinished(int);
  public void handleMessage(android.os.Message);
  public void restoreSetsAvailable(android.app.backup.RestoreSet[]);
  public void restoreStarting(int);
  public void onUpdate(int, java.lang.String);
  public void restoreFinished(int);
public class android.app.backup.RestoreSession {
  public int getAvailableRestoreSets(android.app.backup.RestoreObserver);
  public int restoreAll(long, android.app.backup.RestoreObserver);
  public int restoreSome(long, android.app.backup.RestoreObserver, java.lang.String[]);
  public int restorePackage(java.lang.String, android.app.backup.RestoreObserver);
  public void endRestoreSession();
  public android.app.backup.RestoreSet createFromParcel(android.os.Parcel);
  public android.app.backup.RestoreSet[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.app.backup.RestoreSet implements android.os.Parcelable {
  public android.app.backup.RestoreSet();
  public android.app.backup.RestoreSet(java.lang.String, java.lang.String, long);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.app.backup.SharedPreferencesBackupHelper extends android.app.backup.FileBackupHelperBase implements android.app.backup.BackupHelper {
  public android.app.backup.SharedPreferencesBackupHelper(android.content.Context, java.lang.String...);
  public void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public void restoreEntity(android.app.backup.BackupDataInputStream);
  public void writeNewStateDescription(android.os.ParcelFileDescriptor);
  public boolean onLoadClass(java.lang.Class);
  public android.appwidget.AppWidgetHostView$ParcelableSparseArray createFromParcel(android.os.Parcel);
  public android.appwidget.AppWidgetHostView$ParcelableSparseArray[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.appwidget.AppWidgetHostView extends android.widget.FrameLayout {
  public android.appwidget.AppWidgetHostView(android.content.Context);
  public android.appwidget.AppWidgetHostView(android.content.Context, int, int);
  public void setAppWidget(int, android.appwidget.AppWidgetProviderInfo);
  public static android.graphics.Rect getDefaultPaddingForWidget(android.content.Context, android.content.ComponentName, android.graphics.Rect);
  public int getAppWidgetId();
  public android.appwidget.AppWidgetProviderInfo getAppWidgetInfo();
  public android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void updateAppWidget(android.widget.RemoteViews);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
public class android.appwidget.AppWidgetManager {
  public static android.appwidget.AppWidgetManager getInstance(android.content.Context);
  public void updateAppWidget(int[], android.widget.RemoteViews);
  public void updateAppWidget(int, android.widget.RemoteViews);
  public void partiallyUpdateAppWidget(int[], android.widget.RemoteViews);
  public void partiallyUpdateAppWidget(int, android.widget.RemoteViews);
  public void updateAppWidget(android.content.ComponentName, android.widget.RemoteViews);
  public void notifyAppWidgetViewDataChanged(int[], int);
  public void notifyAppWidgetViewDataChanged(int, int);
  public java.util.List<android.appwidget.AppWidgetProviderInfo> getInstalledProviders();
  public android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int);
  public void bindAppWidgetId(int, android.content.ComponentName);
  public void bindRemoteViewsService(int, android.content.Intent, android.os.IBinder);
  public void unbindRemoteViewsService(int, android.content.Intent);
  public int[] getAppWidgetIds(android.content.ComponentName);
public class android.appwidget.AppWidgetProvider extends android.content.BroadcastReceiver {
  public android.appwidget.AppWidgetProvider();
  public void onReceive(android.content.Context, android.content.Intent);
  public void onUpdate(android.content.Context, android.appwidget.AppWidgetManager, int[]);
  public void onDeleted(android.content.Context, int[]);
  public void onEnabled(android.content.Context);
  public void onDisabled(android.content.Context);
  public android.appwidget.AppWidgetProviderInfo createFromParcel(android.os.Parcel);
  public android.appwidget.AppWidgetProviderInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.appwidget.AppWidgetProviderInfo implements android.os.Parcelable {
  public android.appwidget.AppWidgetProviderInfo();
  public android.appwidget.AppWidgetProviderInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public java.lang.String toString();
public final class android.bluetooth.BluetoothA2dp implements android.bluetooth.BluetoothProfile {
  public boolean connect(android.bluetooth.BluetoothDevice);
  public boolean disconnect(android.bluetooth.BluetoothDevice);
  public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public boolean setPriority(android.bluetooth.BluetoothDevice, int);
  public int getPriority(android.bluetooth.BluetoothDevice);
  public boolean isA2dpPlaying(android.bluetooth.BluetoothDevice);
  public boolean suspendSink(android.bluetooth.BluetoothDevice);
  public boolean resumeSink(android.bluetooth.BluetoothDevice);
  public boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice);
  public boolean allowIncomingConnect(android.bluetooth.BluetoothDevice, boolean);
  public static java.lang.String stateToString(int);
  public void handleMessage(android.os.Message);
public interface android.bluetooth.BluetoothAdapter$BluetoothStateChangeCallback {
  public abstract void onBluetoothStateChange(boolean);
  public android.bluetooth.BluetoothAdapter$RfcommChannelPicker(java.util.UUID);
  public int nextChannel();
public class android.bluetooth.BluetoothAdapter$StateChangeCallbackWrapper extends android.bluetooth.IBluetoothStateChangeCallback$Stub {
  public void onBluetoothStateChange(boolean);
public final class android.bluetooth.BluetoothAdapter {
  public static synchronized android.bluetooth.BluetoothAdapter getDefaultAdapter();
  public android.bluetooth.BluetoothAdapter(android.bluetooth.IBluetooth);
  public android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String);
  public boolean isEnabled();
  public int getState();
  public boolean enable();
  public boolean disable();
  public java.lang.String getAddress();
  public java.lang.String getName();
  public android.os.ParcelUuid[] getUuids();
  public boolean setName(java.lang.String);
  public int getScanMode();
  public boolean setScanMode(int, int);
  public boolean setScanMode(int);
  public int getDiscoverableTimeout();
  public void setDiscoverableTimeout(int);
  public boolean startDiscovery();
  public boolean cancelDiscovery();
  public boolean isDiscovering();
  public java.util.Set<android.bluetooth.BluetoothDevice> getBondedDevices();
  public int getConnectionState();
  public int getProfileConnectionState(int);
  public android.util.Pair<byte[], byte[]> readOutOfBandData();
  public boolean getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile$ServiceListener, int);
  public void closeProfileProxy(int, android.bluetooth.BluetoothProfile);
  public boolean changeApplicationBluetoothState(boolean, android.bluetooth.BluetoothAdapter$BluetoothStateChangeCallback);
  public static boolean checkBluetoothAddress(java.lang.String);
  public android.bluetooth.BluetoothClass createFromParcel(android.os.Parcel);
  public android.bluetooth.BluetoothClass[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.bluetooth.BluetoothClass$Device$Major {
  public android.bluetooth.BluetoothClass$Device$Major();
public class android.bluetooth.BluetoothClass$Device {
  public android.bluetooth.BluetoothClass$Device();
public final class android.bluetooth.BluetoothClass$Service {
  public android.bluetooth.BluetoothClass$Service();
public final class android.bluetooth.BluetoothClass implements android.os.Parcelable {
  public android.bluetooth.BluetoothClass(int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean hasService(int);
  public int getMajorDeviceClass();
  public int getDeviceClass();
  public boolean doesClassMatch(int);
  public android.bluetooth.BluetoothDevice createFromParcel(android.os.Parcel);
  public android.bluetooth.BluetoothDevice[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.bluetooth.BluetoothDevice implements android.os.Parcelable {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getAddress();
  public java.lang.String getName();
  public java.lang.String getAlias();
  public boolean setAlias(java.lang.String);
  public java.lang.String getAliasName();
  public boolean createBond();
  public boolean createBondOutOfBand(byte[], byte[]);
  public boolean setDeviceOutOfBandData(byte[], byte[]);
  public boolean cancelBondProcess();
  public boolean removeBond();
  public int getBondState();
  public android.bluetooth.BluetoothClass getBluetoothClass();
  public boolean getTrustState();
  public boolean setTrust(boolean);
  public android.os.ParcelUuid[] getUuids();
  public boolean fetchUuidsWithSdp();
  public int getServiceChannel(android.os.ParcelUuid);
  public boolean setPin(byte[]);
  public boolean setPasskey(int);
  public boolean setPairingConfirmation(boolean);
  public boolean setRemoteOutOfBandData();
  public boolean cancelPairingUserInput();
  public boolean isBluetoothDock();
  public static byte[] convertPinToBytes(java.lang.String);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
public final class android.bluetooth.BluetoothHeadset implements android.bluetooth.BluetoothProfile {
  public boolean connect(android.bluetooth.BluetoothDevice);
  public boolean disconnect(android.bluetooth.BluetoothDevice);
  public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public boolean setPriority(android.bluetooth.BluetoothDevice, int);
  public int getPriority(android.bluetooth.BluetoothDevice);
  public boolean startVoiceRecognition(android.bluetooth.BluetoothDevice);
  public boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice);
  public boolean isAudioConnected(android.bluetooth.BluetoothDevice);
  public int getBatteryUsageHint(android.bluetooth.BluetoothDevice);
  public static boolean isBluetoothVoiceDialingEnabled(android.content.Context);
  public boolean cancelConnectThread();
  public boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice);
  public boolean createIncomingConnect(android.bluetooth.BluetoothDevice);
  public boolean rejectIncomingConnect(android.bluetooth.BluetoothDevice);
  public boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice);
  public boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice);
  public boolean setAudioState(android.bluetooth.BluetoothDevice, int);
  public int getAudioState(android.bluetooth.BluetoothDevice);
  public boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice);
  public boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice);
  public android.bluetooth.BluetoothHealth$BluetoothHealthCallbackWrapper(android.bluetooth.BluetoothHealthCallback);
  public void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration, int);
  public void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int);
public final class android.bluetooth.BluetoothHealth implements android.bluetooth.BluetoothProfile {
  public boolean registerSinkAppConfiguration(java.lang.String, int, android.bluetooth.BluetoothHealthCallback);
  public boolean registerAppConfiguration(java.lang.String, int, int, int, android.bluetooth.BluetoothHealthCallback);
  public boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration);
  public boolean connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration);
  public boolean connectChannelToSink(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int);
  public boolean disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int);
  public android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public android.bluetooth.BluetoothHealthAppConfiguration createFromParcel(android.os.Parcel);
  public android.bluetooth.BluetoothHealthAppConfiguration[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.bluetooth.BluetoothHealthAppConfiguration implements android.os.Parcelable {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public int getDataType();
  public java.lang.String getName();
  public int getRole();
  public int getChannelType();
  public void writeToParcel(android.os.Parcel, int);
public abstract class android.bluetooth.BluetoothHealthCallback {
  public android.bluetooth.BluetoothHealthCallback();
  public void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration, int);
  public void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int);
public final class android.bluetooth.BluetoothInputDevice implements android.bluetooth.BluetoothProfile {
  public boolean connect(android.bluetooth.BluetoothDevice);
  public boolean disconnect(android.bluetooth.BluetoothDevice);
  public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public boolean setPriority(android.bluetooth.BluetoothDevice, int);
  public int getPriority(android.bluetooth.BluetoothDevice);
public final class android.bluetooth.BluetoothPan implements android.bluetooth.BluetoothProfile {
  public boolean connect(android.bluetooth.BluetoothDevice);
  public boolean disconnect(android.bluetooth.BluetoothDevice);
  public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public void setBluetoothTethering(boolean);
  public boolean isTetheringOn();
public interface android.bluetooth.BluetoothProfile$ServiceListener {
  public abstract void onServiceConnected(int, android.bluetooth.BluetoothProfile);
  public abstract void onServiceDisconnected(int);
public interface android.bluetooth.BluetoothProfile {
  public abstract java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices();
  public abstract java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[]);
  public abstract int getConnectionState(android.bluetooth.BluetoothDevice);
public final class android.bluetooth.BluetoothServerSocket implements java.io.Closeable {
  public int getChannel();
  public android.bluetooth.BluetoothSocket$SdpHelper(android.bluetooth.BluetoothDevice, android.os.ParcelUuid);
  public synchronized void cancel();
  public synchronized void onRfcommChannelFound(int);
  public static android.bluetooth.BluetoothSocket$SocketState[] values();
  public static android.bluetooth.BluetoothSocket$SocketState valueOf(java.lang.String);
public final class android.bluetooth.BluetoothSocket implements java.io.Closeable {
  public android.bluetooth.BluetoothDevice getRemoteDevice();
  public boolean isConnected();
public final class android.bluetooth.BluetoothUuid {
  public android.bluetooth.BluetoothUuid();
  public static boolean isAudioSource(android.os.ParcelUuid);
  public static boolean isAudioSink(android.os.ParcelUuid);
  public static boolean isAdvAudioDist(android.os.ParcelUuid);
  public static boolean isHandsfree(android.os.ParcelUuid);
  public static boolean isHeadset(android.os.ParcelUuid);
  public static boolean isAvrcpController(android.os.ParcelUuid);
  public static boolean isAvrcpTarget(android.os.ParcelUuid);
  public static boolean isInputDevice(android.os.ParcelUuid);
  public static boolean isPanu(android.os.ParcelUuid);
  public static boolean isNap(android.os.ParcelUuid);
  public static boolean isBnep(android.os.ParcelUuid);
  public static boolean isUuidPresent(android.os.ParcelUuid[], android.os.ParcelUuid);
  public static boolean containsAnyUuid(android.os.ParcelUuid[], android.os.ParcelUuid[]);
  public static boolean containsAllUuids(android.os.ParcelUuid[], android.os.ParcelUuid[]);
  public static int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetooth$Stub extends android.os.Binder implements android.bluetooth.IBluetooth {
  public android.bluetooth.IBluetooth$Stub();
  public static android.bluetooth.IBluetooth asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetooth extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetoothA2dp$Stub extends android.os.Binder implements android.bluetooth.IBluetoothA2dp {
  public android.bluetooth.IBluetoothA2dp$Stub();
  public static android.bluetooth.IBluetoothA2dp asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetoothA2dp extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetoothCallback$Stub extends android.os.Binder implements android.bluetooth.IBluetoothCallback {
  public android.bluetooth.IBluetoothCallback$Stub();
  public static android.bluetooth.IBluetoothCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetoothCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetoothHeadset$Stub extends android.os.Binder implements android.bluetooth.IBluetoothHeadset {
  public android.bluetooth.IBluetoothHeadset$Stub();
  public static android.bluetooth.IBluetoothHeadset asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetoothHeadset extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetoothHealthCallback$Stub extends android.os.Binder implements android.bluetooth.IBluetoothHealthCallback {
  public android.bluetooth.IBluetoothHealthCallback$Stub();
  public static android.bluetooth.IBluetoothHealthCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetoothHealthCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.bluetooth.IBluetoothStateChangeCallback$Stub extends android.os.Binder implements android.bluetooth.IBluetoothStateChangeCallback {
  public android.bluetooth.IBluetoothStateChangeCallback$Stub();
  public static android.bluetooth.IBluetoothStateChangeCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.bluetooth.IBluetoothStateChangeCallback extends android.os.IInterface {
public class android.content.ActivityNotFoundException extends java.lang.RuntimeException {
  public android.content.ActivityNotFoundException();
  public android.content.ActivityNotFoundException(java.lang.String);
public final class android.content.AsyncQueryHandler$WorkerArgs {
public class android.content.AsyncQueryHandler$WorkerHandler extends android.os.Handler {
  public android.content.AsyncQueryHandler$WorkerHandler(android.content.AsyncQueryHandler, android.os.Looper);
  public void handleMessage(android.os.Message);
public abstract class android.content.AsyncQueryHandler extends android.os.Handler {
  public android.content.AsyncQueryHandler(android.content.ContentResolver);
  public void startQuery(int, java.lang.Object, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final void cancelOperation(int);
  public final void startInsert(int, java.lang.Object, android.net.Uri, android.content.ContentValues);
  public final void startUpdate(int, java.lang.Object, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public final void startDelete(int, java.lang.Object, android.net.Uri, java.lang.String, java.lang.String[]);
  public void handleMessage(android.os.Message);
  public void run();
public abstract class android.content.AsyncTaskLoader<D> extends android.content.Loader<D> {
  public android.content.AsyncTaskLoader(android.content.Context);
  public void setUpdateThrottle(long);
  public boolean cancelLoad();
  public void onCanceled(D);
  public abstract D loadInBackground();
  public void waitForLoader();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void run();
public class android.content.BroadcastReceiver$PendingResult {
  public android.content.BroadcastReceiver$PendingResult(int, java.lang.String, android.os.Bundle, int, boolean, boolean, android.os.IBinder);
  public final void setResultCode(int);
  public final int getResultCode();
  public final void setResultData(java.lang.String);
  public final java.lang.String getResultData();
  public final void setResultExtras(android.os.Bundle);
  public final android.os.Bundle getResultExtras(boolean);
  public final void setResult(int, java.lang.String, android.os.Bundle);
  public final boolean getAbortBroadcast();
  public final void abortBroadcast();
  public final void clearAbortBroadcast();
  public final void finish();
  public void setExtrasClassLoader(java.lang.ClassLoader);
  public void sendFinished(android.app.IActivityManager);
public abstract class android.content.BroadcastReceiver {
  public android.content.BroadcastReceiver();
  public abstract void onReceive(android.content.Context, android.content.Intent);
  public final android.content.BroadcastReceiver$PendingResult goAsync();
  public android.os.IBinder peekService(android.content.Context, android.content.Intent);
  public final void setResultCode(int);
  public final int getResultCode();
  public final void setResultData(java.lang.String);
  public final java.lang.String getResultData();
  public final void setResultExtras(android.os.Bundle);
  public final android.os.Bundle getResultExtras(boolean);
  public final void setResult(int, java.lang.String, android.os.Bundle);
  public final boolean getAbortBroadcast();
  public final void abortBroadcast();
  public final void clearAbortBroadcast();
  public final boolean isOrderedBroadcast();
  public final boolean isInitialStickyBroadcast();
  public final void setOrderedHint(boolean);
  public final void setPendingResult(android.content.BroadcastReceiver$PendingResult);
  public final android.content.BroadcastReceiver$PendingResult getPendingResult();
  public final void setDebugUnregister(boolean);
  public final boolean getDebugUnregister();
  public android.content.ClipData createFromParcel(android.os.Parcel);
  public android.content.ClipData[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.ClipData$Item {
  public android.content.ClipData$Item(java.lang.CharSequence);
  public android.content.ClipData$Item(android.content.Intent);
  public android.content.ClipData$Item(android.net.Uri);
  public android.content.ClipData$Item(java.lang.CharSequence, android.content.Intent, android.net.Uri);
  public java.lang.CharSequence getText();
  public android.content.Intent getIntent();
  public android.net.Uri getUri();
  public java.lang.CharSequence coerceToText(android.content.Context);
public class android.content.ClipData implements android.os.Parcelable {
  public android.content.ClipData(java.lang.CharSequence, java.lang.String[], android.content.ClipData$Item);
  public android.content.ClipData(android.content.ClipDescription, android.content.ClipData$Item);
  public static android.content.ClipData newPlainText(java.lang.CharSequence, java.lang.CharSequence);
  public static android.content.ClipData newIntent(java.lang.CharSequence, android.content.Intent);
  public static android.content.ClipData newUri(android.content.ContentResolver, java.lang.CharSequence, android.net.Uri);
  public static android.content.ClipData newRawUri(java.lang.CharSequence, android.net.Uri);
  public android.content.ClipDescription getDescription();
  public void addItem(android.content.ClipData$Item);
  public android.graphics.Bitmap getIcon();
  public int getItemCount();
  public android.content.ClipData$Item getItemAt(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ClipDescription createFromParcel(android.os.Parcel);
  public android.content.ClipDescription[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.ClipDescription implements android.os.Parcelable {
  public android.content.ClipDescription(java.lang.CharSequence, java.lang.String[]);
  public android.content.ClipDescription(android.content.ClipDescription);
  public static boolean compareMimeTypes(java.lang.String, java.lang.String);
  public java.lang.CharSequence getLabel();
  public boolean hasMimeType(java.lang.String);
  public java.lang.String[] filterMimeTypes(java.lang.String);
  public int getMimeTypeCount();
  public java.lang.String getMimeType(int);
  public void validate();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void dispatchPrimaryClipChanged();
  public void handleMessage(android.os.Message);
public interface android.content.ClipboardManager$OnPrimaryClipChangedListener {
  public abstract void onPrimaryClipChanged();
public class android.content.ClipboardManager extends android.text.ClipboardManager {
  public android.content.ClipboardManager(android.content.Context, android.os.Handler);
  public void setPrimaryClip(android.content.ClipData);
  public android.content.ClipData getPrimaryClip();
  public android.content.ClipDescription getPrimaryClipDescription();
  public boolean hasPrimaryClip();
  public void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener);
  public void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener);
  public java.lang.CharSequence getText();
  public void setText(java.lang.CharSequence);
  public boolean hasText();
public interface android.content.ComponentCallbacks {
  public abstract void onConfigurationChanged(android.content.res.Configuration);
  public abstract void onLowMemory();
public interface android.content.ComponentCallbacks2 extends android.content.ComponentCallbacks {
  public abstract void onTrimMemory(int);
  public android.content.ComponentName createFromParcel(android.os.Parcel);
  public android.content.ComponentName[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.ComponentName implements android.os.Parcelable, java.lang.Cloneable, java.lang.Comparable<android.content.ComponentName> {
  public android.content.ComponentName(java.lang.String, java.lang.String);
  public android.content.ComponentName(android.content.Context, java.lang.String);
  public android.content.ComponentName(android.content.Context, java.lang.Class<?>);
  public android.content.ComponentName clone();
  public java.lang.String getPackageName();
  public java.lang.String getClassName();
  public java.lang.String getShortClassName();
  public java.lang.String flattenToString();
  public java.lang.String flattenToShortString();
  public static android.content.ComponentName unflattenFromString(java.lang.String);
  public java.lang.String toShortString();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(android.content.ComponentName);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static void writeToParcel(android.content.ComponentName, android.os.Parcel);
  public static android.content.ComponentName readFromParcel(android.os.Parcel);
  public android.content.ComponentName(android.os.Parcel);
  public int compareTo(java.lang.Object);
public interface android.content.ContentProvider$PipeDataWriter<T> {
  public abstract void writeDataToPipe(android.os.ParcelFileDescriptor, android.net.Uri, java.lang.String, android.os.Bundle, T);
  public java.lang.String getProviderName();
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public java.lang.String getType(android.net.Uri);
  public android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
public abstract class android.content.ContentProvider implements android.content.ComponentCallbacks2 {
  public android.content.ContentProvider();
  public android.content.ContentProvider(android.content.Context, java.lang.String, java.lang.String, android.content.pm.PathPermission[]);
  public static android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider);
  public final android.content.Context getContext();
  public final java.lang.String getReadPermission();
  public final java.lang.String getWritePermission();
  public final android.content.pm.PathPermission[] getPathPermissions();
  public abstract boolean onCreate();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public abstract android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public abstract java.lang.String getType(android.net.Uri);
  public abstract android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public abstract int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public abstract int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  public android.content.IContentProvider getIContentProvider();
  public void attachInfo(android.content.Context, android.content.pm.ProviderInfo);
  public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle);
  public void shutdown();
public class android.content.ContentProviderClient {
  public boolean release();
  public android.content.ContentProvider getLocalContentProvider();
public abstract class android.content.ContentProviderNative extends android.os.Binder implements android.content.IContentProvider {
  public android.content.ContentProviderNative();
  public static android.content.IContentProvider asInterface(android.os.IBinder);
  public abstract java.lang.String getProviderName();
  public android.os.IBinder asBinder();
  public android.content.ContentProviderOperation createFromParcel(android.os.Parcel);
  public android.content.ContentProviderOperation[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.ContentProviderOperation$Builder {
  public android.content.ContentProviderOperation build();
  public android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues);
  public android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String, int);
  public android.content.ContentProviderOperation$Builder withSelectionBackReference(int, int);
  public android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues);
  public android.content.ContentProviderOperation$Builder withValue(java.lang.String, java.lang.Object);
  public android.content.ContentProviderOperation$Builder withSelection(java.lang.String, java.lang.String[]);
  public android.content.ContentProviderOperation$Builder withExpectedCount(int);
  public android.content.ContentProviderOperation$Builder withYieldAllowed(boolean);
public class android.content.ContentProviderOperation implements android.os.Parcelable {
  public void writeToParcel(android.os.Parcel, int);
  public static android.content.ContentProviderOperation$Builder newInsert(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newDelete(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri);
  public android.net.Uri getUri();
  public boolean isYieldAllowed();
  public int getType();
  public boolean isWriteOperation();
  public boolean isReadOperation();
  public android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[], int);
  public java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[], int);
  public java.lang.String toString();
  public int describeContents();
  public android.content.ContentProviderProxy(android.os.IBinder);
  public android.os.IBinder asBinder();
  public android.content.ContentProviderResult createFromParcel(android.os.Parcel);
  public android.content.ContentProviderResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.ContentProviderResult implements android.os.Parcelable {
  public android.content.ContentProviderResult(android.net.Uri);
  public android.content.ContentProviderResult(int);
  public android.content.ContentProviderResult(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public java.lang.String toString();
  public void close();
public class android.content.ContentResolver$OpenResourceIdResult {
  public android.content.ContentResolver$OpenResourceIdResult(android.content.ContentResolver);
public abstract class android.content.ContentResolver {
  public android.content.ContentResolver(android.content.Context);
  public abstract boolean releaseProvider(android.content.IContentProvider);
  public final java.lang.String getType(android.net.Uri);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public final int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public final int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public final android.os.Bundle call(android.net.Uri, java.lang.String, java.lang.String, android.os.Bundle);
  public final android.content.IContentProvider acquireProvider(android.net.Uri);
  public final android.content.IContentProvider acquireExistingProvider(android.net.Uri);
  public final android.content.IContentProvider acquireProvider(java.lang.String);
  public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri);
  public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String);
  public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver);
  public final void unregisterContentObserver(android.database.ContentObserver);
  public void notifyChange(android.net.Uri, android.database.ContentObserver);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean);
  public void startSync(android.net.Uri, android.os.Bundle);
  public static void requestSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static void validateSyncExtrasBundle(android.os.Bundle);
  public void cancelSync(android.net.Uri);
  public static void cancelSync(android.accounts.Account, java.lang.String);
  public static android.content.SyncAdapterType[] getSyncAdapterTypes();
  public static boolean getSyncAutomatically(android.accounts.Account, java.lang.String);
  public static void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean);
  public static void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public static void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static java.util.List<android.content.PeriodicSync> getPeriodicSyncs(android.accounts.Account, java.lang.String);
  public static int getIsSyncable(android.accounts.Account, java.lang.String);
  public static void setIsSyncable(android.accounts.Account, java.lang.String, int);
  public static boolean getMasterSyncAutomatically();
  public static void setMasterSyncAutomatically(boolean);
  public static boolean isSyncActive(android.accounts.Account, java.lang.String);
  public static android.content.SyncInfo getCurrentSync();
  public static java.util.List<android.content.SyncInfo> getCurrentSyncs();
  public static android.content.SyncStatusInfo getSyncStatus(android.accounts.Account, java.lang.String);
  public static boolean isSyncPending(android.accounts.Account, java.lang.String);
  public static java.lang.Object addStatusChangeListener(int, android.content.SyncStatusObserver);
  public static void removeStatusChangeListener(java.lang.Object);
  public static android.content.IContentService getContentService();
public class android.content.ContentUris {
  public android.content.ContentUris();
  public static long parseId(android.net.Uri);
  public static android.net.Uri$Builder appendId(android.net.Uri$Builder, long);
  public static android.net.Uri withAppendedId(android.net.Uri, long);
  public android.content.ContentValues createFromParcel(android.os.Parcel);
  public android.content.ContentValues[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.ContentValues implements android.os.Parcelable {
  public android.content.ContentValues();
  public android.content.ContentValues(int);
  public android.content.ContentValues(android.content.ContentValues);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void put(java.lang.String, java.lang.String);
  public void putAll(android.content.ContentValues);
  public void put(java.lang.String, java.lang.Byte);
  public void put(java.lang.String, java.lang.Short);
  public void put(java.lang.String, java.lang.Integer);
  public void put(java.lang.String, java.lang.Long);
  public void put(java.lang.String, java.lang.Float);
  public void put(java.lang.String, java.lang.Double);
  public void put(java.lang.String, java.lang.Boolean);
  public void put(java.lang.String, byte[]);
  public void putNull(java.lang.String);
  public int size();
  public void remove(java.lang.String);
  public void clear();
  public boolean containsKey(java.lang.String);
  public java.lang.Object get(java.lang.String);
  public java.lang.String getAsString(java.lang.String);
  public java.lang.Long getAsLong(java.lang.String);
  public java.lang.Integer getAsInteger(java.lang.String);
  public java.lang.Short getAsShort(java.lang.String);
  public java.lang.Byte getAsByte(java.lang.String);
  public java.lang.Double getAsDouble(java.lang.String);
  public java.lang.Float getAsFloat(java.lang.String);
  public java.lang.Boolean getAsBoolean(java.lang.String);
  public byte[] getAsByteArray(java.lang.String);
  public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> valueSet();
  public java.util.Set<java.lang.String> keySet();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>);
  public java.util.ArrayList<java.lang.String> getStringArrayList(java.lang.String);
  public java.lang.String toString();
public abstract class android.content.Context {
  public android.content.Context();
  public abstract android.content.res.AssetManager getAssets();
  public abstract android.content.res.Resources getResources();
  public abstract android.content.pm.PackageManager getPackageManager();
  public abstract android.content.ContentResolver getContentResolver();
  public abstract android.os.Looper getMainLooper();
  public abstract android.content.Context getApplicationContext();
  public void registerComponentCallbacks(android.content.ComponentCallbacks);
  public void unregisterComponentCallbacks(android.content.ComponentCallbacks);
  public final java.lang.CharSequence getText(int);
  public final java.lang.String getString(int);
  public final java.lang.String getString(int, java.lang.Object...);
  public abstract void setTheme(int);
  public int getThemeResId();
  public abstract android.content.res.Resources$Theme getTheme();
  public final android.content.res.TypedArray obtainStyledAttributes(int[]);
  public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[]);
  public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int);
  public abstract java.lang.ClassLoader getClassLoader();
  public abstract java.lang.String getPackageName();
  public abstract android.content.pm.ApplicationInfo getApplicationInfo();
  public abstract java.lang.String getPackageResourcePath();
  public abstract java.lang.String getPackageCodePath();
  public abstract java.io.File getSharedPrefsFile(java.lang.String);
  public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public abstract boolean deleteFile(java.lang.String);
  public abstract java.io.File getFileStreamPath(java.lang.String);
  public abstract java.io.File getFilesDir();
  public abstract java.io.File getExternalFilesDir(java.lang.String);
  public abstract java.io.File getObbDir();
  public abstract java.io.File getCacheDir();
  public abstract java.io.File getExternalCacheDir();
  public abstract java.lang.String[] fileList();
  public abstract java.io.File getDir(java.lang.String, int);
  public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public abstract boolean deleteDatabase(java.lang.String);
  public abstract java.io.File getDatabasePath(java.lang.String);
  public abstract java.lang.String[] databaseList();
  public abstract android.graphics.drawable.Drawable getWallpaper();
  public abstract android.graphics.drawable.Drawable peekWallpaper();
  public abstract int getWallpaperDesiredMinimumWidth();
  public abstract int getWallpaperDesiredMinimumHeight();
  public abstract void startActivity(android.content.Intent);
  public abstract void startActivities(android.content.Intent[]);
  public abstract void sendBroadcast(android.content.Intent);
  public abstract void sendBroadcast(android.content.Intent, java.lang.String);
  public abstract void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public abstract void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void sendStickyBroadcast(android.content.Intent);
  public abstract void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void removeStickyBroadcast(android.content.Intent);
  public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public abstract void unregisterReceiver(android.content.BroadcastReceiver);
  public abstract android.content.ComponentName startService(android.content.Intent);
  public abstract boolean stopService(android.content.Intent);
  public abstract boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public abstract void unbindService(android.content.ServiceConnection);
  public abstract boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public abstract java.lang.Object getSystemService(java.lang.String);
  public abstract int checkPermission(java.lang.String, int, int);
  public abstract int checkCallingPermission(java.lang.String);
  public abstract int checkCallingOrSelfPermission(java.lang.String);
  public abstract void enforcePermission(java.lang.String, int, int, java.lang.String);
  public abstract void enforceCallingPermission(java.lang.String, java.lang.String);
  public abstract void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public abstract void grantUriPermission(java.lang.String, android.net.Uri, int);
  public abstract void revokeUriPermission(android.net.Uri, int);
  public abstract int checkUriPermission(android.net.Uri, int, int, int);
  public abstract int checkCallingUriPermission(android.net.Uri, int);
  public abstract int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public abstract int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public abstract void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public abstract void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public abstract void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public abstract void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public boolean isRestricted();
public class android.content.ContextWrapper extends android.content.Context {
  public android.content.ContextWrapper(android.content.Context);
  public android.content.Context getBaseContext();
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.pm.PackageManager getPackageManager();
  public android.content.ContentResolver getContentResolver();
  public android.os.Looper getMainLooper();
  public android.content.Context getApplicationContext();
  public void setTheme(int);
  public int getThemeResId();
  public android.content.res.Resources$Theme getTheme();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.String getPackageName();
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public java.lang.String getPackageResourcePath();
  public java.lang.String getPackageCodePath();
  public java.io.File getSharedPrefsFile(java.lang.String);
  public android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public boolean deleteFile(java.lang.String);
  public java.io.File getFileStreamPath(java.lang.String);
  public java.lang.String[] fileList();
  public java.io.File getFilesDir();
  public java.io.File getExternalFilesDir(java.lang.String);
  public java.io.File getObbDir();
  public java.io.File getCacheDir();
  public java.io.File getExternalCacheDir();
  public java.io.File getDir(java.lang.String, int);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public boolean deleteDatabase(java.lang.String);
  public java.io.File getDatabasePath(java.lang.String);
  public java.lang.String[] databaseList();
  public android.graphics.drawable.Drawable getWallpaper();
  public android.graphics.drawable.Drawable peekWallpaper();
  public int getWallpaperDesiredMinimumWidth();
  public int getWallpaperDesiredMinimumHeight();
  public void startActivity(android.content.Intent);
  public void startActivities(android.content.Intent[]);
  public void sendBroadcast(android.content.Intent);
  public void sendBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyBroadcast(android.content.Intent);
  public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void removeStickyBroadcast(android.content.Intent);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ComponentName startService(android.content.Intent);
  public boolean stopService(android.content.Intent);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public void unbindService(android.content.ServiceConnection);
  public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public java.lang.Object getSystemService(java.lang.String);
  public int checkPermission(java.lang.String, int, int);
  public int checkCallingPermission(java.lang.String);
  public int checkCallingOrSelfPermission(java.lang.String);
  public void enforcePermission(java.lang.String, int, int, java.lang.String);
  public void enforceCallingPermission(java.lang.String, java.lang.String);
  public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public void grantUriPermission(java.lang.String, android.net.Uri, int);
  public void revokeUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkCallingUriPermission(android.net.Uri, int);
  public int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public boolean isRestricted();
public abstract class android.content.CursorEntityIterator implements android.content.EntityIterator {
  public android.content.CursorEntityIterator(android.database.Cursor);
  public final boolean hasNext();
  public android.content.Entity next();
  public void remove();
  public final void reset();
  public final void close();
  public java.lang.Object next();
public interface android.content.DialogInterface$OnCancelListener {
  public abstract void onCancel(android.content.DialogInterface);
public interface android.content.DialogInterface$OnClickListener {
  public abstract void onClick(android.content.DialogInterface, int);
public interface android.content.DialogInterface$OnDismissListener {
  public abstract void onDismiss(android.content.DialogInterface);
public interface android.content.DialogInterface$OnKeyListener {
  public abstract boolean onKey(android.content.DialogInterface, int, android.view.KeyEvent);
public interface android.content.DialogInterface$OnMultiChoiceClickListener {
  public abstract void onClick(android.content.DialogInterface, int, boolean);
public interface android.content.DialogInterface$OnShowListener {
  public abstract void onShow(android.content.DialogInterface);
public interface android.content.DialogInterface {
  public abstract void cancel();
  public abstract void dismiss();
public class android.content.Entity$NamedContentValues {
  public android.content.Entity$NamedContentValues(android.net.Uri, android.content.ContentValues);
public final class android.content.Entity {
  public android.content.Entity(android.content.ContentValues);
  public android.content.ContentValues getEntityValues();
  public java.util.ArrayList<android.content.Entity$NamedContentValues> getSubValues();
  public void addSubValue(android.net.Uri, android.content.ContentValues);
  public java.lang.String toString();
public interface android.content.EntityIterator extends java.util.Iterator<android.content.Entity> {
  public abstract void reset();
  public abstract void close();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.IClipboard$Stub extends android.os.Binder implements android.content.IClipboard {
  public android.content.IClipboard$Stub();
  public static android.content.IClipboard asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.IClipboard extends android.os.IInterface {
public interface android.content.IContentProvider extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.IContentService$Stub extends android.os.Binder implements android.content.IContentService {
  public android.content.IContentService$Stub();
  public static android.content.IContentService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.IContentService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.IIntentReceiver$Stub extends android.os.Binder implements android.content.IIntentReceiver {
  public android.content.IIntentReceiver$Stub();
  public static android.content.IIntentReceiver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.IIntentReceiver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.IIntentSender$Stub extends android.os.Binder implements android.content.IIntentSender {
  public android.content.IIntentSender$Stub();
  public static android.content.IIntentSender asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.IIntentSender extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.IOnPrimaryClipChangedListener$Stub extends android.os.Binder implements android.content.IOnPrimaryClipChangedListener {
  public android.content.IOnPrimaryClipChangedListener$Stub();
  public static android.content.IOnPrimaryClipChangedListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.IOnPrimaryClipChangedListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.ISyncAdapter$Stub extends android.os.Binder implements android.content.ISyncAdapter {
  public android.content.ISyncAdapter$Stub();
  public static android.content.ISyncAdapter asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.ISyncAdapter extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.ISyncContext$Stub extends android.os.Binder implements android.content.ISyncContext {
  public android.content.ISyncContext$Stub();
  public static android.content.ISyncContext asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.ISyncContext extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.ISyncStatusObserver$Stub extends android.os.Binder implements android.content.ISyncStatusObserver {
  public android.content.ISyncStatusObserver$Stub();
  public static android.content.ISyncStatusObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.ISyncStatusObserver extends android.os.IInterface {
  public android.content.Intent createFromParcel(android.os.Parcel);
  public android.content.Intent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.Intent$FilterComparison {
  public android.content.Intent$FilterComparison(android.content.Intent);
  public android.content.Intent getIntent();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.content.Intent$ShortcutIconResource createFromParcel(android.os.Parcel);
  public android.content.Intent$ShortcutIconResource[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.Intent$ShortcutIconResource implements android.os.Parcelable {
  public android.content.Intent$ShortcutIconResource();
  public static android.content.Intent$ShortcutIconResource fromContext(android.content.Context, int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public class android.content.Intent implements android.os.Parcelable,java.lang.Cloneable {
  public static android.content.Intent createChooser(android.content.Intent, java.lang.CharSequence);
  public android.content.Intent();
  public android.content.Intent(android.content.Intent);
  public java.lang.Object clone();
  public android.content.Intent cloneFilter();
  public android.content.Intent(java.lang.String);
  public android.content.Intent(java.lang.String, android.net.Uri);
  public android.content.Intent(android.content.Context, java.lang.Class<?>);
  public android.content.Intent(java.lang.String, android.net.Uri, android.content.Context, java.lang.Class<?>);
  public static android.content.Intent makeMainActivity(android.content.ComponentName);
  public static android.content.Intent makeMainSelectorActivity(java.lang.String, java.lang.String);
  public static android.content.Intent makeRestartActivityTask(android.content.ComponentName);
  public java.lang.String getAction();
  public android.net.Uri getData();
  public java.lang.String getDataString();
  public java.lang.String getScheme();
  public java.lang.String getType();
  public java.lang.String resolveType(android.content.Context);
  public java.lang.String resolveType(android.content.ContentResolver);
  public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver);
  public boolean hasCategory(java.lang.String);
  public java.util.Set<java.lang.String> getCategories();
  public android.content.Intent getSelector();
  public void setExtrasClassLoader(java.lang.ClassLoader);
  public boolean hasExtra(java.lang.String);
  public boolean hasFileDescriptors();
  public void setAllowFds(boolean);
  public java.lang.Object getExtra(java.lang.String);
  public boolean getBooleanExtra(java.lang.String, boolean);
  public byte getByteExtra(java.lang.String, byte);
  public short getShortExtra(java.lang.String, short);
  public char getCharExtra(java.lang.String, char);
  public int getIntExtra(java.lang.String, int);
  public long getLongExtra(java.lang.String, long);
  public float getFloatExtra(java.lang.String, float);
  public double getDoubleExtra(java.lang.String, double);
  public java.lang.String getStringExtra(java.lang.String);
  public java.lang.CharSequence getCharSequenceExtra(java.lang.String);
  public <T extends android/os/Parcelable> T getParcelableExtra(java.lang.String);
  public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String);
  public <T extends android/os/Parcelable> java.util.ArrayList<T> getParcelableArrayListExtra(java.lang.String);
  public java.io.Serializable getSerializableExtra(java.lang.String);
  public java.util.ArrayList<java.lang.Integer> getIntegerArrayListExtra(java.lang.String);
  public java.util.ArrayList<java.lang.String> getStringArrayListExtra(java.lang.String);
  public java.util.ArrayList<java.lang.CharSequence> getCharSequenceArrayListExtra(java.lang.String);
  public boolean[] getBooleanArrayExtra(java.lang.String);
  public byte[] getByteArrayExtra(java.lang.String);
  public short[] getShortArrayExtra(java.lang.String);
  public char[] getCharArrayExtra(java.lang.String);
  public int[] getIntArrayExtra(java.lang.String);
  public long[] getLongArrayExtra(java.lang.String);
  public float[] getFloatArrayExtra(java.lang.String);
  public double[] getDoubleArrayExtra(java.lang.String);
  public java.lang.String[] getStringArrayExtra(java.lang.String);
  public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String);
  public android.os.Bundle getBundleExtra(java.lang.String);
  public android.os.IBinder getIBinderExtra(java.lang.String);
  public java.lang.Object getExtra(java.lang.String, java.lang.Object);
  public android.os.Bundle getExtras();
  public int getFlags();
  public boolean isExcludingStopped();
  public java.lang.String getPackage();
  public android.content.ComponentName getComponent();
  public android.graphics.Rect getSourceBounds();
  public android.content.ComponentName resolveActivity(android.content.pm.PackageManager);
  public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager, int);
  public android.content.Intent setAction(java.lang.String);
  public android.content.Intent setData(android.net.Uri);
  public android.content.Intent setType(java.lang.String);
  public android.content.Intent setDataAndType(android.net.Uri, java.lang.String);
  public android.content.Intent addCategory(java.lang.String);
  public void removeCategory(java.lang.String);
  public void setSelector(android.content.Intent);
  public android.content.Intent putExtra(java.lang.String, boolean);
  public android.content.Intent putExtra(java.lang.String, byte);
  public android.content.Intent putExtra(java.lang.String, char);
  public android.content.Intent putExtra(java.lang.String, short);
  public android.content.Intent putExtra(java.lang.String, int);
  public android.content.Intent putExtra(java.lang.String, long);
  public android.content.Intent putExtra(java.lang.String, float);
  public android.content.Intent putExtra(java.lang.String, double);
  public android.content.Intent putExtra(java.lang.String, java.lang.String);
  public android.content.Intent putExtra(java.lang.String, java.lang.CharSequence);
  public android.content.Intent putExtra(java.lang.String, android.os.Parcelable);
  public android.content.Intent putExtra(java.lang.String, android.os.Parcelable[]);
  public android.content.Intent putParcelableArrayListExtra(java.lang.String, java.util.ArrayList<? extends android.os.Parcelable>);
  public android.content.Intent putIntegerArrayListExtra(java.lang.String, java.util.ArrayList<java.lang.Integer>);
  public android.content.Intent putStringArrayListExtra(java.lang.String, java.util.ArrayList<java.lang.String>);
  public android.content.Intent putCharSequenceArrayListExtra(java.lang.String, java.util.ArrayList<java.lang.CharSequence>);
  public android.content.Intent putExtra(java.lang.String, java.io.Serializable);
  public android.content.Intent putExtra(java.lang.String, boolean[]);
  public android.content.Intent putExtra(java.lang.String, byte[]);
  public android.content.Intent putExtra(java.lang.String, short[]);
  public android.content.Intent putExtra(java.lang.String, char[]);
  public android.content.Intent putExtra(java.lang.String, int[]);
  public android.content.Intent putExtra(java.lang.String, long[]);
  public android.content.Intent putExtra(java.lang.String, float[]);
  public android.content.Intent putExtra(java.lang.String, double[]);
  public android.content.Intent putExtra(java.lang.String, java.lang.String[]);
  public android.content.Intent putExtra(java.lang.String, java.lang.CharSequence[]);
  public android.content.Intent putExtra(java.lang.String, android.os.Bundle);
  public android.content.Intent putExtra(java.lang.String, android.os.IBinder);
  public android.content.Intent putExtras(android.content.Intent);
  public android.content.Intent putExtras(android.os.Bundle);
  public android.content.Intent replaceExtras(android.content.Intent);
  public android.content.Intent replaceExtras(android.os.Bundle);
  public void removeExtra(java.lang.String);
  public android.content.Intent setFlags(int);
  public android.content.Intent addFlags(int);
  public android.content.Intent setPackage(java.lang.String);
  public android.content.Intent setComponent(android.content.ComponentName);
  public android.content.Intent setClassName(android.content.Context, java.lang.String);
  public android.content.Intent setClassName(java.lang.String, java.lang.String);
  public android.content.Intent setClass(android.content.Context, java.lang.Class<?>);
  public void setSourceBounds(android.graphics.Rect);
  public int fillIn(android.content.Intent, int);
  public boolean filterEquals(android.content.Intent);
  public int filterHashCode();
  public java.lang.String toString();
  public java.lang.String toInsecureString();
  public java.lang.String toShortString(boolean, boolean, boolean);
  public void toShortString(java.lang.StringBuilder, boolean, boolean, boolean);
  public java.lang.String toURI();
  public java.lang.String toUri(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.content.IntentFilter createFromParcel(android.os.Parcel);
  public android.content.IntentFilter[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.IntentFilter$AuthorityEntry {
  public android.content.IntentFilter$AuthorityEntry(java.lang.String, java.lang.String);
  public java.lang.String getHost();
  public int getPort();
  public int match(android.net.Uri);
public class android.content.IntentFilter$MalformedMimeTypeException extends android.util.AndroidException {
  public android.content.IntentFilter$MalformedMimeTypeException();
  public android.content.IntentFilter$MalformedMimeTypeException(java.lang.String);
public class android.content.IntentFilter implements android.os.Parcelable {
  public static android.content.IntentFilter create(java.lang.String, java.lang.String);
  public android.content.IntentFilter();
  public android.content.IntentFilter(java.lang.String);
  public android.content.IntentFilter(android.content.IntentFilter);
  public final void setPriority(int);
  public final int getPriority();
  public final void addAction(java.lang.String);
  public final int countActions();
  public final java.lang.String getAction(int);
  public final boolean hasAction(java.lang.String);
  public final boolean matchAction(java.lang.String);
  public final java.util.Iterator<java.lang.String> actionsIterator();
  public final boolean hasDataType(java.lang.String);
  public final int countDataTypes();
  public final java.lang.String getDataType(int);
  public final java.util.Iterator<java.lang.String> typesIterator();
  public final void addDataScheme(java.lang.String);
  public final int countDataSchemes();
  public final java.lang.String getDataScheme(int);
  public final boolean hasDataScheme(java.lang.String);
  public final java.util.Iterator<java.lang.String> schemesIterator();
  public final void addDataAuthority(java.lang.String, java.lang.String);
  public final int countDataAuthorities();
  public final android.content.IntentFilter$AuthorityEntry getDataAuthority(int);
  public final boolean hasDataAuthority(android.net.Uri);
  public final java.util.Iterator<android.content.IntentFilter$AuthorityEntry> authoritiesIterator();
  public final void addDataPath(java.lang.String, int);
  public final int countDataPaths();
  public final android.os.PatternMatcher getDataPath(int);
  public final boolean hasDataPath(java.lang.String);
  public final java.util.Iterator<android.os.PatternMatcher> pathsIterator();
  public final int matchDataAuthority(android.net.Uri);
  public final int matchData(java.lang.String, java.lang.String, android.net.Uri);
  public final void addCategory(java.lang.String);
  public final int countCategories();
  public final java.lang.String getCategory(int);
  public final boolean hasCategory(java.lang.String);
  public final java.util.Iterator<java.lang.String> categoriesIterator();
  public final java.lang.String matchCategories(java.util.Set<java.lang.String>);
  public final int match(android.content.ContentResolver, android.content.Intent, boolean, java.lang.String);
  public final int match(java.lang.String, java.lang.String, java.lang.String, android.net.Uri, java.util.Set<java.lang.String>, java.lang.String);
  public void dump(android.util.Printer, java.lang.String);
  public final int describeContents();
  public final void writeToParcel(android.os.Parcel, int);
  public boolean debugCheck();
  public android.content.IntentSender createFromParcel(android.os.Parcel);
  public android.content.IntentSender[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void performReceive(android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean);
  public void run();
public interface android.content.IntentSender$OnFinished {
  public abstract void onSendFinished(android.content.IntentSender, android.content.Intent, int, java.lang.String, android.os.Bundle);
public class android.content.IntentSender$SendIntentException extends android.util.AndroidException {
  public android.content.IntentSender$SendIntentException();
  public android.content.IntentSender$SendIntentException(java.lang.String);
  public android.content.IntentSender$SendIntentException(java.lang.Exception);
public class android.content.IntentSender implements android.os.Parcelable {
  public java.lang.String getTargetPackage();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static void writeIntentSenderOrNullToParcel(android.content.IntentSender, android.os.Parcel);
  public static android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel);
  public android.content.IIntentSender getTarget();
  public android.content.IntentSender(android.content.IIntentSender);
  public android.content.IntentSender(android.os.IBinder);
public final class android.content.Loader$ForceLoadContentObserver extends android.database.ContentObserver {
  public android.content.Loader$ForceLoadContentObserver(android.content.Loader);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
public interface android.content.Loader$OnLoadCompleteListener<D> {
  public abstract void onLoadComplete(android.content.Loader<D>, D);
public class android.content.Loader<D> {
  public android.content.Loader(android.content.Context);
  public void deliverResult(D);
  public android.content.Context getContext();
  public int getId();
  public void registerListener(int, android.content.Loader$OnLoadCompleteListener<D>);
  public void unregisterListener(android.content.Loader$OnLoadCompleteListener<D>);
  public boolean isStarted();
  public boolean isAbandoned();
  public boolean isReset();
  public final void startLoading();
  public void forceLoad();
  public void stopLoading();
  public void abandon();
  public void reset();
  public boolean takeContentChanged();
  public void onContentChanged();
  public java.lang.String dataToString(D);
  public java.lang.String toString();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
public class android.content.OperationApplicationException extends java.lang.Exception {
  public android.content.OperationApplicationException();
  public android.content.OperationApplicationException(java.lang.String);
  public android.content.OperationApplicationException(java.lang.String, java.lang.Throwable);
  public android.content.OperationApplicationException(java.lang.Throwable);
  public android.content.OperationApplicationException(int);
  public android.content.OperationApplicationException(java.lang.String, int);
  public int getNumSuccessfulYieldPoints();
  public android.content.PeriodicSync createFromParcel(android.os.Parcel);
  public android.content.PeriodicSync[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.PeriodicSync implements android.os.Parcelable {
  public android.content.PeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
public class android.content.ReceiverCallNotAllowedException extends android.util.AndroidRuntimeException {
  public android.content.ReceiverCallNotAllowedException(java.lang.String);
  public android.content.SearchRecentSuggestionsProvider$DatabaseHelper(android.content.Context, int);
  public void onCreate(android.database.sqlite.SQLiteDatabase);
  public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);
public class android.content.SearchRecentSuggestionsProvider extends android.content.ContentProvider {
  public android.content.SearchRecentSuggestionsProvider();
  public int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public java.lang.String getType(android.net.Uri);
  public android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public boolean onCreate();
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
public interface android.content.ServiceConnection {
  public abstract void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public abstract void onServiceDisconnected(android.content.ComponentName);
public interface android.content.SharedPreferences$Editor {
  public abstract android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String);
  public abstract android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set<java.lang.String>);
  public abstract android.content.SharedPreferences$Editor putInt(java.lang.String, int);
  public abstract android.content.SharedPreferences$Editor putLong(java.lang.String, long);
  public abstract android.content.SharedPreferences$Editor putFloat(java.lang.String, float);
  public abstract android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean);
  public abstract android.content.SharedPreferences$Editor remove(java.lang.String);
  public abstract android.content.SharedPreferences$Editor clear();
  public abstract boolean commit();
  public abstract void apply();
public interface android.content.SharedPreferences$OnSharedPreferenceChangeListener {
  public abstract void onSharedPreferenceChanged(android.content.SharedPreferences, java.lang.String);
public interface android.content.SharedPreferences {
  public abstract java.util.Map<java.lang.String, ?> getAll();
  public abstract java.lang.String getString(java.lang.String, java.lang.String);
  public abstract java.util.Set<java.lang.String> getStringSet(java.lang.String, java.util.Set<java.lang.String>);
  public abstract int getInt(java.lang.String, int);
  public abstract long getLong(java.lang.String, long);
  public abstract float getFloat(java.lang.String, float);
  public abstract boolean getBoolean(java.lang.String, boolean);
  public abstract boolean contains(java.lang.String);
  public abstract android.content.SharedPreferences$Editor edit();
  public abstract void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
  public abstract void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
public class android.content.SyncActivityTooManyDeletes extends android.app.Activity implements android.widget.AdapterView$OnItemClickListener {
  public android.content.SyncActivityTooManyDeletes();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public android.content.SyncAdapterType createFromParcel(android.os.Parcel);
  public android.content.SyncAdapterType[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.SyncAdapterType implements android.os.Parcelable {
  public android.content.SyncAdapterType(java.lang.String, java.lang.String, boolean, boolean);
  public android.content.SyncAdapterType(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, java.lang.String);
  public boolean supportsUploading();
  public boolean isUserVisible();
  public boolean allowParallelSyncs();
  public boolean isAlwaysSyncable();
  public java.lang.String getSettingsActivity();
  public static android.content.SyncAdapterType newKey(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.SyncAdapterType(android.os.Parcel);
  public android.content.SyncAdapterType parseServiceAttributes(android.content.res.Resources, java.lang.String, android.util.AttributeSet);
  public java.lang.Object parseServiceAttributes(android.content.res.Resources, java.lang.String, android.util.AttributeSet);
  public android.content.SyncInfo createFromParcel(android.os.Parcel);
  public android.content.SyncInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.SyncInfo implements android.os.Parcelable {
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onServiceChanged(android.content.SyncAdapterType, boolean);
  public void onServiceChanged(java.lang.Object, boolean);
  public void onStatusChanged(int);
  public int compare(android.content.SyncManager$AuthoritySyncStats, android.content.SyncManager$AuthoritySyncStats);
  public int compare(java.lang.Object, java.lang.Object);
  public int compare(android.content.SyncManager$AccountSyncStats, android.content.SyncManager$AccountSyncStats);
  public int compare(java.lang.Object, java.lang.Object);
  public android.content.SyncManager$ActiveSyncContext(android.content.SyncManager, android.content.SyncOperation, long, int);
  public void sendHeartbeat();
  public void onFinished(android.content.SyncResult);
  public void toString(java.lang.StringBuilder);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public java.lang.String toString();
  public void binderDied();
  public void run();
  public android.content.SyncManager$InitializerServiceConnection(android.accounts.Account, java.lang.String, android.content.Context, android.os.Handler);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void onReceive(android.content.Context, android.content.Intent);
  public void toString(java.lang.StringBuilder);
  public java.lang.String toString();
  public void onBootCompleted();
  public android.content.SyncManager$SyncHandler(android.content.SyncManager, android.os.Looper);
  public void handleMessage(android.os.Message);
  public long insertStartSyncEvent(android.content.SyncOperation);
  public void stopSyncEvent(long, android.content.SyncOperation, java.lang.String, int, int, long);
  public synchronized void update();
  public synchronized long timeSpentSyncing();
public class android.content.SyncManager implements android.accounts.OnAccountsUpdateListener {
  public void onAccountsUpdated(android.accounts.Account[]);
  public android.content.SyncManager(android.content.Context, boolean);
  public android.content.SyncStorageEngine getSyncStorageEngine();
  public void scheduleSync(android.accounts.Account, java.lang.String, android.os.Bundle, long, boolean);
  public void scheduleLocalSync(android.accounts.Account, java.lang.String);
  public android.content.SyncAdapterType[] getSyncAdapterTypes();
  public void cancelActiveSync(android.accounts.Account, java.lang.String);
  public void scheduleSyncOperation(android.content.SyncOperation);
  public void clearScheduledSyncOperations(android.accounts.Account, java.lang.String);
public class android.content.SyncOperation implements java.lang.Comparable {
  public android.content.SyncOperation(android.accounts.Account, int, java.lang.String, android.os.Bundle, long, long, long, boolean);
  public java.lang.String toString();
  public java.lang.String dump(boolean);
  public boolean isInitialization();
  public boolean ignoreBackoff();
  public static void extrasToStringBuilder(android.os.Bundle, java.lang.StringBuilder);
  public void updateEffectiveRunTime();
  public int compareTo(java.lang.Object);
public class android.content.SyncQueue {
  public android.content.SyncQueue(android.content.SyncStorageEngine, android.content.SyncAdaptersCache);
  public boolean add(android.content.SyncOperation);
  public void remove(android.content.SyncOperation);
  public void onBackoffChanged(android.accounts.Account, java.lang.String, long);
  public void onDelayUntilTimeChanged(android.accounts.Account, java.lang.String, long);
  public void remove(android.accounts.Account, java.lang.String);
  public void dump(java.lang.StringBuilder);
  public android.content.SyncResult createFromParcel(android.os.Parcel);
  public android.content.SyncResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.SyncResult implements android.os.Parcelable {
  public android.content.SyncResult();
  public boolean hasHardError();
  public boolean hasSoftError();
  public boolean hasError();
  public boolean madeSomeProgress();
  public void clear();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public java.lang.String toDebugString();
  public android.content.SyncStats createFromParcel(android.os.Parcel);
  public android.content.SyncStats[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.SyncStats implements android.os.Parcelable {
  public android.content.SyncStats();
  public android.content.SyncStats(android.os.Parcel);
  public java.lang.String toString();
  public void clear();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.SyncStatusInfo createFromParcel(android.os.Parcel);
  public android.content.SyncStatusInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.SyncStatusInfo implements android.os.Parcelable {
  public int getLastFailureMesgAsInt(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void setPeriodicSyncTime(int, long);
  public long getPeriodicSyncTime(int);
  public void removePeriodicSyncTime(int);
public interface android.content.SyncStatusObserver {
  public abstract void onStatusChanged(int);
public class android.content.SyncStorageEngine$AuthorityInfo {
public class android.content.SyncStorageEngine$DayStats {
  public android.content.SyncStorageEngine$DayStats(int);
public class android.content.SyncStorageEngine$PendingOperation {
public class android.content.SyncStorageEngine$SyncHistoryItem {
  public android.content.SyncStorageEngine$SyncHistoryItem();
public class android.content.SyncStorageEngine extends android.os.Handler {
  public static android.content.SyncStorageEngine newTestInstance(android.content.Context);
  public static void init(android.content.Context);
  public static android.content.SyncStorageEngine getSingleton();
  public void handleMessage(android.os.Message);
  public void addStatusChangeListener(int, android.content.ISyncStatusObserver);
  public void removeStatusChangeListener(android.content.ISyncStatusObserver);
  public boolean getSyncAutomatically(android.accounts.Account, java.lang.String);
  public void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean);
  public int getIsSyncable(android.accounts.Account, java.lang.String);
  public void setIsSyncable(android.accounts.Account, java.lang.String, int);
  public android.util.Pair<java.lang.Long, java.lang.Long> getBackoff(android.accounts.Account, java.lang.String);
  public void setBackoff(android.accounts.Account, java.lang.String, long, long);
  public void clearAllBackoffs(android.content.SyncQueue);
  public void setDelayUntilTime(android.accounts.Account, java.lang.String, long);
  public long getDelayUntilTime(android.accounts.Account, java.lang.String);
  public void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public java.util.List<android.content.PeriodicSync> getPeriodicSyncs(android.accounts.Account, java.lang.String);
  public void setMasterSyncAutomatically(boolean);
  public boolean getMasterSyncAutomatically();
  public android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(android.accounts.Account, java.lang.String);
  public void removeAuthority(android.accounts.Account, java.lang.String);
  public android.content.SyncStorageEngine$AuthorityInfo getAuthority(int);
  public boolean isSyncActive(android.accounts.Account, java.lang.String);
  public android.content.SyncStorageEngine$PendingOperation insertIntoPending(android.content.SyncStorageEngine$PendingOperation);
  public boolean deleteFromPending(android.content.SyncStorageEngine$PendingOperation);
  public int clearPending();
  public java.util.ArrayList<android.content.SyncStorageEngine$PendingOperation> getPendingOperations();
  public int getPendingOperationCount();
  public void doDatabaseCleanup(android.accounts.Account[]);
  public android.content.SyncInfo addActiveSync(android.content.SyncManager$ActiveSyncContext);
  public void removeActiveSync(android.content.SyncInfo);
  public void reportActiveChange();
  public long insertStartSyncEvent(android.accounts.Account, java.lang.String, long, int);
  public static boolean equals(android.os.Bundle, android.os.Bundle);
  public void stopSyncEvent(long, long, java.lang.String, long, long);
  public java.util.List<android.content.SyncInfo> getCurrentSyncs();
  public java.util.ArrayList<android.content.SyncStatusInfo> getSyncStatus();
  public java.util.ArrayList<android.content.SyncStorageEngine$AuthorityInfo> getAuthorities();
  public android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account, java.lang.String);
  public boolean isSyncPending(android.accounts.Account, java.lang.String);
  public java.util.ArrayList<android.content.SyncStorageEngine$SyncHistoryItem> getSyncHistory();
  public android.content.SyncStorageEngine$DayStats[] getDayStatistics();
  public long getInitialSyncFailureTime();
  public android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo);
  public void writeAllState();
  public void clearAndReadState();
public class android.content.UriMatcher {
  public android.content.UriMatcher(int);
  public void addURI(java.lang.String, java.lang.String, int);
  public int match(android.net.Uri);
  public android.content.pm.ActivityInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ActivityInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ActivityInfo extends android.content.pm.ComponentInfo implements android.os.Parcelable {
  public static int activityInfoConfigToNative(int);
  public int getRealConfigChanged();
  public android.content.pm.ActivityInfo();
  public android.content.pm.ActivityInfo(android.content.pm.ActivityInfo);
  public final int getThemeResource();
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ApplicationInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ApplicationInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ApplicationInfo$DisplayNameComparator implements java.util.Comparator<android.content.pm.ApplicationInfo> {
  public android.content.pm.ApplicationInfo$DisplayNameComparator(android.content.pm.PackageManager);
  public final int compare(android.content.pm.ApplicationInfo, android.content.pm.ApplicationInfo);
  public int compare(java.lang.Object, java.lang.Object);
public class android.content.pm.ApplicationInfo extends android.content.pm.PackageItemInfo implements android.os.Parcelable {
  public void dump(android.util.Printer, java.lang.String);
  public android.content.pm.ApplicationInfo();
  public android.content.pm.ApplicationInfo(android.content.pm.ApplicationInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public void disableCompatibilityMode();
public class android.content.pm.ComponentInfo extends android.content.pm.PackageItemInfo {
  public android.content.pm.ComponentInfo();
  public android.content.pm.ComponentInfo(android.content.pm.ComponentInfo);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public boolean isEnabled();
  public final int getIconResource();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ConfigurationInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ConfigurationInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ConfigurationInfo implements android.os.Parcelable {
  public android.content.pm.ConfigurationInfo();
  public android.content.pm.ConfigurationInfo(android.content.pm.ConfigurationInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getGlEsVersion();
  public android.content.pm.FeatureInfo createFromParcel(android.os.Parcel);
  public android.content.pm.FeatureInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.FeatureInfo implements android.os.Parcelable {
  public android.content.pm.FeatureInfo();
  public android.content.pm.FeatureInfo(android.content.pm.FeatureInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getGlEsVersion();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageDataObserver$Stub extends android.os.Binder implements android.content.pm.IPackageDataObserver {
  public android.content.pm.IPackageDataObserver$Stub();
  public static android.content.pm.IPackageDataObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageDataObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageDeleteObserver$Stub extends android.os.Binder implements android.content.pm.IPackageDeleteObserver {
  public android.content.pm.IPackageDeleteObserver$Stub();
  public static android.content.pm.IPackageDeleteObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageDeleteObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageInstallObserver$Stub extends android.os.Binder implements android.content.pm.IPackageInstallObserver {
  public android.content.pm.IPackageInstallObserver$Stub();
  public static android.content.pm.IPackageInstallObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageInstallObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageManager$Stub extends android.os.Binder implements android.content.pm.IPackageManager {
  public android.content.pm.IPackageManager$Stub();
  public static android.content.pm.IPackageManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageMoveObserver$Stub extends android.os.Binder implements android.content.pm.IPackageMoveObserver {
  public android.content.pm.IPackageMoveObserver$Stub();
  public static android.content.pm.IPackageMoveObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageMoveObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.content.pm.IPackageStatsObserver$Stub extends android.os.Binder implements android.content.pm.IPackageStatsObserver {
  public android.content.pm.IPackageStatsObserver$Stub();
  public static android.content.pm.IPackageStatsObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.content.pm.IPackageStatsObserver extends android.os.IInterface {
  public android.content.pm.InstrumentationInfo createFromParcel(android.os.Parcel);
  public android.content.pm.InstrumentationInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.InstrumentationInfo extends android.content.pm.PackageItemInfo implements android.os.Parcelable {
  public android.content.pm.InstrumentationInfo();
  public android.content.pm.InstrumentationInfo(android.content.pm.InstrumentationInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ManifestDigest createFromParcel(android.os.Parcel);
  public android.content.pm.ManifestDigest[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ManifestDigest implements android.os.Parcelable {
  public int describeContents();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.PackageInfo createFromParcel(android.os.Parcel);
  public android.content.pm.PackageInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.PackageInfo implements android.os.Parcelable {
  public android.content.pm.PackageInfo();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.content.pm.PackageItemInfo$DisplayNameComparator implements java.util.Comparator<android.content.pm.PackageItemInfo> {
  public android.content.pm.PackageItemInfo$DisplayNameComparator(android.content.pm.PackageManager);
  public final int compare(android.content.pm.PackageItemInfo, android.content.pm.PackageItemInfo);
  public int compare(java.lang.Object, java.lang.Object);
public class android.content.pm.PackageItemInfo {
  public android.content.pm.PackageItemInfo();
  public android.content.pm.PackageItemInfo(android.content.pm.PackageItemInfo);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager);
  public android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
public class android.content.pm.PackageManager$NameNotFoundException extends android.util.AndroidException {
  public android.content.pm.PackageManager$NameNotFoundException();
  public android.content.pm.PackageManager$NameNotFoundException(java.lang.String);
public abstract class android.content.pm.PackageManager {
  public android.content.pm.PackageManager();
  public abstract java.lang.String[] currentToCanonicalPackageNames(java.lang.String[]);
  public abstract java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[]);
  public abstract android.content.Intent getLaunchIntentForPackage(java.lang.String);
  public abstract java.util.List<android.content.pm.PermissionGroupInfo> getAllPermissionGroups(int);
  public abstract java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int);
  public abstract int checkPermission(java.lang.String, java.lang.String);
  public abstract boolean addPermission(android.content.pm.PermissionInfo);
  public abstract boolean addPermissionAsync(android.content.pm.PermissionInfo);
  public abstract void removePermission(java.lang.String);
  public abstract int checkSignatures(java.lang.String, java.lang.String);
  public abstract int checkSignatures(int, int);
  public abstract java.lang.String[] getPackagesForUid(int);
  public abstract java.lang.String getNameForUid(int);
  public abstract java.util.List<android.content.pm.ApplicationInfo> getInstalledApplications(int);
  public abstract java.lang.String[] getSystemSharedLibraryNames();
  public abstract android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
  public abstract boolean hasSystemFeature(java.lang.String);
  public abstract android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int);
  public abstract java.util.List<android.content.pm.ResolveInfo> queryIntentActivities(android.content.Intent, int);
  public abstract java.util.List<android.content.pm.ResolveInfo> queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int);
  public abstract java.util.List<android.content.pm.ResolveInfo> queryBroadcastReceivers(android.content.Intent, int);
  public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent, int);
  public abstract java.util.List<android.content.pm.ResolveInfo> queryIntentServices(android.content.Intent, int);
  public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int);
  public abstract java.util.List<android.content.pm.ProviderInfo> queryContentProviders(java.lang.String, int, int);
  public abstract java.util.List<android.content.pm.InstrumentationInfo> queryInstrumentation(java.lang.String, int);
  public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getDefaultActivityIcon();
  public abstract android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo);
  public abstract java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo);
  public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int);
  public abstract void installPackage(android.net.Uri, android.content.pm.IPackageInstallObserver, int, java.lang.String);
  public abstract void installPackageWithVerification(android.net.Uri, android.content.pm.IPackageInstallObserver, int, java.lang.String, android.net.Uri, android.content.pm.ManifestDigest);
  public abstract void verifyPendingInstall(int, int);
  public abstract void setInstallerPackageName(java.lang.String, java.lang.String);
  public abstract void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver, int);
  public abstract java.lang.String getInstallerPackageName(java.lang.String);
  public abstract void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver);
  public abstract void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver);
  public abstract void freeStorageAndNotify(long, android.content.pm.IPackageDataObserver);
  public abstract void freeStorage(long, android.content.IntentSender);
  public abstract void getPackageSizeInfo(java.lang.String, android.content.pm.IPackageStatsObserver);
  public abstract void addPackageToPreferred(java.lang.String);
  public abstract void removePackageFromPreferred(java.lang.String);
  public abstract java.util.List<android.content.pm.PackageInfo> getPreferredPackages(int);
  public abstract void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public abstract void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public abstract void clearPackagePreferredActivities(java.lang.String);
  public abstract int getPreferredActivities(java.util.List<android.content.IntentFilter>, java.util.List<android.content.ComponentName>, java.lang.String);
  public abstract void setComponentEnabledSetting(android.content.ComponentName, int, int);
  public abstract int getComponentEnabledSetting(android.content.ComponentName);
  public abstract void setApplicationEnabledSetting(java.lang.String, int, int);
  public abstract int getApplicationEnabledSetting(java.lang.String);
  public abstract boolean isSafeMode();
  public abstract void movePackage(java.lang.String, android.content.pm.IPackageMoveObserver, int);
  public abstract android.content.pm.UserInfo createUser(java.lang.String, int);
  public abstract java.util.List<android.content.pm.UserInfo> getUsers();
  public abstract boolean removeUser(int);
  public abstract void updateUserName(int, java.lang.String);
  public abstract void updateUserFlags(int, int);
  public static boolean isSameUser(int, int);
  public static int getUserId(int);
  public static int getUid(int, int);
  public static int getAppId(int);
  public abstract android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity();
public final class android.content.pm.PackageParser$Activity extends android.content.pm.PackageParser$Component<android.content.pm.PackageParser$ActivityIntentInfo> {
  public android.content.pm.PackageParser$Activity(android.content.pm.PackageParser$ParseComponentArgs, android.content.pm.ActivityInfo);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public final class android.content.pm.PackageParser$ActivityIntentInfo extends android.content.pm.PackageParser$IntentInfo {
  public android.content.pm.PackageParser$ActivityIntentInfo(android.content.pm.PackageParser$Activity);
  public java.lang.String toString();
public class android.content.pm.PackageParser$Component<II extends android.content.pm.PackageParser$IntentInfo> {
  public android.content.pm.PackageParser$Component(android.content.pm.PackageParser$Package);
  public android.content.pm.PackageParser$Component(android.content.pm.PackageParser$ParsePackageItemArgs, android.content.pm.PackageItemInfo);
  public android.content.pm.PackageParser$Component(android.content.pm.PackageParser$ParseComponentArgs, android.content.pm.ComponentInfo);
  public android.content.pm.PackageParser$Component(android.content.pm.PackageParser$Component<II>);
  public android.content.ComponentName getComponentName();
  public java.lang.String getComponentShortName();
  public void setPackageName(java.lang.String);
public final class android.content.pm.PackageParser$Instrumentation extends android.content.pm.PackageParser$Component {
  public android.content.pm.PackageParser$Instrumentation(android.content.pm.PackageParser$ParsePackageItemArgs, android.content.pm.InstrumentationInfo);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public class android.content.pm.PackageParser$IntentInfo extends android.content.IntentFilter {
  public android.content.pm.PackageParser$IntentInfo();
public class android.content.pm.PackageParser$NewPermissionInfo {
  public android.content.pm.PackageParser$NewPermissionInfo(java.lang.String, int, int);
public final class android.content.pm.PackageParser$Package {
  public android.content.pm.PackageParser$Package(java.lang.String);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public class android.content.pm.PackageParser$PackageLite {
  public android.content.pm.PackageParser$PackageLite(java.lang.String, int, java.util.List<android.content.pm.VerifierInfo>);
public final class android.content.pm.PackageParser$Permission extends android.content.pm.PackageParser$Component<android.content.pm.PackageParser$IntentInfo> {
  public android.content.pm.PackageParser$Permission(android.content.pm.PackageParser$Package);
  public android.content.pm.PackageParser$Permission(android.content.pm.PackageParser$Package, android.content.pm.PermissionInfo);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public final class android.content.pm.PackageParser$PermissionGroup extends android.content.pm.PackageParser$Component<android.content.pm.PackageParser$IntentInfo> {
  public android.content.pm.PackageParser$PermissionGroup(android.content.pm.PackageParser$Package);
  public android.content.pm.PackageParser$PermissionGroup(android.content.pm.PackageParser$Package, android.content.pm.PermissionGroupInfo);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public final class android.content.pm.PackageParser$Provider extends android.content.pm.PackageParser$Component {
  public android.content.pm.PackageParser$Provider(android.content.pm.PackageParser$ParseComponentArgs, android.content.pm.ProviderInfo);
  public android.content.pm.PackageParser$Provider(android.content.pm.PackageParser$Provider);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public final class android.content.pm.PackageParser$Service extends android.content.pm.PackageParser$Component<android.content.pm.PackageParser$ServiceIntentInfo> {
  public android.content.pm.PackageParser$Service(android.content.pm.PackageParser$ParseComponentArgs, android.content.pm.ServiceInfo);
  public void setPackageName(java.lang.String);
  public java.lang.String toString();
public final class android.content.pm.PackageParser$ServiceIntentInfo extends android.content.pm.PackageParser$IntentInfo {
  public android.content.pm.PackageParser$ServiceIntentInfo(android.content.pm.PackageParser$Service);
  public java.lang.String toString();
public class android.content.pm.PackageParser {
  public android.content.pm.PackageParser(java.lang.String);
  public void setSeparateProcesses(java.lang.String[]);
  public void setOnlyCoreApps(boolean);
  public static android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package, int[], int, long, long);
  public int getParseError();
  public android.content.pm.PackageParser$Package parsePackage(java.io.File, java.lang.String, android.util.DisplayMetrics, int);
  public boolean collectCertificates(android.content.pm.PackageParser$Package, int);
  public static android.content.pm.PackageParser$PackageLite parsePackageLite(java.lang.String, int);
  public static android.content.pm.Signature stringToSignature(java.lang.String);
  public static android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package, int);
  public static final android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.PackageParser$Permission, int);
  public static final android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.PackageParser$PermissionGroup, int);
  public static final android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.PackageParser$Activity, int);
  public static final android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.PackageParser$Service, int);
  public static final android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider, int);
  public static final android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.PackageParser$Instrumentation, int);
  public static void setCompatibilityModeEnabled(boolean);
  public android.content.pm.PackageStats createFromParcel(android.os.Parcel);
  public android.content.pm.PackageStats[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.PackageStats implements android.os.Parcelable {
  public java.lang.String toString();
  public android.content.pm.PackageStats(java.lang.String);
  public android.content.pm.PackageStats(android.os.Parcel);
  public android.content.pm.PackageStats(android.content.pm.PackageStats);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ParceledListSlice createFromParcel(android.os.Parcel);
  public android.content.pm.ParceledListSlice[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ParceledListSlice<T extends android.os.Parcelable> implements android.os.Parcelable {
  public android.content.pm.ParceledListSlice();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean append(T);
  public T populateList(java.util.List<T>, android.os.Parcelable$Creator<T>);
  public void setLastSlice(boolean);
  public boolean isLastSlice();
  public android.content.pm.PathPermission createFromParcel(android.os.Parcel);
  public android.content.pm.PathPermission[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.PathPermission extends android.os.PatternMatcher {
  public android.content.pm.PathPermission(java.lang.String, int, java.lang.String, java.lang.String);
  public java.lang.String getReadPermission();
  public java.lang.String getWritePermission();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.PathPermission(android.os.Parcel);
  public android.content.pm.PermissionGroupInfo createFromParcel(android.os.Parcel);
  public android.content.pm.PermissionGroupInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.PermissionGroupInfo extends android.content.pm.PackageItemInfo implements android.os.Parcelable {
  public android.content.pm.PermissionGroupInfo();
  public android.content.pm.PermissionGroupInfo(android.content.pm.PermissionGroupInfo);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.PermissionInfo createFromParcel(android.os.Parcel);
  public android.content.pm.PermissionInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.PermissionInfo extends android.content.pm.PackageItemInfo implements android.os.Parcelable {
  public android.content.pm.PermissionInfo();
  public android.content.pm.PermissionInfo(android.content.pm.PermissionInfo);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ProviderInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ProviderInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.pm.ProviderInfo extends android.content.pm.ComponentInfo implements android.os.Parcelable {
  public android.content.pm.ProviderInfo();
  public android.content.pm.ProviderInfo(android.content.pm.ProviderInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public void onReceive(android.content.Context, android.content.Intent);
  public void run();
public class android.content.pm.RegisteredServicesCache$ServiceInfo<V> {
  public android.content.pm.RegisteredServicesCache$ServiceInfo(V, android.content.ComponentName, int);
  public java.lang.String toString();
public abstract class android.content.pm.RegisteredServicesCache<V> {
  public android.content.pm.RegisteredServicesCache(android.content.Context, java.lang.String, java.lang.String, java.lang.String, android.content.pm.XmlSerializerAndParser<V>);
  public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public android.content.pm.RegisteredServicesCacheListener<V> getListener();
  public void setListener(android.content.pm.RegisteredServicesCacheListener<V>, android.os.Handler);
  public android.content.pm.RegisteredServicesCache$ServiceInfo<V> getServiceInfo(V);
  public java.util.Collection<android.content.pm.RegisteredServicesCache$ServiceInfo<V>> getAllServices();
  public void close();
  public abstract V parseServiceAttributes(android.content.res.Resources, java.lang.String, android.util.AttributeSet);
public interface android.content.pm.RegisteredServicesCacheListener<V> {
  public abstract void onServiceChanged(V, boolean);
  public android.content.pm.ResolveInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ResolveInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ResolveInfo$DisplayNameComparator implements java.util.Comparator<android.content.pm.ResolveInfo> {
  public android.content.pm.ResolveInfo$DisplayNameComparator(android.content.pm.PackageManager);
  public final int compare(android.content.pm.ResolveInfo, android.content.pm.ResolveInfo);
  public int compare(java.lang.Object, java.lang.Object);
public class android.content.pm.ResolveInfo implements android.os.Parcelable {
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public final int getIconResource();
  public void dump(android.util.Printer, java.lang.String);
  public android.content.pm.ResolveInfo();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ServiceInfo createFromParcel(android.os.Parcel);
  public android.content.pm.ServiceInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.ServiceInfo extends android.content.pm.ComponentInfo implements android.os.Parcelable {
  public android.content.pm.ServiceInfo();
  public android.content.pm.ServiceInfo(android.content.pm.ServiceInfo);
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.Signature createFromParcel(android.os.Parcel);
  public android.content.pm.Signature[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.Signature implements android.os.Parcelable {
  public android.content.pm.Signature(byte[]);
  public android.content.pm.Signature(java.lang.String);
  public char[] toChars();
  public char[] toChars(char[], int[]);
  public java.lang.String toCharsString();
  public byte[] toByteArray();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.UserInfo createFromParcel(android.os.Parcel);
  public android.content.pm.UserInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.UserInfo implements android.os.Parcelable {
  public android.content.pm.UserInfo(int, java.lang.String, int);
  public boolean isPrimary();
  public boolean isAdmin();
  public boolean isGuest();
  public android.content.pm.UserInfo();
  public android.content.pm.UserInfo(android.content.pm.UserInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.VerifierDeviceIdentity createFromParcel(android.os.Parcel);
  public android.content.pm.VerifierDeviceIdentity[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.VerifierDeviceIdentity implements android.os.Parcelable {
  public android.content.pm.VerifierDeviceIdentity(long);
  public static android.content.pm.VerifierDeviceIdentity generate();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.VerifierInfo createFromParcel(android.os.Parcel);
  public android.content.pm.VerifierInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.pm.VerifierInfo implements android.os.Parcelable {
  public android.content.pm.VerifierInfo(java.lang.String, java.security.PublicKey);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.content.pm.XmlSerializerAndParser<T> {
  public android.content.res.AssetFileDescriptor createFromParcel(android.os.Parcel);
  public android.content.res.AssetFileDescriptor[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.res.AssetFileDescriptor$AutoCloseInputStream extends android.os.ParcelFileDescriptor$AutoCloseInputStream {
  public void mark(int);
  public boolean markSupported();
public class android.content.res.AssetFileDescriptor$AutoCloseOutputStream extends android.os.ParcelFileDescriptor$AutoCloseOutputStream {
public class android.content.res.AssetFileDescriptor implements android.os.Parcelable {
  public android.content.res.AssetFileDescriptor(android.os.ParcelFileDescriptor, long, long);
  public android.os.ParcelFileDescriptor getParcelFileDescriptor();
  public java.io.FileDescriptor getFileDescriptor();
  public long getStartOffset();
  public long getLength();
  public long getDeclaredLength();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class android.content.res.AssetManager$AssetInputStream extends java.io.InputStream {
  public final int getAssetInt();
  public final boolean markSupported();
  public final void mark(int);
public final class android.content.res.AssetManager {
  public android.content.res.AssetManager();
  public static android.content.res.AssetManager getSystem();
  public void close();
  public final native int addAssetPath(java.lang.String);
  public final int[] addAssetPaths(java.lang.String[]);
  public final native boolean isUpToDate();
  public final native void setLocale(java.lang.String);
  public final native java.lang.String[] getLocales();
  public final native void setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
  public final native java.lang.String getCookieName(int);
  public static final native int getGlobalAssetCount();
  public static final native java.lang.String getAssetAllocations();
  public static final native int getGlobalAssetManagerCount();
  public android.content.res.ColorStateList[] newArray(int);
  public android.content.res.ColorStateList createFromParcel(android.os.Parcel);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.res.ColorStateList implements android.os.Parcelable {
  public android.content.res.ColorStateList(int[][], int[]);
  public static android.content.res.ColorStateList valueOf(int);
  public android.content.res.ColorStateList withAlpha(int);
  public boolean isStateful();
  public int getColorForState(int[], int);
  public int getDefaultColor();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.CompatibilityInfo createFromParcel(android.os.Parcel);
  public android.content.res.CompatibilityInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.content.res.CompatibilityInfo$Translator {
  public void translateRectInScreenToAppWinFrame(android.graphics.Rect);
  public void translateRegionInWindowToScreen(android.graphics.Region);
  public void translateCanvas(android.graphics.Canvas);
  public void translateEventInScreenToAppWindow(android.view.MotionEvent);
  public void translateWindowLayout(android.view.WindowManager$LayoutParams);
  public void translateRectInAppWindowToScreen(android.graphics.Rect);
  public void translateRectInScreenToAppWindow(android.graphics.Rect);
  public void translatePointInScreenToAppWindow(android.graphics.PointF);
  public void translateLayoutParamsInAppWindowToScreen(android.view.WindowManager$LayoutParams);
  public android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect);
  public android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect);
  public android.graphics.Region getTranslatedTouchableArea(android.graphics.Region);
public class android.content.res.CompatibilityInfo implements android.os.Parcelable {
  public android.content.res.CompatibilityInfo(android.content.pm.ApplicationInfo, int, int, boolean);
  public boolean isScalingRequired();
  public boolean supportsScreen();
  public boolean neverSupportsScreen();
  public boolean alwaysSupportsScreen();
  public android.content.res.CompatibilityInfo$Translator getTranslator();
  public void applyToDisplayMetrics(android.util.DisplayMetrics);
  public void applyToConfiguration(android.content.res.Configuration);
  public static float computeCompatibleScaling(android.util.DisplayMetrics, android.util.DisplayMetrics);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int hashCode();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.Configuration createFromParcel(android.os.Parcel);
  public android.content.res.Configuration[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.content.res.Configuration implements android.os.Parcelable, java.lang.Comparable<android.content.res.Configuration> {
  public boolean isLayoutSizeAtLeast(int);
  public android.content.res.Configuration();
  public android.content.res.Configuration(android.content.res.Configuration);
  public void setTo(android.content.res.Configuration);
  public java.lang.String toString();
  public void setToDefaults();
  public void makeDefault();
  public int updateFrom(android.content.res.Configuration);
  public int diff(android.content.res.Configuration);
  public static boolean needNewResources(int, int);
  public boolean isOtherSeqNewer(android.content.res.Configuration);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public int compareTo(android.content.res.Configuration);
  public boolean equals(android.content.res.Configuration);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(java.lang.Object);
public class android.content.res.Resources$NotFoundException extends java.lang.RuntimeException {
  public android.content.res.Resources$NotFoundException();
  public android.content.res.Resources$NotFoundException(java.lang.String);
public final class android.content.res.Resources$Theme {
  public void applyStyle(int, boolean);
  public void setTo(android.content.res.Resources$Theme);
  public android.content.res.TypedArray obtainStyledAttributes(int[]);
  public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int);
  public boolean resolveAttribute(int, android.util.TypedValue, boolean);
  public void dump(int, java.lang.String, java.lang.String);
public class android.content.res.Resources {
  public static int selectDefaultTheme(int, int);
  public static int selectSystemTheme(int, int, int, int, int);
  public android.content.res.Resources(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration);
  public android.content.res.Resources(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration, android.content.res.CompatibilityInfo);
  public static android.content.res.Resources getSystem();
  public java.lang.CharSequence getText(int, java.lang.CharSequence);
  public float getFraction(int, int, int);
  public final android.content.res.Resources$Theme newTheme();
  public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet, int[]);
  public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics);
  public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo);
  public static void updateSystemConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo);
  public static void updateSystemConfiguration(android.content.res.Configuration, android.util.DisplayMetrics);
  public android.util.DisplayMetrics getDisplayMetrics();
  public android.content.res.Configuration getConfiguration();
  public android.content.res.CompatibilityInfo getCompatibilityInfo();
  public void setCompatibilityInfo(android.content.res.CompatibilityInfo);
  public int getIdentifier(java.lang.String, java.lang.String, java.lang.String);
  public final android.content.res.AssetManager getAssets();
  public final void flushLayoutCache();
  public final void startPreloading();
  public final void finishPreloading();
  public android.content.res.StringBlock$Height(int);
  public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt);
  public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt, android.text.TextPaint);
  public android.content.res.StringBlock(byte[], boolean);
  public android.content.res.StringBlock(byte[], int, int, boolean);
  public java.lang.CharSequence get(int);
public class android.content.res.TypedArray {
  public int length();
  public int getIndexCount();
  public int getIndex(int);
  public android.content.res.Resources getResources();
  public java.lang.CharSequence getText(int);
  public java.lang.String getString(int);
  public java.lang.String getNonResourceString(int);
  public java.lang.String getNonConfigurationString(int, int);
  public boolean getBoolean(int, boolean);
  public int getInt(int, int);
  public float getFloat(int, float);
  public int getColor(int, int);
  public android.content.res.ColorStateList getColorStateList(int);
  public int getInteger(int, int);
  public float getDimension(int, float);
  public int getDimensionPixelOffset(int, int);
  public int getDimensionPixelSize(int, int);
  public int getLayoutDimension(int, java.lang.String);
  public int getLayoutDimension(int, int);
  public float getFraction(int, int, int, float);
  public int getResourceId(int, int);
  public android.graphics.drawable.Drawable getDrawable(int);
  public java.lang.CharSequence[] getTextArray(int);
  public boolean getValue(int, android.util.TypedValue);
  public boolean hasValue(int);
  public android.util.TypedValue peekValue(int);
  public java.lang.String getPositionDescription();
  public void recycle();
  public java.lang.String toString();
  public boolean getFeature(java.lang.String);
  public java.lang.Object getProperty(java.lang.String);
  public java.lang.String getInputEncoding();
  public java.lang.String getNamespace(java.lang.String);
  public java.lang.String getPositionDescription();
  public int getColumnNumber();
  public int getDepth();
  public java.lang.String getText();
  public int getLineNumber();
  public java.lang.String getPrefix();
  public char[] getTextCharacters(int[]);
  public java.lang.String getNamespace();
  public java.lang.String getName();
  public java.lang.String getAttributeNamespace(int);
  public java.lang.String getAttributeName(int);
  public java.lang.String getAttributePrefix(int);
  public int getAttributeCount();
  public java.lang.String getAttributeValue(int);
  public java.lang.String getAttributeType(int);
  public boolean isAttributeDefault(int);
  public java.lang.String getAttributeValue(java.lang.String, java.lang.String);
  public int getAttributeNameResource(int);
  public int getAttributeListValue(java.lang.String, java.lang.String, java.lang.String[], int);
  public boolean getAttributeBooleanValue(java.lang.String, java.lang.String, boolean);
  public int getAttributeResourceValue(java.lang.String, java.lang.String, int);
  public int getAttributeIntValue(java.lang.String, java.lang.String, int);
  public int getAttributeUnsignedIntValue(java.lang.String, java.lang.String, int);
  public float getAttributeFloatValue(java.lang.String, java.lang.String, float);
  public int getAttributeListValue(int, java.lang.String[], int);
  public boolean getAttributeBooleanValue(int, boolean);
  public int getAttributeResourceValue(int, int);
  public int getAttributeIntValue(int, int);
  public int getAttributeUnsignedIntValue(int, int);
  public float getAttributeFloatValue(int, float);
  public java.lang.String getIdAttribute();
  public java.lang.String getClassAttribute();
  public int getIdAttributeResourceValue(int);
  public int getStyleAttribute();
  public void close();
  public android.content.res.XmlBlock(byte[]);
  public android.content.res.XmlBlock(byte[], int, int);
  public void close();
  public android.content.res.XmlResourceParser newParser();
public interface android.content.res.XmlResourceParser extends org.xmlpull.v1.XmlPullParser,android.util.AttributeSet {
  public abstract void close();
public class android.database.AbstractCursor$SelfContentObserver extends android.database.ContentObserver {
  public android.database.AbstractCursor$SelfContentObserver(android.database.AbstractCursor);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
public abstract class android.database.AbstractCursor implements android.database.CrossProcessCursor {
  public abstract int getCount();
  public abstract java.lang.String[] getColumnNames();
  public abstract java.lang.String getString(int);
  public abstract short getShort(int);
  public abstract int getInt(int);
  public abstract long getLong(int);
  public abstract float getFloat(int);
  public abstract double getDouble(int);
  public abstract boolean isNull(int);
  public int getType(int);
  public byte[] getBlob(int);
  public android.database.CursorWindow getWindow();
  public int getColumnCount();
  public void deactivate();
  public boolean requery();
  public boolean isClosed();
  public void close();
  public boolean onMove(int, int);
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public android.database.AbstractCursor();
  public final int getPosition();
  public final boolean moveToPosition(int);
  public void fillWindow(int, android.database.CursorWindow);
  public final boolean move(int);
  public final boolean moveToFirst();
  public final boolean moveToLast();
  public final boolean moveToNext();
  public final boolean moveToPrevious();
  public final boolean isFirst();
  public final boolean isLast();
  public final boolean isBeforeFirst();
  public final boolean isAfterLast();
  public int getColumnIndex(java.lang.String);
  public int getColumnIndexOrThrow(java.lang.String);
  public java.lang.String getColumnName(int);
  public void registerContentObserver(android.database.ContentObserver);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public android.net.Uri getNotificationUri();
  public boolean getWantsAllOnMoveCalls();
  public void setExtras(android.os.Bundle);
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
public abstract class android.database.AbstractWindowedCursor extends android.database.AbstractCursor {
  public android.database.AbstractWindowedCursor();
  public byte[] getBlob(int);
  public java.lang.String getString(int);
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public short getShort(int);
  public int getInt(int);
  public long getLong(int);
  public float getFloat(int);
  public double getDouble(int);
  public boolean isNull(int);
  public boolean isBlob(int);
  public boolean isString(int);
  public boolean isLong(int);
  public boolean isFloat(int);
  public int getType(int);
  public android.database.CursorWindow getWindow();
  public void setWindow(android.database.CursorWindow);
  public boolean hasWindow();
public abstract class android.database.BulkCursorNative extends android.os.Binder implements android.database.IBulkCursor {
  public android.database.BulkCursorNative();
  public static android.database.IBulkCursor asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
  public android.database.BulkCursorProxy(android.os.IBinder);
  public android.os.IBinder asBinder();
public final class android.database.BulkCursorToCursorAdaptor extends android.database.AbstractWindowedCursor {
  public android.database.BulkCursorToCursorAdaptor();
  public void initialize(android.database.IBulkCursor, int, int, boolean);
  public static int findRowIdColumnIndex(java.lang.String[]);
  public android.database.IContentObserver getObserver();
  public int getCount();
  public boolean onMove(int, int);
  public void deactivate();
  public void close();
  public boolean requery();
  public java.lang.String[] getColumnNames();
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
public final class android.database.CharArrayBuffer {
  public android.database.CharArrayBuffer(int);
  public android.database.CharArrayBuffer(char[]);
public class android.database.ContentObservable extends android.database.Observable<android.database.ContentObserver> {
  public android.database.ContentObservable();
  public void registerObserver(android.database.ContentObserver);
  public void dispatchChange(boolean);
  public void notifyChange(boolean);
  public void registerObserver(java.lang.Object);
  public android.database.ContentObserver$NotificationRunnable(android.database.ContentObserver, boolean);
  public void run();
  public android.database.ContentObserver$Transport(android.database.ContentObserver);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
  public void releaseContentObserver();
public abstract class android.database.ContentObserver {
  public android.database.ContentObserver(android.os.Handler);
  public android.database.IContentObserver getContentObserver();
  public android.database.IContentObserver releaseContentObserver();
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
  public final void dispatchChange(boolean);
public interface android.database.CrossProcessCursor extends android.database.Cursor {
  public abstract android.database.CursorWindow getWindow();
  public abstract void fillWindow(int, android.database.CursorWindow);
  public abstract boolean onMove(int, int);
public class android.database.CrossProcessCursorWrapper extends android.database.CursorWrapper implements android.database.CrossProcessCursor {
  public android.database.CrossProcessCursorWrapper(android.database.Cursor);
  public void fillWindow(int, android.database.CursorWindow);
  public android.database.CursorWindow getWindow();
  public boolean onMove(int, int);
public interface android.database.Cursor {
  public abstract int getCount();
  public abstract int getPosition();
  public abstract boolean move(int);
  public abstract boolean moveToPosition(int);
  public abstract boolean moveToFirst();
  public abstract boolean moveToLast();
  public abstract boolean moveToNext();
  public abstract boolean moveToPrevious();
  public abstract boolean isFirst();
  public abstract boolean isLast();
  public abstract boolean isBeforeFirst();
  public abstract boolean isAfterLast();
  public abstract int getColumnIndex(java.lang.String);
  public abstract java.lang.String getColumnName(int);
  public abstract java.lang.String[] getColumnNames();
  public abstract int getColumnCount();
  public abstract byte[] getBlob(int);
  public abstract java.lang.String getString(int);
  public abstract void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public abstract short getShort(int);
  public abstract int getInt(int);
  public abstract long getLong(int);
  public abstract float getFloat(int);
  public abstract double getDouble(int);
  public abstract int getType(int);
  public abstract boolean isNull(int);
  public abstract void deactivate();
  public abstract boolean requery();
  public abstract void close();
  public abstract boolean isClosed();
  public abstract void registerContentObserver(android.database.ContentObserver);
  public abstract void unregisterContentObserver(android.database.ContentObserver);
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public abstract boolean getWantsAllOnMoveCalls();
  public abstract android.os.Bundle getExtras();
  public abstract android.os.Bundle respond(android.os.Bundle);
public class android.database.CursorIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
  public android.database.CursorIndexOutOfBoundsException(int, int);
  public android.database.CursorIndexOutOfBoundsException(java.lang.String);
public final class android.database.CursorJoiner$Result extends java.lang.Enum<android.database.CursorJoiner$Result> {
  public static android.database.CursorJoiner$Result[] values();
  public static android.database.CursorJoiner$Result valueOf(java.lang.String);
public final class android.database.CursorJoiner implements java.util.Iterator<android.database.CursorJoiner$Result>, java.lang.Iterable<android.database.CursorJoiner$Result> {
  public android.database.CursorJoiner(android.database.Cursor, java.lang.String[], android.database.Cursor, java.lang.String[]);
  public java.util.Iterator<android.database.CursorJoiner$Result> iterator();
  public boolean hasNext();
  public android.database.CursorJoiner$Result next();
  public void remove();
  public java.lang.Object next();
  public android.database.CursorToBulkCursorAdaptor$ContentObserverProxy(android.database.IContentObserver, android.os.IBinder$DeathRecipient);
  public boolean unlinkToDeath(android.os.IBinder$DeathRecipient);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
public final class android.database.CursorToBulkCursorAdaptor extends android.database.BulkCursorNative implements android.os.IBinder$DeathRecipient {
  public android.database.CursorToBulkCursorAdaptor(android.database.Cursor, android.database.IContentObserver, java.lang.String);
  public void binderDied();
  public android.database.CursorWindow getWindow(int);
  public void onMove(int);
  public int count();
  public java.lang.String[] getColumnNames();
  public void deactivate();
  public void close();
  public int requery(android.database.IContentObserver);
  public boolean getWantsAllOnMoveCalls();
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
  public android.database.CursorWindow createFromParcel(android.os.Parcel);
  public android.database.CursorWindow[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.database.CursorWindow extends android.database.sqlite.SQLiteClosable implements android.os.Parcelable {
  public android.database.CursorWindow(java.lang.String);
  public android.database.CursorWindow(boolean);
  public java.lang.String getName();
  public void close();
  public void clear();
  public int getStartPosition();
  public void setStartPosition(int);
  public int getNumRows();
  public boolean setNumColumns(int);
  public boolean allocRow();
  public void freeLastRow();
  public boolean isNull(int, int);
  public boolean isBlob(int, int);
  public boolean isLong(int, int);
  public boolean isFloat(int, int);
  public boolean isString(int, int);
  public int getType(int, int);
  public byte[] getBlob(int, int);
  public java.lang.String getString(int, int);
  public void copyStringToBuffer(int, int, android.database.CharArrayBuffer);
  public long getLong(int, int);
  public double getDouble(int, int);
  public short getShort(int, int);
  public int getInt(int, int);
  public float getFloat(int, int);
  public boolean putBlob(byte[], int, int);
  public boolean putString(java.lang.String, int, int);
  public boolean putLong(long, int, int);
  public boolean putDouble(double, int, int);
  public boolean putNull(int, int);
  public static android.database.CursorWindow newFromParcel(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public class android.database.CursorWindowAllocationException extends java.lang.RuntimeException {
  public android.database.CursorWindowAllocationException(java.lang.String);
public class android.database.CursorWrapper implements android.database.Cursor {
  public android.database.CursorWrapper(android.database.Cursor);
  public android.database.Cursor getWrappedCursor();
  public void close();
  public boolean isClosed();
  public int getCount();
  public void deactivate();
  public boolean moveToFirst();
  public int getColumnCount();
  public int getColumnIndex(java.lang.String);
  public java.lang.String getColumnName(int);
  public java.lang.String[] getColumnNames();
  public double getDouble(int);
  public android.os.Bundle getExtras();
  public float getFloat(int);
  public int getInt(int);
  public long getLong(int);
  public short getShort(int);
  public java.lang.String getString(int);
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public byte[] getBlob(int);
  public boolean getWantsAllOnMoveCalls();
  public boolean isAfterLast();
  public boolean isBeforeFirst();
  public boolean isFirst();
  public boolean isLast();
  public int getType(int);
  public boolean isNull(int);
  public boolean moveToLast();
  public boolean move(int);
  public boolean moveToPosition(int);
  public boolean moveToNext();
  public int getPosition();
  public boolean moveToPrevious();
  public void registerContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public boolean requery();
  public android.os.Bundle respond(android.os.Bundle);
  public void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
public class android.database.DataSetObservable extends android.database.Observable<android.database.DataSetObserver> {
  public android.database.DataSetObservable();
  public void notifyChanged();
  public void notifyInvalidated();
public abstract class android.database.DataSetObserver {
  public android.database.DataSetObserver();
  public void onChanged();
  public void onInvalidated();
public interface android.database.DatabaseErrorHandler {
  public abstract void onCorruption(android.database.sqlite.SQLiteDatabase);
public class android.database.DatabaseUtils$InsertHelper {
  public android.database.DatabaseUtils$InsertHelper(android.database.sqlite.SQLiteDatabase, java.lang.String);
  public int getColumnIndex(java.lang.String);
  public void bind(int, double);
  public void bind(int, float);
  public void bind(int, long);
  public void bind(int, int);
  public void bind(int, boolean);
  public void bindNull(int);
  public void bind(int, byte[]);
  public void bind(int, java.lang.String);
  public long insert(android.content.ContentValues);
  public long execute();
  public void prepareForInsert();
  public void prepareForReplace();
  public long replace(android.content.ContentValues);
  public void close();
public class android.database.DatabaseUtils {
  public android.database.DatabaseUtils();
  public static final void writeExceptionToParcel(android.os.Parcel, java.lang.Exception);
  public static final void readExceptionFromParcel(android.os.Parcel);
  public static void bindObjectToProgram(android.database.sqlite.SQLiteProgram, int, java.lang.Object);
  public static int getTypeOfObject(java.lang.Object);
  public static void cursorFillWindow(android.database.Cursor, int, android.database.CursorWindow);
  public static void appendEscapedSQLString(java.lang.StringBuilder, java.lang.String);
  public static java.lang.String sqlEscapeString(java.lang.String);
  public static final void appendValueToSql(java.lang.StringBuilder, java.lang.Object);
  public static java.lang.String concatenateWhere(java.lang.String, java.lang.String);
  public static java.lang.String getCollationKey(java.lang.String);
  public static java.lang.String getHexCollationKey(java.lang.String);
  public static void dumpCursor(android.database.Cursor);
  public static void dumpCursor(android.database.Cursor, java.io.PrintStream);
  public static void dumpCursor(android.database.Cursor, java.lang.StringBuilder);
  public static java.lang.String dumpCursorToString(android.database.Cursor);
  public static void dumpCurrentRow(android.database.Cursor);
  public static void dumpCurrentRow(android.database.Cursor, java.io.PrintStream);
  public static void dumpCurrentRow(android.database.Cursor, java.lang.StringBuilder);
  public static java.lang.String dumpCurrentRowToString(android.database.Cursor);
  public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorStringToInsertHelper(android.database.Cursor, java.lang.String, android.database.DatabaseUtils$InsertHelper, int);
  public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorDoubleToCursorValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorDoubleToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorRowToContentValues(android.database.Cursor, android.content.ContentValues);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, java.lang.String[]);
  public static long longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static long longForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static void cursorStringToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorLongToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorShortToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorIntToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorFloatToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorDoubleToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void createDbFromSqlStatements(android.content.Context, java.lang.String, int, java.lang.String);
  public static int getSqlStatementType(java.lang.String);
  public static java.lang.String[] appendSelectionArgs(java.lang.String[], java.lang.String[]);
public final class android.database.DefaultDatabaseErrorHandler implements android.database.DatabaseErrorHandler {
  public android.database.DefaultDatabaseErrorHandler();
  public void onCorruption(android.database.sqlite.SQLiteDatabase);
public interface android.database.IBulkCursor extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.database.IContentObserver$Stub extends android.os.Binder implements android.database.IContentObserver {
  public android.database.IContentObserver$Stub();
  public static android.database.IContentObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.database.IContentObserver extends android.os.IInterface {
public class android.database.MatrixCursor$RowBuilder {
  public android.database.MatrixCursor$RowBuilder add(java.lang.Object);
public class android.database.MatrixCursor extends android.database.AbstractCursor {
  public android.database.MatrixCursor(java.lang.String[], int);
  public android.database.MatrixCursor(java.lang.String[]);
  public android.database.MatrixCursor$RowBuilder newRow();
  public void addRow(java.lang.Object[]);
  public void addRow(java.lang.Iterable<?>);
  public int getCount();
  public java.lang.String[] getColumnNames();
  public java.lang.String getString(int);
  public short getShort(int);
  public int getInt(int);
  public long getLong(int);
  public float getFloat(int);
  public double getDouble(int);
  public byte[] getBlob(int);
  public int getType(int);
  public boolean isNull(int);
  public void onChanged();
  public void onInvalidated();
public class android.database.MergeCursor extends android.database.AbstractCursor {
  public android.database.MergeCursor(android.database.Cursor[]);
  public int getCount();
  public boolean onMove(int, int);
  public java.lang.String getString(int);
  public short getShort(int);
  public int getInt(int);
  public long getLong(int);
  public float getFloat(int);
  public double getDouble(int);
  public int getType(int);
  public boolean isNull(int);
  public byte[] getBlob(int);
  public java.lang.String[] getColumnNames();
  public void deactivate();
  public void close();
  public void registerContentObserver(android.database.ContentObserver);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public boolean requery();
public abstract class android.database.Observable<T> {
  public android.database.Observable();
  public void registerObserver(T);
  public void unregisterObserver(T);
  public void unregisterAll();
public class android.database.SQLException extends java.lang.RuntimeException {
  public android.database.SQLException();
  public android.database.SQLException(java.lang.String);
public class android.database.StaleDataException extends java.lang.RuntimeException {
  public android.database.StaleDataException();
  public android.database.StaleDataException(java.lang.String);
  public android.database.sqlite.DatabaseConnectionPool$PoolObj(android.database.sqlite.SQLiteDatabase);
  public java.lang.String toString();
  public java.lang.String toString();
public class android.database.sqlite.DatabaseObjectNotClosedException extends java.lang.RuntimeException {
  public android.database.sqlite.DatabaseObjectNotClosedException();
public class android.database.sqlite.SQLiteAbortException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteAbortException();
  public android.database.sqlite.SQLiteAbortException(java.lang.String);
public abstract class android.database.sqlite.SQLiteClosable {
  public android.database.sqlite.SQLiteClosable();
  public void acquireReference();
  public void releaseReference();
  public void releaseReferenceFromContainer();
  public java.lang.String toString();
public class android.database.sqlite.SQLiteConstraintException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteConstraintException();
  public android.database.sqlite.SQLiteConstraintException(java.lang.String);
public class android.database.sqlite.SQLiteCursor extends android.database.AbstractWindowedCursor {
  public android.database.sqlite.SQLiteCursor(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
  public android.database.sqlite.SQLiteCursor(android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
  public android.database.sqlite.SQLiteDatabase getDatabase();
  public boolean onMove(int, int);
  public int getCount();
  public int getColumnIndex(java.lang.String);
  public java.lang.String[] getColumnNames();
  public void deactivate();
  public void close();
  public boolean requery();
  public void setWindow(android.database.CursorWindow);
  public void setSelectionArguments(java.lang.String[]);
public interface android.database.sqlite.SQLiteCursorDriver {
  public abstract android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String[]);
  public abstract void cursorDeactivated();
  public abstract void cursorRequeried(android.database.Cursor);
  public abstract void cursorClosed();
  public abstract void setBindArguments(java.lang.String[]);
public interface android.database.sqlite.SQLiteDatabase$CursorFactory {
  public abstract android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
public interface android.database.sqlite.SQLiteDatabase$CustomFunction {
  public abstract void callback(java.lang.String[]);
  public java.lang.Thread getOwner();
  public java.lang.String getOwnerDescription();
public class android.database.sqlite.SQLiteDatabase extends android.database.sqlite.SQLiteClosable {
  public static native int releaseMemory();
  public void setLockingEnabled(boolean);
  public void beginTransaction();
  public void beginTransactionNonExclusive();
  public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener);
  public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener);
  public void endTransaction();
  public void setTransactionSuccessful();
  public boolean inTransaction();
  public boolean isDbLockedByCurrentThread();
  public boolean isDbLockedByOtherThreads();
  public boolean yieldIfContended();
  public boolean yieldIfContendedSafely();
  public boolean yieldIfContendedSafely(long);
  public java.util.Map<java.lang.String, java.lang.String> getSyncedTables();
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int);
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory);
  public void close();
  public void addCustomFunction(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CustomFunction);
  public int getVersion();
  public void setVersion(int);
  public long getMaximumSize();
  public long setMaximumSize(long);
  public long getPageSize();
  public void setPageSize(long);
  public void markTableSyncable(java.lang.String, java.lang.String);
  public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String findEditTable(java.lang.String);
  public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor rawQuery(java.lang.String, java.lang.String[]);
  public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String);
  public long insert(java.lang.String, java.lang.String, android.content.ContentValues);
  public long replace(java.lang.String, java.lang.String, android.content.ContentValues);
  public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int);
  public int delete(java.lang.String, java.lang.String, java.lang.String[]);
  public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int);
  public boolean isReadOnly();
  public boolean isOpen();
  public boolean needUpgrade(int);
  public final java.lang.String getPath();
  public void setLocale(java.util.Locale);
  public void setMaxSqlCacheSize(int);
  public boolean enableWriteAheadLogging();
  public void disableWriteAheadLogging();
  public java.util.List<android.util.Pair<java.lang.String, java.lang.String>> getAttachedDbs();
  public boolean isDatabaseIntegrityOk();
public class android.database.sqlite.SQLiteDatabaseCorruptException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteDatabaseCorruptException();
  public android.database.sqlite.SQLiteDatabaseCorruptException(java.lang.String);
public class android.database.sqlite.SQLiteDebug$DbStats {
  public android.database.sqlite.SQLiteDebug$DbStats(java.lang.String, long, long, int, int, int, int);
public class android.database.sqlite.SQLiteDebug$PagerStats {
  public android.database.sqlite.SQLiteDebug$PagerStats();
public final class android.database.sqlite.SQLiteDebug {
  public android.database.sqlite.SQLiteDebug();
  public static final boolean shouldLogSlowQuery(long);
  public static android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo();
  public static native void getPagerStats(android.database.sqlite.SQLiteDebug$PagerStats);
  public static native long getHeapSize();
  public static native long getHeapAllocatedSize();
  public static native long getHeapFreeSize();
  public static native void getHeapDirtyPages(int[]);
  public static int getNumActiveCursorsFinalized();
public class android.database.sqlite.SQLiteDirectCursorDriver implements android.database.sqlite.SQLiteCursorDriver {
  public android.database.sqlite.SQLiteDirectCursorDriver(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String[]);
  public void cursorClosed();
  public void setBindArguments(java.lang.String[]);
  public void cursorDeactivated();
  public void cursorRequeried(android.database.Cursor);
  public java.lang.String toString();
public class android.database.sqlite.SQLiteDiskIOException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteDiskIOException();
  public android.database.sqlite.SQLiteDiskIOException(java.lang.String);
public class android.database.sqlite.SQLiteDoneException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteDoneException();
  public android.database.sqlite.SQLiteDoneException(java.lang.String);
public class android.database.sqlite.SQLiteException extends android.database.SQLException {
  public android.database.sqlite.SQLiteException();
  public android.database.sqlite.SQLiteException(java.lang.String);
public class android.database.sqlite.SQLiteFullException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteFullException();
  public android.database.sqlite.SQLiteFullException(java.lang.String);
public abstract class android.database.sqlite.SQLiteOpenHelper {
  public android.database.sqlite.SQLiteOpenHelper(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int);
  public android.database.sqlite.SQLiteOpenHelper(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler);
  public java.lang.String getDatabaseName();
  public synchronized android.database.sqlite.SQLiteDatabase getWritableDatabase();
  public synchronized android.database.sqlite.SQLiteDatabase getReadableDatabase();
  public synchronized void close();
  public abstract void onCreate(android.database.sqlite.SQLiteDatabase);
  public abstract void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);
  public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int);
  public void onOpen(android.database.sqlite.SQLiteDatabase);
public abstract class android.database.sqlite.SQLiteProgram extends android.database.sqlite.SQLiteClosable {
  public final int getUniqueId();
  public void bindNull(int);
  public void bindLong(int, long);
  public void bindDouble(int, double);
  public void bindString(int, java.lang.String);
  public void bindBlob(int, byte[]);
  public void clearBindings();
  public void close();
  public void bindAllArgsAsStrings(java.lang.String[]);
public class android.database.sqlite.SQLiteQuery extends android.database.sqlite.SQLiteProgram {
  public java.lang.String toString();
  public void close();
public class android.database.sqlite.SQLiteQueryBuilder {
  public android.database.sqlite.SQLiteQueryBuilder();
  public void setDistinct(boolean);
  public java.lang.String getTables();
  public void setTables(java.lang.String);
  public void appendWhere(java.lang.CharSequence);
  public void appendWhereEscapeString(java.lang.String);
  public void setProjectionMap(java.util.Map<java.lang.String, java.lang.String>);
  public void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory);
  public void setStrict(boolean);
  public static java.lang.String buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static void appendColumns(java.lang.StringBuilder, java.lang.String[]);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set<java.lang.String>, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set<java.lang.String>, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String);
  public java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String);
public class android.database.sqlite.SQLiteStatement extends android.database.sqlite.SQLiteProgram {
  public void execute();
  public int executeUpdateDelete();
  public long executeInsert();
  public long simpleQueryForLong();
  public java.lang.String simpleQueryForString();
  public android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor();
public interface android.database.sqlite.SQLiteTransactionListener {
  public abstract void onBegin();
  public abstract void onCommit();
  public abstract void onRollback();
public class android.database.sqlite.SQLiteUnfinalizedObjectsException extends android.database.sqlite.SQLiteException {
  public android.database.sqlite.SQLiteUnfinalizedObjectsException();
  public android.database.sqlite.SQLiteUnfinalizedObjectsException(java.lang.String);
public final class android.database.sqlite.SqliteWrapper {
  public static void checkSQLiteException(android.content.Context, android.database.sqlite.SQLiteException);
  public static android.database.Cursor query(android.content.Context, android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public static boolean requery(android.content.Context, android.database.Cursor);
  public static int update(android.content.Context, android.content.ContentResolver, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public static int delete(android.content.Context, android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String[]);
  public static android.net.Uri insert(android.content.Context, android.content.ContentResolver, android.net.Uri, android.content.ContentValues);
public class android.ddm.DdmHandleAppName extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
  public static void setAppName(java.lang.String);
  public static java.lang.String getAppName();
public class android.ddm.DdmHandleExit extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class android.ddm.DdmHandleHeap extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class android.ddm.DdmHandleHello extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
  public static void sendWAIT(int);
public class android.ddm.DdmHandleNativeHeap extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class android.ddm.DdmHandleProfiling extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class android.ddm.DdmHandleThread extends org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public static void register();
  public void connected();
  public void disconnected();
  public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class android.ddm.DdmRegister {
  public static void registerHandlers();
public class android.drm.mobile1.DrmConstraintInfo {
  public int getCount();
  public java.util.Date getStartDate();
  public java.util.Date getEndDate();
  public long getInterval();
public class android.drm.mobile1.DrmException extends java.lang.Exception {
  public android.drm.mobile1.DrmException(java.lang.String);
  public android.drm.mobile1.DrmRawContent$DrmInputStream(android.drm.mobile1.DrmRawContent, android.drm.mobile1.DrmRights);
  public boolean markSupported();
  public void mark(int);
  public void close();
public class android.drm.mobile1.DrmRawContent {
  public java.lang.String getRightsAddress();
  public int getRawType();
  public java.io.InputStream getContentInputStream(android.drm.mobile1.DrmRights);
  public java.lang.String getContentType();
public class android.drm.mobile1.DrmRights {
  public android.drm.mobile1.DrmRights();
  public android.drm.mobile1.DrmConstraintInfo getConstraint(int);
  public boolean consumeRights(int);
public class android.drm.mobile1.DrmRightsManager {
  public static synchronized android.drm.mobile1.DrmRightsManager getInstance();
  public synchronized android.drm.mobile1.DrmRights queryRights(android.drm.mobile1.DrmRawContent);
  public synchronized java.util.List getRightsList();
  public synchronized void deleteRights(android.drm.mobile1.DrmRights);
  public android.emoji.EmojiFactory$CustomLinkedHashMap(android.emoji.EmojiFactory);
public final class android.emoji.EmojiFactory {
  public java.lang.String name();
  public synchronized android.graphics.Bitmap getBitmapFromAndroidPua(int);
  public synchronized android.graphics.Bitmap getBitmapFromVendorSpecificSjis(char);
  public synchronized android.graphics.Bitmap getBitmapFromVendorSpecificPua(int);
  public int getAndroidPuaFromVendorSpecificSjis(char);
  public int getVendorSpecificSjisFromAndroidPua(int);
  public int getAndroidPuaFromVendorSpecificPua(int);
  public java.lang.String getAndroidPuaFromVendorSpecificPua(java.lang.String);
  public int getVendorSpecificPuaFromAndroidPua(int);
  public java.lang.String getVendorSpecificPuaFromAndroidPua(java.lang.String);
  public static native android.emoji.EmojiFactory newInstance(java.lang.String);
  public static native android.emoji.EmojiFactory newAvailableInstance();
  public int getMinimumAndroidPua();
  public int getMaximumAndroidPua();
public final class android.graphics.AvoidXfermode$Mode extends java.lang.Enum<android.graphics.AvoidXfermode$Mode> {
  public static android.graphics.AvoidXfermode$Mode[] values();
  public static android.graphics.AvoidXfermode$Mode valueOf(java.lang.String);
public class android.graphics.AvoidXfermode extends android.graphics.Xfermode {
  public android.graphics.AvoidXfermode(int, int, android.graphics.AvoidXfermode$Mode);
  public android.graphics.Bitmap createFromParcel(android.os.Parcel);
  public android.graphics.Bitmap[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void finalize();
public final class android.graphics.Bitmap$CompressFormat extends java.lang.Enum<android.graphics.Bitmap$CompressFormat> {
  public static android.graphics.Bitmap$CompressFormat[] values();
  public static android.graphics.Bitmap$CompressFormat valueOf(java.lang.String);
public final class android.graphics.Bitmap$Config extends java.lang.Enum<android.graphics.Bitmap$Config> {
  public static android.graphics.Bitmap$Config[] values();
  public static android.graphics.Bitmap$Config valueOf(java.lang.String);
public final class android.graphics.Bitmap implements android.os.Parcelable {
  public static void setDefaultDensity(int);
  public int getDensity();
  public void setDensity(int);
  public void setNinePatchChunk(byte[]);
  public void recycle();
  public final boolean isRecycled();
  public int getGenerationId();
  public void copyPixelsToBuffer(java.nio.Buffer);
  public void copyPixelsFromBuffer(java.nio.Buffer);
  public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean);
  public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean);
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap);
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int);
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean);
  public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config);
  public byte[] getNinePatchChunk();
  public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream);
  public final boolean isMutable();
  public final int getWidth();
  public final int getHeight();
  public int getScaledWidth(android.graphics.Canvas);
  public int getScaledHeight(android.graphics.Canvas);
  public int getScaledWidth(android.util.DisplayMetrics);
  public int getScaledHeight(android.util.DisplayMetrics);
  public int getScaledWidth(int);
  public int getScaledHeight(int);
  public static int scaleFromDensity(int, int, int);
  public final int getRowBytes();
  public final int getByteCount();
  public final android.graphics.Bitmap$Config getConfig();
  public final boolean hasAlpha();
  public void setHasAlpha(boolean);
  public void eraseColor(int);
  public int getPixel(int, int);
  public void getPixels(int[], int, int, int, int, int, int);
  public void setPixel(int, int, int);
  public void setPixels(int[], int, int, int, int, int, int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap extractAlpha();
  public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[]);
  public boolean sameAs(android.graphics.Bitmap);
  public void prepareToDraw();
public class android.graphics.BitmapFactory$Options {
  public android.graphics.BitmapFactory$Options();
  public void requestCancelDecode();
public class android.graphics.BitmapFactory {
  public android.graphics.BitmapFactory();
  public static android.graphics.Bitmap decodeFile(java.lang.String, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeFile(java.lang.String);
  public static android.graphics.Bitmap decodeResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int);
  public static android.graphics.Bitmap decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeByteArray(byte[], int, int);
  public static android.graphics.Bitmap decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeStream(java.io.InputStream);
  public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor);
  public static void setDefaultConfig(android.graphics.Bitmap$Config);
public class android.graphics.BitmapShader extends android.graphics.Shader {
  public android.graphics.BitmapShader(android.graphics.Bitmap, android.graphics.Shader$TileMode, android.graphics.Shader$TileMode);
public final class android.graphics.BlurMaskFilter$Blur extends java.lang.Enum<android.graphics.BlurMaskFilter$Blur> {
  public static android.graphics.BlurMaskFilter$Blur[] values();
  public static android.graphics.BlurMaskFilter$Blur valueOf(java.lang.String);
public class android.graphics.BlurMaskFilter extends android.graphics.MaskFilter {
  public android.graphics.BlurMaskFilter(float, android.graphics.BlurMaskFilter$Blur);
public class android.graphics.Camera {
  public android.graphics.Camera();
  public native void save();
  public native void restore();
  public native void translate(float, float, float);
  public native void rotateX(float);
  public native void rotateY(float);
  public native void rotateZ(float);
  public native void rotate(float, float, float);
  public native void setLocation(float, float, float);
  public void getMatrix(android.graphics.Matrix);
  public void applyToCanvas(android.graphics.Canvas);
  public native float dotWithNormal(float, float, float);
  public android.graphics.Canvas$CanvasFinalizer(int);
public final class android.graphics.Canvas$EdgeType extends java.lang.Enum<android.graphics.Canvas$EdgeType> {
  public static android.graphics.Canvas$EdgeType[] values();
  public static android.graphics.Canvas$EdgeType valueOf(java.lang.String);
public final class android.graphics.Canvas$VertexMode extends java.lang.Enum<android.graphics.Canvas$VertexMode> {
  public static android.graphics.Canvas$VertexMode[] values();
  public static android.graphics.Canvas$VertexMode valueOf(java.lang.String);
public class android.graphics.Canvas {
  public android.graphics.Canvas();
  public android.graphics.Canvas(android.graphics.Bitmap);
  public boolean isHardwareAccelerated();
  public void setBitmap(android.graphics.Bitmap);
  public void setViewport(int, int);
  public native boolean isOpaque();
  public native int getWidth();
  public native int getHeight();
  public int getDensity();
  public void setDensity(int);
  public void setScreenDensity(int);
  public int getMaximumBitmapWidth();
  public int getMaximumBitmapHeight();
  public native int save();
  public native int save(int);
  public int saveLayer(android.graphics.RectF, android.graphics.Paint, int);
  public int saveLayer(float, float, float, float, android.graphics.Paint, int);
  public int saveLayerAlpha(android.graphics.RectF, int, int);
  public int saveLayerAlpha(float, float, float, float, int, int);
  public native void restore();
  public native int getSaveCount();
  public native void restoreToCount(int);
  public native void translate(float, float);
  public native void scale(float, float);
  public final void scale(float, float, float, float);
  public native void rotate(float);
  public final void rotate(float, float, float);
  public native void skew(float, float);
  public void concat(android.graphics.Matrix);
  public void setMatrix(android.graphics.Matrix);
  public void getMatrix(android.graphics.Matrix);
  public final android.graphics.Matrix getMatrix();
  public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op);
  public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op);
  public native boolean clipRect(android.graphics.RectF);
  public native boolean clipRect(android.graphics.Rect);
  public boolean clipRect(float, float, float, float, android.graphics.Region$Op);
  public native boolean clipRect(float, float, float, float);
  public native boolean clipRect(int, int, int, int);
  public boolean clipPath(android.graphics.Path, android.graphics.Region$Op);
  public boolean clipPath(android.graphics.Path);
  public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op);
  public boolean clipRegion(android.graphics.Region);
  public android.graphics.DrawFilter getDrawFilter();
  public void setDrawFilter(android.graphics.DrawFilter);
  public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType);
  public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType);
  public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType);
  public boolean getClipBounds(android.graphics.Rect);
  public final android.graphics.Rect getClipBounds();
  public void drawRGB(int, int, int);
  public void drawARGB(int, int, int, int);
  public void drawColor(int);
  public void drawColor(int, android.graphics.PorterDuff$Mode);
  public void drawPaint(android.graphics.Paint);
  public native void drawPoints(float[], int, int, android.graphics.Paint);
  public void drawPoints(float[], android.graphics.Paint);
  public native void drawPoint(float, float, android.graphics.Paint);
  public void drawLine(float, float, float, float, android.graphics.Paint);
  public native void drawLines(float[], int, int, android.graphics.Paint);
  public void drawLines(float[], android.graphics.Paint);
  public void drawRect(android.graphics.RectF, android.graphics.Paint);
  public void drawRect(android.graphics.Rect, android.graphics.Paint);
  public void drawRect(float, float, float, float, android.graphics.Paint);
  public void drawOval(android.graphics.RectF, android.graphics.Paint);
  public void drawCircle(float, float, float, android.graphics.Paint);
  public void drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint);
  public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint);
  public void drawPath(android.graphics.Path, android.graphics.Paint);
  public void drawPatch(android.graphics.Bitmap, byte[], android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint);
  public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint);
  public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint);
  public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint);
  public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint);
  public void drawText(char[], int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint);
  public void drawTextRun(char[], int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawPosText(char[], int, int, float[], android.graphics.Paint);
  public void drawPosText(java.lang.String, float[], android.graphics.Paint);
  public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawPicture(android.graphics.Picture);
  public void drawPicture(android.graphics.Picture, android.graphics.RectF);
  public void drawPicture(android.graphics.Picture, android.graphics.Rect);
  public static native void freeCaches();
public class android.graphics.Color {
  public android.graphics.Color();
  public static int alpha(int);
  public static int red(int);
  public static int green(int);
  public static int blue(int);
  public static int rgb(int, int, int);
  public static int argb(int, int, int, int);
  public static float hue(int);
  public static float saturation(int);
  public static float brightness(int);
  public static int parseColor(java.lang.String);
  public static int HSBtoColor(float[]);
  public static int HSBtoColor(float, float, float);
  public static void RGBToHSV(int, int, int, float[]);
  public static void colorToHSV(int, float[]);
  public static int HSVToColor(float[]);
  public static int HSVToColor(int, float[]);
public class android.graphics.ColorFilter {
  public android.graphics.ColorFilter();
public class android.graphics.ColorMatrix {
  public android.graphics.ColorMatrix();
  public android.graphics.ColorMatrix(float[]);
  public android.graphics.ColorMatrix(android.graphics.ColorMatrix);
  public final float[] getArray();
  public void reset();
  public void set(android.graphics.ColorMatrix);
  public void set(float[]);
  public void setScale(float, float, float, float);
  public void setRotate(int, float);
  public void setConcat(android.graphics.ColorMatrix, android.graphics.ColorMatrix);
  public void preConcat(android.graphics.ColorMatrix);
  public void postConcat(android.graphics.ColorMatrix);
  public void setSaturation(float);
  public void setRGB2YUV();
  public void setYUV2RGB();
public class android.graphics.ColorMatrixColorFilter extends android.graphics.ColorFilter {
  public android.graphics.ColorMatrixColorFilter(android.graphics.ColorMatrix);
  public android.graphics.ColorMatrixColorFilter(float[]);
public class android.graphics.ComposeShader extends android.graphics.Shader {
  public android.graphics.ComposeShader(android.graphics.Shader, android.graphics.Shader, android.graphics.Xfermode);
  public android.graphics.ComposeShader(android.graphics.Shader, android.graphics.Shader, android.graphics.PorterDuff$Mode);
public class android.graphics.CornerPathEffect extends android.graphics.PathEffect {
  public android.graphics.CornerPathEffect(float);
public class android.graphics.DashPathEffect extends android.graphics.PathEffect {
  public android.graphics.DashPathEffect(float[], float);
public class android.graphics.DrawFilter {
  public android.graphics.DrawFilter();
public final class android.graphics.Interpolator$Result extends java.lang.Enum<android.graphics.Interpolator$Result> {
  public static android.graphics.Interpolator$Result[] values();
  public static android.graphics.Interpolator$Result valueOf(java.lang.String);
public class android.graphics.Interpolator {
  public android.graphics.Interpolator(int);
  public android.graphics.Interpolator(int, int);
  public void reset(int);
  public void reset(int, int);
  public final int getKeyFrameCount();
  public final int getValueCount();
  public void setKeyFrame(int, int, float[]);
  public void setKeyFrame(int, int, float[], float[]);
  public void setRepeatMirror(float, boolean);
  public android.graphics.Interpolator$Result timeToValues(float[]);
  public android.graphics.Interpolator$Result timeToValues(int, float[]);
public class android.graphics.LinearGradient extends android.graphics.Shader {
  public android.graphics.LinearGradient(float, float, float, float, int[], float[], android.graphics.Shader$TileMode);
  public android.graphics.LinearGradient(float, float, float, float, int, int, android.graphics.Shader$TileMode);
public class android.graphics.MaskFilter {
  public android.graphics.MaskFilter();
public final class android.graphics.Matrix$ScaleToFit extends java.lang.Enum<android.graphics.Matrix$ScaleToFit> {
  public static android.graphics.Matrix$ScaleToFit[] values();
  public static android.graphics.Matrix$ScaleToFit valueOf(java.lang.String);
public class android.graphics.Matrix {
  public android.graphics.Matrix();
  public android.graphics.Matrix(android.graphics.Matrix);
  public boolean isIdentity();
  public boolean rectStaysRect();
  public void set(android.graphics.Matrix);
  public boolean equals(java.lang.Object);
  public void reset();
  public void setTranslate(float, float);
  public void setScale(float, float, float, float);
  public void setScale(float, float);
  public void setRotate(float, float, float);
  public void setRotate(float);
  public void setSinCos(float, float, float, float);
  public void setSinCos(float, float);
  public void setSkew(float, float, float, float);
  public void setSkew(float, float);
  public boolean setConcat(android.graphics.Matrix, android.graphics.Matrix);
  public boolean preTranslate(float, float);
  public boolean preScale(float, float, float, float);
  public boolean preScale(float, float);
  public boolean preRotate(float, float, float);
  public boolean preRotate(float);
  public boolean preSkew(float, float, float, float);
  public boolean preSkew(float, float);
  public boolean preConcat(android.graphics.Matrix);
  public boolean postTranslate(float, float);
  public boolean postScale(float, float, float, float);
  public boolean postScale(float, float);
  public boolean postRotate(float, float, float);
  public boolean postRotate(float);
  public boolean postSkew(float, float, float, float);
  public boolean postSkew(float, float);
  public boolean postConcat(android.graphics.Matrix);
  public boolean setRectToRect(android.graphics.RectF, android.graphics.RectF, android.graphics.Matrix$ScaleToFit);
  public boolean setPolyToPoly(float[], int, float[], int, int);
  public boolean invert(android.graphics.Matrix);
  public void mapPoints(float[], int, float[], int, int);
  public void mapVectors(float[], int, float[], int, int);
  public void mapPoints(float[], float[]);
  public void mapVectors(float[], float[]);
  public void mapPoints(float[]);
  public void mapVectors(float[]);
  public boolean mapRect(android.graphics.RectF, android.graphics.RectF);
  public boolean mapRect(android.graphics.RectF);
  public float mapRadius(float);
  public void getValues(float[]);
  public void setValues(float[]);
  public java.lang.String toString();
  public java.lang.String toShortString();
  public void toShortString(java.lang.StringBuilder);
  public void printShortString(java.io.PrintWriter);
public class android.graphics.Movie {
  public native int width();
  public native int height();
  public native boolean isOpaque();
  public native int duration();
  public native boolean setTime(int);
  public native void draw(android.graphics.Canvas, float, float, android.graphics.Paint);
  public void draw(android.graphics.Canvas, float, float);
  public static native android.graphics.Movie decodeStream(java.io.InputStream);
  public static native android.graphics.Movie decodeByteArray(byte[], int, int);
  public static android.graphics.Movie decodeFile(java.lang.String);
public class android.graphics.NinePatch {
  public android.graphics.NinePatch(android.graphics.Bitmap, byte[], java.lang.String);
  public android.graphics.NinePatch(android.graphics.NinePatch);
  public void setPaint(android.graphics.Paint);
  public void draw(android.graphics.Canvas, android.graphics.RectF);
  public void draw(android.graphics.Canvas, android.graphics.Rect);
  public void draw(android.graphics.Canvas, android.graphics.Rect, android.graphics.Paint);
  public int getDensity();
  public int getWidth();
  public int getHeight();
  public final boolean hasAlpha();
  public final android.graphics.Region getTransparentRegion(android.graphics.Rect);
  public static native boolean isNinePatchChunk(byte[]);
public final class android.graphics.Paint$Align extends java.lang.Enum<android.graphics.Paint$Align> {
  public static android.graphics.Paint$Align[] values();
  public static android.graphics.Paint$Align valueOf(java.lang.String);
public final class android.graphics.Paint$Cap extends java.lang.Enum<android.graphics.Paint$Cap> {
  public static android.graphics.Paint$Cap[] values();
  public static android.graphics.Paint$Cap valueOf(java.lang.String);
public class android.graphics.Paint$FontMetrics {
  public android.graphics.Paint$FontMetrics();
public class android.graphics.Paint$FontMetricsInt {
  public android.graphics.Paint$FontMetricsInt();
  public java.lang.String toString();
public final class android.graphics.Paint$Join extends java.lang.Enum<android.graphics.Paint$Join> {
  public static android.graphics.Paint$Join[] values();
  public static android.graphics.Paint$Join valueOf(java.lang.String);
public final class android.graphics.Paint$Style extends java.lang.Enum<android.graphics.Paint$Style> {
  public static android.graphics.Paint$Style[] values();
  public static android.graphics.Paint$Style valueOf(java.lang.String);
public class android.graphics.Paint {
  public android.graphics.Paint();
  public android.graphics.Paint(int);
  public android.graphics.Paint(android.graphics.Paint);
  public void reset();
  public void set(android.graphics.Paint);
  public void setCompatibilityScaling(float);
  public int getBidiFlags();
  public void setBidiFlags(int);
  public native int getFlags();
  public native void setFlags(int);
  public native int getHinting();
  public native void setHinting(int);
  public final boolean isAntiAlias();
  public native void setAntiAlias(boolean);
  public final boolean isDither();
  public native void setDither(boolean);
  public final boolean isLinearText();
  public native void setLinearText(boolean);
  public final boolean isSubpixelText();
  public native void setSubpixelText(boolean);
  public final boolean isUnderlineText();
  public native void setUnderlineText(boolean);
  public final boolean isStrikeThruText();
  public native void setStrikeThruText(boolean);
  public final boolean isFakeBoldText();
  public native void setFakeBoldText(boolean);
  public final boolean isFilterBitmap();
  public native void setFilterBitmap(boolean);
  public android.graphics.Paint$Style getStyle();
  public void setStyle(android.graphics.Paint$Style);
  public native int getColor();
  public native void setColor(int);
  public native int getAlpha();
  public native void setAlpha(int);
  public void setARGB(int, int, int, int);
  public native float getStrokeWidth();
  public native void setStrokeWidth(float);
  public native float getStrokeMiter();
  public native void setStrokeMiter(float);
  public android.graphics.Paint$Cap getStrokeCap();
  public void setStrokeCap(android.graphics.Paint$Cap);
  public android.graphics.Paint$Join getStrokeJoin();
  public void setStrokeJoin(android.graphics.Paint$Join);
  public boolean getFillPath(android.graphics.Path, android.graphics.Path);
  public android.graphics.Shader getShader();
  public android.graphics.Shader setShader(android.graphics.Shader);
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter);
  public android.graphics.Xfermode getXfermode();
  public android.graphics.Xfermode setXfermode(android.graphics.Xfermode);
  public android.graphics.PathEffect getPathEffect();
  public android.graphics.PathEffect setPathEffect(android.graphics.PathEffect);
  public android.graphics.MaskFilter getMaskFilter();
  public android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter);
  public android.graphics.Typeface getTypeface();
  public android.graphics.Typeface setTypeface(android.graphics.Typeface);
  public android.graphics.Rasterizer getRasterizer();
  public android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer);
  public void setShadowLayer(float, float, float, int);
  public void clearShadowLayer();
  public android.graphics.Paint$Align getTextAlign();
  public void setTextAlign(android.graphics.Paint$Align);
  public native float getTextSize();
  public native void setTextSize(float);
  public native float getTextScaleX();
  public native void setTextScaleX(float);
  public native float getTextSkewX();
  public native void setTextSkewX(float);
  public native float ascent();
  public native float descent();
  public native float getFontMetrics(android.graphics.Paint$FontMetrics);
  public android.graphics.Paint$FontMetrics getFontMetrics();
  public native int getFontMetricsInt(android.graphics.Paint$FontMetricsInt);
  public android.graphics.Paint$FontMetricsInt getFontMetricsInt();
  public float getFontSpacing();
  public float measureText(char[], int, int);
  public float measureText(java.lang.String, int, int);
  public float measureText(java.lang.String);
  public float measureText(java.lang.CharSequence, int, int);
  public int breakText(char[], int, int, float, float[]);
  public int breakText(java.lang.CharSequence, int, int, boolean, float, float[]);
  public int breakText(java.lang.String, boolean, float, float[]);
  public int getTextWidths(char[], int, int, float[]);
  public int getTextWidths(java.lang.CharSequence, int, int, float[]);
  public int getTextWidths(java.lang.String, int, int, float[]);
  public int getTextWidths(java.lang.String, float[]);
  public int getTextGlyphs(java.lang.String, int, int, int, int, int, char[]);
  public float getTextRunAdvances(char[], int, int, int, int, int, float[], int);
  public float getTextRunAdvances(char[], int, int, int, int, int, float[], int, int);
  public float getTextRunAdvances(java.lang.CharSequence, int, int, int, int, int, float[], int);
  public float getTextRunAdvances(java.lang.CharSequence, int, int, int, int, int, float[], int, int);
  public float getTextRunAdvances(java.lang.String, int, int, int, int, int, float[], int);
  public float getTextRunAdvances(java.lang.String, int, int, int, int, int, float[], int, int);
  public int getTextRunCursor(char[], int, int, int, int, int);
  public int getTextRunCursor(java.lang.CharSequence, int, int, int, int, int);
  public int getTextRunCursor(java.lang.String, int, int, int, int, int);
  public void getTextPath(char[], int, int, float, float, android.graphics.Path);
  public void getTextPath(java.lang.String, int, int, float, float, android.graphics.Path);
  public void getTextBounds(java.lang.String, int, int, android.graphics.Rect);
  public void getTextBounds(char[], int, int, android.graphics.Rect);
public class android.graphics.PaintFlagsDrawFilter extends android.graphics.DrawFilter {
  public android.graphics.PaintFlagsDrawFilter(int, int);
public final class android.graphics.Path$Direction extends java.lang.Enum<android.graphics.Path$Direction> {
  public static android.graphics.Path$Direction[] values();
  public static android.graphics.Path$Direction valueOf(java.lang.String);
public final class android.graphics.Path$FillType extends java.lang.Enum<android.graphics.Path$FillType> {
  public static android.graphics.Path$FillType[] values();
  public static android.graphics.Path$FillType valueOf(java.lang.String);
public class android.graphics.Path {
  public android.graphics.Path();
  public android.graphics.Path(android.graphics.Path);
  public void reset();
  public void rewind();
  public void set(android.graphics.Path);
  public android.graphics.Path$FillType getFillType();
  public void setFillType(android.graphics.Path$FillType);
  public boolean isInverseFillType();
  public void toggleInverseFillType();
  public boolean isEmpty();
  public boolean isRect(android.graphics.RectF);
  public void computeBounds(android.graphics.RectF, boolean);
  public void incReserve(int);
  public void moveTo(float, float);
  public void rMoveTo(float, float);
  public void lineTo(float, float);
  public void rLineTo(float, float);
  public void quadTo(float, float, float, float);
  public void rQuadTo(float, float, float, float);
  public void cubicTo(float, float, float, float, float, float);
  public void rCubicTo(float, float, float, float, float, float);
  public void arcTo(android.graphics.RectF, float, float, boolean);
  public void arcTo(android.graphics.RectF, float, float);
  public void close();
  public void addRect(android.graphics.RectF, android.graphics.Path$Direction);
  public void addRect(float, float, float, float, android.graphics.Path$Direction);
  public void addOval(android.graphics.RectF, android.graphics.Path$Direction);
  public void addCircle(float, float, float, android.graphics.Path$Direction);
  public void addArc(android.graphics.RectF, float, float);
  public void addRoundRect(android.graphics.RectF, float, float, android.graphics.Path$Direction);
  public void addRoundRect(android.graphics.RectF, float[], android.graphics.Path$Direction);
  public void addPath(android.graphics.Path, float, float);
  public void addPath(android.graphics.Path);
  public void addPath(android.graphics.Path, android.graphics.Matrix);
  public void offset(float, float, android.graphics.Path);
  public void offset(float, float);
  public void setLastPoint(float, float);
  public void transform(android.graphics.Matrix, android.graphics.Path);
  public void transform(android.graphics.Matrix);
public final class android.graphics.PathDashPathEffect$Style extends java.lang.Enum<android.graphics.PathDashPathEffect$Style> {
  public static android.graphics.PathDashPathEffect$Style[] values();
  public static android.graphics.PathDashPathEffect$Style valueOf(java.lang.String);
public class android.graphics.PathDashPathEffect extends android.graphics.PathEffect {
  public android.graphics.PathDashPathEffect(android.graphics.Path, float, float, android.graphics.PathDashPathEffect$Style);
public class android.graphics.PathEffect {
  public android.graphics.PathEffect();
  public android.graphics.Picture$RecordingCanvas(android.graphics.Picture, int);
  public void setBitmap(android.graphics.Bitmap);
  public void drawPicture(android.graphics.Picture);
public class android.graphics.Picture {
  public android.graphics.Picture();
  public android.graphics.Picture(android.graphics.Picture);
  public android.graphics.Canvas beginRecording(int, int);
  public void endRecording();
  public native int getWidth();
  public native int getHeight();
  public void draw(android.graphics.Canvas);
  public static android.graphics.Picture createFromStream(java.io.InputStream);
  public void writeToStream(java.io.OutputStream);
public class android.graphics.PixelFormat {
  public android.graphics.PixelFormat();
  public static native void getPixelFormatInfo(int, android.graphics.PixelFormat);
  public static boolean formatHasAlpha(int);
public class android.graphics.PixelXorXfermode extends android.graphics.Xfermode {
  public android.graphics.PixelXorXfermode(int);
  public android.graphics.Point createFromParcel(android.os.Parcel);
  public android.graphics.Point[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.graphics.Point implements android.os.Parcelable {
  public android.graphics.Point();
  public android.graphics.Point(int, int);
  public android.graphics.Point(android.graphics.Point);
  public void set(int, int);
  public final void negate();
  public final void offset(int, int);
  public final boolean equals(int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.graphics.PointF createFromParcel(android.os.Parcel);
  public android.graphics.PointF[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.graphics.PointF implements android.os.Parcelable {
  public android.graphics.PointF();
  public android.graphics.PointF(float, float);
  public android.graphics.PointF(android.graphics.Point);
  public final void set(float, float);
  public final void set(android.graphics.PointF);
  public final void negate();
  public final void offset(float, float);
  public final boolean equals(float, float);
  public final float length();
  public static float length(float, float);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
public final class android.graphics.PorterDuff$Mode extends java.lang.Enum<android.graphics.PorterDuff$Mode> {
  public static android.graphics.PorterDuff$Mode[] values();
  public static android.graphics.PorterDuff$Mode valueOf(java.lang.String);
public class android.graphics.PorterDuff {
  public android.graphics.PorterDuff();
public class android.graphics.PorterDuffColorFilter extends android.graphics.ColorFilter {
  public android.graphics.PorterDuffColorFilter(int, android.graphics.PorterDuff$Mode);
public class android.graphics.PorterDuffXfermode extends android.graphics.Xfermode {
  public android.graphics.PorterDuffXfermode(android.graphics.PorterDuff$Mode);
public class android.graphics.RadialGradient extends android.graphics.Shader {
  public android.graphics.RadialGradient(float, float, float, int[], float[], android.graphics.Shader$TileMode);
  public android.graphics.RadialGradient(float, float, float, int, int, android.graphics.Shader$TileMode);
public class android.graphics.Rasterizer {
  public android.graphics.Rasterizer();
  public android.graphics.Rect createFromParcel(android.os.Parcel);
  public android.graphics.Rect[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.graphics.Rect implements android.os.Parcelable {
  public android.graphics.Rect();
  public android.graphics.Rect(int, int, int, int);
  public android.graphics.Rect(android.graphics.Rect);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.String toShortString();
  public java.lang.String toShortString(java.lang.StringBuilder);
  public java.lang.String flattenToString();
  public static android.graphics.Rect unflattenFromString(java.lang.String);
  public void printShortString(java.io.PrintWriter);
  public final boolean isEmpty();
  public final int width();
  public final int height();
  public final int centerX();
  public final int centerY();
  public final float exactCenterX();
  public final float exactCenterY();
  public void setEmpty();
  public void set(int, int, int, int);
  public void set(android.graphics.Rect);
  public void offset(int, int);
  public void offsetTo(int, int);
  public void inset(int, int);
  public boolean contains(int, int);
  public boolean contains(int, int, int, int);
  public boolean contains(android.graphics.Rect);
  public boolean intersect(int, int, int, int);
  public boolean intersect(android.graphics.Rect);
  public boolean setIntersect(android.graphics.Rect, android.graphics.Rect);
  public boolean intersects(int, int, int, int);
  public static boolean intersects(android.graphics.Rect, android.graphics.Rect);
  public void union(int, int, int, int);
  public void union(android.graphics.Rect);
  public void union(int, int);
  public void sort();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public void scale(float);
  public android.graphics.RectF createFromParcel(android.os.Parcel);
  public android.graphics.RectF[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.graphics.RectF implements android.os.Parcelable {
  public android.graphics.RectF();
  public android.graphics.RectF(float, float, float, float);
  public android.graphics.RectF(android.graphics.RectF);
  public android.graphics.RectF(android.graphics.Rect);
  public java.lang.String toString();
  public java.lang.String toShortString();
  public java.lang.String toShortString(java.lang.StringBuilder);
  public void printShortString(java.io.PrintWriter);
  public final boolean isEmpty();
  public final float width();
  public final float height();
  public final float centerX();
  public final float centerY();
  public void setEmpty();
  public void set(float, float, float, float);
  public void set(android.graphics.RectF);
  public void set(android.graphics.Rect);
  public void offset(float, float);
  public void offsetTo(float, float);
  public void inset(float, float);
  public boolean contains(float, float);
  public boolean contains(float, float, float, float);
  public boolean contains(android.graphics.RectF);
  public boolean intersect(float, float, float, float);
  public boolean intersect(android.graphics.RectF);
  public boolean setIntersect(android.graphics.RectF, android.graphics.RectF);
  public boolean intersects(float, float, float, float);
  public static boolean intersects(android.graphics.RectF, android.graphics.RectF);
  public void round(android.graphics.Rect);
  public void roundOut(android.graphics.Rect);
  public void union(float, float, float, float);
  public void union(android.graphics.RectF);
  public void union(float, float);
  public void sort();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.graphics.Region createFromParcel(android.os.Parcel);
  public android.graphics.Region[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.graphics.Region$Op extends java.lang.Enum<android.graphics.Region$Op> {
  public static android.graphics.Region$Op[] values();
  public static android.graphics.Region$Op valueOf(java.lang.String);
public class android.graphics.Region implements android.os.Parcelable {
  public android.graphics.Region();
  public android.graphics.Region(android.graphics.Region);
  public android.graphics.Region(android.graphics.Rect);
  public android.graphics.Region(int, int, int, int);
  public void setEmpty();
  public boolean set(android.graphics.Region);
  public boolean set(android.graphics.Rect);
  public boolean set(int, int, int, int);
  public boolean setPath(android.graphics.Path, android.graphics.Region);
  public native boolean isEmpty();
  public native boolean isRect();
  public native boolean isComplex();
  public android.graphics.Rect getBounds();
  public boolean getBounds(android.graphics.Rect);
  public android.graphics.Path getBoundaryPath();
  public boolean getBoundaryPath(android.graphics.Path);
  public native boolean contains(int, int);
  public boolean quickContains(android.graphics.Rect);
  public native boolean quickContains(int, int, int, int);
  public boolean quickReject(android.graphics.Rect);
  public native boolean quickReject(int, int, int, int);
  public native boolean quickReject(android.graphics.Region);
  public void translate(int, int);
  public native void translate(int, int, android.graphics.Region);
  public void scale(float);
  public native void scale(float, android.graphics.Region);
  public final boolean union(android.graphics.Rect);
  public boolean op(android.graphics.Rect, android.graphics.Region$Op);
  public boolean op(int, int, int, int, android.graphics.Region$Op);
  public boolean op(android.graphics.Region, android.graphics.Region$Op);
  public boolean op(android.graphics.Rect, android.graphics.Region, android.graphics.Region$Op);
  public boolean op(android.graphics.Region, android.graphics.Region, android.graphics.Region$Op);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
public class android.graphics.RegionIterator {
  public android.graphics.RegionIterator(android.graphics.Region);
  public final boolean next(android.graphics.Rect);
public final class android.graphics.Shader$TileMode extends java.lang.Enum<android.graphics.Shader$TileMode> {
  public static android.graphics.Shader$TileMode[] values();
  public static android.graphics.Shader$TileMode valueOf(java.lang.String);
public class android.graphics.Shader {
  public android.graphics.Shader();
  public boolean getLocalMatrix(android.graphics.Matrix);
  public void setLocalMatrix(android.graphics.Matrix);
  public android.graphics.SurfaceTexture$EventHandler(android.graphics.SurfaceTexture, android.os.Looper);
  public void handleMessage(android.os.Message);
public interface android.graphics.SurfaceTexture$OnFrameAvailableListener {
  public abstract void onFrameAvailable(android.graphics.SurfaceTexture);
public class android.graphics.SurfaceTexture$OutOfResourcesException extends java.lang.Exception {
  public android.graphics.SurfaceTexture$OutOfResourcesException();
  public android.graphics.SurfaceTexture$OutOfResourcesException(java.lang.String);
public class android.graphics.SurfaceTexture {
  public android.graphics.SurfaceTexture(int);
  public android.graphics.SurfaceTexture(int, boolean);
  public void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener);
  public void setDefaultBufferSize(int, int);
  public void updateTexImage();
  public void getTransformMatrix(float[]);
  public long getTimestamp();
  public void release();
public class android.graphics.SweepGradient extends android.graphics.Shader {
  public android.graphics.SweepGradient(float, float, int[], float[]);
  public android.graphics.SweepGradient(float, float, int, int);
public class android.graphics.TemporaryBuffer {
  public android.graphics.TemporaryBuffer();
  public static char[] obtain(int);
  public static void recycle(char[]);
public class android.graphics.Typeface {
  public int getStyle();
  public final boolean isBold();
  public final boolean isItalic();
  public static android.graphics.Typeface create(java.lang.String, int);
  public static android.graphics.Typeface create(android.graphics.Typeface, int);
  public static android.graphics.Typeface defaultFromStyle(int);
  public static android.graphics.Typeface createFromAsset(android.content.res.AssetManager, java.lang.String);
  public static android.graphics.Typeface createFromFile(java.io.File);
  public static android.graphics.Typeface createFromFile(java.lang.String);
  public static native void setGammaForText(float, float);
public class android.graphics.Xfermode {
  public android.graphics.Xfermode();
public interface android.graphics.drawable.Animatable {
  public abstract void start();
  public abstract void stop();
  public abstract boolean isRunning();
  public android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState(android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState, android.graphics.drawable.AnimatedRotateDrawable, android.content.res.Resources);
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
  public boolean canConstantState();
public class android.graphics.drawable.AnimatedRotateDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback,java.lang.Runnable,android.graphics.drawable.Animatable {
  public android.graphics.drawable.AnimatedRotateDrawable();
  public void draw(android.graphics.Canvas);
  public void start();
  public void stop();
  public boolean isRunning();
  public void run();
  public boolean setVisible(boolean, boolean);
  public android.graphics.drawable.Drawable getDrawable();
  public int getChangingConfigurations();
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public boolean getPadding(android.graphics.Rect);
  public boolean isStateful();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public void setFramesCount(int);
  public void setFramesDuration(int);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public void addFrame(android.graphics.drawable.Drawable, int);
  public void growArray(int, int);
public class android.graphics.drawable.AnimationDrawable extends android.graphics.drawable.DrawableContainer implements java.lang.Runnable,android.graphics.drawable.Animatable {
  public android.graphics.drawable.AnimationDrawable();
  public boolean setVisible(boolean, boolean);
  public void start();
  public void stop();
  public boolean isRunning();
  public void run();
  public void unscheduleSelf(java.lang.Runnable);
  public int getNumberOfFrames();
  public android.graphics.drawable.Drawable getFrame(int);
  public int getDuration(int);
  public boolean isOneShot();
  public void setOneShot(boolean);
  public void addFrame(android.graphics.drawable.Drawable, int);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.BitmapDrawable extends android.graphics.drawable.Drawable {
  public android.graphics.drawable.BitmapDrawable();
  public android.graphics.drawable.BitmapDrawable(android.content.res.Resources);
  public android.graphics.drawable.BitmapDrawable(android.graphics.Bitmap);
  public android.graphics.drawable.BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap);
  public android.graphics.drawable.BitmapDrawable(java.lang.String);
  public android.graphics.drawable.BitmapDrawable(android.content.res.Resources, java.lang.String);
  public android.graphics.drawable.BitmapDrawable(java.io.InputStream);
  public android.graphics.drawable.BitmapDrawable(android.content.res.Resources, java.io.InputStream);
  public final android.graphics.Paint getPaint();
  public final android.graphics.Bitmap getBitmap();
  public void setTargetDensity(android.graphics.Canvas);
  public void setTargetDensity(android.util.DisplayMetrics);
  public void setTargetDensity(int);
  public int getGravity();
  public void setGravity(int);
  public void setAntiAlias(boolean);
  public void setFilterBitmap(boolean);
  public void setDither(boolean);
  public android.graphics.Shader$TileMode getTileModeX();
  public android.graphics.Shader$TileMode getTileModeY();
  public void setTileModeX(android.graphics.Shader$TileMode);
  public final void setTileModeY(android.graphics.Shader$TileMode);
  public void setTileModeXY(android.graphics.Shader$TileMode, android.graphics.Shader$TileMode);
  public int getChangingConfigurations();
  public void draw(android.graphics.Canvas);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public android.graphics.drawable.Drawable mutate();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getOpacity();
  public final android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.ClipDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.ClipDrawable(android.graphics.drawable.Drawable, int, int);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public boolean setVisible(boolean, boolean);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public boolean isStateful();
  public void draw(android.graphics.Canvas);
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.ColorDrawable extends android.graphics.drawable.Drawable {
  public android.graphics.drawable.ColorDrawable();
  public android.graphics.drawable.ColorDrawable(int);
  public int getChangingConfigurations();
  public void draw(android.graphics.Canvas);
  public int getColor();
  public void setColor(int);
  public int getAlpha();
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
public interface android.graphics.drawable.Drawable$Callback {
  public abstract void invalidateDrawable(android.graphics.drawable.Drawable);
  public abstract void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public abstract void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
public interface android.graphics.drawable.Drawable$Callback2 extends android.graphics.drawable.Drawable$Callback {
  public abstract int getResolvedLayoutDirection(android.graphics.drawable.Drawable);
public abstract class android.graphics.drawable.Drawable$ConstantState {
  public android.graphics.drawable.Drawable$ConstantState();
  public abstract android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public abstract int getChangingConfigurations();
public abstract class android.graphics.drawable.Drawable {
  public android.graphics.drawable.Drawable();
  public abstract void draw(android.graphics.Canvas);
  public void setBounds(int, int, int, int);
  public void setBounds(android.graphics.Rect);
  public final void copyBounds(android.graphics.Rect);
  public final android.graphics.Rect copyBounds();
  public final android.graphics.Rect getBounds();
  public void setChangingConfigurations(int);
  public int getChangingConfigurations();
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public final void setCallback(android.graphics.drawable.Drawable$Callback);
  public android.graphics.drawable.Drawable$Callback getCallback();
  public void invalidateSelf();
  public void scheduleSelf(java.lang.Runnable, long);
  public void unscheduleSelf(java.lang.Runnable);
  public int getResolvedLayoutDirectionSelf();
  public abstract void setAlpha(int);
  public abstract void setColorFilter(android.graphics.ColorFilter);
  public void setColorFilter(int, android.graphics.PorterDuff$Mode);
  public void clearColorFilter();
  public boolean isStateful();
  public boolean setState(int[]);
  public int[] getState();
  public void jumpToCurrentState();
  public android.graphics.drawable.Drawable getCurrent();
  public final boolean setLevel(int);
  public final int getLevel();
  public boolean setVisible(boolean, boolean);
  public final boolean isVisible();
  public abstract int getOpacity();
  public static int resolveOpacity(int, int);
  public android.graphics.Region getTransparentRegion();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getMinimumWidth();
  public int getMinimumHeight();
  public boolean getPadding(android.graphics.Rect);
  public android.graphics.drawable.Drawable mutate();
  public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String, android.graphics.BitmapFactory$Options);
  public static android.graphics.drawable.Drawable createFromPath(java.lang.String);
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public void run();
public abstract class android.graphics.drawable.DrawableContainer$DrawableContainerState extends android.graphics.drawable.Drawable$ConstantState {
  public int getChangingConfigurations();
  public final int addChild(android.graphics.drawable.Drawable);
  public final int getChildCount();
  public final android.graphics.drawable.Drawable[] getChildren();
  public final void setVariablePadding(boolean);
  public final android.graphics.Rect getConstantPadding();
  public final void setConstantSize(boolean);
  public final boolean isConstantSize();
  public final int getConstantWidth();
  public final int getConstantHeight();
  public final int getConstantMinimumWidth();
  public final int getConstantMinimumHeight();
  public final void setEnterFadeDuration(int);
  public final int getEnterFadeDuration();
  public final void setExitFadeDuration(int);
  public final int getExitFadeDuration();
  public final int getOpacity();
  public final boolean isStateful();
  public void growArray(int, int);
  public synchronized boolean canConstantState();
public class android.graphics.drawable.DrawableContainer extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.DrawableContainer();
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public void setAlpha(int);
  public void setDither(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setEnterFadeDuration(int);
  public void setExitFadeDuration(int);
  public boolean isStateful();
  public void jumpToCurrentState();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getMinimumWidth();
  public int getMinimumHeight();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public boolean setVisible(boolean, boolean);
  public int getOpacity();
  public boolean selectDrawable(int);
  public android.graphics.drawable.Drawable getCurrent();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.GradientDrawable$GradientState(android.graphics.drawable.GradientDrawable$GradientState);
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
  public void setShape(int);
  public void setGradientType(int);
  public void setGradientCenter(float, float);
  public void setSolidColor(int);
  public void setStroke(int, int);
  public void setStroke(int, int, float, float);
  public void setCornerRadius(float);
  public void setCornerRadii(float[]);
  public void setSize(int, int);
  public void setGradientRadius(float);
public final class android.graphics.drawable.GradientDrawable$Orientation extends java.lang.Enum<android.graphics.drawable.GradientDrawable$Orientation> {
  public static android.graphics.drawable.GradientDrawable$Orientation[] values();
  public static android.graphics.drawable.GradientDrawable$Orientation valueOf(java.lang.String);
public class android.graphics.drawable.GradientDrawable extends android.graphics.drawable.Drawable {
  public android.graphics.drawable.GradientDrawable();
  public android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable$Orientation, int[]);
  public boolean getPadding(android.graphics.Rect);
  public void setCornerRadii(float[]);
  public void setCornerRadius(float);
  public void setStroke(int, int);
  public void setStroke(int, int, float, float);
  public void setSize(int, int);
  public void setShape(int);
  public void setGradientType(int);
  public void setGradientCenter(float, float);
  public void setGradientRadius(float);
  public void setUseLevel(boolean);
  public void draw(android.graphics.Canvas);
  public void setColor(int);
  public int getChangingConfigurations();
  public void setAlpha(int);
  public void setDither(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.InsetDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.InsetDrawable(android.graphics.drawable.Drawable, int);
  public android.graphics.drawable.InsetDrawable(android.graphics.drawable.Drawable, int, int, int, int);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public boolean setVisible(boolean, boolean);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public boolean isStateful();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
  public final int getOpacity();
  public final boolean isStateful();
  public synchronized boolean canConstantState();
public class android.graphics.drawable.LayerDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.LayerDrawable(android.graphics.drawable.Drawable[]);
  public android.graphics.drawable.Drawable findDrawableByLayerId(int);
  public void setId(int, int);
  public int getNumberOfLayers();
  public android.graphics.drawable.Drawable getDrawable(int);
  public int getId(int);
  public boolean setDrawableByLayerId(int, android.graphics.drawable.Drawable);
  public void setLayerInset(int, int, int, int, int);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public boolean setVisible(boolean, boolean);
  public void setDither(boolean);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setOpacity(int);
  public int getOpacity();
  public boolean isStateful();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public void addLevel(int, int, android.graphics.drawable.Drawable);
  public int indexOfLevel(int);
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public void growArray(int, int);
public class android.graphics.drawable.LevelListDrawable extends android.graphics.drawable.DrawableContainer {
  public android.graphics.drawable.LevelListDrawable();
  public void addLevel(int, int, android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.NinePatchDrawable extends android.graphics.drawable.Drawable {
  public android.graphics.drawable.NinePatchDrawable(android.graphics.Bitmap, byte[], android.graphics.Rect, java.lang.String);
  public android.graphics.drawable.NinePatchDrawable(android.content.res.Resources, android.graphics.Bitmap, byte[], android.graphics.Rect, java.lang.String);
  public android.graphics.drawable.NinePatchDrawable(android.graphics.NinePatch);
  public android.graphics.drawable.NinePatchDrawable(android.content.res.Resources, android.graphics.NinePatch);
  public void setTargetDensity(android.graphics.Canvas);
  public void setTargetDensity(android.util.DisplayMetrics);
  public void setTargetDensity(int);
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public android.graphics.Paint getPaint();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public int getMinimumWidth();
  public int getMinimumHeight();
  public int getOpacity();
  public android.graphics.Region getTransparentRegion();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
public class android.graphics.drawable.PaintDrawable extends android.graphics.drawable.ShapeDrawable {
  public android.graphics.drawable.PaintDrawable();
  public android.graphics.drawable.PaintDrawable(int);
  public void setCornerRadius(float);
  public void setCornerRadii(float[]);
  public android.graphics.drawable.RotateDrawable$RotateState(android.graphics.drawable.RotateDrawable$RotateState, android.graphics.drawable.RotateDrawable, android.content.res.Resources);
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
  public boolean canConstantState();
public class android.graphics.drawable.RotateDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.RotateDrawable();
  public void draw(android.graphics.Canvas);
  public android.graphics.drawable.Drawable getDrawable();
  public int getChangingConfigurations();
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public boolean getPadding(android.graphics.Rect);
  public boolean setVisible(boolean, boolean);
  public boolean isStateful();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.ScaleDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.ScaleDrawable(android.graphics.drawable.Drawable, int, float, float);
  public android.graphics.drawable.Drawable getDrawable();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public boolean getPadding(android.graphics.Rect);
  public boolean setVisible(boolean, boolean);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public boolean isStateful();
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
public abstract class android.graphics.drawable.ShapeDrawable$ShaderFactory {
  public android.graphics.drawable.ShapeDrawable$ShaderFactory();
  public abstract android.graphics.Shader resize(int, int);
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.ShapeDrawable extends android.graphics.drawable.Drawable {
  public android.graphics.drawable.ShapeDrawable();
  public android.graphics.drawable.ShapeDrawable(android.graphics.drawable.shapes.Shape);
  public android.graphics.drawable.shapes.Shape getShape();
  public void setShape(android.graphics.drawable.shapes.Shape);
  public void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory);
  public android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory();
  public android.graphics.Paint getPaint();
  public void setPadding(int, int, int, int);
  public void setPadding(android.graphics.Rect);
  public void setIntrinsicWidth(int);
  public void setIntrinsicHeight(int);
  public int getIntrinsicWidth();
  public int getIntrinsicHeight();
  public boolean getPadding(android.graphics.Rect);
  public void draw(android.graphics.Canvas);
  public int getChangingConfigurations();
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public void setDither(boolean);
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public void growArray(int, int);
public class android.graphics.drawable.StateListDrawable extends android.graphics.drawable.DrawableContainer {
  public android.graphics.drawable.StateListDrawable();
  public void addState(int[], android.graphics.drawable.Drawable);
  public boolean isStateful();
  public int getStateCount();
  public int[] getStateSet(int);
  public android.graphics.drawable.Drawable getStateDrawable(int);
  public int getStateDrawableIndex(int[]);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable newDrawable();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public int getChangingConfigurations();
public class android.graphics.drawable.TransitionDrawable extends android.graphics.drawable.LayerDrawable implements android.graphics.drawable.Drawable$Callback {
  public android.graphics.drawable.TransitionDrawable(android.graphics.drawable.Drawable[]);
  public void startTransition(int);
  public void resetTransition();
  public void reverseTransition(int);
  public void draw(android.graphics.Canvas);
  public void setCrossFadeEnabled(boolean);
  public boolean isCrossFadeEnabled();
public class android.graphics.drawable.shapes.RectShape extends android.graphics.drawable.shapes.Shape {
  public android.graphics.drawable.shapes.RectShape();
  public void draw(android.graphics.Canvas, android.graphics.Paint);
public class android.graphics.drawable.shapes.RoundRectShape extends android.graphics.drawable.shapes.RectShape {
  public android.graphics.drawable.shapes.RoundRectShape(float[], android.graphics.RectF, float[]);
  public void draw(android.graphics.Canvas, android.graphics.Paint);
public abstract class android.graphics.drawable.shapes.Shape implements java.lang.Cloneable {
  public android.graphics.drawable.shapes.Shape();
  public final float getWidth();
  public final float getHeight();
  public abstract void draw(android.graphics.Canvas, android.graphics.Paint);
  public final void resize(float, float);
  public boolean hasAlpha();
public class android.hardware.Camera$Area {
  public android.hardware.Camera$Area(android.graphics.Rect, int);
  public boolean equals(java.lang.Object);
public interface android.hardware.Camera$AutoFocusCallback {
  public abstract void onAutoFocus(boolean, android.hardware.Camera);
public class android.hardware.Camera$CameraInfo {
  public android.hardware.Camera$CameraInfo();
public interface android.hardware.Camera$ErrorCallback {
  public abstract void onError(int, android.hardware.Camera);
  public android.hardware.Camera$EventHandler(android.hardware.Camera, android.hardware.Camera, android.os.Looper);
  public void handleMessage(android.os.Message);
public class android.hardware.Camera$Face {
  public android.hardware.Camera$Face();
public interface android.hardware.Camera$FaceDetectionListener {
  public abstract void onFaceDetection(android.hardware.Camera$Face[], android.hardware.Camera);
public interface android.hardware.Camera$OnZoomChangeListener {
  public abstract void onZoomChange(int, boolean, android.hardware.Camera);
public class android.hardware.Camera$Parameters {
  public void dump();
  public java.lang.String flatten();
  public void unflatten(java.lang.String);
  public void remove(java.lang.String);
  public void set(java.lang.String, java.lang.String);
  public void set(java.lang.String, int);
  public java.lang.String get(java.lang.String);
  public int getInt(java.lang.String);
  public void setPreviewSize(int, int);
  public android.hardware.Camera$Size getPreviewSize();
  public java.util.List<android.hardware.Camera$Size> getSupportedPreviewSizes();
  public java.util.List<android.hardware.Camera$Size> getSupportedVideoSizes();
  public android.hardware.Camera$Size getPreferredPreviewSizeForVideo();
  public void setJpegThumbnailSize(int, int);
  public android.hardware.Camera$Size getJpegThumbnailSize();
  public java.util.List<android.hardware.Camera$Size> getSupportedJpegThumbnailSizes();
  public void setJpegThumbnailQuality(int);
  public int getJpegThumbnailQuality();
  public void setJpegQuality(int);
  public int getJpegQuality();
  public void setPreviewFrameRate(int);
  public int getPreviewFrameRate();
  public java.util.List<java.lang.Integer> getSupportedPreviewFrameRates();
  public void setPreviewFpsRange(int, int);
  public void getPreviewFpsRange(int[]);
  public java.util.List<int[]> getSupportedPreviewFpsRange();
  public void setPreviewFormat(int);
  public int getPreviewFormat();
  public java.util.List<java.lang.Integer> getSupportedPreviewFormats();
  public void setPictureSize(int, int);
  public android.hardware.Camera$Size getPictureSize();
  public java.util.List<android.hardware.Camera$Size> getSupportedPictureSizes();
  public void setPictureFormat(int);
  public int getPictureFormat();
  public java.util.List<java.lang.Integer> getSupportedPictureFormats();
  public void setRotation(int);
  public void setGpsLatitude(double);
  public void setGpsLongitude(double);
  public void setGpsAltitude(double);
  public void setGpsTimestamp(long);
  public void setGpsProcessingMethod(java.lang.String);
  public void removeGpsData();
  public java.lang.String getWhiteBalance();
  public void setWhiteBalance(java.lang.String);
  public java.util.List<java.lang.String> getSupportedWhiteBalance();
  public java.lang.String getColorEffect();
  public void setColorEffect(java.lang.String);
  public java.util.List<java.lang.String> getSupportedColorEffects();
  public java.lang.String getAntibanding();
  public void setAntibanding(java.lang.String);
  public java.util.List<java.lang.String> getSupportedAntibanding();
  public java.lang.String getSceneMode();
  public void setSceneMode(java.lang.String);
  public java.util.List<java.lang.String> getSupportedSceneModes();
  public java.lang.String getFlashMode();
  public void setFlashMode(java.lang.String);
  public java.util.List<java.lang.String> getSupportedFlashModes();
  public java.lang.String getFocusMode();
  public void setFocusMode(java.lang.String);
  public java.util.List<java.lang.String> getSupportedFocusModes();
  public float getFocalLength();
  public float getHorizontalViewAngle();
  public float getVerticalViewAngle();
  public int getExposureCompensation();
  public void setExposureCompensation(int);
  public int getMaxExposureCompensation();
  public int getMinExposureCompensation();
  public float getExposureCompensationStep();
  public void setAutoExposureLock(boolean);
  public boolean getAutoExposureLock();
  public boolean isAutoExposureLockSupported();
  public void setAutoWhiteBalanceLock(boolean);
  public boolean getAutoWhiteBalanceLock();
  public boolean isAutoWhiteBalanceLockSupported();
  public int getZoom();
  public void setZoom(int);
  public boolean isZoomSupported();
  public int getMaxZoom();
  public java.util.List<java.lang.Integer> getZoomRatios();
  public boolean isSmoothZoomSupported();
  public void getFocusDistances(float[]);
  public int getMaxNumFocusAreas();
  public java.util.List<android.hardware.Camera$Area> getFocusAreas();
  public void setFocusAreas(java.util.List<android.hardware.Camera$Area>);
  public int getMaxNumMeteringAreas();
  public java.util.List<android.hardware.Camera$Area> getMeteringAreas();
  public void setMeteringAreas(java.util.List<android.hardware.Camera$Area>);
  public int getMaxNumDetectedFaces();
  public void setRecordingHint(boolean);
  public boolean isVideoSnapshotSupported();
  public void setVideoStabilization(boolean);
  public boolean getVideoStabilization();
  public boolean isVideoStabilizationSupported();
public interface android.hardware.Camera$PictureCallback {
  public abstract void onPictureTaken(byte[], android.hardware.Camera);
public interface android.hardware.Camera$PreviewCallback {
  public abstract void onPreviewFrame(byte[], android.hardware.Camera);
public interface android.hardware.Camera$ShutterCallback {
  public abstract void onShutter();
public class android.hardware.Camera$Size {
  public android.hardware.Camera$Size(android.hardware.Camera, int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
public class android.hardware.Camera {
  public static native int getNumberOfCameras();
  public static native void getCameraInfo(int, android.hardware.Camera$CameraInfo);
  public static android.hardware.Camera open(int);
  public static android.hardware.Camera open();
  public final void release();
  public final native void unlock();
  public final native void lock();
  public final native void startPreview();
  public final void stopPreview();
  public final native boolean previewEnabled();
  public final void setPreviewCallback(android.hardware.Camera$PreviewCallback);
  public final void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback);
  public final void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback);
  public final void addCallbackBuffer(byte[]);
  public final void addRawImageCallbackBuffer(byte[]);
  public final void autoFocus(android.hardware.Camera$AutoFocusCallback);
  public final void cancelAutoFocus();
  public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback);
  public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback);
  public final native void startSmoothZoom(int);
  public final native void stopSmoothZoom();
  public final native void setDisplayOrientation(int);
  public final void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener);
  public final void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener);
  public final void startFaceDetection();
  public final void stopFaceDetection();
  public final void setErrorCallback(android.hardware.Camera$ErrorCallback);
  public void setParameters(android.hardware.Camera$Parameters);
  public android.hardware.Camera$Parameters getParameters();
public class android.hardware.Sensor {
  public java.lang.String getName();
  public java.lang.String getVendor();
  public int getType();
  public int getVersion();
  public float getMaximumRange();
  public float getResolution();
  public float getPower();
  public int getMinDelay();
public class android.hardware.SensorEvent {
public interface android.hardware.SensorEventListener {
  public abstract void onSensorChanged(android.hardware.SensorEvent);
  public abstract void onAccuracyChanged(android.hardware.Sensor, int);
public interface android.hardware.SensorListener {
  public abstract void onSensorChanged(int, float[]);
  public abstract void onAccuracyChanged(int, int);
  public void onRotationChanged(int);
  public void onAccuracyChanged(android.hardware.Sensor, int);
  public void onSensorChanged(android.hardware.SensorEvent);
  public void handleMessage(android.os.Message);
  public android.hardware.SensorManager$LmsFilter(android.hardware.SensorManager);
  public float filter(long, float);
  public void run();
public class android.hardware.SensorManager {
  public android.hardware.SensorManager(android.os.Looper);
  public int getSensors();
  public java.util.List<android.hardware.Sensor> getSensorList(int);
  public android.hardware.Sensor getDefaultSensor(int);
  public boolean registerListener(android.hardware.SensorListener, int);
  public boolean registerListener(android.hardware.SensorListener, int, int);
  public void unregisterListener(android.hardware.SensorListener, int);
  public void unregisterListener(android.hardware.SensorListener);
  public void unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor);
  public void unregisterListener(android.hardware.SensorEventListener);
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int);
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler);
  public static boolean getRotationMatrix(float[], float[], float[], float[]);
  public static float getInclination(float[]);
  public static boolean remapCoordinateSystem(float[], int, int, float[]);
  public static float[] getOrientation(float[], float[]);
  public static float getAltitude(float, float);
  public void onRotationChanged(int);
  public static void getAngleChange(float[], float[], float[]);
  public static void getRotationMatrixFromVector(float[], float[]);
  public static void getQuaternionFromVector(float[], float[]);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.hardware.usb.IUsbManager$Stub extends android.os.Binder implements android.hardware.usb.IUsbManager {
  public android.hardware.usb.IUsbManager$Stub();
  public static android.hardware.usb.IUsbManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.hardware.usb.IUsbManager extends android.os.IInterface {
  public android.hardware.usb.UsbAccessory createFromParcel(android.os.Parcel);
  public android.hardware.usb.UsbAccessory[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.hardware.usb.UsbAccessory implements android.os.Parcelable {
  public android.hardware.usb.UsbAccessory(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.hardware.usb.UsbAccessory(java.lang.String[]);
  public java.lang.String getManufacturer();
  public java.lang.String getModel();
  public java.lang.String getDescription();
  public java.lang.String getVersion();
  public java.lang.String getUri();
  public java.lang.String getSerial();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.hardware.usb.UsbDevice createFromParcel(android.os.Parcel);
  public android.hardware.usb.UsbDevice[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.hardware.usb.UsbDevice implements android.os.Parcelable {
  public android.hardware.usb.UsbDevice(java.lang.String, int, int, int, int, int, android.os.Parcelable[]);
  public java.lang.String getDeviceName();
  public int getDeviceId();
  public int getVendorId();
  public int getProductId();
  public int getDeviceClass();
  public int getDeviceSubclass();
  public int getDeviceProtocol();
  public int getInterfaceCount();
  public android.hardware.usb.UsbInterface getInterface(int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static int getDeviceId(java.lang.String);
  public static java.lang.String getDeviceName(int);
public class android.hardware.usb.UsbDeviceConnection {
  public android.hardware.usb.UsbDeviceConnection(android.hardware.usb.UsbDevice);
  public void close();
  public int getFileDescriptor();
  public byte[] getRawDescriptors();
  public boolean claimInterface(android.hardware.usb.UsbInterface, boolean);
  public boolean releaseInterface(android.hardware.usb.UsbInterface);
  public int controlTransfer(int, int, int, int, byte[], int, int);
  public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int);
  public android.hardware.usb.UsbRequest requestWait();
  public java.lang.String getSerial();
  public android.hardware.usb.UsbEndpoint createFromParcel(android.os.Parcel);
  public android.hardware.usb.UsbEndpoint[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.hardware.usb.UsbEndpoint implements android.os.Parcelable {
  public android.hardware.usb.UsbEndpoint(int, int, int, int);
  public int getAddress();
  public int getEndpointNumber();
  public int getDirection();
  public int getAttributes();
  public int getType();
  public int getMaxPacketSize();
  public int getInterval();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.hardware.usb.UsbInterface createFromParcel(android.os.Parcel);
  public android.hardware.usb.UsbInterface[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.hardware.usb.UsbInterface implements android.os.Parcelable {
  public android.hardware.usb.UsbInterface(int, int, int, int, android.os.Parcelable[]);
  public int getId();
  public int getInterfaceClass();
  public int getInterfaceSubclass();
  public int getInterfaceProtocol();
  public int getEndpointCount();
  public android.hardware.usb.UsbEndpoint getEndpoint(int);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.hardware.usb.UsbManager {
  public android.hardware.usb.UsbManager(android.content.Context, android.hardware.usb.IUsbManager);
  public java.util.HashMap<java.lang.String, android.hardware.usb.UsbDevice> getDeviceList();
  public android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice);
  public android.hardware.usb.UsbAccessory[] getAccessoryList();
  public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory);
  public boolean hasPermission(android.hardware.usb.UsbDevice);
  public boolean hasPermission(android.hardware.usb.UsbAccessory);
  public void requestPermission(android.hardware.usb.UsbDevice, android.app.PendingIntent);
  public void requestPermission(android.hardware.usb.UsbAccessory, android.app.PendingIntent);
  public boolean isFunctionEnabled(java.lang.String);
  public java.lang.String getDefaultFunction();
  public void setCurrentFunction(java.lang.String, boolean);
  public void setMassStorageBackingFile(java.lang.String);
public class android.hardware.usb.UsbRequest {
  public android.hardware.usb.UsbRequest();
  public boolean initialize(android.hardware.usb.UsbDeviceConnection, android.hardware.usb.UsbEndpoint);
  public void close();
  public android.hardware.usb.UsbEndpoint getEndpoint();
  public java.lang.Object getClientData();
  public void setClientData(java.lang.Object);
  public boolean queue(java.nio.ByteBuffer, int);
  public boolean cancel();
public abstract class android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl implements android.view.inputmethod.InputMethod {
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl(android.inputmethodservice.AbstractInputMethodService);
  public void createSession(android.view.inputmethod.InputMethod$SessionCallback);
  public void setSessionEnabled(android.view.inputmethod.InputMethodSession, boolean);
  public void revokeSession(android.view.inputmethod.InputMethodSession);
public abstract class android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl implements android.view.inputmethod.InputMethodSession {
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl(android.inputmethodservice.AbstractInputMethodService);
  public boolean isEnabled();
  public boolean isRevoked();
  public void setEnabled(boolean);
  public void revokeSelf();
  public void dispatchKeyEvent(int, android.view.KeyEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public void dispatchTrackballEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
public abstract class android.inputmethodservice.AbstractInputMethodService extends android.app.Service implements android.view.KeyEvent$Callback {
  public android.inputmethodservice.AbstractInputMethodService();
  public android.view.KeyEvent$DispatcherState getKeyDispatcherState();
  public abstract android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface();
  public abstract android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface();
  public final android.os.IBinder onBind(android.content.Intent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void onClick(android.view.View);
  public android.inputmethodservice.ExtractEditLayout$ExtractActionMode(android.inputmethodservice.ExtractEditLayout, android.view.ActionMode$Callback);
  public void setTitle(java.lang.CharSequence);
  public void setTitle(int);
  public void setSubtitle(java.lang.CharSequence);
  public void setSubtitle(int);
  public void setCustomView(android.view.View);
  public void invalidate();
  public boolean dispatchOnCreate();
  public void finish();
  public android.view.Menu getMenu();
  public java.lang.CharSequence getTitle();
  public java.lang.CharSequence getSubtitle();
  public android.view.View getCustomView();
  public android.view.MenuInflater getMenuInflater();
  public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem);
  public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder);
public class android.inputmethodservice.ExtractEditLayout extends android.widget.LinearLayout {
  public android.inputmethodservice.ExtractEditLayout(android.content.Context);
  public android.inputmethodservice.ExtractEditLayout(android.content.Context, android.util.AttributeSet);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public boolean isActionModeStarted();
  public void finishActionMode();
  public void onFinishInflate();
public class android.inputmethodservice.ExtractEditText extends android.widget.EditText {
  public android.inputmethodservice.ExtractEditText(android.content.Context);
  public android.inputmethodservice.ExtractEditText(android.content.Context, android.util.AttributeSet);
  public android.inputmethodservice.ExtractEditText(android.content.Context, android.util.AttributeSet, int);
  public void startInternalChanges();
  public void finishInternalChanges();
  public void setExtractedText(android.view.inputmethod.ExtractedText);
  public boolean performClick();
  public boolean onTextContextMenuItem(int);
  public boolean isInputMethodTarget();
  public boolean hasVerticalScrollBar();
  public boolean hasWindowFocus();
  public boolean isFocused();
  public boolean hasFocus();
  public void finishedEvent(int, boolean);
  public android.inputmethodservice.IInputMethodSessionWrapper(android.content.Context, android.view.inputmethod.InputMethodSession);
  public android.view.inputmethod.InputMethodSession getInternalInputMethodSession();
  public void executeMessage(android.os.Message);
  public void finishInput();
  public void displayCompletions(android.view.inputmethod.CompletionInfo[]);
  public void updateExtractedText(int, android.view.inputmethod.ExtractedText);
  public void dispatchKeyEvent(int, android.view.KeyEvent, com.android.internal.view.IInputMethodCallback);
  public void dispatchTrackballEvent(int, android.view.MotionEvent, com.android.internal.view.IInputMethodCallback);
  public void updateSelection(int, int, int, int, int, int);
  public void viewClicked(boolean);
  public void updateCursor(android.graphics.Rect);
  public void appPrivateCommand(java.lang.String, android.os.Bundle);
  public void toggleSoftInput(int, int);
  public void finishSession();
  public void sessionCreated(android.view.inputmethod.InputMethodSession);
  public android.inputmethodservice.IInputMethodWrapper(android.inputmethodservice.AbstractInputMethodService, android.view.inputmethod.InputMethod);
  public android.view.inputmethod.InputMethod getInternalInputMethod();
  public void executeMessage(android.os.Message);
  public void attachToken(android.os.IBinder);
  public void bindInput(android.view.inputmethod.InputBinding);
  public void unbindInput();
  public void startInput(com.android.internal.view.IInputContext, android.view.inputmethod.EditorInfo);
  public void restartInput(com.android.internal.view.IInputContext, android.view.inputmethod.EditorInfo);
  public void createSession(com.android.internal.view.IInputMethodCallback);
  public void setSessionEnabled(com.android.internal.view.IInputMethodSession, boolean);
  public void revokeSession(com.android.internal.view.IInputMethodSession);
  public void showSoftInput(int, android.os.ResultReceiver);
  public void hideSoftInput(int, android.os.ResultReceiver);
  public void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public void onComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo);
  public void onClick(android.view.View);
public class android.inputmethodservice.InputMethodService$InputMethodImpl extends android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl {
  public android.inputmethodservice.InputMethodService$InputMethodImpl(android.inputmethodservice.InputMethodService);
  public void attachToken(android.os.IBinder);
  public void bindInput(android.view.inputmethod.InputBinding);
  public void unbindInput();
  public void startInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public void restartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public void hideSoftInput(int, android.os.ResultReceiver);
  public void showSoftInput(int, android.os.ResultReceiver);
  public void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
public class android.inputmethodservice.InputMethodService$InputMethodSessionImpl extends android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl {
  public android.inputmethodservice.InputMethodService$InputMethodSessionImpl(android.inputmethodservice.InputMethodService);
  public void finishInput();
  public void displayCompletions(android.view.inputmethod.CompletionInfo[]);
  public void updateExtractedText(int, android.view.inputmethod.ExtractedText);
  public void updateSelection(int, int, int, int, int, int);
  public void viewClicked(boolean);
  public void updateCursor(android.graphics.Rect);
  public void appPrivateCommand(java.lang.String, android.os.Bundle);
  public void toggleSoftInput(int, int);
public final class android.inputmethodservice.InputMethodService$Insets {
  public android.inputmethodservice.InputMethodService$Insets();
public class android.inputmethodservice.InputMethodService extends android.inputmethodservice.AbstractInputMethodService {
  public android.inputmethodservice.InputMethodService();
  public void setTheme(int);
  public void onCreate();
  public void onInitializeInterface();
  public void onDestroy();
  public void onConfigurationChanged(android.content.res.Configuration);
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface();
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface();
  public android.view.LayoutInflater getLayoutInflater();
  public android.app.Dialog getWindow();
  public void setBackDisposition(int);
  public int getBackDisposition();
  public int getMaxWidth();
  public android.view.inputmethod.InputBinding getCurrentInputBinding();
  public android.view.inputmethod.InputConnection getCurrentInputConnection();
  public boolean getCurrentInputStarted();
  public android.view.inputmethod.EditorInfo getCurrentInputEditorInfo();
  public void updateFullscreenMode();
  public void onConfigureWindow(android.view.Window, boolean, boolean);
  public boolean isFullscreenMode();
  public boolean onEvaluateFullscreenMode();
  public void setExtractViewShown(boolean);
  public boolean isExtractViewShown();
  public void onComputeInsets(android.inputmethodservice.InputMethodService$Insets);
  public void updateInputViewShown();
  public boolean isShowInputRequested();
  public boolean isInputViewShown();
  public boolean onEvaluateInputViewShown();
  public void setCandidatesViewShown(boolean);
  public int getCandidatesHiddenVisibility();
  public void showStatusIcon(int);
  public void hideStatusIcon();
  public void switchInputMethod(java.lang.String);
  public void setExtractView(android.view.View);
  public void setCandidatesView(android.view.View);
  public void setInputView(android.view.View);
  public android.view.View onCreateExtractTextView();
  public android.view.View onCreateCandidatesView();
  public android.view.View onCreateInputView();
  public void onStartInputView(android.view.inputmethod.EditorInfo, boolean);
  public void onFinishInputView(boolean);
  public void onStartCandidatesView(android.view.inputmethod.EditorInfo, boolean);
  public void onFinishCandidatesView(boolean);
  public boolean onShowInputRequested(int, boolean);
  public void showWindow(boolean);
  public void hideWindow();
  public void onWindowShown();
  public void onWindowHidden();
  public void onBindInput();
  public void onUnbindInput();
  public void onStartInput(android.view.inputmethod.EditorInfo, boolean);
  public void onFinishInput();
  public void onDisplayCompletions(android.view.inputmethod.CompletionInfo[]);
  public void onUpdateExtractedText(int, android.view.inputmethod.ExtractedText);
  public void onUpdateSelection(int, int, int, int, int, int);
  public void onViewClicked(boolean);
  public void onUpdateCursor(android.graphics.Rect);
  public void requestHideSelf(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void onAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void sendDownUpKeyEvents(int);
  public boolean sendDefaultEditorAction(boolean);
  public void sendKeyChar(char);
  public void onExtractedSelectionChanged(int, int);
  public void onExtractedDeleteText(int, int);
  public void onExtractedReplaceText(int, int, java.lang.CharSequence);
  public void onExtractedSetSpan(java.lang.Object, int, int, int);
  public void onExtractedTextClicked();
  public void onExtractedCursorMovement(int, int);
  public boolean onExtractTextContextMenuItem(int);
  public java.lang.CharSequence getTextForImeAction(int);
  public void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo);
  public void onUpdateExtractingViews(android.view.inputmethod.EditorInfo);
  public void onExtractingInputChanged(android.view.inputmethod.EditorInfo);
public class android.inputmethodservice.Keyboard$Key {
  public android.inputmethodservice.Keyboard$Key(android.inputmethodservice.Keyboard$Row);
  public android.inputmethodservice.Keyboard$Key(android.content.res.Resources, android.inputmethodservice.Keyboard$Row, int, int, android.content.res.XmlResourceParser);
  public void onPressed();
  public void onReleased(boolean);
  public boolean isInside(int, int);
  public int squaredDistanceFrom(int, int);
  public int[] getCurrentDrawableState();
public class android.inputmethodservice.Keyboard$Row {
  public android.inputmethodservice.Keyboard$Row(android.inputmethodservice.Keyboard);
  public android.inputmethodservice.Keyboard$Row(android.content.res.Resources, android.inputmethodservice.Keyboard, android.content.res.XmlResourceParser);
public class android.inputmethodservice.Keyboard {
  public android.inputmethodservice.Keyboard(android.content.Context, int);
  public android.inputmethodservice.Keyboard(android.content.Context, int, int, int, int);
  public android.inputmethodservice.Keyboard(android.content.Context, int, int);
  public android.inputmethodservice.Keyboard(android.content.Context, int, java.lang.CharSequence, int, int);
  public java.util.List<android.inputmethodservice.Keyboard$Key> getKeys();
  public java.util.List<android.inputmethodservice.Keyboard$Key> getModifierKeys();
  public int getHeight();
  public int getMinWidth();
  public boolean setShifted(boolean);
  public boolean isShifted();
  public int[] getShiftKeyIndices();
  public int getShiftKeyIndex();
  public int[] getNearestKeys(int, int);
  public void handleMessage(android.os.Message);
  public boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public void onKey(int, int[]);
  public void onText(java.lang.CharSequence);
  public void swipeLeft();
  public void swipeRight();
  public void swipeUp();
  public void swipeDown();
  public void onPress(int);
  public void onRelease(int);
public interface android.inputmethodservice.KeyboardView$OnKeyboardActionListener {
  public abstract void onPress(int);
  public abstract void onRelease(int);
  public abstract void onKey(int, int[]);
  public abstract void onText(java.lang.CharSequence);
  public abstract void swipeLeft();
  public abstract void swipeRight();
  public abstract void swipeDown();
  public abstract void swipeUp();
  public void clear();
  public void addMovement(android.view.MotionEvent);
  public void computeCurrentVelocity(int);
  public void computeCurrentVelocity(int, float);
  public float getXVelocity();
  public float getYVelocity();
public class android.inputmethodservice.KeyboardView extends android.view.View implements android.view.View$OnClickListener {
  public android.inputmethodservice.KeyboardView(android.content.Context, android.util.AttributeSet);
  public android.inputmethodservice.KeyboardView(android.content.Context, android.util.AttributeSet, int);
  public void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener);
  public void setKeyboard(android.inputmethodservice.Keyboard);
  public android.inputmethodservice.Keyboard getKeyboard();
  public boolean setShifted(boolean);
  public boolean isShifted();
  public void setPreviewEnabled(boolean);
  public boolean isPreviewEnabled();
  public void setVerticalCorrection(int);
  public void setPopupParent(android.view.View);
  public void setPopupOffset(int, int);
  public void setProximityCorrectionEnabled(boolean);
  public boolean isProximityCorrectionEnabled();
  public void onClick(android.view.View);
  public void onMeasure(int, int);
  public void onSizeChanged(int, int, int, int);
  public void onDraw(android.graphics.Canvas);
  public void invalidateAllKeys();
  public void invalidateKey(int);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void closing();
  public void onDetachedFromWindow();
  public boolean handleBack();
  public void setToken(android.os.IBinder);
  public android.inputmethodservice.SoftInputWindow(android.content.Context, int, android.view.KeyEvent$DispatcherState);
  public void onWindowFocusChanged(boolean);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public int getSize();
  public void setSize(int);
  public void setGravity(int);
  public android.location.Address createFromParcel(android.os.Parcel);
  public android.location.Address[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.location.Address implements android.os.Parcelable {
  public android.location.Address(java.util.Locale);
  public java.util.Locale getLocale();
  public int getMaxAddressLineIndex();
  public java.lang.String getAddressLine(int);
  public void setAddressLine(int, java.lang.String);
  public java.lang.String getFeatureName();
  public void setFeatureName(java.lang.String);
  public java.lang.String getAdminArea();
  public void setAdminArea(java.lang.String);
  public java.lang.String getSubAdminArea();
  public void setSubAdminArea(java.lang.String);
  public java.lang.String getLocality();
  public void setLocality(java.lang.String);
  public java.lang.String getSubLocality();
  public void setSubLocality(java.lang.String);
  public java.lang.String getThoroughfare();
  public void setThoroughfare(java.lang.String);
  public java.lang.String getSubThoroughfare();
  public void setSubThoroughfare(java.lang.String);
  public java.lang.String getPremises();
  public void setPremises(java.lang.String);
  public java.lang.String getPostalCode();
  public void setPostalCode(java.lang.String);
  public java.lang.String getCountryCode();
  public void setCountryCode(java.lang.String);
  public java.lang.String getCountryName();
  public void setCountryName(java.lang.String);
  public boolean hasLatitude();
  public double getLatitude();
  public void setLatitude(double);
  public void clearLatitude();
  public boolean hasLongitude();
  public double getLongitude();
  public void setLongitude(double);
  public void clearLongitude();
  public java.lang.String getPhone();
  public void setPhone(java.lang.String);
  public java.lang.String getUrl();
  public void setUrl(java.lang.String);
  public android.os.Bundle getExtras();
  public void setExtras(android.os.Bundle);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.location.Country createFromParcel(android.os.Parcel);
  public android.location.Country[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.location.Country implements android.os.Parcelable {
  public android.location.Country(java.lang.String, int);
  public android.location.Country(android.location.Country);
  public final java.lang.String getCountryIso();
  public final int getSource();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean equalsIgnoreSource(android.location.Country);
  public void run();
  public android.location.CountryDetector$ListenerTransport(android.location.CountryListener, android.os.Looper);
  public void onCountryDetected(android.location.Country);
public class android.location.CountryDetector {
  public android.location.CountryDetector(android.location.ICountryDetector);
  public android.location.Country detectCountry();
  public void addCountryListener(android.location.CountryListener, android.os.Looper);
  public void removeCountryListener(android.location.CountryListener);
public interface android.location.CountryListener {
  public abstract void onCountryDetected(android.location.Country);
  public android.location.Criteria createFromParcel(android.os.Parcel);
  public android.location.Criteria[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.location.Criteria implements android.os.Parcelable {
  public android.location.Criteria();
  public android.location.Criteria(android.location.Criteria);
  public void setHorizontalAccuracy(int);
  public int getHorizontalAccuracy();
  public void setVerticalAccuracy(int);
  public int getVerticalAccuracy();
  public void setSpeedAccuracy(int);
  public int getSpeedAccuracy();
  public void setBearingAccuracy(int);
  public int getBearingAccuracy();
  public void setAccuracy(int);
  public int getAccuracy();
  public void setPowerRequirement(int);
  public int getPowerRequirement();
  public void setCostAllowed(boolean);
  public boolean isCostAllowed();
  public void setAltitudeRequired(boolean);
  public boolean isAltitudeRequired();
  public void setSpeedRequired(boolean);
  public boolean isSpeedRequired();
  public void setBearingRequired(boolean);
  public boolean isBearingRequired();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class android.location.Geocoder {
  public static boolean isPresent();
  public android.location.Geocoder(android.content.Context, java.util.Locale);
  public android.location.Geocoder(android.content.Context);
  public android.location.GeocoderParams createFromParcel(android.os.Parcel);
  public android.location.GeocoderParams[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.location.GeocoderParams implements android.os.Parcelable {
  public android.location.GeocoderParams(android.content.Context, java.util.Locale);
  public java.util.Locale getLocale();
  public java.lang.String getClientPackage();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class android.location.GpsSatellite {
  public int getPrn();
  public float getSnr();
  public float getElevation();
  public float getAzimuth();
  public boolean hasEphemeris();
  public boolean hasAlmanac();
  public boolean usedInFix();
  public java.util.Iterator<android.location.GpsSatellite> iterator();
public interface android.location.GpsStatus$Listener {
  public abstract void onGpsStatusChanged(int);
public interface android.location.GpsStatus$NmeaListener {
  public abstract void onNmeaReceived(long, java.lang.String);
  public boolean hasNext();
  public android.location.GpsSatellite next();
  public void remove();
  public java.lang.Object next();
public final class android.location.GpsStatus {
  public int getTimeToFirstFix();
  public java.lang.Iterable<android.location.GpsSatellite> getSatellites();
  public int getMaxSatellites();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.location.ICountryDetector$Stub extends android.os.Binder implements android.location.ICountryDetector {
  public android.location.ICountryDetector$Stub();
  public static android.location.ICountryDetector asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.location.ICountryDetector extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.location.ICountryListener$Stub extends android.os.Binder implements android.location.ICountryListener {
  public android.location.ICountryListener$Stub();
  public static android.location.ICountryListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.location.ICountryListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.location.IGpsStatusListener$Stub extends android.os.Binder implements android.location.IGpsStatusListener {
  public android.location.IGpsStatusListener$Stub();
  public static android.location.IGpsStatusListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.location.IGpsStatusListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.location.ILocationListener$Stub extends android.os.Binder implements android.location.ILocationListener {
  public android.location.ILocationListener$Stub();
  public static android.location.ILocationListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.location.ILocationListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.location.ILocationManager$Stub extends android.os.Binder implements android.location.ILocationManager {
  public android.location.ILocationManager$Stub();
  public static android.location.ILocationManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.location.ILocationManager extends android.os.IInterface {
  public android.location.Location createFromParcel(android.os.Parcel);
  public android.location.Location[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.location.Location implements android.os.Parcelable {
  public void dump(android.util.Printer, java.lang.String);
  public android.location.Location(java.lang.String);
  public android.location.Location(android.location.Location);
  public void set(android.location.Location);
  public void reset();
  public static java.lang.String convert(double, int);
  public static double convert(java.lang.String);
  public static void distanceBetween(double, double, double, double, float[]);
  public float distanceTo(android.location.Location);
  public float bearingTo(android.location.Location);
  public java.lang.String getProvider();
  public void setProvider(java.lang.String);
  public long getTime();
  public void setTime(long);
  public double getLatitude();
  public void setLatitude(double);
  public double getLongitude();
  public void setLongitude(double);
  public boolean hasAltitude();
  public double getAltitude();
  public void setAltitude(double);
  public void removeAltitude();
  public boolean hasSpeed();
  public float getSpeed();
  public void setSpeed(float);
  public void removeSpeed();
  public boolean hasBearing();
  public float getBearing();
  public void setBearing(float);
  public void removeBearing();
  public boolean hasAccuracy();
  public float getAccuracy();
  public void setAccuracy(float);
  public void removeAccuracy();
  public android.os.Bundle getExtras();
  public void setExtras(android.os.Bundle);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.location.LocationListener {
  public abstract void onLocationChanged(android.location.Location);
  public abstract void onStatusChanged(java.lang.String, int, android.os.Bundle);
  public abstract void onProviderEnabled(java.lang.String);
  public abstract void onProviderDisabled(java.lang.String);
  public void handleMessage(android.os.Message);
  public void onGpsStarted();
  public void onGpsStopped();
  public void onFirstFix(int);
  public void onSvStatusChanged(int, int[], float[], float[], float[], int, int, int);
  public void onNmeaReceived(long, java.lang.String);
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
  public void onLocationChanged(android.location.Location);
  public void onStatusChanged(java.lang.String, int, android.os.Bundle);
  public void onProviderEnabled(java.lang.String);
  public void onProviderDisabled(java.lang.String);
public class android.location.LocationManager {
  public android.location.LocationManager(android.location.ILocationManager);
  public java.util.List<java.lang.String> getAllProviders();
  public java.util.List<java.lang.String> getProviders(boolean);
  public android.location.LocationProvider getProvider(java.lang.String);
  public java.util.List<java.lang.String> getProviders(android.location.Criteria, boolean);
  public java.lang.String getBestProvider(android.location.Criteria, boolean);
  public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener);
  public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper);
  public void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper);
  public void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent);
  public void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent);
  public void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper);
  public void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper);
  public void requestSingleUpdate(java.lang.String, android.app.PendingIntent);
  public void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent);
  public void removeUpdates(android.location.LocationListener);
  public void removeUpdates(android.app.PendingIntent);
  public void addProximityAlert(double, double, float, long, android.app.PendingIntent);
  public void removeProximityAlert(android.app.PendingIntent);
  public boolean isProviderEnabled(java.lang.String);
  public android.location.Location getLastKnownLocation(java.lang.String);
  public void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int);
  public void removeTestProvider(java.lang.String);
  public void setTestProviderLocation(java.lang.String, android.location.Location);
  public void clearTestProviderLocation(java.lang.String);
  public void setTestProviderEnabled(java.lang.String, boolean);
  public void clearTestProviderEnabled(java.lang.String);
  public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long);
  public void clearTestProviderStatus(java.lang.String);
  public boolean addGpsStatusListener(android.location.GpsStatus$Listener);
  public void removeGpsStatusListener(android.location.GpsStatus$Listener);
  public boolean addNmeaListener(android.location.GpsStatus$NmeaListener);
  public void removeNmeaListener(android.location.GpsStatus$NmeaListener);
  public android.location.GpsStatus getGpsStatus(android.location.GpsStatus);
  public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle);
  public boolean sendNiResponse(int, int);
public abstract class android.location.LocationProvider {
  public android.location.LocationProvider(java.lang.String, android.location.ILocationManager);
  public java.lang.String getName();
  public boolean meetsCriteria(android.location.Criteria);
  public abstract boolean requiresNetwork();
  public abstract boolean requiresSatellite();
  public abstract boolean requiresCell();
  public abstract boolean hasMonetaryCost();
  public abstract boolean supportsAltitude();
  public abstract boolean supportsSpeed();
  public abstract boolean supportsBearing();
  public abstract int getPowerRequirement();
  public abstract int getAccuracy();
  public void dispatchAudioFocusChange(int, java.lang.String);
  public void handleMessage(android.os.Message);
public interface android.media.AudioManager$OnAudioFocusChangeListener {
  public abstract void onAudioFocusChange(int);
public class android.media.AudioManager {
  public android.media.AudioManager(android.content.Context);
  public void preDispatchKeyEvent(int, int);
  public void handleKeyDown(int, int);
  public void handleKeyUp(int, int);
  public void adjustStreamVolume(int, int, int);
  public void adjustVolume(int, int);
  public void adjustSuggestedStreamVolume(int, int, int);
  public int getRingerMode();
  public static boolean isValidRingerMode(int);
  public int getStreamMaxVolume(int);
  public int getStreamVolume(int);
  public int getLastAudibleStreamVolume(int);
  public void setRingerMode(int);
  public void setStreamVolume(int, int, int);
  public void setStreamSolo(int, boolean);
  public void setStreamMute(int, boolean);
  public boolean isStreamMute(int);
  public void forceVolumeControlStream(int);
  public boolean shouldVibrate(int);
  public int getVibrateSetting(int);
  public void setVibrateSetting(int, int);
  public void setSpeakerphoneOn(boolean);
  public boolean isSpeakerphoneOn();
  public boolean isBluetoothScoAvailableOffCall();
  public void startBluetoothSco();
  public void stopBluetoothSco();
  public void setBluetoothScoOn(boolean);
  public boolean isBluetoothScoOn();
  public void setBluetoothA2dpOn(boolean);
  public boolean isBluetoothA2dpOn();
  public void setWiredHeadsetOn(boolean);
  public boolean isWiredHeadsetOn();
  public void setMicrophoneMute(boolean);
  public boolean isMicrophoneMute();
  public void setMode(int);
  public int getMode();
  public void setRouting(int, int, int);
  public int getRouting(int);
  public boolean isMusicActive();
  public void setParameter(java.lang.String, java.lang.String);
  public void setParameters(java.lang.String);
  public java.lang.String getParameters(java.lang.String);
  public void playSoundEffect(int);
  public void playSoundEffect(int, float);
  public void loadSoundEffects();
  public void unloadSoundEffects();
  public void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener);
  public void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener);
  public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int);
  public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener);
  public void registerMediaButtonEventReceiver(android.content.ComponentName);
  public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName);
  public void unregisterMediaButtonEventReceiver(android.content.ComponentName);
  public void unregisterMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName);
  public void registerRemoteControlClient(android.media.RemoteControlClient);
  public void unregisterRemoteControlClient(android.media.RemoteControlClient);
  public void registerRemoteControlDisplay(android.media.IRemoteControlDisplay);
  public void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay);
  public void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay, int, int);
  public void reloadAudioSettings();
  public boolean isSilentMode();
  public int getDevicesForStream(int);
public interface android.media.AudioSystem$ErrorCallback {
  public abstract void onError(int);
public class android.media.AudioSystem {
  public android.media.AudioSystem();
  public static final int getNumStreamTypes();
  public static native int muteMicrophone(boolean);
  public static native boolean isMicrophoneMuted();
  public static native boolean isStreamActive(int, int);
  public static native int setParameters(java.lang.String);
  public static native java.lang.String getParameters(java.lang.String);
  public static void setErrorCallback(android.media.AudioSystem$ErrorCallback);
  public static native int setDeviceConnectionState(int, int, java.lang.String);
  public static native int getDeviceConnectionState(int, java.lang.String);
  public static native int setPhoneState(int);
  public static native int setRingerMode(int, int);
  public static native int setForceUse(int, int);
  public static native int getForceUse(int);
  public static native int initStreamVolume(int, int, int);
  public static native int setStreamVolumeIndex(int, int);
  public static native int getStreamVolumeIndex(int);
  public static native int getDevicesForStream(int);
public class android.media.CamcorderProfile {
  public static android.media.CamcorderProfile get(int);
  public static android.media.CamcorderProfile get(int, int);
  public static boolean hasProfile(int);
  public static boolean hasProfile(int, int);
public final class android.media.DecoderCapabilities$AudioDecoder extends java.lang.Enum<android.media.DecoderCapabilities$AudioDecoder> {
  public static android.media.DecoderCapabilities$AudioDecoder[] values();
  public static android.media.DecoderCapabilities$AudioDecoder valueOf(java.lang.String);
public final class android.media.DecoderCapabilities$VideoDecoder extends java.lang.Enum<android.media.DecoderCapabilities$VideoDecoder> {
  public static android.media.DecoderCapabilities$VideoDecoder[] values();
  public static android.media.DecoderCapabilities$VideoDecoder valueOf(java.lang.String);
public class android.media.DecoderCapabilities {
  public static java.util.List<android.media.DecoderCapabilities$VideoDecoder> getVideoDecoders();
  public static java.util.List<android.media.DecoderCapabilities$AudioDecoder> getAudioDecoders();
public class android.media.ExifInterface {
  public java.lang.String getAttribute(java.lang.String);
  public int getAttributeInt(java.lang.String, int);
  public double getAttributeDouble(java.lang.String, double);
  public void setAttribute(java.lang.String, java.lang.String);
  public boolean hasThumbnail();
  public byte[] getThumbnail();
  public boolean getLatLong(float[]);
  public double getAltitude(double);
  public long getDateTime();
  public long getGpsDateTime();
public class android.media.FaceDetector$Face {
  public float confidence();
  public void getMidPoint(android.graphics.PointF);
  public float eyesDistance();
  public float pose(int);
public class android.media.FaceDetector {
  public android.media.FaceDetector(int, int, int);
  public int findFaces(android.graphics.Bitmap, android.media.FaceDetector$Face[]);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IAudioFocusDispatcher$Stub extends android.os.Binder implements android.media.IAudioFocusDispatcher {
  public android.media.IAudioFocusDispatcher$Stub();
  public static android.media.IAudioFocusDispatcher asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IAudioFocusDispatcher extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IAudioService$Stub extends android.os.Binder implements android.media.IAudioService {
  public android.media.IAudioService$Stub();
  public static android.media.IAudioService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IAudioService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IMediaScannerListener$Stub extends android.os.Binder implements android.media.IMediaScannerListener {
  public android.media.IMediaScannerListener$Stub();
  public static android.media.IMediaScannerListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IMediaScannerListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IMediaScannerService$Stub extends android.os.Binder implements android.media.IMediaScannerService {
  public android.media.IMediaScannerService$Stub();
  public static android.media.IMediaScannerService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IMediaScannerService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IRemoteControlClient$Stub extends android.os.Binder implements android.media.IRemoteControlClient {
  public android.media.IRemoteControlClient$Stub();
  public static android.media.IRemoteControlClient asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IRemoteControlClient extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.media.IRemoteControlDisplay$Stub extends android.os.Binder implements android.media.IRemoteControlDisplay {
  public android.media.IRemoteControlDisplay$Stub();
  public static android.media.IRemoteControlDisplay asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.media.IRemoteControlDisplay extends android.os.IInterface {
public class android.media.MediaFile$MediaFileType {
public class android.media.MediaFile {
  public android.media.MediaFile();
  public static boolean isAudioFileType(int);
  public static boolean isVideoFileType(int);
  public static boolean isImageFileType(int);
  public static boolean isPlayListFileType(int);
  public static boolean isDrmFileType(int);
  public static android.media.MediaFile$MediaFileType getFileType(java.lang.String);
  public static boolean isMimeTypeMedia(java.lang.String);
  public static java.lang.String getFileTitle(java.lang.String);
  public static int getFileTypeForMimeType(java.lang.String);
  public static java.lang.String getMimeTypeForFile(java.lang.String);
  public static int getFormatCode(java.lang.String, java.lang.String);
  public static java.lang.String getMimeTypeForFormatCode(int);
public class android.media.MediaMetadataRetriever {
  public android.media.MediaMetadataRetriever();
  public native java.lang.String extractMetadata(int);
  public android.graphics.Bitmap getFrameAtTime(long, int);
  public android.graphics.Bitmap getFrameAtTime(long);
  public android.graphics.Bitmap getFrameAtTime();
  public byte[] getEmbeddedPicture();
  public native void release();
  public android.media.MediaPlayer$EventHandler(android.media.MediaPlayer, android.media.MediaPlayer, android.os.Looper);
  public void handleMessage(android.os.Message);
public interface android.media.MediaPlayer$OnBufferingUpdateListener {
  public abstract void onBufferingUpdate(android.media.MediaPlayer, int);
public interface android.media.MediaPlayer$OnCompletionListener {
  public abstract void onCompletion(android.media.MediaPlayer);
public interface android.media.MediaPlayer$OnErrorListener {
  public abstract boolean onError(android.media.MediaPlayer, int, int);
public interface android.media.MediaPlayer$OnInfoListener {
  public abstract boolean onInfo(android.media.MediaPlayer, int, int);
public interface android.media.MediaPlayer$OnPreparedListener {
  public abstract void onPrepared(android.media.MediaPlayer);
public interface android.media.MediaPlayer$OnSeekCompleteListener {
  public abstract void onSeekComplete(android.media.MediaPlayer);
public interface android.media.MediaPlayer$OnTimedTextListener {
  public abstract void onTimedText(android.media.MediaPlayer, android.media.TimedText);
public interface android.media.MediaPlayer$OnVideoSizeChangedListener {
  public abstract void onVideoSizeChanged(android.media.MediaPlayer, int, int);
public class android.media.MediaPlayer {
  public android.media.MediaPlayer();
  public android.os.Parcel newRequest();
  public int invoke(android.os.Parcel, android.os.Parcel);
  public void setDisplay(android.view.SurfaceHolder);
  public void setSurface(android.view.Surface);
  public static android.media.MediaPlayer create(android.content.Context, android.net.Uri);
  public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder);
  public static android.media.MediaPlayer create(android.content.Context, int);
  public void setWakeMode(android.content.Context, int);
  public void setScreenOnWhilePlaying(boolean);
  public native int getVideoWidth();
  public native int getVideoHeight();
  public native boolean isPlaying();
  public native int getCurrentPosition();
  public native int getDuration();
  public android.media.Metadata getMetadata(boolean, boolean);
  public int setMetadataFilter(java.util.Set<java.lang.Integer>, java.util.Set<java.lang.Integer>);
  public void release();
  public void reset();
  public native void setAudioStreamType(int);
  public native void setLooping(boolean);
  public native boolean isLooping();
  public native void setVolume(float, float);
  public native int getAudioSessionId();
  public native void attachAuxEffect(int);
  public native boolean setParameter(int, android.os.Parcel);
  public boolean setParameter(int, java.lang.String);
  public boolean setParameter(int, int);
  public android.os.Parcel getParcelParameter(int);
  public java.lang.String getStringParameter(int);
  public int getIntParameter(int);
  public native void setAuxEffectSendLevel(float);
  public boolean enableTimedTextTrackIndex(int);
  public boolean enableTimedText();
  public boolean disableTimedText();
  public static native int native_pullBatteryData(android.os.Parcel);
  public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener);
  public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener);
  public void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener);
  public void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener);
  public void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener);
  public void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener);
  public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener);
  public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener);
public final class android.media.MediaRecorder$AudioEncoder {
public final class android.media.MediaRecorder$AudioSource {
  public android.media.MediaRecorder$EventHandler(android.media.MediaRecorder, android.media.MediaRecorder, android.os.Looper);
  public void handleMessage(android.os.Message);
public interface android.media.MediaRecorder$OnErrorListener {
  public abstract void onError(android.media.MediaRecorder, int, int);
public interface android.media.MediaRecorder$OnInfoListener {
  public abstract void onInfo(android.media.MediaRecorder, int, int);
public final class android.media.MediaRecorder$OutputFormat {
public final class android.media.MediaRecorder$VideoEncoder {
public final class android.media.MediaRecorder$VideoSource {
public class android.media.MediaRecorder {
  public android.media.MediaRecorder();
  public native void setCamera(android.hardware.Camera);
  public void setPreviewDisplay(android.view.Surface);
  public static final int getAudioSourceMax();
  public void setProfile(android.media.CamcorderProfile);
  public void setCaptureRate(double);
  public void setOrientationHint(int);
  public void setLocation(float, float);
  public void setAudioSamplingRate(int);
  public void setAudioChannels(int);
  public void setAudioEncodingBitRate(int);
  public void setVideoEncodingBitRate(int);
  public void setAuxiliaryOutputFile(java.io.FileDescriptor);
  public void setAuxiliaryOutputFile(java.lang.String);
  public void reset();
  public void setOnErrorListener(android.media.MediaRecorder$OnErrorListener);
  public void setOnInfoListener(android.media.MediaRecorder$OnInfoListener);
  public native void release();
  public void scanCompleted(java.lang.String, android.net.Uri);
  public void onMediaScannerConnected();
  public void onScanCompleted(java.lang.String, android.net.Uri);
public interface android.media.MediaScannerConnection$MediaScannerConnectionClient extends android.media.MediaScannerConnection$OnScanCompletedListener {
  public abstract void onMediaScannerConnected();
  public abstract void onScanCompleted(java.lang.String, android.net.Uri);
public interface android.media.MediaScannerConnection$OnScanCompletedListener {
  public abstract void onScanCompleted(java.lang.String, android.net.Uri);
public class android.media.MediaScannerConnection implements android.content.ServiceConnection {
  public android.media.MediaScannerConnection(android.content.Context, android.media.MediaScannerConnection$MediaScannerConnectionClient);
  public void connect();
  public void disconnect();
  public synchronized boolean isConnected();
  public void scanFile(java.lang.String, java.lang.String);
  public static void scanFile(android.content.Context, java.lang.String[], java.lang.String[], android.media.MediaScannerConnection$OnScanCompletedListener);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
public class android.media.Metadata {
  public android.media.Metadata();
  public boolean parse(android.os.Parcel);
  public java.util.Set<java.lang.Integer> keySet();
  public boolean has(int);
  public java.lang.String getString(int);
  public int getInt(int);
  public boolean getBoolean(int);
  public long getLong(int);
  public double getDouble(int);
  public byte[] getByteArray(int);
  public java.util.Date getDate(int);
  public static int lastSytemId();
  public static int firstCustomId();
  public static int lastType();
public class android.media.MiniThumbFile {
  public static synchronized void reset();
  public static synchronized android.media.MiniThumbFile instance(android.net.Uri);
  public android.media.MiniThumbFile(android.net.Uri);
  public synchronized void deactivate();
  public synchronized long getMagic(long);
  public synchronized byte[] getMiniThumbFromFile(long, byte[]);
  public void onInformationRequested(int, int, int, int);
  public void setCurrentClientGenerationId(int);
  public void plugRemoteControlDisplay(android.media.IRemoteControlDisplay);
  public void unplugRemoteControlDisplay(android.media.IRemoteControlDisplay);
  public android.media.RemoteControlClient$EventHandler(android.media.RemoteControlClient, android.media.RemoteControlClient, android.os.Looper);
  public void handleMessage(android.os.Message);
public class android.media.RemoteControlClient$MetadataEditor {
  public synchronized void clear();
  public synchronized void apply();
public class android.media.RemoteControlClient {
  public android.media.RemoteControlClient(android.app.PendingIntent);
  public android.media.RemoteControlClient(android.app.PendingIntent, android.os.Looper);
  public android.media.RemoteControlClient$MetadataEditor editMetadata(boolean);
  public void setPlaybackState(int);
  public void setTransportControlFlags(int);
  public android.app.PendingIntent getRcMediaIntent();
  public android.media.IRemoteControlClient getIRemoteControlClient();
public class android.media.Ringtone {
  public void setStreamType(int);
  public int getStreamType();
  public java.lang.String getTitle(android.content.Context);
  public void play();
  public void stop();
  public boolean isPlaying();
public class android.media.RingtoneManager {
  public android.media.RingtoneManager(android.app.Activity);
  public android.media.RingtoneManager(android.content.Context);
  public void setType(int);
  public int inferStreamType();
  public void setStopPreviousRingtone(boolean);
  public boolean getStopPreviousRingtone();
  public void stopPreviousRingtone();
  public boolean getIncludeDrm();
  public void setIncludeDrm(boolean);
  public android.database.Cursor getCursor();
  public android.media.Ringtone getRingtone(int);
  public android.net.Uri getRingtoneUri(int);
  public int getRingtonePosition(android.net.Uri);
  public static android.net.Uri getValidRingtoneUri(android.content.Context);
  public static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri);
  public static android.net.Uri getActualDefaultRingtoneUri(android.content.Context, int);
  public static void setActualDefaultRingtoneUri(android.content.Context, int, android.net.Uri);
  public static boolean isDefault(android.net.Uri);
  public static int getDefaultType(android.net.Uri);
  public static android.net.Uri getDefaultUri(int);
  public android.media.SoundPool$EventHandler(android.media.SoundPool, android.media.SoundPool, android.os.Looper);
  public void handleMessage(android.os.Message);
public interface android.media.SoundPool$OnLoadCompleteListener {
  public abstract void onLoadComplete(android.media.SoundPool, int, int);
public class android.media.SoundPool {
  public android.media.SoundPool(int, int, int);
  public int load(java.lang.String, int);
  public int load(android.content.Context, int, int);
  public int load(android.content.res.AssetFileDescriptor, int);
  public int load(java.io.FileDescriptor, long, long, int);
  public final native boolean unload(int);
  public final native int play(int, float, float, int, int, float);
  public final native void pause(int);
  public final native void resume(int);
  public final native void autoPause();
  public final native void autoResume();
  public final native void stop(int);
  public final native void setVolume(int, float, float);
  public final native void setPriority(int, int);
  public final native void setLoop(int, int);
  public final native void setRate(int, float);
  public void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener);
  public final native void release();
public class android.media.ThumbnailUtils {
  public android.media.ThumbnailUtils();
  public static android.graphics.Bitmap createImageThumbnail(java.lang.String, int);
  public static android.graphics.Bitmap createVideoThumbnail(java.lang.String, int);
  public static android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap, int, int);
  public static android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap, int, int, int);
public class android.media.TimedText$CharPos {
  public android.media.TimedText$CharPos(android.media.TimedText);
public class android.media.TimedText$Font {
  public android.media.TimedText$Font(android.media.TimedText);
public class android.media.TimedText$HyperText {
  public android.media.TimedText$HyperText(android.media.TimedText);
public class android.media.TimedText$Justification {
  public android.media.TimedText$Justification(android.media.TimedText);
public class android.media.TimedText$Karaoke {
  public android.media.TimedText$Karaoke(android.media.TimedText);
public class android.media.TimedText$Style {
  public android.media.TimedText$Style(android.media.TimedText);
public class android.media.TimedText$Text {
  public android.media.TimedText$Text(android.media.TimedText);
public class android.media.TimedText$TextPos {
  public android.media.TimedText$TextPos(android.media.TimedText);
public class android.media.TimedText {
  public android.media.TimedText(byte[]);
  public boolean isValidKey(int);
  public boolean containsKey(int);
  public java.util.Set keySet();
  public java.lang.Object getObject(int);
public class android.net.ConnectivityManager {
  public static boolean isNetworkTypeValid(int);
  public static java.lang.String getNetworkTypeName(int);
  public static boolean isNetworkTypeMobile(int);
  public void setNetworkPreference(int);
  public int getNetworkPreference();
  public android.net.NetworkInfo getActiveNetworkInfo();
  public android.net.NetworkInfo getActiveNetworkInfoForUid(int);
  public android.net.NetworkInfo getNetworkInfo(int);
  public android.net.NetworkInfo[] getAllNetworkInfo();
  public android.net.LinkProperties getActiveLinkProperties();
  public android.net.LinkProperties getLinkProperties(int);
  public boolean setRadios(boolean);
  public boolean setRadio(int, boolean);
  public int startUsingNetworkFeature(int, java.lang.String);
  public int stopUsingNetworkFeature(int, java.lang.String);
  public boolean requestRouteToHost(int, int);
  public boolean requestRouteToHostAddress(int, java.net.InetAddress);
  public boolean getBackgroundDataSetting();
  public void setBackgroundDataSetting(boolean);
  public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo();
  public boolean getMobileDataEnabled();
  public void setMobileDataEnabled(boolean);
  public android.net.ConnectivityManager(android.net.IConnectivityManager);
  public java.lang.String[] getTetherableIfaces();
  public java.lang.String[] getTetheredIfaces();
  public java.lang.String[] getTetheringErroredIfaces();
  public int tether(java.lang.String);
  public int untether(java.lang.String);
  public boolean isTetheringSupported();
  public java.lang.String[] getTetherableUsbRegexs();
  public java.lang.String[] getTetherableWifiRegexs();
  public java.lang.String[] getTetherableBluetoothRegexs();
  public int setUsbTethering(boolean);
  public int getLastTetherError(java.lang.String);
  public boolean requestNetworkTransitionWakelock(java.lang.String);
  public void reportInetCondition(int, int);
  public void setGlobalProxy(android.net.ProxyProperties);
  public android.net.ProxyProperties getGlobalProxy();
  public android.net.ProxyProperties getProxy();
  public void setDataDependency(int, boolean);
  public boolean isNetworkSupported(int);
public class android.net.Credentials {
  public android.net.Credentials(int, int, int);
  public int getPid();
  public int getUid();
  public int getGid();
  public android.net.DhcpInfo createFromParcel(android.os.Parcel);
  public android.net.DhcpInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.DhcpInfo implements android.os.Parcelable {
  public android.net.DhcpInfo();
  public android.net.DhcpInfo(android.net.DhcpInfo);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.IConnectivityManager$Stub extends android.os.Binder implements android.net.IConnectivityManager {
  public android.net.IConnectivityManager$Stub();
  public static android.net.IConnectivityManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.IConnectivityManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.INetworkPolicyListener$Stub extends android.os.Binder implements android.net.INetworkPolicyListener {
  public android.net.INetworkPolicyListener$Stub();
  public static android.net.INetworkPolicyListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.INetworkPolicyListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.INetworkPolicyManager$Stub extends android.os.Binder implements android.net.INetworkPolicyManager {
  public android.net.INetworkPolicyManager$Stub();
  public static android.net.INetworkPolicyManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.INetworkPolicyManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.INetworkStatsService$Stub extends android.os.Binder implements android.net.INetworkStatsService {
  public android.net.INetworkStatsService$Stub();
  public static android.net.INetworkStatsService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.INetworkStatsService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.IThrottleManager$Stub extends android.os.Binder implements android.net.IThrottleManager {
  public android.net.IThrottleManager$Stub();
  public static android.net.IThrottleManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.IThrottleManager extends android.os.IInterface {
  public android.net.LinkAddress createFromParcel(android.os.Parcel);
  public android.net.LinkAddress[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.LinkAddress implements android.os.Parcelable {
  public android.net.LinkAddress(java.net.InetAddress, int);
  public android.net.LinkAddress(java.net.InterfaceAddress);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.net.InetAddress getAddress();
  public int getNetworkPrefixLength();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.LinkCapabilities createFromParcel(android.os.Parcel);
  public android.net.LinkCapabilities[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.net.LinkCapabilities$Key {
public final class android.net.LinkCapabilities$Role {
public class android.net.LinkCapabilities implements android.os.Parcelable {
  public android.net.LinkCapabilities();
  public android.net.LinkCapabilities(android.net.LinkCapabilities);
  public static android.net.LinkCapabilities createNeedsMap(java.lang.String);
  public void clear();
  public boolean isEmpty();
  public int size();
  public java.lang.String get(int);
  public void put(int, java.lang.String);
  public boolean containsKey(int);
  public boolean containsValue(java.lang.String);
  public java.util.Set<java.util.Map$Entry<java.lang.Integer, java.lang.String>> entrySet();
  public java.util.Set<java.lang.Integer> keySet();
  public java.util.Collection<java.lang.String> values();
  public int describeContents();
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.LinkProperties createFromParcel(android.os.Parcel);
  public android.net.LinkProperties[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.LinkProperties$CompareResult<T> {
  public android.net.LinkProperties$CompareResult();
  public java.lang.String toString();
public class android.net.LinkProperties implements android.os.Parcelable {
  public android.net.LinkProperties();
  public android.net.LinkProperties(android.net.LinkProperties);
  public void setInterfaceName(java.lang.String);
  public java.lang.String getInterfaceName();
  public java.util.Collection<java.net.InetAddress> getAddresses();
  public void addLinkAddress(android.net.LinkAddress);
  public java.util.Collection<android.net.LinkAddress> getLinkAddresses();
  public void addDns(java.net.InetAddress);
  public java.util.Collection<java.net.InetAddress> getDnses();
  public void addRoute(android.net.RouteInfo);
  public java.util.Collection<android.net.RouteInfo> getRoutes();
  public void setHttpProxy(android.net.ProxyProperties);
  public android.net.ProxyProperties getHttpProxy();
  public void clear();
  public int describeContents();
  public java.lang.String toString();
  public boolean isIdenticalInterfaceName(android.net.LinkProperties);
  public boolean isIdenticalAddresses(android.net.LinkProperties);
  public boolean isIdenticalDnses(android.net.LinkProperties);
  public boolean isIdenticalRoutes(android.net.LinkProperties);
  public boolean isIdenticalHttpProxy(android.net.LinkProperties);
  public boolean equals(java.lang.Object);
  public android.net.LinkProperties$CompareResult<android.net.LinkAddress> compareAddresses(android.net.LinkProperties);
  public android.net.LinkProperties$CompareResult<java.net.InetAddress> compareDnses(android.net.LinkProperties);
  public android.net.LinkProperties$CompareResult<android.net.RouteInfo> compareRoutes(android.net.LinkProperties);
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
public class android.net.LocalServerSocket {
  public android.net.LocalSocketAddress getLocalSocketAddress();
  public java.io.FileDescriptor getFileDescriptor();
public class android.net.LocalSocket {
  public android.net.LocalSocket();
  public java.lang.String toString();
  public android.net.LocalSocketAddress getLocalSocketAddress();
  public android.net.LocalSocketAddress getRemoteSocketAddress();
  public synchronized boolean isConnected();
  public boolean isClosed();
  public synchronized boolean isBound();
  public boolean isOutputShutdown();
  public boolean isInputShutdown();
  public void setFileDescriptorsForSend(java.io.FileDescriptor[]);
  public java.io.FileDescriptor getFileDescriptor();
public final class android.net.LocalSocketAddress$Namespace extends java.lang.Enum<android.net.LocalSocketAddress$Namespace> {
  public static android.net.LocalSocketAddress$Namespace[] values();
  public static android.net.LocalSocketAddress$Namespace valueOf(java.lang.String);
public class android.net.LocalSocketAddress {
  public android.net.LocalSocketAddress(java.lang.String, android.net.LocalSocketAddress$Namespace);
  public android.net.LocalSocketAddress(java.lang.String);
  public java.lang.String getName();
  public android.net.LocalSocketAddress$Namespace getNamespace();
  public java.lang.String toString();
  public void setFileDescriptorsForSend(java.io.FileDescriptor[]);
public class android.net.NetworkConfig {
  public android.net.NetworkConfig(java.lang.String);
  public boolean isDefault();
public class android.net.NetworkIdentity {
  public android.net.NetworkIdentity(int, int, java.lang.String, boolean);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int getType();
  public int getSubType();
  public java.lang.String getSubscriberId();
  public boolean getRoaming();
  public static java.lang.String scrubSubscriberId(java.lang.String);
  public static android.net.NetworkIdentity buildNetworkIdentity(android.content.Context, android.net.NetworkState);
  public android.net.NetworkInfo createFromParcel(android.os.Parcel);
  public android.net.NetworkInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.net.NetworkInfo$DetailedState extends java.lang.Enum<android.net.NetworkInfo$DetailedState> {
  public static android.net.NetworkInfo$DetailedState[] values();
  public static android.net.NetworkInfo$DetailedState valueOf(java.lang.String);
public final class android.net.NetworkInfo$State extends java.lang.Enum<android.net.NetworkInfo$State> {
  public static android.net.NetworkInfo$State[] values();
  public static android.net.NetworkInfo$State valueOf(java.lang.String);
public class android.net.NetworkInfo implements android.os.Parcelable {
  public android.net.NetworkInfo(int);
  public android.net.NetworkInfo(int, int, java.lang.String, java.lang.String);
  public android.net.NetworkInfo(android.net.NetworkInfo);
  public int getType();
  public int getSubtype();
  public java.lang.String getTypeName();
  public java.lang.String getSubtypeName();
  public boolean isConnectedOrConnecting();
  public boolean isConnected();
  public boolean isAvailable();
  public void setIsAvailable(boolean);
  public boolean isFailover();
  public void setFailover(boolean);
  public boolean isRoaming();
  public android.net.NetworkInfo$State getState();
  public android.net.NetworkInfo$DetailedState getDetailedState();
  public void setDetailedState(android.net.NetworkInfo$DetailedState, java.lang.String, java.lang.String);
  public java.lang.String getReason();
  public java.lang.String getExtraInfo();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.NetworkPolicy createFromParcel(android.os.Parcel);
  public android.net.NetworkPolicy[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkPolicy implements android.os.Parcelable, java.lang.Comparable<android.net.NetworkPolicy> {
  public android.net.NetworkPolicy(android.net.NetworkTemplate, int, long, long, long);
  public android.net.NetworkPolicy(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public boolean isOverLimit(long);
  public int compareTo(android.net.NetworkPolicy);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public class android.net.NetworkPolicyManager {
  public android.net.NetworkPolicyManager(android.net.INetworkPolicyManager);
  public static android.net.NetworkPolicyManager getSystemService(android.content.Context);
  public void setNetworkPolicies(android.net.NetworkPolicy[]);
  public android.net.NetworkPolicy[] getNetworkPolicies();
  public void setUidPolicy(int, int);
  public int getUidPolicy(int);
  public void registerListener(android.net.INetworkPolicyListener);
  public void unregisterListener(android.net.INetworkPolicyListener);
  public static long computeLastCycleBoundary(long, android.net.NetworkPolicy);
  public static long computeNextCycleBoundary(long, android.net.NetworkPolicy);
  public static void snapToCycleDay(android.text.format.Time, int);
  public static boolean isUidValidForPolicy(android.content.Context, int);
  public static void dumpPolicy(java.io.PrintWriter, int);
  public static void dumpRules(java.io.PrintWriter, int);
  public android.net.NetworkQuotaInfo createFromParcel(android.os.Parcel);
  public android.net.NetworkQuotaInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkQuotaInfo implements android.os.Parcelable {
  public android.net.NetworkQuotaInfo(long, long, long);
  public android.net.NetworkQuotaInfo(android.os.Parcel);
  public long getEstimatedBytes();
  public long getSoftLimitBytes();
  public long getHardLimitBytes();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.NetworkState createFromParcel(android.os.Parcel);
  public android.net.NetworkState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkState implements android.os.Parcelable {
  public android.net.NetworkState(android.net.NetworkInfo, android.net.LinkProperties, android.net.LinkCapabilities);
  public android.net.NetworkState(android.net.NetworkInfo, android.net.LinkProperties, android.net.LinkCapabilities, java.lang.String);
  public android.net.NetworkState(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.NetworkStats createFromParcel(android.os.Parcel);
  public android.net.NetworkStats[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkStats$Entry {
  public android.net.NetworkStats$Entry();
  public android.net.NetworkStats$Entry(long, long, long, long, long);
  public android.net.NetworkStats$Entry(java.lang.String, int, int, int, long, long, long, long, long);
  public java.lang.String toString();
public class android.net.NetworkStats$NonMonotonicException extends java.lang.Exception {
  public android.net.NetworkStats$NonMonotonicException(android.net.NetworkStats, android.net.NetworkStats);
  public android.net.NetworkStats$NonMonotonicException(android.net.NetworkStats, int, android.net.NetworkStats, int);
public class android.net.NetworkStats implements android.os.Parcelable {
  public android.net.NetworkStats(long, int);
  public android.net.NetworkStats(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.net.NetworkStats clone();
  public android.net.NetworkStats addIfaceValues(java.lang.String, long, long, long, long);
  public android.net.NetworkStats addValues(java.lang.String, int, int, int, long, long, long, long, long);
  public android.net.NetworkStats addValues(android.net.NetworkStats$Entry);
  public android.net.NetworkStats$Entry getValues(int, android.net.NetworkStats$Entry);
  public long getElapsedRealtime();
  public long getElapsedRealtimeAge();
  public int size();
  public int internalSize();
  public android.net.NetworkStats combineValues(java.lang.String, int, int, long, long, long, long, long);
  public android.net.NetworkStats combineValues(java.lang.String, int, int, int, long, long, long, long, long);
  public android.net.NetworkStats combineValues(android.net.NetworkStats$Entry);
  public void combineAllValues(android.net.NetworkStats);
  public int findIndex(java.lang.String, int, int, int);
  public int findIndexHinted(java.lang.String, int, int, int, int);
  public void spliceOperationsFrom(android.net.NetworkStats);
  public java.lang.String[] getUniqueIfaces();
  public int[] getUniqueUids();
  public long getTotalBytes();
  public android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry);
  public android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry, int);
  public android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry, java.util.HashSet<java.lang.String>);
  public android.net.NetworkStats groupedByIface();
  public android.net.NetworkStats groupedByUid();
  public android.net.NetworkStats withoutUid(int);
  public void dump(java.lang.String, java.io.PrintWriter);
  public static java.lang.String setToString(int);
  public static java.lang.String tagToString(int);
  public java.lang.String toString();
  public int describeContents();
  public android.net.NetworkStatsHistory createFromParcel(android.os.Parcel);
  public android.net.NetworkStatsHistory[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkStatsHistory$DataStreamUtils {
  public android.net.NetworkStatsHistory$DataStreamUtils();
public class android.net.NetworkStatsHistory$Entry {
  public android.net.NetworkStatsHistory$Entry();
public class android.net.NetworkStatsHistory$ParcelUtils {
  public android.net.NetworkStatsHistory$ParcelUtils();
  public static long[] readLongArray(android.os.Parcel);
  public static void writeLongArray(android.os.Parcel, long[], int);
public class android.net.NetworkStatsHistory implements android.os.Parcelable {
  public android.net.NetworkStatsHistory(long);
  public android.net.NetworkStatsHistory(long, int);
  public android.net.NetworkStatsHistory(long, int, int);
  public android.net.NetworkStatsHistory(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public int size();
  public long getBucketDuration();
  public long getStart();
  public long getEnd();
  public int getIndexBefore(long);
  public int getIndexAfter(long);
  public android.net.NetworkStatsHistory$Entry getValues(int, android.net.NetworkStatsHistory$Entry);
  public void recordData(long, long, long, long);
  public void recordData(long, long, android.net.NetworkStats$Entry);
  public void recordEntireHistory(android.net.NetworkStatsHistory);
  public void removeBucketsBefore(long);
  public android.net.NetworkStatsHistory$Entry getValues(long, long, android.net.NetworkStatsHistory$Entry);
  public android.net.NetworkStatsHistory$Entry getValues(long, long, long, android.net.NetworkStatsHistory$Entry);
  public void generateRandom(long, long, long);
  public void generateRandom(long, long, long, long, long, long, long, java.util.Random);
  public static long randomLong(java.util.Random, long, long);
  public void dump(java.lang.String, java.io.PrintWriter, boolean);
  public java.lang.String toString();
  public android.net.NetworkTemplate createFromParcel(android.os.Parcel);
  public android.net.NetworkTemplate[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.NetworkTemplate implements android.os.Parcelable {
  public static android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String);
  public static android.net.NetworkTemplate buildTemplateMobile3gLower(java.lang.String);
  public static android.net.NetworkTemplate buildTemplateMobile4g(java.lang.String);
  public static android.net.NetworkTemplate buildTemplateWifi();
  public static android.net.NetworkTemplate buildTemplateEthernet();
  public android.net.NetworkTemplate(int, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int getMatchRule();
  public java.lang.String getSubscriberId();
  public boolean matches(android.net.NetworkIdentity);
public class android.net.NetworkUtils {
  public android.net.NetworkUtils();
  public static native int enableInterface(java.lang.String);
  public static native int disableInterface(java.lang.String);
  public static native int resetConnections(java.lang.String, int);
  public static native boolean runDhcp(java.lang.String, android.net.DhcpInfoInternal);
  public static native boolean runDhcpRenew(java.lang.String, android.net.DhcpInfoInternal);
  public static native boolean stopDhcp(java.lang.String);
  public static native boolean releaseDhcpLease(java.lang.String);
  public static native java.lang.String getDhcpError();
  public static java.net.InetAddress intToInetAddress(int);
  public static int netmaskIntToPrefixLength(int);
  public static java.net.InetAddress getNetworkPart(java.net.InetAddress, int);
  public static boolean addressTypeMatches(java.net.InetAddress, java.net.InetAddress);
  public static java.lang.String[] makeStrings(java.util.Collection<java.net.InetAddress>);
  public static java.lang.String trimV4AddrZeros(java.lang.String);
public class android.net.ParseException extends java.lang.RuntimeException {
  public android.net.Proxy$AndroidProxySelectorRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector, android.content.Context);
  public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext);
public final class android.net.Proxy {
  public android.net.Proxy();
  public static final java.net.Proxy getProxy(android.content.Context, java.lang.String);
  public static final java.lang.String getHost(android.content.Context);
  public static final int getPort(android.content.Context);
  public static final java.lang.String getDefaultHost();
  public static final int getDefaultPort();
  public static final org.apache.http.HttpHost getPreferredHttpHost(android.content.Context, java.lang.String);
  public static void validate(java.lang.String, java.lang.String, java.lang.String);
  public static final org.apache.http.conn.routing.HttpRoutePlanner getAndroidProxySelectorRoutePlanner(android.content.Context);
  public static final void setHttpProxySystemProperty(android.net.ProxyProperties);
  public static final void setHttpProxySystemProperty(java.lang.String, java.lang.String, java.lang.String);
  public android.net.ProxyProperties createFromParcel(android.os.Parcel);
  public android.net.ProxyProperties[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.ProxyProperties implements android.os.Parcelable {
  public android.net.ProxyProperties(java.lang.String, int, java.lang.String);
  public android.net.ProxyProperties(android.net.ProxyProperties);
  public java.net.InetSocketAddress getSocketAddress();
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getExclusionList();
  public boolean isExcluded(java.lang.String);
  public java.net.Proxy makeProxy();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.RouteInfo createFromParcel(android.os.Parcel);
  public android.net.RouteInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.RouteInfo implements android.os.Parcelable {
  public android.net.RouteInfo(android.net.LinkAddress, java.net.InetAddress);
  public android.net.RouteInfo(java.net.InetAddress);
  public static android.net.RouteInfo makeHostRoute(java.net.InetAddress);
  public static android.net.RouteInfo makeHostRoute(java.net.InetAddress, java.net.InetAddress);
  public android.net.LinkAddress getDestination();
  public java.net.InetAddress getGateway();
  public boolean isDefaultRoute();
  public boolean isHostRoute();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public static android.net.RouteInfo selectBestRoute(java.util.Collection<android.net.RouteInfo>, java.net.InetAddress);
  public java.security.cert.X509Certificate[] getAcceptedIssuers();
  public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String);
  public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String);
public class android.net.SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory {
  public android.net.SSLCertificateSocketFactory(int);
  public static javax.net.SocketFactory getDefault(int);
  public static javax.net.ssl.SSLSocketFactory getDefault(int, android.net.SSLSessionCache);
  public static javax.net.ssl.SSLSocketFactory getInsecure(int, android.net.SSLSessionCache);
  public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int, android.net.SSLSessionCache);
  public void setTrustManagers(javax.net.ssl.TrustManager[]);
  public void setKeyManagers(javax.net.ssl.KeyManager[]);
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public final class android.net.SSLSessionCache {
  public android.net.SSLSessionCache(android.content.Context);
public class android.net.ThrottleManager {
  public long getResetTime(java.lang.String);
  public long getPeriodStartTime(java.lang.String);
  public long getByteCount(java.lang.String, int, int, int);
  public long getCliffThreshold(java.lang.String, int);
  public int getCliffLevel(java.lang.String, int);
  public java.lang.String getHelpUri();
  public android.net.ThrottleManager(android.net.IThrottleManager);
public class android.net.TrafficStats {
  public android.net.TrafficStats();
  public static void setThreadStatsTag(int);
  public static int getThreadStatsTag();
  public static void clearThreadStatsTag();
  public static void setThreadStatsUid(int);
  public static void clearThreadStatsUid();
  public static void startDataProfiling(android.content.Context);
  public static android.net.NetworkStats stopDataProfiling(android.content.Context);
  public static void incrementOperationCount(int);
  public static void incrementOperationCount(int, int);
  public static native long getMobileTxPackets();
  public static native long getMobileRxPackets();
  public static native long getMobileTxBytes();
  public static native long getMobileRxBytes();
  public static native long getTxPackets(java.lang.String);
  public static native long getRxPackets(java.lang.String);
  public static native long getTxBytes(java.lang.String);
  public static native long getRxBytes(java.lang.String);
  public static native long getTotalTxPackets();
  public static native long getTotalRxPackets();
  public static native long getTotalTxBytes();
  public static native long getTotalRxBytes();
  public static native long getUidTxBytes(int);
  public static native long getUidRxBytes(int);
  public static native long getUidTxPackets(int);
  public static native long getUidRxPackets(int);
  public static native long getUidTcpTxBytes(int);
  public static native long getUidTcpRxBytes(int);
  public static native long getUidUdpTxBytes(int);
  public static native long getUidUdpRxBytes(int);
  public static native long getUidTcpTxSegments(int);
  public static native long getUidTcpRxSegments(int);
  public static native long getUidUdpTxPackets(int);
  public static native long getUidUdpRxPackets(int);
  public android.net.Uri createFromParcel(android.os.Parcel);
  public android.net.Uri[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public java.lang.String getLastPathSegment();
  public final java.lang.String getEncodedUserInfo();
  public java.lang.String getUserInfo();
  public java.lang.String getHost();
  public int getPort();
  public int compareTo(java.lang.Object);
public final class android.net.Uri$Builder {
  public android.net.Uri$Builder();
  public android.net.Uri$Builder scheme(java.lang.String);
  public android.net.Uri$Builder opaquePart(java.lang.String);
  public android.net.Uri$Builder encodedOpaquePart(java.lang.String);
  public android.net.Uri$Builder authority(java.lang.String);
  public android.net.Uri$Builder encodedAuthority(java.lang.String);
  public android.net.Uri$Builder path(java.lang.String);
  public android.net.Uri$Builder encodedPath(java.lang.String);
  public android.net.Uri$Builder appendPath(java.lang.String);
  public android.net.Uri$Builder appendEncodedPath(java.lang.String);
  public android.net.Uri$Builder query(java.lang.String);
  public android.net.Uri$Builder encodedQuery(java.lang.String);
  public android.net.Uri$Builder fragment(java.lang.String);
  public android.net.Uri$Builder encodedFragment(java.lang.String);
  public android.net.Uri$Builder appendQueryParameter(java.lang.String, java.lang.String);
  public android.net.Uri$Builder clearQuery();
  public android.net.Uri build();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean isHierarchical();
  public boolean isRelative();
  public java.lang.String getScheme();
  public java.lang.String getEncodedSchemeSpecificPart();
  public java.lang.String getSchemeSpecificPart();
  public java.lang.String getAuthority();
  public java.lang.String getEncodedAuthority();
  public java.lang.String getEncodedPath();
  public java.lang.String getPath();
  public java.lang.String getQuery();
  public java.lang.String getEncodedQuery();
  public java.lang.String getFragment();
  public java.lang.String getEncodedFragment();
  public java.util.List<java.lang.String> getPathSegments();
  public java.lang.String toString();
  public android.net.Uri$Builder buildUpon();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean isHierarchical();
  public boolean isRelative();
  public java.lang.String getScheme();
  public java.lang.String getEncodedSchemeSpecificPart();
  public java.lang.String getSchemeSpecificPart();
  public java.lang.String getAuthority();
  public java.lang.String getEncodedAuthority();
  public java.lang.String getPath();
  public java.lang.String getEncodedPath();
  public java.lang.String getQuery();
  public java.lang.String getEncodedQuery();
  public java.lang.String getFragment();
  public java.lang.String getEncodedFragment();
  public java.util.List<java.lang.String> getPathSegments();
  public java.lang.String getLastPathSegment();
  public java.lang.String getUserInfo();
  public java.lang.String getEncodedUserInfo();
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String toString();
  public android.net.Uri$Builder buildUpon();
  public int compareTo(java.lang.Object);
  public android.net.Uri$Part$EmptyPart(java.lang.String);
  public java.lang.String get(int);
  public int size();
  public java.lang.Object get(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public boolean isHierarchical();
  public boolean isRelative();
  public java.lang.String getScheme();
  public java.lang.String getEncodedSchemeSpecificPart();
  public java.lang.String getSchemeSpecificPart();
  public java.lang.String getEncodedAuthority();
  public java.lang.String getAuthority();
  public java.lang.String getPath();
  public java.lang.String getEncodedPath();
  public java.util.List<java.lang.String> getPathSegments();
  public java.lang.String getEncodedQuery();
  public java.lang.String getQuery();
  public java.lang.String getEncodedFragment();
  public java.lang.String getFragment();
  public java.lang.String toString();
  public android.net.Uri$Builder buildUpon();
public abstract class android.net.Uri implements android.os.Parcelable, java.lang.Comparable<android.net.Uri> {
  public abstract boolean isHierarchical();
  public boolean isOpaque();
  public abstract boolean isRelative();
  public boolean isAbsolute();
  public abstract java.lang.String getScheme();
  public abstract java.lang.String getSchemeSpecificPart();
  public abstract java.lang.String getEncodedSchemeSpecificPart();
  public abstract java.lang.String getAuthority();
  public abstract java.lang.String getEncodedAuthority();
  public abstract java.lang.String getUserInfo();
  public abstract java.lang.String getEncodedUserInfo();
  public abstract java.lang.String getHost();
  public abstract int getPort();
  public abstract java.lang.String getPath();
  public abstract java.lang.String getEncodedPath();
  public abstract java.lang.String getQuery();
  public abstract java.lang.String getEncodedQuery();
  public abstract java.lang.String getFragment();
  public abstract java.lang.String getEncodedFragment();
  public abstract java.util.List<java.lang.String> getPathSegments();
  public abstract java.lang.String getLastPathSegment();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(android.net.Uri);
  public abstract java.lang.String toString();
  public java.lang.String toSafeString();
  public abstract android.net.Uri$Builder buildUpon();
  public static android.net.Uri parse(java.lang.String);
  public static android.net.Uri fromFile(java.io.File);
  public static android.net.Uri fromParts(java.lang.String, java.lang.String, java.lang.String);
  public java.util.Set<java.lang.String> getQueryParameterNames();
  public java.util.List<java.lang.String> getQueryParameters(java.lang.String);
  public java.lang.String getQueryParameter(java.lang.String);
  public boolean getBooleanQueryParameter(java.lang.String, boolean);
  public static void writeToParcel(android.os.Parcel, android.net.Uri);
  public static java.lang.String encode(java.lang.String);
  public static java.lang.String encode(java.lang.String, java.lang.String);
  public static java.lang.String decode(java.lang.String);
  public static android.net.Uri withAppendedPath(android.net.Uri, java.lang.String);
  public int compareTo(java.lang.Object);
public class android.net.WebAddress {
  public java.lang.String toString();
  public void setScheme(java.lang.String);
  public java.lang.String getScheme();
  public void setHost(java.lang.String);
  public java.lang.String getHost();
  public void setPort(int);
  public int getPort();
  public void setPath(java.lang.String);
  public java.lang.String getPath();
  public void setAuthInfo(java.lang.String);
  public java.lang.String getAuthInfo();
  public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext);
public final class android.net.http.AndroidHttpClient implements org.apache.http.client.HttpClient {
  public static android.net.http.AndroidHttpClient newInstance(java.lang.String, android.content.Context);
  public static android.net.http.AndroidHttpClient newInstance(java.lang.String);
  public static void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest);
  public void close();
  public org.apache.http.params.HttpParams getParams();
  public org.apache.http.conn.ClientConnectionManager getConnectionManager();
  public static long getMinGzipSize(android.content.ContentResolver);
  public void enableCurlLogging(java.lang.String, int);
  public void disableCurlLogging();
  public static long parseDate(java.lang.String);
public class android.net.http.AndroidHttpClientConnection implements org.apache.http.HttpInetConnection,org.apache.http.HttpConnection {
  public android.net.http.AndroidHttpClientConnection();
  public java.lang.String toString();
  public boolean isOpen();
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public java.net.InetAddress getRemoteAddress();
  public int getRemotePort();
  public void setSocketTimeout(int);
  public int getSocketTimeout();
  public org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers);
  public boolean isStale();
  public org.apache.http.HttpConnectionMetrics getMetrics();
  public static android.net.http.CertificateChainValidator getInstance();
  public synchronized java.lang.String toString();
  public void run();
  public synchronized java.lang.String toString();
public class android.net.http.ErrorStrings {
  public static java.lang.String getString(int, android.content.Context);
  public static int getResource(int);
public interface android.net.http.EventHandler {
  public abstract void status(int, int, int, java.lang.String);
  public abstract void headers(android.net.http.Headers);
  public abstract void data(byte[], int);
  public abstract void endData();
  public abstract void certificate(android.net.http.SslCertificate);
  public abstract void error(int, java.lang.String);
  public abstract boolean handleSslErrorRequest(android.net.http.SslError);
public interface android.net.http.Headers$HeaderCallback {
  public abstract void header(java.lang.String, java.lang.String);
public final class android.net.http.Headers {
  public android.net.http.Headers();
  public void parseHeader(org.apache.http.util.CharArrayBuffer);
  public long getTransferEncoding();
  public long getContentLength();
  public int getConnectionType();
  public java.lang.String getContentType();
  public java.lang.String getContentEncoding();
  public java.lang.String getLocation();
  public java.lang.String getWwwAuthenticate();
  public java.lang.String getProxyAuthenticate();
  public java.lang.String getContentDisposition();
  public java.lang.String getAcceptRanges();
  public java.lang.String getExpires();
  public java.lang.String getCacheControl();
  public java.lang.String getLastModified();
  public java.lang.String getEtag();
  public java.util.ArrayList<java.lang.String> getSetCookie();
  public java.lang.String getPragma();
  public java.lang.String getRefresh();
  public java.lang.String getXPermittedCrossDomainPolicies();
  public void setContentLength(long);
  public void setContentType(java.lang.String);
  public void setContentEncoding(java.lang.String);
  public void setLocation(java.lang.String);
  public void setWwwAuthenticate(java.lang.String);
  public void setProxyAuthenticate(java.lang.String);
  public void setContentDisposition(java.lang.String);
  public void setAcceptRanges(java.lang.String);
  public void setExpires(java.lang.String);
  public void setCacheControl(java.lang.String);
  public void setLastModified(java.lang.String);
  public void setEtag(java.lang.String);
  public void setXPermittedCrossDomainPolicies(java.lang.String);
  public void getHeaders(android.net.http.Headers$HeaderCallback);
public class android.net.http.HttpAuthHeader {
  public android.net.http.HttpAuthHeader(java.lang.String);
  public boolean isProxy();
  public void setProxy();
  public java.lang.String getUsername();
  public void setUsername(java.lang.String);
  public java.lang.String getPassword();
  public void setPassword(java.lang.String);
  public boolean isBasic();
  public boolean isDigest();
  public int getScheme();
  public boolean getStale();
  public java.lang.String getRealm();
  public java.lang.String getNonce();
  public java.lang.String getOpaque();
  public java.lang.String getQop();
  public java.lang.String getAlgorithm();
  public boolean isSupportedScheme();
  public java.security.cert.X509Certificate[] getAcceptedIssuers();
  public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String);
  public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String);
public class android.net.http.HttpsConnection extends android.net.http.Connection {
  public static void initializeEngine(java.io.File);
  public java.lang.String toString();
  public void run();
public class android.net.http.LoggingEventHandler implements android.net.http.EventHandler {
  public android.net.http.LoggingEventHandler();
  public void requestSent();
  public void status(int, int, int, java.lang.String);
  public void headers(android.net.http.Headers);
  public void locationChanged(java.lang.String, boolean);
  public void data(byte[], int);
  public void endData();
  public void certificate(android.net.http.SslCertificate);
  public void error(int, java.lang.String);
  public boolean handleSslErrorRequest(android.net.http.SslError);
  public java.lang.String toString();
  public void handleSslErrorResponse(boolean);
  public abstract android.net.http.Request getRequest();
  public abstract android.net.http.Request getRequest(org.apache.http.HttpHost);
  public abstract boolean haveRequest(org.apache.http.HttpHost);
  public abstract void requeueRequest(android.net.http.Request);
public class android.net.http.RequestHandle {
  public android.net.http.RequestHandle(android.net.http.RequestQueue, java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.io.InputStream, int, android.net.http.Request);
  public android.net.http.RequestHandle(android.net.http.RequestQueue, java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.io.InputStream, int, android.net.http.Request, android.net.http.Connection);
  public void cancel();
  public void pauseRequest(boolean);
  public void handleSslErrorResponse(boolean);
  public boolean isRedirectMax();
  public int getRedirectCount();
  public void setRedirectCount(int);
  public boolean setupRedirect(java.lang.String, int, java.util.Map<java.lang.String, java.lang.String>);
  public void setupBasicAuthResponse(boolean, java.lang.String, java.lang.String);
  public void setupDigestAuthResponse(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getMethod();
  public static java.lang.String computeBasicAuthResponse(java.lang.String, java.lang.String);
  public void waitUntilComplete();
  public void processRequest();
  public static java.lang.String authorizationHeader(boolean);
  public void onReceive(android.content.Context, android.content.Intent);
  public void startTiming();
  public void stopTiming();
  public org.apache.http.HttpHost getProxyHost();
  public android.net.http.Connection getConnection(android.content.Context, org.apache.http.HttpHost);
  public boolean recycleConnection(android.net.http.Connection);
  public abstract org.apache.http.HttpHost getProxyHost();
  public abstract android.net.http.Connection getConnection(android.content.Context, org.apache.http.HttpHost);
  public abstract boolean recycleConnection(android.net.http.Connection);
  public android.net.http.Request getRequest();
  public android.net.http.Request getRequest(org.apache.http.HttpHost);
  public boolean haveRequest(org.apache.http.HttpHost);
  public void requeueRequest(android.net.http.Request);
public class android.net.http.RequestQueue implements android.net.http.RequestFeeder {
  public android.net.http.RequestQueue(android.content.Context);
  public android.net.http.RequestQueue(android.content.Context, int);
  public synchronized void enablePlatformNotifications();
  public synchronized void disablePlatformNotifications();
  public org.apache.http.HttpHost getProxyHost();
  public android.net.http.RequestHandle queueRequest(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
  public android.net.http.RequestHandle queueRequest(java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
  public android.net.http.RequestHandle queueSynchronousRequest(java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
  public synchronized android.net.http.Request getRequest();
  public synchronized android.net.http.Request getRequest(org.apache.http.HttpHost);
  public synchronized boolean haveRequest(org.apache.http.HttpHost);
  public void requeueRequest(android.net.http.Request);
  public void shutdown();
  public void startTiming();
  public void stopTiming();
  public android.net.http.SSLConnectionClosedByUserException(java.lang.String);
public class android.net.http.SslCertificate$DName {
  public android.net.http.SslCertificate$DName(android.net.http.SslCertificate, java.lang.String);
  public java.lang.String getDName();
  public java.lang.String getCName();
  public java.lang.String getOName();
  public java.lang.String getUName();
public class android.net.http.SslCertificate {
  public static android.os.Bundle saveState(android.net.http.SslCertificate);
  public static android.net.http.SslCertificate restoreState(android.os.Bundle);
  public android.net.http.SslCertificate(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.net.http.SslCertificate(java.lang.String, java.lang.String, java.util.Date, java.util.Date);
  public android.net.http.SslCertificate(java.security.cert.X509Certificate);
  public java.util.Date getValidNotBeforeDate();
  public java.lang.String getValidNotBefore();
  public java.util.Date getValidNotAfterDate();
  public java.lang.String getValidNotAfter();
  public android.net.http.SslCertificate$DName getIssuedTo();
  public android.net.http.SslCertificate$DName getIssuedBy();
  public java.lang.String toString();
  public android.view.View inflateCertificateView(android.content.Context);
public class android.net.http.SslError {
  public android.net.http.SslError(int, android.net.http.SslCertificate);
  public android.net.http.SslError(int, java.security.cert.X509Certificate);
  public android.net.http.SslError(int, android.net.http.SslCertificate, java.lang.String);
  public android.net.http.SslError(int, java.security.cert.X509Certificate, java.lang.String);
  public static android.net.http.SslError SslErrorFromChromiumErrorCode(int, android.net.http.SslCertificate, java.lang.String);
  public android.net.http.SslCertificate getCertificate();
  public java.lang.String getUrl();
  public boolean addError(int);
  public boolean hasError(int);
  public int getPrimaryError();
  public java.lang.String toString();
public class android.net.rtp.AudioCodec {
  public static android.net.rtp.AudioCodec[] getCodecs();
  public static android.net.rtp.AudioCodec getCodec(int, java.lang.String, java.lang.String);
public class android.net.rtp.AudioGroup {
  public android.net.rtp.AudioGroup();
  public android.net.rtp.AudioStream[] getStreams();
  public int getMode();
  public void setMode(int);
  public void sendDtmf(int);
  public void clear();
public class android.net.rtp.AudioStream extends android.net.rtp.RtpStream {
  public final boolean isBusy();
  public android.net.rtp.AudioGroup getGroup();
  public void join(android.net.rtp.AudioGroup);
  public android.net.rtp.AudioCodec getCodec();
  public void setCodec(android.net.rtp.AudioCodec);
  public int getDtmfType();
  public void setDtmfType(int);
public class android.net.rtp.RtpStream {
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public java.net.InetAddress getRemoteAddress();
  public int getRemotePort();
  public boolean isBusy();
  public int getMode();
  public void setMode(int);
  public void associate(java.net.InetAddress, int);
  public void release();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.sip.ISipService$Stub extends android.os.Binder implements android.net.sip.ISipService {
  public android.net.sip.ISipService$Stub();
  public static android.net.sip.ISipService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.sip.ISipService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.sip.ISipSession$Stub extends android.os.Binder implements android.net.sip.ISipSession {
  public android.net.sip.ISipSession$Stub();
  public static android.net.sip.ISipSession asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.sip.ISipSession extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.sip.ISipSessionListener$Stub extends android.os.Binder implements android.net.sip.ISipSessionListener {
  public android.net.sip.ISipSessionListener$Stub();
  public static android.net.sip.ISipSessionListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.sip.ISipSessionListener extends android.os.IInterface {
  public java.lang.String getAddress();
  public void setAddress(java.lang.String);
  public java.lang.String getEncryptionMethod();
  public java.lang.String getEncryptionKey();
  public void setEncryption(java.lang.String, java.lang.String);
  public java.lang.String[] getBandwidthTypes();
  public int getBandwidth(java.lang.String);
  public void setBandwidth(java.lang.String, int);
  public java.lang.String[] getAttributeNames();
  public java.lang.String getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String);
public class android.net.sip.SimpleSessionDescription$Media extends android.net.sip.SimpleSessionDescription$Fields {
  public java.lang.String getType();
  public int getPort();
  public int getPortCount();
  public java.lang.String getProtocol();
  public java.lang.String[] getFormats();
  public java.lang.String getFmtp(java.lang.String);
  public void setFormat(java.lang.String, java.lang.String);
  public void removeFormat(java.lang.String);
  public int[] getRtpPayloadTypes();
  public java.lang.String getRtpmap(int);
  public java.lang.String getFmtp(int);
  public void setRtpPayload(int, java.lang.String, java.lang.String);
  public void removeRtpPayload(int);
  public void setAttribute(java.lang.String, java.lang.String);
  public java.lang.String getAttribute(java.lang.String);
  public java.lang.String[] getAttributeNames();
  public void setBandwidth(java.lang.String, int);
  public int getBandwidth(java.lang.String);
  public java.lang.String[] getBandwidthTypes();
  public void setEncryption(java.lang.String, java.lang.String);
  public java.lang.String getEncryptionKey();
  public java.lang.String getEncryptionMethod();
  public void setAddress(java.lang.String);
  public java.lang.String getAddress();
public class android.net.sip.SimpleSessionDescription {
  public android.net.sip.SimpleSessionDescription(long, java.lang.String);
  public android.net.sip.SimpleSessionDescription(java.lang.String);
  public android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String, int, int, java.lang.String);
  public android.net.sip.SimpleSessionDescription$Media[] getMedia();
  public java.lang.String encode();
  public java.lang.String getAddress();
  public void setAddress(java.lang.String);
  public java.lang.String getEncryptionMethod();
  public java.lang.String getEncryptionKey();
  public void setEncryption(java.lang.String, java.lang.String);
  public java.lang.String[] getBandwidthTypes();
  public int getBandwidth(java.lang.String);
  public void setBandwidth(java.lang.String, int);
  public java.lang.String[] getAttributeNames();
  public java.lang.String getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String);
  public void onCalling(android.net.sip.SipSession);
  public void onRingingBack(android.net.sip.SipSession);
  public void onRinging(android.net.sip.SipSession, android.net.sip.SipProfile, java.lang.String);
  public void onCallEstablished(android.net.sip.SipSession, java.lang.String);
  public void onCallEnded(android.net.sip.SipSession);
  public void onCallBusy(android.net.sip.SipSession);
  public void onCallChangeFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onError(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistering(android.net.sip.SipSession);
  public void onRegistrationTimeout(android.net.sip.SipSession);
  public void onRegistrationFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistrationDone(android.net.sip.SipSession, int);
  public void onCallTransferring(android.net.sip.SipSession, java.lang.String);
public class android.net.sip.SipAudioCall$Listener {
  public android.net.sip.SipAudioCall$Listener();
  public void onReadyToCall(android.net.sip.SipAudioCall);
  public void onCalling(android.net.sip.SipAudioCall);
  public void onRinging(android.net.sip.SipAudioCall, android.net.sip.SipProfile);
  public void onRingingBack(android.net.sip.SipAudioCall);
  public void onCallEstablished(android.net.sip.SipAudioCall);
  public void onCallEnded(android.net.sip.SipAudioCall);
  public void onCallBusy(android.net.sip.SipAudioCall);
  public void onCallHeld(android.net.sip.SipAudioCall);
  public void onError(android.net.sip.SipAudioCall, int, java.lang.String);
  public void onChanged(android.net.sip.SipAudioCall);
public class android.net.sip.SipAudioCall {
  public android.net.sip.SipAudioCall(android.content.Context, android.net.sip.SipProfile);
  public void setListener(android.net.sip.SipAudioCall$Listener);
  public void setListener(android.net.sip.SipAudioCall$Listener, boolean);
  public boolean isInCall();
  public boolean isOnHold();
  public void close();
  public android.net.sip.SipProfile getLocalProfile();
  public android.net.sip.SipProfile getPeerProfile();
  public int getState();
  public android.net.sip.SipSession getSipSession();
  public void toggleMute();
  public boolean isMuted();
  public void setSpeakerMode(boolean);
  public void sendDtmf(int);
  public void sendDtmf(int, android.os.Message);
  public android.net.rtp.AudioStream getAudioStream();
  public android.net.rtp.AudioGroup getAudioGroup();
  public void setAudioGroup(android.net.rtp.AudioGroup);
  public void startAudio();
public class android.net.sip.SipErrorCode {
  public static java.lang.String toString(int);
public class android.net.sip.SipException extends java.lang.Exception {
  public android.net.sip.SipException();
  public android.net.sip.SipException(java.lang.String);
  public android.net.sip.SipException(java.lang.String, java.lang.Throwable);
  public android.net.sip.SipManager$ListenerRelay(android.net.sip.SipRegistrationListener, java.lang.String);
  public void onRegistering(android.net.sip.ISipSession);
  public void onRegistrationDone(android.net.sip.ISipSession, int);
  public void onRegistrationFailed(android.net.sip.ISipSession, int, java.lang.String);
  public void onRegistrationTimeout(android.net.sip.ISipSession);
public class android.net.sip.SipManager {
  public static android.net.sip.SipManager newInstance(android.content.Context);
  public static boolean isApiSupported(android.content.Context);
  public static boolean isVoipSupported(android.content.Context);
  public static boolean isSipWifiOnly(android.content.Context);
  public static boolean isIncomingCallIntent(android.content.Intent);
  public static java.lang.String getCallId(android.content.Intent);
  public static java.lang.String getOfferSessionDescription(android.content.Intent);
  public static android.content.Intent createIncomingCallBroadcast(java.lang.String, java.lang.String);
  public android.net.sip.SipProfile[] getListOfProfiles();
  public android.net.sip.SipProfile createFromParcel(android.os.Parcel);
  public android.net.sip.SipProfile[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.sip.SipProfile$Builder {
  public android.net.sip.SipProfile$Builder(android.net.sip.SipProfile);
  public android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String);
  public android.net.sip.SipProfile$Builder setProfileName(java.lang.String);
  public android.net.sip.SipProfile$Builder setPassword(java.lang.String);
  public android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String);
  public android.net.sip.SipProfile$Builder setDisplayName(java.lang.String);
  public android.net.sip.SipProfile$Builder setSendKeepAlive(boolean);
  public android.net.sip.SipProfile$Builder setAutoRegistration(boolean);
  public android.net.sip.SipProfile build();
public class android.net.sip.SipProfile implements android.os.Parcelable,java.io.Serializable,java.lang.Cloneable {
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public javax.sip.address.SipURI getUri();
  public java.lang.String getUriString();
  public javax.sip.address.Address getSipAddress();
  public java.lang.String getDisplayName();
  public java.lang.String getUserName();
  public java.lang.String getAuthUserName();
  public java.lang.String getPassword();
  public java.lang.String getSipDomain();
  public int getPort();
  public java.lang.String getProtocol();
  public java.lang.String getProxyAddress();
  public java.lang.String getProfileName();
  public boolean getSendKeepAlive();
  public boolean getAutoRegistration();
  public void setCallingUid(int);
  public int getCallingUid();
public interface android.net.sip.SipRegistrationListener {
  public abstract void onRegistering(java.lang.String);
  public abstract void onRegistrationDone(java.lang.String, long);
  public abstract void onRegistrationFailed(java.lang.String, int, java.lang.String);
  public void onCalling(android.net.sip.ISipSession);
  public void onRinging(android.net.sip.ISipSession, android.net.sip.SipProfile, java.lang.String);
  public void onRingingBack(android.net.sip.ISipSession);
  public void onCallEstablished(android.net.sip.ISipSession, java.lang.String);
  public void onCallEnded(android.net.sip.ISipSession);
  public void onCallBusy(android.net.sip.ISipSession);
  public void onCallTransferring(android.net.sip.ISipSession, java.lang.String);
  public void onCallChangeFailed(android.net.sip.ISipSession, int, java.lang.String);
  public void onError(android.net.sip.ISipSession, int, java.lang.String);
  public void onRegistering(android.net.sip.ISipSession);
  public void onRegistrationDone(android.net.sip.ISipSession, int);
  public void onRegistrationFailed(android.net.sip.ISipSession, int, java.lang.String);
  public void onRegistrationTimeout(android.net.sip.ISipSession);
public class android.net.sip.SipSession$Listener {
  public android.net.sip.SipSession$Listener();
  public void onCalling(android.net.sip.SipSession);
  public void onRinging(android.net.sip.SipSession, android.net.sip.SipProfile, java.lang.String);
  public void onRingingBack(android.net.sip.SipSession);
  public void onCallEstablished(android.net.sip.SipSession, java.lang.String);
  public void onCallEnded(android.net.sip.SipSession);
  public void onCallBusy(android.net.sip.SipSession);
  public void onCallTransferring(android.net.sip.SipSession, java.lang.String);
  public void onError(android.net.sip.SipSession, int, java.lang.String);
  public void onCallChangeFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistering(android.net.sip.SipSession);
  public void onRegistrationDone(android.net.sip.SipSession, int);
  public void onRegistrationFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistrationTimeout(android.net.sip.SipSession);
public class android.net.sip.SipSession$State {
  public static java.lang.String toString(int);
public final class android.net.sip.SipSession {
  public java.lang.String getLocalIp();
  public android.net.sip.SipProfile getLocalProfile();
  public android.net.sip.SipProfile getPeerProfile();
  public int getState();
  public boolean isInCall();
  public java.lang.String getCallId();
  public void setListener(android.net.sip.SipSession$Listener);
  public void register(int);
  public void unregister();
  public void makeCall(android.net.sip.SipProfile, java.lang.String, int);
  public void answerCall(java.lang.String, int);
  public void endCall();
  public void changeCall(java.lang.String, int);
public class android.net.sip.SipSessionAdapter extends android.net.sip.ISipSessionListener$Stub {
  public android.net.sip.SipSessionAdapter();
  public void onCalling(android.net.sip.ISipSession);
  public void onRinging(android.net.sip.ISipSession, android.net.sip.SipProfile, java.lang.String);
  public void onRingingBack(android.net.sip.ISipSession);
  public void onCallEstablished(android.net.sip.ISipSession, java.lang.String);
  public void onCallEnded(android.net.sip.ISipSession);
  public void onCallBusy(android.net.sip.ISipSession);
  public void onCallTransferring(android.net.sip.ISipSession, java.lang.String);
  public void onCallChangeFailed(android.net.sip.ISipSession, int, java.lang.String);
  public void onError(android.net.sip.ISipSession, int, java.lang.String);
  public void onRegistering(android.net.sip.ISipSession);
  public void onRegistrationDone(android.net.sip.ISipSession, int);
  public void onRegistrationFailed(android.net.sip.ISipSession, int, java.lang.String);
  public void onRegistrationTimeout(android.net.sip.ISipSession);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.wifi.IWifiManager$Stub extends android.os.Binder implements android.net.wifi.IWifiManager {
  public android.net.wifi.IWifiManager$Stub();
  public static android.net.wifi.IWifiManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.wifi.IWifiManager extends android.os.IInterface {
  public android.net.wifi.ScanResult createFromParcel(android.os.Parcel);
  public android.net.wifi.ScanResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.ScanResult implements android.os.Parcelable {
  public android.net.wifi.ScanResult(java.lang.String, java.lang.String, java.lang.String, int, int);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.SupplicantState createFromParcel(android.os.Parcel);
  public android.net.wifi.SupplicantState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.net.wifi.SupplicantState extends java.lang.Enum<android.net.wifi.SupplicantState> implements android.os.Parcelable {
  public static android.net.wifi.SupplicantState[] values();
  public static android.net.wifi.SupplicantState valueOf(java.lang.String);
  public static boolean isValidState(android.net.wifi.SupplicantState);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.WifiConfiguration createFromParcel(android.os.Parcel);
  public android.net.wifi.WifiConfiguration[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.WifiConfiguration$AuthAlgorithm {
public class android.net.wifi.WifiConfiguration$EnterpriseField {
  public void setValue(java.lang.String);
  public java.lang.String varName();
  public java.lang.String value();
public class android.net.wifi.WifiConfiguration$GroupCipher {
public final class android.net.wifi.WifiConfiguration$IpAssignment extends java.lang.Enum<android.net.wifi.WifiConfiguration$IpAssignment> {
  public static android.net.wifi.WifiConfiguration$IpAssignment[] values();
  public static android.net.wifi.WifiConfiguration$IpAssignment valueOf(java.lang.String);
public class android.net.wifi.WifiConfiguration$KeyMgmt {
public class android.net.wifi.WifiConfiguration$PairwiseCipher {
public class android.net.wifi.WifiConfiguration$Protocol {
public final class android.net.wifi.WifiConfiguration$ProxySettings extends java.lang.Enum<android.net.wifi.WifiConfiguration$ProxySettings> {
  public static android.net.wifi.WifiConfiguration$ProxySettings[] values();
  public static android.net.wifi.WifiConfiguration$ProxySettings valueOf(java.lang.String);
public class android.net.wifi.WifiConfiguration$Status {
public class android.net.wifi.WifiConfiguration implements android.os.Parcelable {
  public android.net.wifi.WifiConfiguration();
  public java.lang.String toString();
  public int getAuthType();
  public int describeContents();
  public android.net.wifi.WifiConfiguration(android.net.wifi.WifiConfiguration);
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.WifiInfo createFromParcel(android.os.Parcel);
  public android.net.wifi.WifiInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.WifiInfo implements android.os.Parcelable {
  public android.net.wifi.WifiInfo(android.net.wifi.WifiInfo);
  public java.lang.String getSSID();
  public java.lang.String getBSSID();
  public int getRssi();
  public int getLinkSpeed();
  public java.lang.String getMacAddress();
  public boolean isExplicitConnect();
  public void setExplicitConnect(boolean);
  public int getNetworkId();
  public android.net.wifi.SupplicantState getSupplicantState();
  public int getIpAddress();
  public boolean getHiddenSSID();
  public void setHiddenSSID(boolean);
  public static android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.net.wifi.WifiManager$MulticastLock {
  public void acquire();
  public void release();
  public void setReferenceCounted(boolean);
  public boolean isHeld();
  public java.lang.String toString();
public class android.net.wifi.WifiManager$WifiLock {
  public void acquire();
  public void release();
  public void setReferenceCounted(boolean);
  public boolean isHeld();
  public void setWorkSource(android.os.WorkSource);
  public java.lang.String toString();
public class android.net.wifi.WifiManager {
  public android.net.wifi.WifiManager(android.net.wifi.IWifiManager, android.os.Handler);
  public java.util.List<android.net.wifi.WifiConfiguration> getConfiguredNetworks();
  public int addNetwork(android.net.wifi.WifiConfiguration);
  public int updateNetwork(android.net.wifi.WifiConfiguration);
  public boolean removeNetwork(int);
  public boolean enableNetwork(int, boolean);
  public boolean disableNetwork(int);
  public void disableNetwork(int, int);
  public boolean disconnect();
  public boolean reconnect();
  public boolean reassociate();
  public boolean pingSupplicant();
  public boolean startScan();
  public boolean startScanActive();
  public android.net.wifi.WifiInfo getConnectionInfo();
  public java.util.List<android.net.wifi.ScanResult> getScanResults();
  public boolean saveConfiguration();
  public void setCountryCode(java.lang.String, boolean);
  public void setFrequencyBand(int, boolean);
  public int getFrequencyBand();
  public boolean isDualBandSupported();
  public android.net.DhcpInfo getDhcpInfo();
  public boolean setWifiEnabled(boolean);
  public int getWifiState();
  public boolean isWifiEnabled();
  public static int calculateSignalLevel(int, int);
  public static int compareSignalLevel(int, int);
  public boolean setWifiApEnabled(android.net.wifi.WifiConfiguration, boolean);
  public int getWifiApState();
  public boolean isWifiApEnabled();
  public android.net.wifi.WifiConfiguration getWifiApConfiguration();
  public boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration);
  public boolean startWifi();
  public boolean stopWifi();
  public boolean addToBlacklist(java.lang.String);
  public boolean clearBlacklist();
  public void asyncConnect(android.content.Context, android.os.Handler);
  public void connectNetwork(android.net.wifi.WifiConfiguration);
  public void connectNetwork(int);
  public void saveNetwork(android.net.wifi.WifiConfiguration);
  public void forgetNetwork(int);
  public void startWps(android.net.wifi.WpsInfo);
  public android.os.Messenger getMessenger();
  public java.lang.String getConfigFile();
  public android.net.wifi.WifiManager$WifiLock createWifiLock(int, java.lang.String);
  public android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String);
  public android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String);
  public boolean isMulticastEnabled();
  public boolean initializeMulticastFiltering();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.net.wifi.p2p.IWifiP2pManager$Stub extends android.os.Binder implements android.net.wifi.p2p.IWifiP2pManager {
  public android.net.wifi.p2p.IWifiP2pManager$Stub();
  public static android.net.wifi.p2p.IWifiP2pManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.net.wifi.p2p.IWifiP2pManager extends android.os.IInterface {
  public android.net.wifi.p2p.WifiP2pDevice createFromParcel(android.os.Parcel);
  public android.net.wifi.p2p.WifiP2pDevice[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.p2p.WifiP2pDevice implements android.os.Parcelable {
  public android.net.wifi.p2p.WifiP2pDevice();
  public boolean wpsPbcSupported();
  public boolean wpsKeypadSupported();
  public boolean wpsDisplaySupported();
  public boolean isServiceDiscoveryCapable();
  public boolean isGroupOwner();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int describeContents();
  public android.net.wifi.p2p.WifiP2pDevice(android.net.wifi.p2p.WifiP2pDevice);
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.p2p.WifiP2pDeviceList createFromParcel(android.os.Parcel);
  public android.net.wifi.p2p.WifiP2pDeviceList[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.p2p.WifiP2pDeviceList implements android.os.Parcelable {
  public android.net.wifi.p2p.WifiP2pDeviceList();
  public android.net.wifi.p2p.WifiP2pDeviceList(android.net.wifi.p2p.WifiP2pDeviceList);
  public android.net.wifi.p2p.WifiP2pDeviceList(java.util.ArrayList<android.net.wifi.p2p.WifiP2pDevice>);
  public boolean clear();
  public void update(android.net.wifi.p2p.WifiP2pDevice);
  public boolean remove(android.net.wifi.p2p.WifiP2pDevice);
  public java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> getDeviceList();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.p2p.WifiP2pGroup createFromParcel(android.os.Parcel);
  public android.net.wifi.p2p.WifiP2pGroup[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.p2p.WifiP2pGroup implements android.os.Parcelable {
  public android.net.wifi.p2p.WifiP2pGroup();
  public void setNetworkName(java.lang.String);
  public java.lang.String getNetworkName();
  public void setIsGroupOwner(boolean);
  public boolean isGroupOwner();
  public void setOwner(android.net.wifi.p2p.WifiP2pDevice);
  public android.net.wifi.p2p.WifiP2pDevice getOwner();
  public void addClient(java.lang.String);
  public void addClient(android.net.wifi.p2p.WifiP2pDevice);
  public boolean removeClient(java.lang.String);
  public boolean removeClient(android.net.wifi.p2p.WifiP2pDevice);
  public boolean isClientListEmpty();
  public java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> getClientList();
  public void setPassphrase(java.lang.String);
  public java.lang.String getPassphrase();
  public void setInterface(java.lang.String);
  public java.lang.String getInterface();
  public java.lang.String toString();
  public int describeContents();
  public android.net.wifi.p2p.WifiP2pGroup(android.net.wifi.p2p.WifiP2pGroup);
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.p2p.WifiP2pInfo createFromParcel(android.os.Parcel);
  public android.net.wifi.p2p.WifiP2pInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.net.wifi.p2p.WifiP2pInfo implements android.os.Parcelable {
  public android.net.wifi.p2p.WifiP2pInfo();
  public java.lang.String toString();
  public int describeContents();
  public android.net.wifi.p2p.WifiP2pInfo(android.net.wifi.p2p.WifiP2pInfo);
  public void writeToParcel(android.os.Parcel, int);
public interface android.net.wifi.p2p.WifiP2pManager$ActionListener {
  public abstract void onSuccess();
  public abstract void onFailure(int);
  public void handleMessage(android.os.Message);
public class android.net.wifi.p2p.WifiP2pManager$Channel {
public interface android.net.wifi.p2p.WifiP2pManager$ChannelListener {
  public abstract void onChannelDisconnected();
public interface android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener {
  public abstract void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo);
public interface android.net.wifi.p2p.WifiP2pManager$GroupInfoListener {
  public abstract void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup);
public interface android.net.wifi.p2p.WifiP2pManager$PeerListListener {
  public abstract void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList);
public class android.net.wifi.p2p.WifiP2pManager {
  public android.net.wifi.p2p.WifiP2pManager(android.net.wifi.p2p.IWifiP2pManager);
  public android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager$ChannelListener);
  public void enableP2p(android.net.wifi.p2p.WifiP2pManager$Channel);
  public void disableP2p(android.net.wifi.p2p.WifiP2pManager$Channel);
  public void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void connect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$PeerListListener);
  public void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener);
  public void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$GroupInfoListener);
  public android.os.Messenger getMessenger();
public class android.nfc.FormatException extends java.lang.Exception {
  public android.nfc.FormatException();
  public android.nfc.FormatException(java.lang.String);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.nfc.INdefPushCallback$Stub extends android.os.Binder implements android.nfc.INdefPushCallback {
  public android.nfc.INdefPushCallback$Stub();
  public static android.nfc.INdefPushCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.nfc.INdefPushCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.nfc.INfcAdapter$Stub extends android.os.Binder implements android.nfc.INfcAdapter {
  public android.nfc.INfcAdapter$Stub();
  public static android.nfc.INfcAdapter asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.nfc.INfcAdapter extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.nfc.INfcAdapterExtras$Stub extends android.os.Binder implements android.nfc.INfcAdapterExtras {
  public android.nfc.INfcAdapterExtras$Stub();
  public static android.nfc.INfcAdapterExtras asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.nfc.INfcAdapterExtras extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.nfc.INfcTag$Stub extends android.os.Binder implements android.nfc.INfcTag {
  public android.nfc.INfcTag$Stub();
  public static android.nfc.INfcTag asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.nfc.INfcTag extends android.os.IInterface {
  public android.nfc.NdefMessage createFromParcel(android.os.Parcel);
  public android.nfc.NdefMessage[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.nfc.NdefMessage implements android.os.Parcelable {
  public android.nfc.NdefMessage(android.nfc.NdefRecord[]);
  public android.nfc.NdefRecord[] getRecords();
  public byte[] toByteArray();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.nfc.NdefRecord createFromParcel(android.os.Parcel);
  public android.nfc.NdefRecord[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.nfc.NdefRecord implements android.os.Parcelable {
  public android.nfc.NdefRecord(short, byte[], byte[], byte[]);
  public short getTnf();
  public byte[] getType();
  public byte[] getId();
  public byte[] getPayload();
  public static android.nfc.NdefRecord createApplicationRecord(java.lang.String);
  public static android.nfc.NdefRecord createUri(android.net.Uri);
  public static android.nfc.NdefRecord createUri(java.lang.String);
  public byte[] toByteArray();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public final class android.nfc.NfcActivityManager extends android.nfc.INdefPushCallback$Stub {
  public android.nfc.NfcActivityManager(android.nfc.NfcAdapter);
  public synchronized void onResume(android.app.Activity);
  public synchronized void onPause(android.app.Activity);
  public void onDestroy(android.app.Activity);
  public synchronized void setNdefPushMessage(android.app.Activity, android.nfc.NdefMessage);
  public synchronized void setNdefPushMessageCallback(android.app.Activity, android.nfc.NfcAdapter$CreateNdefMessageCallback);
  public synchronized void setOnNdefPushCompleteCallback(android.app.Activity, android.nfc.NfcAdapter$OnNdefPushCompleteCallback);
  public android.nfc.NdefMessage createMessage();
  public void onNdefPushComplete();
  public void onPaused(android.app.Activity);
public interface android.nfc.NfcAdapter$CreateNdefMessageCallback {
  public abstract android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent);
  public void onNdefPushComplete(android.nfc.NfcEvent);
  public android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent);
public interface android.nfc.NfcAdapter$NdefPushCallback {
  public abstract android.nfc.NdefMessage createMessage();
  public abstract void onMessagePushed();
public interface android.nfc.NfcAdapter$OnNdefPushCompleteCallback {
  public abstract void onNdefPushComplete(android.nfc.NfcEvent);
public final class android.nfc.NfcAdapter {
  public static synchronized android.nfc.NfcAdapter getNfcAdapter(android.content.Context);
  public static android.nfc.NfcAdapter getDefaultAdapter(android.content.Context);
  public static android.nfc.NfcAdapter getDefaultAdapter();
  public android.content.Context getContext();
  public android.nfc.INfcAdapter getService();
  public android.nfc.INfcTag getTagService();
  public void attemptDeadServiceRecovery(java.lang.Exception);
  public boolean isEnabled();
  public int getAdapterState();
  public boolean enable();
  public boolean disable();
  public void setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, android.app.Activity...);
  public void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback, android.app.Activity, android.app.Activity...);
  public void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback, android.app.Activity, android.app.Activity...);
  public void enableForegroundDispatch(android.app.Activity, android.app.PendingIntent, android.content.IntentFilter[], java.lang.String[][]);
  public void disableForegroundDispatch(android.app.Activity);
  public void enableForegroundNdefPush(android.app.Activity, android.nfc.NdefMessage);
  public void disableForegroundNdefPush(android.app.Activity);
  public void enableForegroundNdefPush(android.app.Activity, android.nfc.NfcAdapter$NdefPushCallback);
  public boolean enableNdefPush();
  public boolean disableNdefPush();
  public boolean isNdefPushEnabled();
  public android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface();
public final class android.nfc.NfcEvent {
public final class android.nfc.NfcFragment extends android.app.Fragment {
  public android.nfc.NfcFragment();
  public static void attach(android.app.Activity);
  public static void remove(android.app.Activity);
  public void onAttach(android.app.Activity);
  public void onResume();
  public void onPause();
  public void onDestroy();
public final class android.nfc.NfcManager {
  public android.nfc.NfcManager(android.content.Context);
  public android.nfc.NfcAdapter getDefaultAdapter();
  public android.nfc.Tag createFromParcel(android.os.Parcel);
  public android.nfc.Tag[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.nfc.Tag implements android.os.Parcelable {
  public android.nfc.Tag(byte[], int[], android.os.Bundle[], int, android.nfc.INfcTag);
  public static android.nfc.Tag createMockTag(byte[], int[], android.os.Bundle[]);
  public int getServiceHandle();
  public byte[] getId();
  public java.lang.String[] getTechList();
  public boolean hasTech(int);
  public android.os.Bundle getTechExtras(int);
  public android.nfc.INfcTag getTagService();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public synchronized void setConnectedTechnology(int);
  public int getConnectedTechnology();
  public void setTechnologyDisconnected();
public class android.nfc.TagLostException extends java.io.IOException {
  public android.nfc.TagLostException();
  public android.nfc.TagLostException(java.lang.String);
  public android.nfc.TechListParcel createFromParcel(android.os.Parcel);
  public android.nfc.TechListParcel[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.nfc.TechListParcel implements android.os.Parcelable {
  public android.nfc.TechListParcel(java.lang.String[]...);
  public java.lang.String[][] getTechLists();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.nfc.TransceiveResult createFromParcel(android.os.Parcel);
  public android.nfc.TransceiveResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.nfc.TransceiveResult implements android.os.Parcelable {
  public android.nfc.TransceiveResult(int, byte[]);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.nfc.Tag getTag();
  public boolean isConnected();
public final class android.nfc.tech.IsoDep extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.IsoDep get(android.nfc.Tag);
  public void setTimeout(int);
  public int getTimeout();
  public byte[] getHistoricalBytes();
  public byte[] getHiLayerResponse();
  public int getMaxTransceiveLength();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.MifareClassic extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.MifareClassic get(android.nfc.Tag);
  public int getType();
  public int getSize();
  public boolean isEmulated();
  public int getSectorCount();
  public int getBlockCount();
  public int getBlockCountInSector(int);
  public int blockToSector(int);
  public int sectorToBlock(int);
  public int getMaxTransceiveLength();
  public void setTimeout(int);
  public int getTimeout();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.MifareUltralight extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.MifareUltralight get(android.nfc.Tag);
  public int getType();
  public int getMaxTransceiveLength();
  public void setTimeout(int);
  public int getTimeout();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.Ndef extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.Ndef get(android.nfc.Tag);
  public android.nfc.NdefMessage getCachedNdefMessage();
  public java.lang.String getType();
  public int getMaxSize();
  public boolean isWritable();
  public boolean canMakeReadOnly();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.NdefFormatable extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.NdefFormatable get(android.nfc.Tag);
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.NfcA extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.NfcA get(android.nfc.Tag);
  public byte[] getAtqa();
  public short getSak();
  public int getMaxTransceiveLength();
  public void setTimeout(int);
  public int getTimeout();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.NfcB extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.NfcB get(android.nfc.Tag);
  public byte[] getApplicationData();
  public byte[] getProtocolInfo();
  public int getMaxTransceiveLength();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.NfcF extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.NfcF get(android.nfc.Tag);
  public byte[] getSystemCode();
  public byte[] getManufacturer();
  public int getMaxTransceiveLength();
  public void setTimeout(int);
  public int getTimeout();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public final class android.nfc.tech.NfcV extends android.nfc.tech.BasicTagTechnology {
  public static android.nfc.tech.NfcV get(android.nfc.Tag);
  public byte getResponseFlags();
  public byte getDsfId();
  public int getMaxTransceiveLength();
  public boolean isConnected();
  public android.nfc.Tag getTag();
public interface android.nfc.tech.TagTechnology extends java.io.Closeable {
  public abstract android.nfc.Tag getTag();
  public abstract boolean isConnected();
  public android.opengl.EGLLogWrapper(javax.microedition.khronos.egl.EGL, int, java.io.Writer);
  public boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay, int[], javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, java.lang.Object);
  public javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, javax.microedition.khronos.egl.EGLContext, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int[]);
  public boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public javax.microedition.khronos.egl.EGLContext eglGetCurrentContext();
  public javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay();
  public javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int);
  public javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object);
  public int eglGetError();
  public boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay, int[]);
  public boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLContext);
  public boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext, int, int[]);
  public java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay, int);
  public boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, int, int[]);
  public boolean eglReleaseThread();
  public boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay);
  public boolean eglWaitGL();
  public boolean eglWaitNative(int, java.lang.Object);
  public static java.lang.String getErrorString(int);
public class android.opengl.ETC1 {
  public android.opengl.ETC1();
  public static native void encodeBlock(java.nio.Buffer, int, java.nio.Buffer);
  public static native void decodeBlock(java.nio.Buffer, java.nio.Buffer);
  public static native int getEncodedDataSize(int, int);
  public static native void encodeImage(java.nio.Buffer, int, int, int, int, java.nio.Buffer);
  public static native void decodeImage(java.nio.Buffer, java.nio.Buffer, int, int, int, int);
  public static native void formatHeader(java.nio.Buffer, int, int);
  public static native boolean isValid(java.nio.Buffer);
  public static native int getWidth(java.nio.Buffer);
  public static native int getHeight(java.nio.Buffer);
public class android.opengl.ETC1Util$ETC1Texture {
  public android.opengl.ETC1Util$ETC1Texture(int, int, java.nio.ByteBuffer);
  public int getWidth();
  public int getHeight();
  public java.nio.ByteBuffer getData();
public class android.opengl.ETC1Util {
  public android.opengl.ETC1Util();
  public static void loadTexture(int, int, int, int, int, android.opengl.ETC1Util$ETC1Texture);
  public static boolean isETC1Supported();
  public static android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer, int, int, int, int);
public class android.opengl.GLDebugHelper {
  public android.opengl.GLDebugHelper();
  public static javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL, int, java.io.Writer);
  public static javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL, int, java.io.Writer);
public class android.opengl.GLES10 {
  public android.opengl.GLES10();
  public static native void glActiveTexture(int);
  public static native void glAlphaFunc(int, float);
  public static native void glAlphaFuncx(int, int);
  public static native void glBindTexture(int, int);
  public static native void glBlendFunc(int, int);
  public static native void glClear(int);
  public static native void glClearColor(float, float, float, float);
  public static native void glClearColorx(int, int, int, int);
  public static native void glClearDepthf(float);
  public static native void glClearDepthx(int);
  public static native void glClearStencil(int);
  public static native void glClientActiveTexture(int);
  public static native void glColor4f(float, float, float, float);
  public static native void glColor4x(int, int, int, int);
  public static native void glColorMask(boolean, boolean, boolean, boolean);
  public static void glColorPointer(int, int, int, java.nio.Buffer);
  public static native void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public static native void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public static native void glCullFace(int);
  public static native void glDeleteTextures(int, int[], int);
  public static native void glDeleteTextures(int, java.nio.IntBuffer);
  public static native void glDepthFunc(int);
  public static native void glDepthMask(boolean);
  public static native void glDepthRangef(float, float);
  public static native void glDepthRangex(int, int);
  public static native void glDisable(int);
  public static native void glDisableClientState(int);
  public static native void glDrawArrays(int, int, int);
  public static native void glDrawElements(int, int, int, java.nio.Buffer);
  public static native void glEnable(int);
  public static native void glEnableClientState(int);
  public static native void glFinish();
  public static native void glFlush();
  public static native void glFogf(int, float);
  public static native void glFogfv(int, float[], int);
  public static native void glFogfv(int, java.nio.FloatBuffer);
  public static native void glFogx(int, int);
  public static native void glFogxv(int, int[], int);
  public static native void glFogxv(int, java.nio.IntBuffer);
  public static native void glFrontFace(int);
  public static native void glFrustumf(float, float, float, float, float, float);
  public static native void glFrustumx(int, int, int, int, int, int);
  public static native void glGenTextures(int, int[], int);
  public static native void glGenTextures(int, java.nio.IntBuffer);
  public static native int glGetError();
  public static native void glGetIntegerv(int, int[], int);
  public static native void glGetIntegerv(int, java.nio.IntBuffer);
  public static native java.lang.String glGetString(int);
  public static native void glHint(int, int);
  public static native void glLightModelf(int, float);
  public static native void glLightModelfv(int, float[], int);
  public static native void glLightModelfv(int, java.nio.FloatBuffer);
  public static native void glLightModelx(int, int);
  public static native void glLightModelxv(int, int[], int);
  public static native void glLightModelxv(int, java.nio.IntBuffer);
  public static native void glLightf(int, int, float);
  public static native void glLightfv(int, int, float[], int);
  public static native void glLightfv(int, int, java.nio.FloatBuffer);
  public static native void glLightx(int, int, int);
  public static native void glLightxv(int, int, int[], int);
  public static native void glLightxv(int, int, java.nio.IntBuffer);
  public static native void glLineWidth(float);
  public static native void glLineWidthx(int);
  public static native void glLoadIdentity();
  public static native void glLoadMatrixf(float[], int);
  public static native void glLoadMatrixf(java.nio.FloatBuffer);
  public static native void glLoadMatrixx(int[], int);
  public static native void glLoadMatrixx(java.nio.IntBuffer);
  public static native void glLogicOp(int);
  public static native void glMaterialf(int, int, float);
  public static native void glMaterialfv(int, int, float[], int);
  public static native void glMaterialfv(int, int, java.nio.FloatBuffer);
  public static native void glMaterialx(int, int, int);
  public static native void glMaterialxv(int, int, int[], int);
  public static native void glMaterialxv(int, int, java.nio.IntBuffer);
  public static native void glMatrixMode(int);
  public static native void glMultMatrixf(float[], int);
  public static native void glMultMatrixf(java.nio.FloatBuffer);
  public static native void glMultMatrixx(int[], int);
  public static native void glMultMatrixx(java.nio.IntBuffer);
  public static native void glMultiTexCoord4f(int, float, float, float, float);
  public static native void glMultiTexCoord4x(int, int, int, int, int);
  public static native void glNormal3f(float, float, float);
  public static native void glNormal3x(int, int, int);
  public static void glNormalPointer(int, int, java.nio.Buffer);
  public static native void glOrthof(float, float, float, float, float, float);
  public static native void glOrthox(int, int, int, int, int, int);
  public static native void glPixelStorei(int, int);
  public static native void glPointSize(float);
  public static native void glPointSizex(int);
  public static native void glPolygonOffset(float, float);
  public static native void glPolygonOffsetx(int, int);
  public static native void glPopMatrix();
  public static native void glPushMatrix();
  public static native void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public static native void glRotatef(float, float, float, float);
  public static native void glRotatex(int, int, int, int);
  public static native void glSampleCoverage(float, boolean);
  public static native void glSampleCoveragex(int, boolean);
  public static native void glScalef(float, float, float);
  public static native void glScalex(int, int, int);
  public static native void glScissor(int, int, int, int);
  public static native void glShadeModel(int);
  public static native void glStencilFunc(int, int, int);
  public static native void glStencilMask(int);
  public static native void glStencilOp(int, int, int);
  public static void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public static native void glTexEnvf(int, int, float);
  public static native void glTexEnvfv(int, int, float[], int);
  public static native void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public static native void glTexEnvx(int, int, int);
  public static native void glTexEnvxv(int, int, int[], int);
  public static native void glTexEnvxv(int, int, java.nio.IntBuffer);
  public static native void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTexParameterf(int, int, float);
  public static native void glTexParameterx(int, int, int);
  public static native void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTranslatef(float, float, float);
  public static native void glTranslatex(int, int, int);
  public static void glVertexPointer(int, int, int, java.nio.Buffer);
  public static native void glViewport(int, int, int, int);
public class android.opengl.GLES20 {
  public android.opengl.GLES20();
  public static native void glActiveTexture(int);
  public static native void glAttachShader(int, int);
  public static native void glBindAttribLocation(int, int, java.lang.String);
  public static native void glBindBuffer(int, int);
  public static native void glBindFramebuffer(int, int);
  public static native void glBindRenderbuffer(int, int);
  public static native void glBindTexture(int, int);
  public static native void glBlendColor(float, float, float, float);
  public static native void glBlendEquation(int);
  public static native void glBlendEquationSeparate(int, int);
  public static native void glBlendFunc(int, int);
  public static native void glBlendFuncSeparate(int, int, int, int);
  public static native void glBufferData(int, int, java.nio.Buffer, int);
  public static native void glBufferSubData(int, int, int, java.nio.Buffer);
  public static native int glCheckFramebufferStatus(int);
  public static native void glClear(int);
  public static native void glClearColor(float, float, float, float);
  public static native void glClearDepthf(float);
  public static native void glClearStencil(int);
  public static native void glColorMask(boolean, boolean, boolean, boolean);
  public static native void glCompileShader(int);
  public static native void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public static native void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public static native int glCreateProgram();
  public static native int glCreateShader(int);
  public static native void glCullFace(int);
  public static native void glDeleteBuffers(int, int[], int);
  public static native void glDeleteBuffers(int, java.nio.IntBuffer);
  public static native void glDeleteFramebuffers(int, int[], int);
  public static native void glDeleteFramebuffers(int, java.nio.IntBuffer);
  public static native void glDeleteProgram(int);
  public static native void glDeleteRenderbuffers(int, int[], int);
  public static native void glDeleteRenderbuffers(int, java.nio.IntBuffer);
  public static native void glDeleteShader(int);
  public static native void glDeleteTextures(int, int[], int);
  public static native void glDeleteTextures(int, java.nio.IntBuffer);
  public static native void glDepthFunc(int);
  public static native void glDepthMask(boolean);
  public static native void glDepthRangef(float, float);
  public static native void glDetachShader(int, int);
  public static native void glDisable(int);
  public static native void glDisableVertexAttribArray(int);
  public static native void glDrawArrays(int, int, int);
  public static native void glDrawElements(int, int, int, int);
  public static native void glDrawElements(int, int, int, java.nio.Buffer);
  public static native void glEnable(int);
  public static native void glEnableVertexAttribArray(int);
  public static native void glFinish();
  public static native void glFlush();
  public static native void glFramebufferRenderbuffer(int, int, int, int);
  public static native void glFramebufferTexture2D(int, int, int, int, int);
  public static native void glFrontFace(int);
  public static native void glGenBuffers(int, int[], int);
  public static native void glGenBuffers(int, java.nio.IntBuffer);
  public static native void glGenerateMipmap(int);
  public static native void glGenFramebuffers(int, int[], int);
  public static native void glGenFramebuffers(int, java.nio.IntBuffer);
  public static native void glGenRenderbuffers(int, int[], int);
  public static native void glGenRenderbuffers(int, java.nio.IntBuffer);
  public static native void glGenTextures(int, int[], int);
  public static native void glGenTextures(int, java.nio.IntBuffer);
  public static native void glGetActiveAttrib(int, int, int, int[], int, int[], int, int[], int, byte[], int);
  public static native void glGetActiveAttrib(int, int, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, byte);
  public static native void glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int);
  public static native void glGetActiveUniform(int, int, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, byte);
  public static native void glGetAttachedShaders(int, int, int[], int, int[], int);
  public static native void glGetAttachedShaders(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native int glGetAttribLocation(int, java.lang.String);
  public static native void glGetBooleanv(int, boolean[], int);
  public static native void glGetBooleanv(int, java.nio.IntBuffer);
  public static native void glGetBufferParameteriv(int, int, int[], int);
  public static native void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public static native int glGetError();
  public static native void glGetFloatv(int, float[], int);
  public static native void glGetFloatv(int, java.nio.FloatBuffer);
  public static native void glGetFramebufferAttachmentParameteriv(int, int, int, int[], int);
  public static native void glGetFramebufferAttachmentParameteriv(int, int, int, java.nio.IntBuffer);
  public static native void glGetIntegerv(int, int[], int);
  public static native void glGetIntegerv(int, java.nio.IntBuffer);
  public static native void glGetProgramiv(int, int, int[], int);
  public static native void glGetProgramiv(int, int, java.nio.IntBuffer);
  public static native java.lang.String glGetProgramInfoLog(int);
  public static native void glGetRenderbufferParameteriv(int, int, int[], int);
  public static native void glGetRenderbufferParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetShaderiv(int, int, int[], int);
  public static native void glGetShaderiv(int, int, java.nio.IntBuffer);
  public static native java.lang.String glGetShaderInfoLog(int);
  public static native void glGetShaderPrecisionFormat(int, int, int[], int, int[], int);
  public static native void glGetShaderPrecisionFormat(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native void glGetShaderSource(int, int, int[], int, byte[], int);
  public static native void glGetShaderSource(int, int, java.nio.IntBuffer, byte);
  public static native java.lang.String glGetString(int);
  public static native void glGetTexParameterfv(int, int, float[], int);
  public static native void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glGetTexParameteriv(int, int, int[], int);
  public static native void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetUniformfv(int, int, float[], int);
  public static native void glGetUniformfv(int, int, java.nio.FloatBuffer);
  public static native void glGetUniformiv(int, int, int[], int);
  public static native void glGetUniformiv(int, int, java.nio.IntBuffer);
  public static native int glGetUniformLocation(int, java.lang.String);
  public static native void glGetVertexAttribfv(int, int, float[], int);
  public static native void glGetVertexAttribfv(int, int, java.nio.FloatBuffer);
  public static native void glGetVertexAttribiv(int, int, int[], int);
  public static native void glGetVertexAttribiv(int, int, java.nio.IntBuffer);
  public static native void glHint(int, int);
  public static native boolean glIsBuffer(int);
  public static native boolean glIsEnabled(int);
  public static native boolean glIsFramebuffer(int);
  public static native boolean glIsProgram(int);
  public static native boolean glIsRenderbuffer(int);
  public static native boolean glIsShader(int);
  public static native boolean glIsTexture(int);
  public static native void glLineWidth(float);
  public static native void glLinkProgram(int);
  public static native void glPixelStorei(int, int);
  public static native void glPolygonOffset(float, float);
  public static native void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public static native void glReleaseShaderCompiler();
  public static native void glRenderbufferStorage(int, int, int, int);
  public static native void glSampleCoverage(float, boolean);
  public static native void glScissor(int, int, int, int);
  public static native void glShaderBinary(int, int[], int, int, java.nio.Buffer, int);
  public static native void glShaderBinary(int, java.nio.IntBuffer, int, java.nio.Buffer, int);
  public static native void glShaderSource(int, java.lang.String);
  public static native void glStencilFunc(int, int, int);
  public static native void glStencilFuncSeparate(int, int, int, int);
  public static native void glStencilMask(int);
  public static native void glStencilMaskSeparate(int, int);
  public static native void glStencilOp(int, int, int);
  public static native void glStencilOpSeparate(int, int, int, int);
  public static native void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTexParameterf(int, int, float);
  public static native void glTexParameterfv(int, int, float[], int);
  public static native void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glTexParameteri(int, int, int);
  public static native void glTexParameteriv(int, int, int[], int);
  public static native void glTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glUniform1f(int, float);
  public static native void glUniform1fv(int, int, float[], int);
  public static native void glUniform1fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform1i(int, int);
  public static native void glUniform1iv(int, int, int[], int);
  public static native void glUniform1iv(int, int, java.nio.IntBuffer);
  public static native void glUniform2f(int, float, float);
  public static native void glUniform2fv(int, int, float[], int);
  public static native void glUniform2fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform2i(int, int, int);
  public static native void glUniform2iv(int, int, int[], int);
  public static native void glUniform2iv(int, int, java.nio.IntBuffer);
  public static native void glUniform3f(int, float, float, float);
  public static native void glUniform3fv(int, int, float[], int);
  public static native void glUniform3fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform3i(int, int, int, int);
  public static native void glUniform3iv(int, int, int[], int);
  public static native void glUniform3iv(int, int, java.nio.IntBuffer);
  public static native void glUniform4f(int, float, float, float, float);
  public static native void glUniform4fv(int, int, float[], int);
  public static native void glUniform4fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform4i(int, int, int, int, int);
  public static native void glUniform4iv(int, int, int[], int);
  public static native void glUniform4iv(int, int, java.nio.IntBuffer);
  public static native void glUniformMatrix2fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix2fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix3fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix3fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix4fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix4fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUseProgram(int);
  public static native void glValidateProgram(int);
  public static native void glVertexAttrib1f(int, float);
  public static native void glVertexAttrib1fv(int, float[], int);
  public static native void glVertexAttrib1fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib2f(int, float, float);
  public static native void glVertexAttrib2fv(int, float[], int);
  public static native void glVertexAttrib2fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib3f(int, float, float, float);
  public static native void glVertexAttrib3fv(int, float[], int);
  public static native void glVertexAttrib3fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib4f(int, float, float, float, float);
  public static native void glVertexAttrib4fv(int, float[], int);
  public static native void glVertexAttrib4fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttribPointer(int, int, int, boolean, int, int);
  public static void glVertexAttribPointer(int, int, int, boolean, int, java.nio.Buffer);
  public static native void glViewport(int, int, int, int);
  public android.opengl.GLErrorWrapper(javax.microedition.khronos.opengles.GL, int);
  public void glActiveTexture(int);
  public void glAlphaFunc(int, float);
  public void glAlphaFuncx(int, int);
  public void glBindTexture(int, int);
  public void glBlendFunc(int, int);
  public void glClear(int);
  public void glClearColor(float, float, float, float);
  public void glClearColorx(int, int, int, int);
  public void glClearDepthf(float);
  public void glClearDepthx(int);
  public void glClearStencil(int);
  public void glClientActiveTexture(int);
  public void glColor4f(float, float, float, float);
  public void glColor4x(int, int, int, int);
  public void glColorMask(boolean, boolean, boolean, boolean);
  public void glColorPointer(int, int, int, java.nio.Buffer);
  public void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public void glCullFace(int);
  public void glDeleteTextures(int, int[], int);
  public void glDeleteTextures(int, java.nio.IntBuffer);
  public void glDepthFunc(int);
  public void glDepthMask(boolean);
  public void glDepthRangef(float, float);
  public void glDepthRangex(int, int);
  public void glDisable(int);
  public void glDisableClientState(int);
  public void glDrawArrays(int, int, int);
  public void glDrawElements(int, int, int, java.nio.Buffer);
  public void glEnable(int);
  public void glEnableClientState(int);
  public void glFinish();
  public void glFlush();
  public void glFogf(int, float);
  public void glFogfv(int, float[], int);
  public void glFogfv(int, java.nio.FloatBuffer);
  public void glFogx(int, int);
  public void glFogxv(int, int[], int);
  public void glFogxv(int, java.nio.IntBuffer);
  public void glFrontFace(int);
  public void glFrustumf(float, float, float, float, float, float);
  public void glFrustumx(int, int, int, int, int, int);
  public void glGenTextures(int, int[], int);
  public void glGenTextures(int, java.nio.IntBuffer);
  public int glGetError();
  public void glGetIntegerv(int, int[], int);
  public void glGetIntegerv(int, java.nio.IntBuffer);
  public java.lang.String glGetString(int);
  public void glHint(int, int);
  public void glLightModelf(int, float);
  public void glLightModelfv(int, float[], int);
  public void glLightModelfv(int, java.nio.FloatBuffer);
  public void glLightModelx(int, int);
  public void glLightModelxv(int, int[], int);
  public void glLightModelxv(int, java.nio.IntBuffer);
  public void glLightf(int, int, float);
  public void glLightfv(int, int, float[], int);
  public void glLightfv(int, int, java.nio.FloatBuffer);
  public void glLightx(int, int, int);
  public void glLightxv(int, int, int[], int);
  public void glLightxv(int, int, java.nio.IntBuffer);
  public void glLineWidth(float);
  public void glLineWidthx(int);
  public void glLoadIdentity();
  public void glLoadMatrixf(float[], int);
  public void glLoadMatrixf(java.nio.FloatBuffer);
  public void glLoadMatrixx(int[], int);
  public void glLoadMatrixx(java.nio.IntBuffer);
  public void glLogicOp(int);
  public void glMaterialf(int, int, float);
  public void glMaterialfv(int, int, float[], int);
  public void glMaterialfv(int, int, java.nio.FloatBuffer);
  public void glMaterialx(int, int, int);
  public void glMaterialxv(int, int, int[], int);
  public void glMaterialxv(int, int, java.nio.IntBuffer);
  public void glMatrixMode(int);
  public void glMultMatrixf(float[], int);
  public void glMultMatrixf(java.nio.FloatBuffer);
  public void glMultMatrixx(int[], int);
  public void glMultMatrixx(java.nio.IntBuffer);
  public void glMultiTexCoord4f(int, float, float, float, float);
  public void glMultiTexCoord4x(int, int, int, int, int);
  public void glNormal3f(float, float, float);
  public void glNormal3x(int, int, int);
  public void glNormalPointer(int, int, java.nio.Buffer);
  public void glOrthof(float, float, float, float, float, float);
  public void glOrthox(int, int, int, int, int, int);
  public void glPixelStorei(int, int);
  public void glPointSize(float);
  public void glPointSizex(int);
  public void glPolygonOffset(float, float);
  public void glPolygonOffsetx(int, int);
  public void glPopMatrix();
  public void glPushMatrix();
  public void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public void glRotatef(float, float, float, float);
  public void glRotatex(int, int, int, int);
  public void glSampleCoverage(float, boolean);
  public void glSampleCoveragex(int, boolean);
  public void glScalef(float, float, float);
  public void glScalex(int, int, int);
  public void glScissor(int, int, int, int);
  public void glShadeModel(int);
  public void glStencilFunc(int, int, int);
  public void glStencilMask(int);
  public void glStencilOp(int, int, int);
  public void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public void glTexEnvf(int, int, float);
  public void glTexEnvfv(int, int, float[], int);
  public void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public void glTexEnvx(int, int, int);
  public void glTexEnvxv(int, int, int[], int);
  public void glTexEnvxv(int, int, java.nio.IntBuffer);
  public void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glTexParameterf(int, int, float);
  public void glTexParameterx(int, int, int);
  public void glTexParameteriv(int, int, int[], int);
  public void glTexParameteriv(int, int, java.nio.IntBuffer);
  public void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glTranslatef(float, float, float);
  public void glTranslatex(int, int, int);
  public void glVertexPointer(int, int, int, java.nio.Buffer);
  public void glViewport(int, int, int, int);
  public void glClipPlanef(int, float[], int);
  public void glClipPlanef(int, java.nio.FloatBuffer);
  public void glClipPlanex(int, int[], int);
  public void glClipPlanex(int, java.nio.IntBuffer);
  public void glDrawTexfOES(float, float, float, float, float);
  public void glDrawTexfvOES(float[], int);
  public void glDrawTexfvOES(java.nio.FloatBuffer);
  public void glDrawTexiOES(int, int, int, int, int);
  public void glDrawTexivOES(int[], int);
  public void glDrawTexivOES(java.nio.IntBuffer);
  public void glDrawTexsOES(short, short, short, short, short);
  public void glDrawTexsvOES(short[], int);
  public void glDrawTexsvOES(java.nio.ShortBuffer);
  public void glDrawTexxOES(int, int, int, int, int);
  public void glDrawTexxvOES(int[], int);
  public void glDrawTexxvOES(java.nio.IntBuffer);
  public int glQueryMatrixxOES(int[], int, int[], int);
  public int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
  public void glBindBuffer(int, int);
  public void glBufferData(int, int, java.nio.Buffer, int);
  public void glBufferSubData(int, int, int, java.nio.Buffer);
  public void glColor4ub(byte, byte, byte, byte);
  public void glColorPointer(int, int, int, int);
  public void glDeleteBuffers(int, int[], int);
  public void glDeleteBuffers(int, java.nio.IntBuffer);
  public void glDrawElements(int, int, int, int);
  public void glGenBuffers(int, int[], int);
  public void glGenBuffers(int, java.nio.IntBuffer);
  public void glGetBooleanv(int, boolean[], int);
  public void glGetBooleanv(int, java.nio.IntBuffer);
  public void glGetBufferParameteriv(int, int, int[], int);
  public void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public void glGetClipPlanef(int, float[], int);
  public void glGetClipPlanef(int, java.nio.FloatBuffer);
  public void glGetClipPlanex(int, int[], int);
  public void glGetClipPlanex(int, java.nio.IntBuffer);
  public void glGetFixedv(int, int[], int);
  public void glGetFixedv(int, java.nio.IntBuffer);
  public void glGetFloatv(int, float[], int);
  public void glGetFloatv(int, java.nio.FloatBuffer);
  public void glGetLightfv(int, int, float[], int);
  public void glGetLightfv(int, int, java.nio.FloatBuffer);
  public void glGetLightxv(int, int, int[], int);
  public void glGetLightxv(int, int, java.nio.IntBuffer);
  public void glGetMaterialfv(int, int, float[], int);
  public void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public void glGetMaterialxv(int, int, int[], int);
  public void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public void glGetPointerv(int, java.nio.Buffer[]);
  public void glGetTexEnviv(int, int, int[], int);
  public void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public void glGetTexEnvxv(int, int, int[], int);
  public void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public void glGetTexParameterfv(int, int, float[], int);
  public void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public void glGetTexParameteriv(int, int, int[], int);
  public void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public void glGetTexParameterxv(int, int, int[], int);
  public void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public boolean glIsBuffer(int);
  public boolean glIsEnabled(int);
  public boolean glIsTexture(int);
  public void glNormalPointer(int, int, int);
  public void glPointParameterf(int, float);
  public void glPointParameterfv(int, float[], int);
  public void glPointParameterfv(int, java.nio.FloatBuffer);
  public void glPointParameterx(int, int);
  public void glPointParameterxv(int, int[], int);
  public void glPointParameterxv(int, java.nio.IntBuffer);
  public void glPointSizePointerOES(int, int, java.nio.Buffer);
  public void glTexCoordPointer(int, int, int, int);
  public void glTexEnvi(int, int, int);
  public void glTexEnviv(int, int, int[], int);
  public void glTexEnviv(int, int, java.nio.IntBuffer);
  public void glTexParameterfv(int, int, float[], int);
  public void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public void glTexParameteri(int, int, int);
  public void glTexParameterxv(int, int, int[], int);
  public void glTexParameterxv(int, int, java.nio.IntBuffer);
  public void glVertexPointer(int, int, int, int);
  public void glCurrentPaletteMatrixOES(int);
  public void glLoadPaletteFromModelViewMatrixOES();
  public void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public void glMatrixIndexPointerOES(int, int, int, int);
  public void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public void glWeightPointerOES(int, int, int, int);
  public void glBindFramebufferOES(int, int);
  public void glBindRenderbufferOES(int, int);
  public void glBlendEquation(int);
  public void glBlendEquationSeparate(int, int);
  public void glBlendFuncSeparate(int, int, int, int);
  public int glCheckFramebufferStatusOES(int);
  public void glDeleteFramebuffersOES(int, int[], int);
  public void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public void glDeleteRenderbuffersOES(int, int[], int);
  public void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public void glFramebufferRenderbufferOES(int, int, int, int);
  public void glFramebufferTexture2DOES(int, int, int, int, int);
  public void glGenerateMipmapOES(int);
  public void glGenFramebuffersOES(int, int[], int);
  public void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public void glGenRenderbuffersOES(int, int[], int);
  public void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public void glGetRenderbufferParameterivOES(int, int, int[], int);
  public void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public void glGetTexGenfv(int, int, float[], int);
  public void glGetTexGenfv(int, int, java.nio.FloatBuffer);
  public void glGetTexGeniv(int, int, int[], int);
  public void glGetTexGeniv(int, int, java.nio.IntBuffer);
  public void glGetTexGenxv(int, int, int[], int);
  public void glGetTexGenxv(int, int, java.nio.IntBuffer);
  public boolean glIsFramebufferOES(int);
  public boolean glIsRenderbufferOES(int);
  public void glRenderbufferStorageOES(int, int, int, int);
  public void glTexGenf(int, int, float);
  public void glTexGenfv(int, int, float[], int);
  public void glTexGenfv(int, int, java.nio.FloatBuffer);
  public void glTexGeni(int, int, int);
  public void glTexGeniv(int, int, int[], int);
  public void glTexGeniv(int, int, java.nio.IntBuffer);
  public void glTexGenx(int, int, int);
  public void glTexGenxv(int, int, int[], int);
  public void glTexGenxv(int, int, java.nio.IntBuffer);
public class android.opengl.GLException extends java.lang.RuntimeException {
  public android.opengl.GLException(int);
  public android.opengl.GLException(int, java.lang.String);
  public android.opengl.GLLogWrapper$PointerInfo(android.opengl.GLLogWrapper);
  public android.opengl.GLLogWrapper$PointerInfo(android.opengl.GLLogWrapper, int, int, int, java.nio.Buffer);
  public int sizeof(int);
  public int getStride();
  public void bindByteBuffer();
  public void unbindByteBuffer();
  public android.opengl.GLLogWrapper(javax.microedition.khronos.opengles.GL, java.io.Writer, boolean);
  public static java.lang.String getErrorString(int);
  public void glActiveTexture(int);
  public void glAlphaFunc(int, float);
  public void glAlphaFuncx(int, int);
  public void glBindTexture(int, int);
  public void glBlendFunc(int, int);
  public void glClear(int);
  public void glClearColor(float, float, float, float);
  public void glClearColorx(int, int, int, int);
  public void glClearDepthf(float);
  public void glClearDepthx(int);
  public void glClearStencil(int);
  public void glClientActiveTexture(int);
  public void glColor4f(float, float, float, float);
  public void glColor4x(int, int, int, int);
  public void glColorMask(boolean, boolean, boolean, boolean);
  public void glColorPointer(int, int, int, java.nio.Buffer);
  public void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public void glCullFace(int);
  public void glDeleteTextures(int, int[], int);
  public void glDeleteTextures(int, java.nio.IntBuffer);
  public void glDepthFunc(int);
  public void glDepthMask(boolean);
  public void glDepthRangef(float, float);
  public void glDepthRangex(int, int);
  public void glDisable(int);
  public void glDisableClientState(int);
  public void glDrawArrays(int, int, int);
  public void glDrawElements(int, int, int, java.nio.Buffer);
  public void glEnable(int);
  public void glEnableClientState(int);
  public void glFinish();
  public void glFlush();
  public void glFogf(int, float);
  public void glFogfv(int, float[], int);
  public void glFogfv(int, java.nio.FloatBuffer);
  public void glFogx(int, int);
  public void glFogxv(int, int[], int);
  public void glFogxv(int, java.nio.IntBuffer);
  public void glFrontFace(int);
  public void glFrustumf(float, float, float, float, float, float);
  public void glFrustumx(int, int, int, int, int, int);
  public void glGenTextures(int, int[], int);
  public void glGenTextures(int, java.nio.IntBuffer);
  public int glGetError();
  public void glGetIntegerv(int, int[], int);
  public void glGetIntegerv(int, java.nio.IntBuffer);
  public java.lang.String glGetString(int);
  public void glHint(int, int);
  public void glLightModelf(int, float);
  public void glLightModelfv(int, float[], int);
  public void glLightModelfv(int, java.nio.FloatBuffer);
  public void glLightModelx(int, int);
  public void glLightModelxv(int, int[], int);
  public void glLightModelxv(int, java.nio.IntBuffer);
  public void glLightf(int, int, float);
  public void glLightfv(int, int, float[], int);
  public void glLightfv(int, int, java.nio.FloatBuffer);
  public void glLightx(int, int, int);
  public void glLightxv(int, int, int[], int);
  public void glLightxv(int, int, java.nio.IntBuffer);
  public void glLineWidth(float);
  public void glLineWidthx(int);
  public void glLoadIdentity();
  public void glLoadMatrixf(float[], int);
  public void glLoadMatrixf(java.nio.FloatBuffer);
  public void glLoadMatrixx(int[], int);
  public void glLoadMatrixx(java.nio.IntBuffer);
  public void glLogicOp(int);
  public void glMaterialf(int, int, float);
  public void glMaterialfv(int, int, float[], int);
  public void glMaterialfv(int, int, java.nio.FloatBuffer);
  public void glMaterialx(int, int, int);
  public void glMaterialxv(int, int, int[], int);
  public void glMaterialxv(int, int, java.nio.IntBuffer);
  public void glMatrixMode(int);
  public void glMultMatrixf(float[], int);
  public void glMultMatrixf(java.nio.FloatBuffer);
  public void glMultMatrixx(int[], int);
  public void glMultMatrixx(java.nio.IntBuffer);
  public void glMultiTexCoord4f(int, float, float, float, float);
  public void glMultiTexCoord4x(int, int, int, int, int);
  public void glNormal3f(float, float, float);
  public void glNormal3x(int, int, int);
  public void glNormalPointer(int, int, java.nio.Buffer);
  public void glOrthof(float, float, float, float, float, float);
  public void glOrthox(int, int, int, int, int, int);
  public void glPixelStorei(int, int);
  public void glPointSize(float);
  public void glPointSizex(int);
  public void glPolygonOffset(float, float);
  public void glPolygonOffsetx(int, int);
  public void glPopMatrix();
  public void glPushMatrix();
  public void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public void glRotatef(float, float, float, float);
  public void glRotatex(int, int, int, int);
  public void glSampleCoverage(float, boolean);
  public void glSampleCoveragex(int, boolean);
  public void glScalef(float, float, float);
  public void glScalex(int, int, int);
  public void glScissor(int, int, int, int);
  public void glShadeModel(int);
  public void glStencilFunc(int, int, int);
  public void glStencilMask(int);
  public void glStencilOp(int, int, int);
  public void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public void glTexEnvf(int, int, float);
  public void glTexEnvfv(int, int, float[], int);
  public void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public void glTexEnvx(int, int, int);
  public void glTexEnvxv(int, int, int[], int);
  public void glTexEnvxv(int, int, java.nio.IntBuffer);
  public void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glTexParameterf(int, int, float);
  public void glTexParameterx(int, int, int);
  public void glTexParameteriv(int, int, int[], int);
  public void glTexParameteriv(int, int, java.nio.IntBuffer);
  public void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public void glTranslatef(float, float, float);
  public void glTranslatex(int, int, int);
  public void glVertexPointer(int, int, int, java.nio.Buffer);
  public void glViewport(int, int, int, int);
  public void glClipPlanef(int, float[], int);
  public void glClipPlanef(int, java.nio.FloatBuffer);
  public void glClipPlanex(int, int[], int);
  public void glClipPlanex(int, java.nio.IntBuffer);
  public void glDrawTexfOES(float, float, float, float, float);
  public void glDrawTexfvOES(float[], int);
  public void glDrawTexfvOES(java.nio.FloatBuffer);
  public void glDrawTexiOES(int, int, int, int, int);
  public void glDrawTexivOES(int[], int);
  public void glDrawTexivOES(java.nio.IntBuffer);
  public void glDrawTexsOES(short, short, short, short, short);
  public void glDrawTexsvOES(short[], int);
  public void glDrawTexsvOES(java.nio.ShortBuffer);
  public void glDrawTexxOES(int, int, int, int, int);
  public void glDrawTexxvOES(int[], int);
  public void glDrawTexxvOES(java.nio.IntBuffer);
  public int glQueryMatrixxOES(int[], int, int[], int);
  public int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
  public void glBindBuffer(int, int);
  public void glBufferData(int, int, java.nio.Buffer, int);
  public void glBufferSubData(int, int, int, java.nio.Buffer);
  public void glColor4ub(byte, byte, byte, byte);
  public void glDeleteBuffers(int, int[], int);
  public void glDeleteBuffers(int, java.nio.IntBuffer);
  public void glGenBuffers(int, int[], int);
  public void glGenBuffers(int, java.nio.IntBuffer);
  public void glGetBooleanv(int, boolean[], int);
  public void glGetBooleanv(int, java.nio.IntBuffer);
  public void glGetBufferParameteriv(int, int, int[], int);
  public void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public void glGetClipPlanef(int, float[], int);
  public void glGetClipPlanef(int, java.nio.FloatBuffer);
  public void glGetClipPlanex(int, int[], int);
  public void glGetClipPlanex(int, java.nio.IntBuffer);
  public void glGetFixedv(int, int[], int);
  public void glGetFixedv(int, java.nio.IntBuffer);
  public void glGetFloatv(int, float[], int);
  public void glGetFloatv(int, java.nio.FloatBuffer);
  public void glGetLightfv(int, int, float[], int);
  public void glGetLightfv(int, int, java.nio.FloatBuffer);
  public void glGetLightxv(int, int, int[], int);
  public void glGetLightxv(int, int, java.nio.IntBuffer);
  public void glGetMaterialfv(int, int, float[], int);
  public void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public void glGetMaterialxv(int, int, int[], int);
  public void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public void glGetTexEnviv(int, int, int[], int);
  public void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public void glGetTexEnvxv(int, int, int[], int);
  public void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public void glGetTexParameterfv(int, int, float[], int);
  public void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public void glGetTexParameteriv(int, int, int[], int);
  public void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public void glGetTexParameterxv(int, int, int[], int);
  public void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public boolean glIsBuffer(int);
  public boolean glIsEnabled(int);
  public boolean glIsTexture(int);
  public void glPointParameterf(int, float);
  public void glPointParameterfv(int, float[], int);
  public void glPointParameterfv(int, java.nio.FloatBuffer);
  public void glPointParameterx(int, int);
  public void glPointParameterxv(int, int[], int);
  public void glPointParameterxv(int, java.nio.IntBuffer);
  public void glPointSizePointerOES(int, int, java.nio.Buffer);
  public void glTexEnvi(int, int, int);
  public void glTexEnviv(int, int, int[], int);
  public void glTexEnviv(int, int, java.nio.IntBuffer);
  public void glTexParameterfv(int, int, float[], int);
  public void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public void glTexParameteri(int, int, int);
  public void glTexParameterxv(int, int, int[], int);
  public void glTexParameterxv(int, int, java.nio.IntBuffer);
  public void glColorPointer(int, int, int, int);
  public void glDrawElements(int, int, int, int);
  public void glGetPointerv(int, java.nio.Buffer[]);
  public void glNormalPointer(int, int, int);
  public void glTexCoordPointer(int, int, int, int);
  public void glVertexPointer(int, int, int, int);
  public void glCurrentPaletteMatrixOES(int);
  public void glLoadPaletteFromModelViewMatrixOES();
  public void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public void glMatrixIndexPointerOES(int, int, int, int);
  public void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public void glWeightPointerOES(int, int, int, int);
  public void glBindFramebufferOES(int, int);
  public void glBindRenderbufferOES(int, int);
  public void glBlendEquation(int);
  public void glBlendEquationSeparate(int, int);
  public void glBlendFuncSeparate(int, int, int, int);
  public int glCheckFramebufferStatusOES(int);
  public void glDeleteFramebuffersOES(int, int[], int);
  public void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public void glDeleteRenderbuffersOES(int, int[], int);
  public void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public void glFramebufferRenderbufferOES(int, int, int, int);
  public void glFramebufferTexture2DOES(int, int, int, int, int);
  public void glGenerateMipmapOES(int);
  public void glGenFramebuffersOES(int, int[], int);
  public void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public void glGenRenderbuffersOES(int, int[], int);
  public void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public void glGetRenderbufferParameterivOES(int, int, int[], int);
  public void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public void glGetTexGenfv(int, int, float[], int);
  public void glGetTexGenfv(int, int, java.nio.FloatBuffer);
  public void glGetTexGeniv(int, int, int[], int);
  public void glGetTexGeniv(int, int, java.nio.IntBuffer);
  public void glGetTexGenxv(int, int, int[], int);
  public void glGetTexGenxv(int, int, java.nio.IntBuffer);
  public boolean glIsFramebufferOES(int);
  public boolean glIsRenderbufferOES(int);
  public void glRenderbufferStorageOES(int, int, int, int);
  public void glTexGenf(int, int, float);
  public void glTexGenfv(int, int, float[], int);
  public void glTexGenfv(int, int, java.nio.FloatBuffer);
  public void glTexGeni(int, int, int);
  public void glTexGeniv(int, int, int[], int);
  public void glTexGeniv(int, int, java.nio.IntBuffer);
  public void glTexGenx(int, int, int);
  public void glTexGenxv(int, int, int[], int);
  public void glTexGenxv(int, int, java.nio.IntBuffer);
  public android.opengl.GLSurfaceView$BaseConfigChooser(android.opengl.GLSurfaceView, int[]);
  public javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay);
  public android.opengl.GLSurfaceView$ComponentSizeChooser(android.opengl.GLSurfaceView, int, int, int, int, int, int);
  public javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[]);
  public javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig);
  public void destroyContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object);
  public void destroySurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
public interface android.opengl.GLSurfaceView$EGLConfigChooser {
  public abstract javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay);
public interface android.opengl.GLSurfaceView$EGLContextFactory {
  public abstract javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig);
  public abstract void destroyContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
public interface android.opengl.GLSurfaceView$EGLWindowSurfaceFactory {
  public abstract javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object);
  public abstract void destroySurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public android.opengl.GLSurfaceView$EglHelper(android.opengl.GLSurfaceView);
  public void start();
  public javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder);
  public void purgeBuffers();
  public boolean swap();
  public void destroySurface();
  public void finish();
  public void run();
  public boolean ableToDraw();
  public void setRenderMode(int);
  public int getRenderMode();
  public void requestRender();
  public void surfaceCreated();
  public void surfaceDestroyed();
  public void onPause();
  public void onResume();
  public void onWindowResize(int, int);
  public void requestExitAndWait();
  public void requestReleaseEglContextLocked();
  public void queueEvent(java.lang.Runnable);
  public synchronized void threadExiting(android.opengl.GLSurfaceView$GLThread);
  public boolean tryAcquireEglContextLocked(android.opengl.GLSurfaceView$GLThread);
  public void releaseEglContextLocked(android.opengl.GLSurfaceView$GLThread);
  public synchronized boolean shouldReleaseEGLContextWhenPausing();
  public synchronized boolean shouldTerminateEGLWhenPausing();
  public synchronized void checkGLDriver(javax.microedition.khronos.opengles.GL10);
public interface android.opengl.GLSurfaceView$GLWrapper {
  public abstract javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL);
  public void close();
  public void flush();
  public void write(char[], int, int);
public interface android.opengl.GLSurfaceView$Renderer {
  public abstract void onSurfaceCreated(javax.microedition.khronos.opengles.GL10, javax.microedition.khronos.egl.EGLConfig);
  public abstract void onSurfaceChanged(javax.microedition.khronos.opengles.GL10, int, int);
  public abstract void onDrawFrame(javax.microedition.khronos.opengles.GL10);
  public android.opengl.GLSurfaceView$SimpleEGLConfigChooser(android.opengl.GLSurfaceView, boolean);
public class android.opengl.GLSurfaceView extends android.view.SurfaceView implements android.view.SurfaceHolder$Callback {
  public android.opengl.GLSurfaceView(android.content.Context);
  public android.opengl.GLSurfaceView(android.content.Context, android.util.AttributeSet);
  public void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper);
  public void setDebugFlags(int);
  public int getDebugFlags();
  public void setPreserveEGLContextOnPause(boolean);
  public boolean getPreserveEGLContextOnPause();
  public void setRenderer(android.opengl.GLSurfaceView$Renderer);
  public void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory);
  public void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory);
  public void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser);
  public void setEGLConfigChooser(boolean);
  public void setEGLConfigChooser(int, int, int, int, int, int);
  public void setEGLContextClientVersion(int);
  public void setRenderMode(int);
  public int getRenderMode();
  public void requestRender();
  public void surfaceCreated(android.view.SurfaceHolder);
  public void surfaceDestroyed(android.view.SurfaceHolder);
  public void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void onPause();
  public void onResume();
  public void queueEvent(java.lang.Runnable);
public class android.opengl.GLU {
  public android.opengl.GLU();
  public static java.lang.String gluErrorString(int);
  public static void gluLookAt(javax.microedition.khronos.opengles.GL10, float, float, float, float, float, float, float, float, float);
  public static void gluOrtho2D(javax.microedition.khronos.opengles.GL10, float, float, float, float);
  public static void gluPerspective(javax.microedition.khronos.opengles.GL10, float, float, float, float);
  public static int gluProject(float, float, float, float[], int, float[], int, int[], int, float[], int);
  public static int gluUnProject(float, float, float, float[], int, float[], int, int[], int, float[], int);
public final class android.opengl.GLUtils {
  public static int getInternalFormat(android.graphics.Bitmap);
  public static int getType(android.graphics.Bitmap);
  public static void texImage2D(int, int, int, android.graphics.Bitmap, int);
  public static void texImage2D(int, int, int, android.graphics.Bitmap, int, int);
  public static void texImage2D(int, int, android.graphics.Bitmap, int);
  public static void texSubImage2D(int, int, int, int, android.graphics.Bitmap);
  public static void texSubImage2D(int, int, int, int, android.graphics.Bitmap, int, int);
  public static java.lang.String getEGLErrorString(int);
  public android.opengl.GLWrapperBase(javax.microedition.khronos.opengles.GL);
public abstract class android.opengl.ManagedEGLContext {
  public android.opengl.ManagedEGLContext(javax.microedition.khronos.egl.EGLContext);
  public javax.microedition.khronos.egl.EGLContext getContext();
  public void terminate();
  public abstract void onTerminate(javax.microedition.khronos.egl.EGLContext);
  public static boolean doTerminate();
public class android.opengl.Matrix {
  public android.opengl.Matrix();
  public static native void multiplyMM(float[], int, float[], int, float[], int);
  public static native void multiplyMV(float[], int, float[], int, float[], int);
  public static void transposeM(float[], int, float[], int);
  public static boolean invertM(float[], int, float[], int);
  public static void orthoM(float[], int, float, float, float, float, float, float);
  public static void frustumM(float[], int, float, float, float, float, float, float);
  public static void perspectiveM(float[], int, float, float, float, float);
  public static float length(float, float, float);
  public static void setIdentityM(float[], int);
  public static void scaleM(float[], int, float[], int, float, float, float);
  public static void scaleM(float[], int, float, float, float);
  public static void translateM(float[], int, float[], int, float, float, float);
  public static void translateM(float[], int, float, float, float);
  public static void rotateM(float[], int, float[], int, float, float, float, float);
  public static void rotateM(float[], int, float, float, float, float);
  public static void setRotateM(float[], int, float, float, float, float);
  public static void setRotateEulerM(float[], int, float, float, float);
  public static void setLookAtM(float[], int, float, float, float, float, float, float, float, float, float);
public class android.os.AsyncResult {
  public static android.os.AsyncResult forMessage(android.os.Message, java.lang.Object, java.lang.Throwable);
  public static android.os.AsyncResult forMessage(android.os.Message);
  public android.os.AsyncResult(java.lang.Object, java.lang.Object, java.lang.Throwable);
  public java.lang.Thread newThread(java.lang.Runnable);
  public void handleMessage(android.os.Message);
  public void run();
  public synchronized void execute(java.lang.Runnable);
public final class android.os.AsyncTask$Status extends java.lang.Enum<android.os.AsyncTask$Status> {
  public static android.os.AsyncTask$Status[] values();
  public static android.os.AsyncTask$Status valueOf(java.lang.String);
public abstract class android.os.AsyncTask<Params, Progress, Result> {
  public static void init();
  public static void setDefaultExecutor(java.util.concurrent.Executor);
  public android.os.AsyncTask();
  public final android.os.AsyncTask$Status getStatus();
  public final boolean isCancelled();
  public final boolean cancel(boolean);
  public final android.os.AsyncTask<Params, Progress, Result> execute(Params...);
  public final android.os.AsyncTask<Params, Progress, Result> executeOnExecutor(java.util.concurrent.Executor, Params...);
  public static void execute(java.lang.Runnable);
public class android.os.BadParcelableException extends android.util.AndroidRuntimeException {
  public android.os.BadParcelableException(java.lang.String);
  public android.os.BadParcelableException(java.lang.Exception);
public class android.os.BatteryManager {
  public android.os.BatteryManager();
  public void run();
public class android.os.Binder implements android.os.IBinder {
  public static final native int getCallingPid();
  public static final native int getCallingUid();
  public static final native long clearCallingIdentity();
  public static final native void restoreCallingIdentity(long);
  public static final native void setThreadStrictModePolicy(int);
  public static final native int getThreadStrictModePolicy();
  public static final native void flushPendingCommands();
  public static final native void joinThreadPool();
  public android.os.Binder();
  public void attachInterface(android.os.IInterface, java.lang.String);
  public java.lang.String getInterfaceDescriptor();
  public boolean pingBinder();
  public boolean isBinderAlive();
  public android.os.IInterface queryLocalInterface(java.lang.String);
  public void dump(java.io.FileDescriptor, java.lang.String[]);
  public void dumpAsync(java.io.FileDescriptor, java.lang.String[]);
  public void linkToDeath(android.os.IBinder$DeathRecipient, int);
  public boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
  public native boolean pingBinder();
  public native boolean isBinderAlive();
  public android.os.IInterface queryLocalInterface(java.lang.String);
  public native boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
public class android.os.Build$VERSION {
  public android.os.Build$VERSION();
public class android.os.Build$VERSION_CODES {
  public android.os.Build$VERSION_CODES();
public class android.os.Build {
  public android.os.Build();
  public static java.lang.String getRadioVersion();
  public android.os.Bundle createFromParcel(android.os.Parcel);
  public android.os.Bundle[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.os.Bundle implements android.os.Parcelable,java.lang.Cloneable {
  public android.os.Bundle();
  public android.os.Bundle(java.lang.ClassLoader);
  public android.os.Bundle(int);
  public android.os.Bundle(android.os.Bundle);
  public static android.os.Bundle forPair(java.lang.String, java.lang.String);
  public java.lang.String getPairValue();
  public void setClassLoader(java.lang.ClassLoader);
  public java.lang.ClassLoader getClassLoader();
  public boolean setAllowFds(boolean);
  public java.lang.Object clone();
  public int size();
  public boolean isEmpty();
  public void clear();
  public boolean containsKey(java.lang.String);
  public java.lang.Object get(java.lang.String);
  public void remove(java.lang.String);
  public void putAll(android.os.Bundle);
  public java.util.Set<java.lang.String> keySet();
  public boolean hasFileDescriptors();
  public void putBoolean(java.lang.String, boolean);
  public void putByte(java.lang.String, byte);
  public void putChar(java.lang.String, char);
  public void putShort(java.lang.String, short);
  public void putInt(java.lang.String, int);
  public void putLong(java.lang.String, long);
  public void putFloat(java.lang.String, float);
  public void putDouble(java.lang.String, double);
  public void putString(java.lang.String, java.lang.String);
  public void putCharSequence(java.lang.String, java.lang.CharSequence);
  public void putParcelable(java.lang.String, android.os.Parcelable);
  public void putParcelableArray(java.lang.String, android.os.Parcelable[]);
  public void putParcelableArrayList(java.lang.String, java.util.ArrayList<? extends android.os.Parcelable>);
  public void putSparseParcelableArray(java.lang.String, android.util.SparseArray<? extends android.os.Parcelable>);
  public void putIntegerArrayList(java.lang.String, java.util.ArrayList<java.lang.Integer>);
  public void putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>);
  public void putCharSequenceArrayList(java.lang.String, java.util.ArrayList<java.lang.CharSequence>);
  public void putSerializable(java.lang.String, java.io.Serializable);
  public void putBooleanArray(java.lang.String, boolean[]);
  public void putByteArray(java.lang.String, byte[]);
  public void putShortArray(java.lang.String, short[]);
  public void putCharArray(java.lang.String, char[]);
  public void putIntArray(java.lang.String, int[]);
  public void putLongArray(java.lang.String, long[]);
  public void putFloatArray(java.lang.String, float[]);
  public void putDoubleArray(java.lang.String, double[]);
  public void putStringArray(java.lang.String, java.lang.String[]);
  public void putCharSequenceArray(java.lang.String, java.lang.CharSequence[]);
  public void putBundle(java.lang.String, android.os.Bundle);
  public void putIBinder(java.lang.String, android.os.IBinder);
  public boolean getBoolean(java.lang.String);
  public boolean getBoolean(java.lang.String, boolean);
  public byte getByte(java.lang.String);
  public java.lang.Byte getByte(java.lang.String, byte);
  public char getChar(java.lang.String);
  public char getChar(java.lang.String, char);
  public short getShort(java.lang.String);
  public short getShort(java.lang.String, short);
  public int getInt(java.lang.String);
  public int getInt(java.lang.String, int);
  public long getLong(java.lang.String);
  public long getLong(java.lang.String, long);
  public float getFloat(java.lang.String);
  public float getFloat(java.lang.String, float);
  public double getDouble(java.lang.String);
  public double getDouble(java.lang.String, double);
  public java.lang.String getString(java.lang.String);
  public java.lang.String getString(java.lang.String, java.lang.String);
  public java.lang.CharSequence getCharSequence(java.lang.String);
  public java.lang.CharSequence getCharSequence(java.lang.String, java.lang.CharSequence);
  public android.os.Bundle getBundle(java.lang.String);
  public <T extends android/os/Parcelable> T getParcelable(java.lang.String);
  public android.os.Parcelable[] getParcelableArray(java.lang.String);
  public <T extends android/os/Parcelable> java.util.ArrayList<T> getParcelableArrayList(java.lang.String);
  public <T extends android/os/Parcelable> android.util.SparseArray<T> getSparseParcelableArray(java.lang.String);
  public java.io.Serializable getSerializable(java.lang.String);
  public java.util.ArrayList<java.lang.Integer> getIntegerArrayList(java.lang.String);
  public java.util.ArrayList<java.lang.String> getStringArrayList(java.lang.String);
  public java.util.ArrayList<java.lang.CharSequence> getCharSequenceArrayList(java.lang.String);
  public boolean[] getBooleanArray(java.lang.String);
  public byte[] getByteArray(java.lang.String);
  public short[] getShortArray(java.lang.String);
  public char[] getCharArray(java.lang.String);
  public int[] getIntArray(java.lang.String);
  public long[] getLongArray(java.lang.String);
  public float[] getFloatArray(java.lang.String);
  public double[] getDoubleArray(java.lang.String);
  public java.lang.String[] getStringArray(java.lang.String);
  public java.lang.CharSequence[] getCharSequenceArray(java.lang.String);
  public android.os.IBinder getIBinder(java.lang.String);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public synchronized java.lang.String toString();
  public void handleMessage(android.os.Message);
public abstract class android.os.CountDownTimer {
  public android.os.CountDownTimer(long, long);
  public final void cancel();
  public final synchronized android.os.CountDownTimer start();
  public abstract void onTick(long);
  public abstract void onFinish();
public interface android.os.Debug$DebugProperty extends java.lang.annotation.Annotation {
public class android.os.Debug$InstructionCount {
  public android.os.Debug$InstructionCount();
  public boolean resetAndStart();
  public boolean collect();
  public int globalTotal();
  public int globalMethodInvocations();
  public android.os.Debug$MemoryInfo createFromParcel(android.os.Parcel);
  public android.os.Debug$MemoryInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.Debug$MemoryInfo implements android.os.Parcelable {
  public android.os.Debug$MemoryInfo();
  public int getTotalPss();
  public int getTotalPrivateDirty();
  public int getTotalSharedDirty();
  public int getOtherPss(int);
  public int getOtherPrivateDirty(int);
  public int getOtherSharedDirty(int);
  public static java.lang.String getOtherLabel(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
public final class android.os.Debug {
  public static void waitForDebugger();
  public static boolean waitingForDebugger();
  public static boolean isDebuggerConnected();
  public static java.lang.String[] getVmFeatureList();
  public static void changeDebugPort(int);
  public static void startNativeTracing();
  public static void stopNativeTracing();
  public static void enableEmulatorTraceOutput();
  public static void startMethodTracing();
  public static void startMethodTracing(java.lang.String);
  public static void startMethodTracing(java.lang.String, int);
  public static void startMethodTracing(java.lang.String, int, int);
  public static void startMethodTracing(java.lang.String, java.io.FileDescriptor, int, int);
  public static void startMethodTracingDdms(int, int);
  public static boolean isMethodTracingActive();
  public static void stopMethodTracing();
  public static long threadCpuTimeNanos();
  public static void startAllocCounting();
  public static void stopAllocCounting();
  public static int getGlobalAllocCount();
  public static int getGlobalAllocSize();
  public static int getGlobalFreedCount();
  public static int getGlobalFreedSize();
  public static int getGlobalClassInitCount();
  public static int getGlobalClassInitTime();
  public static int getGlobalExternalAllocCount();
  public static int getGlobalExternalAllocSize();
  public static int getGlobalExternalFreedCount();
  public static int getGlobalExternalFreedSize();
  public static int getGlobalGcInvocationCount();
  public static int getThreadAllocCount();
  public static int getThreadAllocSize();
  public static int getThreadExternalAllocCount();
  public static int getThreadExternalAllocSize();
  public static int getThreadGcInvocationCount();
  public static void resetGlobalAllocCount();
  public static void resetGlobalAllocSize();
  public static void resetGlobalFreedCount();
  public static void resetGlobalFreedSize();
  public static void resetGlobalClassInitCount();
  public static void resetGlobalClassInitTime();
  public static void resetGlobalExternalAllocCount();
  public static void resetGlobalExternalAllocSize();
  public static void resetGlobalExternalFreedCount();
  public static void resetGlobalExternalFreedSize();
  public static void resetGlobalGcInvocationCount();
  public static void resetThreadAllocCount();
  public static void resetThreadAllocSize();
  public static void resetThreadExternalAllocCount();
  public static void resetThreadExternalAllocSize();
  public static void resetThreadGcInvocationCount();
  public static void resetAllCounts();
  public static native long getNativeHeapSize();
  public static native long getNativeHeapAllocatedSize();
  public static native long getNativeHeapFreeSize();
  public static native void getMemoryInfo(android.os.Debug$MemoryInfo);
  public static native void getMemoryInfo(int, android.os.Debug$MemoryInfo);
  public static native long getPss();
  public static native long getPss(int);
  public static int setAllocationLimit(int);
  public static int setGlobalAllocationLimit(int);
  public static void printLoadedClasses(int);
  public static int getLoadedClassCount();
  public static void dumpHprofDataDdms();
  public static native void dumpNativeHeap(java.io.FileDescriptor);
  public static long countInstancesOfClass(java.lang.Class);
  public static native int getBinderSentTransactions();
  public static native int getBinderReceivedTransactions();
  public static final native int getBinderLocalObjectCount();
  public static final native int getBinderProxyObjectCount();
  public static final native int getBinderDeathObjectCount();
  public static final boolean cacheRegisterMap(java.lang.String);
  public static final void dumpReferenceTables();
  public static void setFieldsOn(java.lang.Class<?>);
  public static void setFieldsOn(java.lang.Class<?>, boolean);
  public static boolean dumpService(java.lang.String, java.io.FileDescriptor, java.lang.String[]);
  public android.os.DropBoxManager$Entry[] newArray(int);
  public android.os.DropBoxManager$Entry createFromParcel(android.os.Parcel);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.DropBoxManager$Entry implements android.os.Parcelable,java.io.Closeable {
  public android.os.DropBoxManager$Entry(java.lang.String, long);
  public android.os.DropBoxManager$Entry(java.lang.String, long, java.lang.String);
  public android.os.DropBoxManager$Entry(java.lang.String, long, byte[], int);
  public android.os.DropBoxManager$Entry(java.lang.String, long, android.os.ParcelFileDescriptor, int);
  public void close();
  public java.lang.String getTag();
  public long getTimeMillis();
  public int getFlags();
  public java.lang.String getText(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.os.DropBoxManager {
  public android.os.DropBoxManager(com.android.internal.os.IDropBoxManagerService);
  public void addText(java.lang.String, java.lang.String);
  public void addData(java.lang.String, byte[], int);
  public boolean isTagEnabled(java.lang.String);
  public android.os.DropBoxManager$Entry getNextEntry(java.lang.String, long);
public class android.os.Environment {
  public android.os.Environment();
  public static java.io.File getRootDirectory();
  public static java.io.File getSystemSecureDirectory();
  public static java.io.File getSecureDataDirectory();
  public static boolean isEncryptedFilesystemEnabled();
  public static java.io.File getDataDirectory();
  public static java.io.File getExternalStorageDirectory();
  public static java.io.File getExternalStoragePublicDirectory(java.lang.String);
  public static java.io.File getExternalStorageAndroidDataDir();
  public static java.io.File getExternalStorageAppDataDirectory(java.lang.String);
  public static java.io.File getExternalStorageAppMediaDirectory(java.lang.String);
  public static java.io.File getExternalStorageAppObbDirectory(java.lang.String);
  public static java.io.File getExternalStorageAppFilesDirectory(java.lang.String);
  public static java.io.File getExternalStorageAppCacheDirectory(java.lang.String);
  public static java.io.File getDownloadCacheDirectory();
  public static java.lang.String getExternalStorageState();
  public static boolean isExternalStorageRemovable();
  public static boolean isExternalStorageEmulated();
  public android.os.FileObserver$ObserverThread();
  public void run();
  public int startWatching(java.lang.String, int, android.os.FileObserver);
  public void stopWatching(int);
  public void onEvent(int, int, java.lang.String);
public abstract class android.os.FileObserver {
  public android.os.FileObserver(java.lang.String);
  public android.os.FileObserver(java.lang.String, int);
  public void startWatching();
  public void stopWatching();
  public abstract void onEvent(int, java.lang.String);
public final class android.os.FileUtils$FileStatus {
  public android.os.FileUtils$FileStatus();
public class android.os.FileUtils {
  public android.os.FileUtils();
  public static boolean getFileStatus(java.lang.String, android.os.FileUtils$FileStatus);
  public static native int setPermissions(java.lang.String, int, int, int);
  public static native int getPermissions(java.lang.String, int[]);
  public static native int setUMask(int);
  public static native int getFatVolumeId(java.lang.String);
  public static boolean sync(java.io.FileOutputStream);
  public static boolean copyFile(java.io.File, java.io.File);
  public static boolean copyToFile(java.io.InputStream, java.io.File);
  public static boolean isFilenameSafe(java.io.File);
public interface android.os.Handler$Callback {
  public abstract boolean handleMessage(android.os.Message);
  public void send(android.os.Message);
public class android.os.Handler {
  public void handleMessage(android.os.Message);
  public void dispatchMessage(android.os.Message);
  public android.os.Handler();
  public android.os.Handler(android.os.Handler$Callback);
  public android.os.Handler(android.os.Looper);
  public android.os.Handler(android.os.Looper, android.os.Handler$Callback);
  public java.lang.String getMessageName(android.os.Message);
  public final android.os.Message obtainMessage();
  public final android.os.Message obtainMessage(int);
  public final android.os.Message obtainMessage(int, java.lang.Object);
  public final android.os.Message obtainMessage(int, int, int);
  public final android.os.Message obtainMessage(int, int, int, java.lang.Object);
  public final boolean post(java.lang.Runnable);
  public final boolean postAtTime(java.lang.Runnable, long);
  public final boolean postAtTime(java.lang.Runnable, java.lang.Object, long);
  public final boolean postDelayed(java.lang.Runnable, long);
  public final boolean postAtFrontOfQueue(java.lang.Runnable);
  public final void removeCallbacks(java.lang.Runnable);
  public final void removeCallbacks(java.lang.Runnable, java.lang.Object);
  public final boolean sendMessage(android.os.Message);
  public final boolean sendEmptyMessage(int);
  public final boolean sendEmptyMessageDelayed(int, long);
  public final boolean sendEmptyMessageAtTime(int, long);
  public final boolean sendMessageDelayed(android.os.Message, long);
  public boolean sendMessageAtTime(android.os.Message, long);
  public final boolean sendMessageAtFrontOfQueue(android.os.Message);
  public final void removeMessages(int);
  public final void removeMessages(int, java.lang.Object);
  public final void removeCallbacksAndMessages(java.lang.Object);
  public final boolean hasMessages(int);
  public final boolean hasMessages(int, java.lang.Object);
  public final android.os.Looper getLooper();
  public final void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
public class android.os.HandlerThread extends java.lang.Thread {
  public android.os.HandlerThread(java.lang.String);
  public android.os.HandlerThread(java.lang.String, int);
  public void run();
  public android.os.Looper getLooper();
  public boolean quit();
  public int getThreadId();
public interface android.os.IBinder$DeathRecipient {
  public abstract void binderDied();
public interface android.os.IBinder {
  public abstract boolean pingBinder();
  public abstract boolean isBinderAlive();
  public abstract android.os.IInterface queryLocalInterface(java.lang.String);
  public abstract boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
public interface android.os.IInterface {
  public abstract android.os.IBinder asBinder();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.IMessenger$Stub extends android.os.Binder implements android.os.IMessenger {
  public android.os.IMessenger$Stub();
  public static android.os.IMessenger asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.IMessenger extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.IPermissionController$Stub extends android.os.Binder implements android.os.IPermissionController {
  public android.os.IPermissionController$Stub();
  public static android.os.IPermissionController asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.IPermissionController extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.IPowerManager$Stub extends android.os.Binder implements android.os.IPowerManager {
  public android.os.IPowerManager$Stub();
  public static android.os.IPowerManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.IPowerManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.IRemoteCallback$Stub extends android.os.Binder implements android.os.IRemoteCallback {
  public android.os.IRemoteCallback$Stub();
  public static android.os.IRemoteCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.IRemoteCallback extends android.os.IInterface {
public interface android.os.IServiceManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.IVibratorService$Stub extends android.os.Binder implements android.os.IVibratorService {
  public android.os.IVibratorService$Stub();
  public static android.os.IVibratorService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.IVibratorService extends android.os.IInterface {
public interface android.os.Looper$Profiler {
  public abstract void profile(android.os.Message, long, long, long, long);
public class android.os.Looper {
  public static void prepare();
  public static void prepareMainLooper();
  public static synchronized android.os.Looper getMainLooper();
  public static void loop();
  public static android.os.Looper myLooper();
  public void setMessageLogging(android.util.Printer);
  public static android.os.MessageQueue myQueue();
  public void quit();
  public java.lang.Thread getThread();
  public android.os.MessageQueue getQueue();
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public boolean markSupported();
  public void mark(int);
public class android.os.MemoryFile {
  public void close();
  public int length();
  public boolean isPurgingAllowed();
  public java.io.InputStream getInputStream();
  public java.io.OutputStream getOutputStream();
  public android.os.Message createFromParcel(android.os.Parcel);
  public android.os.Message[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.os.Message implements android.os.Parcelable {
  public static android.os.Message obtain();
  public static android.os.Message obtain(android.os.Message);
  public static android.os.Message obtain(android.os.Handler);
  public static android.os.Message obtain(android.os.Handler, java.lang.Runnable);
  public static android.os.Message obtain(android.os.Handler, int);
  public static android.os.Message obtain(android.os.Handler, int, java.lang.Object);
  public static android.os.Message obtain(android.os.Handler, int, int, int);
  public static android.os.Message obtain(android.os.Handler, int, int, int, java.lang.Object);
  public void recycle();
  public void copyFrom(android.os.Message);
  public long getWhen();
  public void setTarget(android.os.Handler);
  public android.os.Handler getTarget();
  public java.lang.Runnable getCallback();
  public android.os.Bundle getData();
  public android.os.Bundle peekData();
  public void setData(android.os.Bundle);
  public void sendToTarget();
  public android.os.Message();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.os.MessageQueue$IdleHandler {
  public abstract boolean queueIdle();
public class android.os.MessageQueue {
  public final void addIdleHandler(android.os.MessageQueue$IdleHandler);
  public final void removeIdleHandler(android.os.MessageQueue$IdleHandler);
  public android.os.Messenger createFromParcel(android.os.Parcel);
  public android.os.Messenger[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.os.Messenger implements android.os.Parcelable {
  public android.os.Messenger(android.os.Handler);
  public android.os.IBinder getBinder();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static void writeMessengerOrNullToParcel(android.os.Messenger, android.os.Parcel);
  public static android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel);
  public android.os.Messenger(android.os.IBinder);
public class android.os.NetworkOnMainThreadException extends java.lang.RuntimeException {
  public android.os.NetworkOnMainThreadException();
  public java.lang.String createFromParcel(android.os.Parcel);
  public java.lang.String[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.os.Parcel {
  public static android.os.Parcel obtain();
  public final void recycle();
  public final native int dataSize();
  public final native int dataAvail();
  public final native int dataPosition();
  public final native int dataCapacity();
  public final native void setDataSize(int);
  public final native void setDataPosition(int);
  public final native void setDataCapacity(int);
  public final native boolean pushAllowFds(boolean);
  public final native void restoreAllowFds(boolean);
  public final native byte[] marshall();
  public final native void unmarshall(byte[], int, int);
  public final native void appendFrom(android.os.Parcel, int, int);
  public final native boolean hasFileDescriptors();
  public final native void writeInterfaceToken(java.lang.String);
  public final native void enforceInterface(java.lang.String);
  public final void writeByteArray(byte[]);
  public final void writeByteArray(byte[], int, int);
  public final native void writeInt(int);
  public final native void writeLong(long);
  public final native void writeFloat(float);
  public final native void writeDouble(double);
  public final native void writeString(java.lang.String);
  public final void writeCharSequence(java.lang.CharSequence);
  public final native void writeStrongBinder(android.os.IBinder);
  public final void writeStrongInterface(android.os.IInterface);
  public final native void writeFileDescriptor(java.io.FileDescriptor);
  public final void writeByte(byte);
  public final void writeMap(java.util.Map);
  public final void writeBundle(android.os.Bundle);
  public final void writeList(java.util.List);
  public final void writeArray(java.lang.Object[]);
  public final void writeSparseArray(android.util.SparseArray<java.lang.Object>);
  public final void writeSparseBooleanArray(android.util.SparseBooleanArray);
  public final void writeBooleanArray(boolean[]);
  public final boolean[] createBooleanArray();
  public final void readBooleanArray(boolean[]);
  public final void writeCharArray(char[]);
  public final char[] createCharArray();
  public final void readCharArray(char[]);
  public final void writeIntArray(int[]);
  public final int[] createIntArray();
  public final void readIntArray(int[]);
  public final void writeLongArray(long[]);
  public final long[] createLongArray();
  public final void readLongArray(long[]);
  public final void writeFloatArray(float[]);
  public final float[] createFloatArray();
  public final void readFloatArray(float[]);
  public final void writeDoubleArray(double[]);
  public final double[] createDoubleArray();
  public final void readDoubleArray(double[]);
  public final void writeStringArray(java.lang.String[]);
  public final java.lang.String[] createStringArray();
  public final void readStringArray(java.lang.String[]);
  public final void writeBinderArray(android.os.IBinder[]);
  public final void writeCharSequenceArray(java.lang.CharSequence[]);
  public final android.os.IBinder[] createBinderArray();
  public final void readBinderArray(android.os.IBinder[]);
  public final <T extends android/os/Parcelable> void writeTypedList(java.util.List<T>);
  public final void writeStringList(java.util.List<java.lang.String>);
  public final void writeBinderList(java.util.List<android.os.IBinder>);
  public final <T extends android/os/Parcelable> void writeTypedArray(T[], int);
  public final void writeValue(java.lang.Object);
  public final void writeParcelable(android.os.Parcelable, int);
  public final void writeSerializable(java.io.Serializable);
  public final void writeException(java.lang.Exception);
  public final void writeNoException();
  public final void readException();
  public final int readExceptionCode();
  public final void readException(int, java.lang.String);
  public final native int readInt();
  public final native long readLong();
  public final native float readFloat();
  public final native double readDouble();
  public final native java.lang.String readString();
  public final java.lang.CharSequence readCharSequence();
  public final native android.os.IBinder readStrongBinder();
  public final android.os.ParcelFileDescriptor readFileDescriptor();
  public final byte readByte();
  public final void readMap(java.util.Map, java.lang.ClassLoader);
  public final void readList(java.util.List, java.lang.ClassLoader);
  public final java.util.HashMap readHashMap(java.lang.ClassLoader);
  public final android.os.Bundle readBundle();
  public final android.os.Bundle readBundle(java.lang.ClassLoader);
  public final native byte[] createByteArray();
  public final void readByteArray(byte[]);
  public final java.lang.String[] readStringArray();
  public final java.lang.CharSequence[] readCharSequenceArray();
  public final java.util.ArrayList readArrayList(java.lang.ClassLoader);
  public final java.lang.Object[] readArray(java.lang.ClassLoader);
  public final android.util.SparseArray readSparseArray(java.lang.ClassLoader);
  public final android.util.SparseBooleanArray readSparseBooleanArray();
  public final <T extends java/lang/Object> java.util.ArrayList<T> createTypedArrayList(android.os.Parcelable$Creator<T>);
  public final <T extends java/lang/Object> void readTypedList(java.util.List<T>, android.os.Parcelable$Creator<T>);
  public final java.util.ArrayList<java.lang.String> createStringArrayList();
  public final java.util.ArrayList<android.os.IBinder> createBinderArrayList();
  public final void readStringList(java.util.List<java.lang.String>);
  public final void readBinderList(java.util.List<android.os.IBinder>);
  public final <T extends java/lang/Object> T[] createTypedArray(android.os.Parcelable$Creator<T>);
  public final <T extends java/lang/Object> void readTypedArray(T[], android.os.Parcelable$Creator<T>);
  public final <T extends java/lang/Object> T[] readTypedArray(android.os.Parcelable$Creator<T>);
  public final <T extends android/os/Parcelable> void writeParcelableArray(T[], int);
  public final java.lang.Object readValue(java.lang.ClassLoader);
  public final <T extends android/os/Parcelable> T readParcelable(java.lang.ClassLoader);
  public final android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader);
  public final java.io.Serializable readSerializable();
  public android.os.ParcelFileDescriptor createFromParcel(android.os.Parcel);
  public android.os.ParcelFileDescriptor[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.ParcelFileDescriptor$AutoCloseInputStream extends java.io.FileInputStream {
  public android.os.ParcelFileDescriptor$AutoCloseInputStream(android.os.ParcelFileDescriptor);
public class android.os.ParcelFileDescriptor$AutoCloseOutputStream extends java.io.FileOutputStream {
  public android.os.ParcelFileDescriptor$AutoCloseOutputStream(android.os.ParcelFileDescriptor);
public class android.os.ParcelFileDescriptor implements android.os.Parcelable {
  public static android.os.ParcelFileDescriptor adoptFd(int);
  public static android.os.ParcelFileDescriptor fromSocket(java.net.Socket);
  public static android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket);
  public java.io.FileDescriptor getFileDescriptor();
  public native long getStatSize();
  public native long seekTo(long);
  public int getFd();
  public int detachFd();
  public java.lang.String toString();
  public android.os.ParcelFileDescriptor(android.os.ParcelFileDescriptor);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.ParcelUuid createFromParcel(android.os.Parcel);
  public android.os.ParcelUuid[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.os.ParcelUuid implements android.os.Parcelable {
  public android.os.ParcelUuid(java.util.UUID);
  public static android.os.ParcelUuid fromString(java.lang.String);
  public java.util.UUID getUuid();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.os.Parcelable$ClassLoaderCreator<T> extends android.os.Parcelable$Creator<T> {
  public abstract T createFromParcel(android.os.Parcel, java.lang.ClassLoader);
public interface android.os.Parcelable$Creator<T> {
  public abstract T createFromParcel(android.os.Parcel);
  public abstract T[] newArray(int);
public interface android.os.Parcelable {
  public abstract int describeContents();
  public abstract void writeToParcel(android.os.Parcel, int);
  public android.os.PatternMatcher createFromParcel(android.os.Parcel);
  public android.os.PatternMatcher[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.PatternMatcher implements android.os.Parcelable {
  public android.os.PatternMatcher(java.lang.String, int);
  public final java.lang.String getPath();
  public final int getType();
  public boolean match(java.lang.String);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.PatternMatcher(android.os.Parcel);
public interface android.os.PerformanceCollector$PerformanceResultsWriter {
  public abstract void writeBeginSnapshot(java.lang.String);
  public abstract void writeEndSnapshot(android.os.Bundle);
  public abstract void writeStartTiming(java.lang.String);
  public abstract void writeStopTiming(android.os.Bundle);
  public abstract void writeMeasurement(java.lang.String, long);
  public abstract void writeMeasurement(java.lang.String, float);
  public abstract void writeMeasurement(java.lang.String, java.lang.String);
public class android.os.PerformanceCollector {
  public android.os.PerformanceCollector();
  public android.os.PerformanceCollector(android.os.PerformanceCollector$PerformanceResultsWriter);
  public void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter);
  public void beginSnapshot(java.lang.String);
  public android.os.Bundle endSnapshot();
  public void startTiming(java.lang.String);
  public android.os.Bundle addIteration(java.lang.String);
  public android.os.Bundle stopTiming(java.lang.String);
  public void addMeasurement(java.lang.String, long);
  public void addMeasurement(java.lang.String, float);
  public void addMeasurement(java.lang.String, java.lang.String);
  public void run();
public class android.os.PowerManager$WakeLock {
  public void setReferenceCounted(boolean);
  public void acquire();
  public void acquire(long);
  public void release();
  public void release(int);
  public boolean isHeld();
  public void setWorkSource(android.os.WorkSource);
  public java.lang.String toString();
public class android.os.PowerManager {
  public android.os.PowerManager$WakeLock newWakeLock(int, java.lang.String);
  public void userActivity(long, boolean);
  public void goToSleep(long);
  public void setBacklightBrightness(int);
  public int getSupportedWakeLockFlags();
  public boolean isScreenOn();
  public void reboot(java.lang.String);
  public android.os.PowerManager(android.os.IPowerManager, android.os.Handler);
public final class android.os.Process$ProcessStartResult {
  public android.os.Process$ProcessStartResult();
public class android.os.Process {
  public android.os.Process();
  public static final android.os.Process$ProcessStartResult start(java.lang.String, java.lang.String, int, int, int[], int, int, java.lang.String[]);
  public static final native long getElapsedCpuTime();
  public static final native int myPid();
  public static final native int myTid();
  public static final native int myUid();
  public static final native int getUidForName(java.lang.String);
  public static final native int getGidForName(java.lang.String);
  public static final int getUidForPid(int);
  public static final int getParentPid(int);
  public static final native void setCanSelfBackground(boolean);
  public static final boolean supportsProcesses();
  public static final native boolean setOomAdj(int, int);
  public static final native void setArgV0(java.lang.String);
  public static final void killProcess(int);
  public static final native int setUid(int);
  public static final native int setGid(int);
  public static final native void sendSignal(int, int);
  public static final void killProcessQuiet(int);
  public static final native void sendSignalQuiet(int, int);
  public static final native long getFreeMemory();
  public static final native void readProcLines(java.lang.String, java.lang.String[], long[]);
  public static final native int[] getPids(java.lang.String, int[]);
  public static final native boolean readProcFile(java.lang.String, int[], java.lang.String[], long[], float[]);
  public static final native boolean parseProcLine(byte[], int, int, int[], java.lang.String[], long[], float[]);
  public static final native long getPss(int);
public class android.os.Registrant {
  public android.os.Registrant(android.os.Handler, int, java.lang.Object);
  public void clear();
  public void notifyRegistrant();
  public void notifyResult(java.lang.Object);
  public void notifyException(java.lang.Throwable);
  public void notifyRegistrant(android.os.AsyncResult);
  public android.os.Message messageForRegistrant();
  public android.os.Handler getHandler();
public class android.os.RegistrantList {
  public android.os.RegistrantList();
  public synchronized void add(android.os.Handler, int, java.lang.Object);
  public synchronized void addUnique(android.os.Handler, int, java.lang.Object);
  public synchronized void add(android.os.Registrant);
  public synchronized void removeCleared();
  public synchronized int size();
  public synchronized java.lang.Object get(int);
  public void notifyRegistrants();
  public void notifyException(java.lang.Throwable);
  public void notifyResult(java.lang.Object);
  public void notifyRegistrants(android.os.AsyncResult);
  public synchronized void remove(android.os.Handler);
  public android.os.RemoteCallback createFromParcel(android.os.Parcel);
  public android.os.RemoteCallback[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void run();
  public void sendResult(android.os.Bundle);
public abstract class android.os.RemoteCallback implements android.os.Parcelable {
  public android.os.RemoteCallback(android.os.Handler);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void binderDied();
public class android.os.RemoteCallbackList<E extends android.os.IInterface> {
  public android.os.RemoteCallbackList();
  public boolean register(E);
  public boolean register(E, java.lang.Object);
  public boolean unregister(E);
  public void kill();
  public void onCallbackDied(E);
  public void onCallbackDied(E, java.lang.Object);
  public int beginBroadcast();
  public E getBroadcastItem(int);
  public java.lang.Object getBroadcastCookie(int);
  public void finishBroadcast();
public class android.os.RemoteException extends android.util.AndroidException {
  public android.os.RemoteException();
  public android.os.RemoteException(java.lang.String);
  public android.os.ResultReceiver createFromParcel(android.os.Parcel);
  public android.os.ResultReceiver[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void send(int, android.os.Bundle);
  public void run();
public class android.os.ResultReceiver implements android.os.Parcelable {
  public android.os.ResultReceiver(android.os.Handler);
  public void send(int, android.os.Bundle);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class android.os.ServiceManager {
  public android.os.ServiceManager();
  public static android.os.IBinder getService(java.lang.String);
  public static void addService(java.lang.String, android.os.IBinder);
  public static android.os.IBinder checkService(java.lang.String);
  public static void initServiceCache(java.util.Map<java.lang.String, android.os.IBinder>);
public abstract class android.os.ServiceManagerNative extends android.os.Binder implements android.os.IServiceManager {
  public static android.os.IServiceManager asInterface(android.os.IBinder);
  public android.os.ServiceManagerNative();
  public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int);
  public android.os.IBinder asBinder();
  public android.os.ServiceManagerProxy(android.os.IBinder);
  public android.os.IBinder asBinder();
public class android.os.StatFs {
  public android.os.StatFs(java.lang.String);
  public void restat(java.lang.String);
  public native int getBlockSize();
  public native int getBlockCount();
  public native int getFreeBlocks();
  public native int getAvailableBlocks();
  public void run();
  public boolean queueIdle();
  public void finish();
  public void run();
  public android.os.StrictMode$AndroidBlockGuardPolicy(int);
  public java.lang.String toString();
  public int getPolicyMask();
  public void onWriteToDisk();
  public void onReadFromDisk();
  public void onNetwork();
  public void setPolicyMask(int);
  public void report(java.lang.String, java.lang.Throwable);
  public android.os.StrictMode$InstanceCountViolation(java.lang.Class, long, int);
  public android.os.StrictMode$InstanceTracker(java.lang.Object);
  public static int getInstanceCount(java.lang.Class<?>);
public class android.os.StrictMode$Span {
  public void finish();
  public android.os.StrictMode$StrictModeCustomViolation(int, java.lang.String);
  public android.os.StrictMode$StrictModeDiskReadViolation(int);
  public android.os.StrictMode$StrictModeDiskWriteViolation(int);
public class android.os.StrictMode$StrictModeNetworkViolation extends android.os.StrictMode$StrictModeViolation {
  public android.os.StrictMode$StrictModeNetworkViolation(int);
public class android.os.StrictMode$StrictModeViolation extends dalvik.system.BlockGuard$BlockGuardPolicyException {
  public android.os.StrictMode$StrictModeViolation(int, int, java.lang.String);
public final class android.os.StrictMode$ThreadPolicy$Builder {
  public android.os.StrictMode$ThreadPolicy$Builder();
  public android.os.StrictMode$ThreadPolicy$Builder(android.os.StrictMode$ThreadPolicy);
  public android.os.StrictMode$ThreadPolicy$Builder detectAll();
  public android.os.StrictMode$ThreadPolicy$Builder permitAll();
  public android.os.StrictMode$ThreadPolicy$Builder detectNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder permitNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder detectDiskReads();
  public android.os.StrictMode$ThreadPolicy$Builder permitDiskReads();
  public android.os.StrictMode$ThreadPolicy$Builder detectCustomSlowCalls();
  public android.os.StrictMode$ThreadPolicy$Builder permitCustomSlowCalls();
  public android.os.StrictMode$ThreadPolicy$Builder detectDiskWrites();
  public android.os.StrictMode$ThreadPolicy$Builder permitDiskWrites();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDialog();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDeath();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDeathOnNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyFlashScreen();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyLog();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox();
  public android.os.StrictMode$ThreadPolicy build();
public final class android.os.StrictMode$ThreadPolicy {
  public java.lang.String toString();
public class android.os.StrictMode$ViolationInfo {
  public android.os.StrictMode$ViolationInfo();
  public android.os.StrictMode$ViolationInfo(java.lang.Throwable, int);
  public int hashCode();
  public android.os.StrictMode$ViolationInfo(android.os.Parcel);
  public android.os.StrictMode$ViolationInfo(android.os.Parcel, boolean);
  public void writeToParcel(android.os.Parcel, int);
  public void dump(android.util.Printer, java.lang.String);
public final class android.os.StrictMode$VmPolicy$Builder {
  public android.os.StrictMode$VmPolicy$Builder();
  public android.os.StrictMode$VmPolicy$Builder(android.os.StrictMode$VmPolicy);
  public android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class, int);
  public android.os.StrictMode$VmPolicy$Builder detectActivityLeaks();
  public android.os.StrictMode$VmPolicy$Builder detectAll();
  public android.os.StrictMode$VmPolicy$Builder detectLeakedSqlLiteObjects();
  public android.os.StrictMode$VmPolicy$Builder detectLeakedClosableObjects();
  public android.os.StrictMode$VmPolicy$Builder penaltyDeath();
  public android.os.StrictMode$VmPolicy$Builder penaltyLog();
  public android.os.StrictMode$VmPolicy$Builder penaltyDropBox();
  public android.os.StrictMode$VmPolicy build();
public final class android.os.StrictMode$VmPolicy {
  public java.lang.String toString();
public final class android.os.StrictMode {
  public static void setThreadPolicy(android.os.StrictMode$ThreadPolicy);
  public static int getThreadPolicyMask();
  public static android.os.StrictMode$ThreadPolicy getThreadPolicy();
  public static android.os.StrictMode$ThreadPolicy allowThreadDiskWrites();
  public static android.os.StrictMode$ThreadPolicy allowThreadDiskReads();
  public static boolean conditionallyEnableDebugLogging();
  public static void enableDeathOnNetwork();
  public static void conditionallyCheckInstanceCounts();
  public static void setVmPolicy(android.os.StrictMode$VmPolicy);
  public static android.os.StrictMode$VmPolicy getVmPolicy();
  public static void enableDefaults();
  public static boolean vmSqliteObjectLeaksEnabled();
  public static boolean vmClosableObjectLeaksEnabled();
  public static void onSqliteObjectLeaked(java.lang.String, java.lang.Throwable);
  public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable);
  public static void onVmPolicyViolation(java.lang.String, java.lang.Throwable);
  public static android.os.StrictMode$Span enterCriticalSpan(java.lang.String);
  public static void noteSlowCall(java.lang.String);
  public static void noteDiskRead();
  public static void noteDiskWrite();
  public static java.lang.Object trackActivity(java.lang.Object);
  public static void incrementExpectedActivityCount(java.lang.Class);
  public static void decrementExpectedActivityCount(java.lang.Class);
public final class android.os.SystemClock {
  public static void sleep(long);
  public static native boolean setCurrentTimeMillis(long);
  public static native long uptimeMillis();
  public static native long elapsedRealtime();
  public static native long currentThreadTimeMillis();
  public static native long currentThreadTimeMicro();
  public static native long currentTimeMicro();
public class android.os.SystemProperties {
  public android.os.SystemProperties();
  public static java.lang.String get(java.lang.String);
  public static java.lang.String get(java.lang.String, java.lang.String);
  public static int getInt(java.lang.String, int);
  public static long getLong(java.lang.String, long);
  public static boolean getBoolean(java.lang.String, boolean);
  public static void set(java.lang.String, java.lang.String);
public class android.os.Vibrator {
  public android.os.Vibrator();
  public boolean hasVibrator();
  public void vibrate(long);
  public void vibrate(long[], int);
  public void cancel();
  public android.os.WorkSource createFromParcel(android.os.Parcel);
  public android.os.WorkSource[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.WorkSource implements android.os.Parcelable {
  public android.os.WorkSource();
  public android.os.WorkSource(android.os.WorkSource);
  public android.os.WorkSource(int);
  public int size();
  public int get(int);
  public void clear();
  public boolean diff(android.os.WorkSource);
  public void set(android.os.WorkSource);
  public void set(int);
  public android.os.WorkSource[] setReturningDiffs(android.os.WorkSource);
  public boolean add(android.os.WorkSource);
  public android.os.WorkSource addReturningNewbs(android.os.WorkSource);
  public boolean add(int);
  public android.os.WorkSource addReturningNewbs(int);
  public boolean remove(android.os.WorkSource);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.storage.IMountService$Stub extends android.os.Binder implements android.os.storage.IMountService {
  public static android.os.storage.IMountService asInterface(android.os.IBinder);
  public android.os.storage.IMountService$Stub();
  public android.os.IBinder asBinder();
public interface android.os.storage.IMountService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.storage.IMountServiceListener$Stub extends android.os.Binder implements android.os.storage.IMountServiceListener {
  public android.os.storage.IMountServiceListener$Stub();
  public static android.os.storage.IMountServiceListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.storage.IMountServiceListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.storage.IMountShutdownObserver$Stub extends android.os.Binder implements android.os.storage.IMountShutdownObserver {
  public android.os.storage.IMountShutdownObserver$Stub();
  public static android.os.storage.IMountShutdownObserver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.storage.IMountShutdownObserver extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.os.storage.IObbActionListener$Stub extends android.os.Binder implements android.os.storage.IObbActionListener {
  public android.os.storage.IObbActionListener$Stub();
  public static android.os.storage.IObbActionListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.os.storage.IObbActionListener extends android.os.IInterface {
public abstract class android.os.storage.OnObbStateChangeListener {
  public android.os.storage.OnObbStateChangeListener();
  public void onObbStateChange(java.lang.String, int);
public abstract class android.os.storage.StorageEventListener {
  public android.os.storage.StorageEventListener();
  public void onUsbMassStorageConnectionChanged(boolean);
  public void onStorageStateChanged(java.lang.String, java.lang.String, java.lang.String);
  public void handleMessage(android.os.Message);
  public void onUsbMassStorageConnectionChanged(boolean);
  public void onStorageStateChanged(java.lang.String, java.lang.String, java.lang.String);
  public void onObbResult(java.lang.String, int, int);
  public int addListener(android.os.storage.OnObbStateChangeListener);
  public void handleMessage(android.os.Message);
  public android.os.storage.StorageManager$ObbStateChangedStorageEvent(android.os.storage.StorageManager, java.lang.String, int);
  public android.os.storage.StorageManager$StorageEvent(android.os.storage.StorageManager, int);
  public android.os.Message getMessage();
  public android.os.storage.StorageManager$StorageStateChangedStorageEvent(android.os.storage.StorageManager, java.lang.String, java.lang.String, java.lang.String);
  public android.os.storage.StorageManager$UmsConnectionChangedStorageEvent(android.os.storage.StorageManager, boolean);
public class android.os.storage.StorageManager {
  public void registerListener(android.os.storage.StorageEventListener);
  public void unregisterListener(android.os.storage.StorageEventListener);
  public void enableUsbMassStorage();
  public void disableUsbMassStorage();
  public boolean isUsbMassStorageConnected();
  public boolean isUsbMassStorageEnabled();
  public boolean mountObb(java.lang.String, java.lang.String, android.os.storage.OnObbStateChangeListener);
  public boolean unmountObb(java.lang.String, boolean, android.os.storage.OnObbStateChangeListener);
  public boolean isObbMounted(java.lang.String);
  public java.lang.String getMountedObbPath(java.lang.String);
  public java.lang.String getVolumeState(java.lang.String);
  public android.os.storage.StorageVolume[] getVolumeList();
  public java.lang.String[] getVolumePaths();
  public android.os.storage.StorageVolume createFromParcel(android.os.Parcel);
  public android.os.storage.StorageVolume[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.os.storage.StorageVolume implements android.os.Parcelable {
  public android.os.storage.StorageVolume(java.lang.String, java.lang.String, boolean, boolean, int, boolean, long);
  public java.lang.String getPath();
  public java.lang.String getDescription();
  public boolean isRemovable();
  public boolean isEmulated();
  public int getStorageId();
  public void setStorageId(int);
  public int getMtpReserveSpace();
  public boolean allowMassStorage();
  public long getMaxFileSize();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class android.preference.CheckBoxPreference extends android.preference.TwoStatePreference {
  public android.preference.CheckBoxPreference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.CheckBoxPreference(android.content.Context, android.util.AttributeSet);
  public android.preference.CheckBoxPreference(android.content.Context);
  public android.preference.DialogPreference$SavedState createFromParcel(android.os.Parcel);
  public android.preference.DialogPreference$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.preference.DialogPreference$SavedState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.preference.DialogPreference$SavedState(android.os.Parcelable);
public abstract class android.preference.DialogPreference extends android.preference.Preference implements android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnDismissListener,android.preference.PreferenceManager$OnActivityDestroyListener {
  public android.preference.DialogPreference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.DialogPreference(android.content.Context, android.util.AttributeSet);
  public void setDialogTitle(java.lang.CharSequence);
  public void setDialogTitle(int);
  public java.lang.CharSequence getDialogTitle();
  public void setDialogMessage(java.lang.CharSequence);
  public void setDialogMessage(int);
  public java.lang.CharSequence getDialogMessage();
  public void setDialogIcon(android.graphics.drawable.Drawable);
  public void setDialogIcon(int);
  public android.graphics.drawable.Drawable getDialogIcon();
  public void setPositiveButtonText(java.lang.CharSequence);
  public void setPositiveButtonText(int);
  public java.lang.CharSequence getPositiveButtonText();
  public void setNegativeButtonText(java.lang.CharSequence);
  public void setNegativeButtonText(int);
  public java.lang.CharSequence getNegativeButtonText();
  public void setDialogLayoutResource(int);
  public int getDialogLayoutResource();
  public void onClick(android.content.DialogInterface, int);
  public void onDismiss(android.content.DialogInterface);
  public android.app.Dialog getDialog();
  public void onActivityDestroy();
  public android.preference.EditTextPreference$SavedState createFromParcel(android.os.Parcel);
  public android.preference.EditTextPreference$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.preference.EditTextPreference$SavedState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.preference.EditTextPreference$SavedState(android.os.Parcelable);
public class android.preference.EditTextPreference extends android.preference.DialogPreference {
  public android.preference.EditTextPreference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.EditTextPreference(android.content.Context, android.util.AttributeSet);
  public android.preference.EditTextPreference(android.content.Context);
  public void setText(java.lang.String);
  public java.lang.String getText();
  public boolean shouldDisableDependents();
  public android.widget.EditText getEditText();
public interface android.preference.GenericInflater$Factory<T> {
  public abstract T onCreateItem(java.lang.String, android.content.Context, android.util.AttributeSet);
  public T onCreateItem(java.lang.String, android.content.Context, android.util.AttributeSet);
public interface android.preference.GenericInflater$Parent<T> {
  public abstract void addItemFromInflater(T);
  public abstract android.preference.GenericInflater cloneInContext(android.content.Context);
  public void setDefaultPackage(java.lang.String);
  public java.lang.String getDefaultPackage();
  public android.content.Context getContext();
  public final android.preference.GenericInflater$Factory<T> getFactory();
  public void setFactory(android.preference.GenericInflater$Factory<T>);
  public T inflate(int, P);
  public T inflate(org.xmlpull.v1.XmlPullParser, P);
  public T inflate(int, P, boolean);
  public T inflate(org.xmlpull.v1.XmlPullParser, P, boolean);
  public void onClick(android.content.DialogInterface, int);
  public android.preference.ListPreference$SavedState createFromParcel(android.os.Parcel);
  public android.preference.ListPreference$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.preference.ListPreference$SavedState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.preference.ListPreference$SavedState(android.os.Parcelable);
public class android.preference.ListPreference extends android.preference.DialogPreference {
  public android.preference.ListPreference(android.content.Context, android.util.AttributeSet);
  public android.preference.ListPreference(android.content.Context);
  public void setEntries(java.lang.CharSequence[]);
  public void setEntries(int);
  public java.lang.CharSequence[] getEntries();
  public void setEntryValues(java.lang.CharSequence[]);
  public void setEntryValues(int);
  public java.lang.CharSequence[] getEntryValues();
  public void setValue(java.lang.String);
  public java.lang.CharSequence getSummary();
  public void setSummary(java.lang.CharSequence);
  public void setValueIndex(int);
  public java.lang.String getValue();
  public java.lang.CharSequence getEntry();
  public int findIndexOfValue(java.lang.String);
  public abstract void onDependencyChanged(android.preference.Preference, boolean);
  public android.preference.Preference$BaseSavedState createFromParcel(android.os.Parcel);
  public android.preference.Preference$BaseSavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.preference.Preference$BaseSavedState extends android.view.AbsSavedState {
  public android.preference.Preference$BaseSavedState(android.os.Parcel);
  public android.preference.Preference$BaseSavedState(android.os.Parcelable);
  public abstract void onPreferenceChange(android.preference.Preference);
  public abstract void onPreferenceHierarchyChange(android.preference.Preference);
public interface android.preference.Preference$OnPreferenceChangeListener {
  public abstract boolean onPreferenceChange(android.preference.Preference, java.lang.Object);
public interface android.preference.Preference$OnPreferenceClickListener {
  public abstract boolean onPreferenceClick(android.preference.Preference);
public class android.preference.Preference implements java.lang.Comparable<android.preference.Preference>, android.preference.OnDependencyChangeListener {
  public android.preference.Preference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.Preference(android.content.Context, android.util.AttributeSet);
  public android.preference.Preference(android.content.Context);
  public void setIntent(android.content.Intent);
  public android.content.Intent getIntent();
  public void setFragment(java.lang.String);
  public java.lang.String getFragment();
  public android.os.Bundle getExtras();
  public android.os.Bundle peekExtras();
  public void setLayoutResource(int);
  public int getLayoutResource();
  public void setWidgetLayoutResource(int);
  public int getWidgetLayoutResource();
  public android.view.View getView(android.view.View, android.view.ViewGroup);
  public void setOrder(int);
  public int getOrder();
  public void setTitle(java.lang.CharSequence);
  public void setTitle(int);
  public int getTitleRes();
  public java.lang.CharSequence getTitle();
  public void setIcon(android.graphics.drawable.Drawable);
  public void setIcon(int);
  public android.graphics.drawable.Drawable getIcon();
  public java.lang.CharSequence getSummary();
  public void setSummary(java.lang.CharSequence);
  public void setSummary(int);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public void setSelectable(boolean);
  public boolean isSelectable();
  public void setShouldDisableView(boolean);
  public boolean getShouldDisableView();
  public void setKey(java.lang.String);
  public java.lang.String getKey();
  public boolean hasKey();
  public boolean isPersistent();
  public void setPersistent(boolean);
  public void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener);
  public android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener();
  public void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener);
  public android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener();
  public boolean onKey(android.view.View, int, android.view.KeyEvent);
  public android.content.Context getContext();
  public android.content.SharedPreferences getSharedPreferences();
  public android.content.SharedPreferences$Editor getEditor();
  public boolean shouldCommit();
  public int compareTo(android.preference.Preference);
  public android.preference.PreferenceManager getPreferenceManager();
  public void notifyDependencyChange(boolean);
  public void onDependencyChanged(android.preference.Preference, boolean);
  public boolean shouldDisableDependents();
  public void setDependency(java.lang.String);
  public java.lang.String getDependency();
  public void setDefaultValue(java.lang.Object);
  public java.lang.String toString();
  public void saveHierarchyState(android.os.Bundle);
  public void restoreHierarchyState(android.os.Bundle);
  public int compareTo(java.lang.Object);
  public void handleMessage(android.os.Message);
  public void onClick(android.view.View);
  public void onClick(android.view.View);
  public void onClick(android.view.View);
  public android.preference.PreferenceActivity$Header createFromParcel(android.os.Parcel);
  public android.preference.PreferenceActivity$Header[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.preference.PreferenceActivity$Header implements android.os.Parcelable {
  public android.preference.PreferenceActivity$Header();
  public java.lang.CharSequence getTitle(android.content.res.Resources);
  public java.lang.CharSequence getSummary(android.content.res.Resources);
  public java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources);
  public java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void readFromParcel(android.os.Parcel);
  public android.preference.PreferenceActivity$HeaderAdapter(android.content.Context, java.util.List<android.preference.PreferenceActivity$Header>);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
public abstract class android.preference.PreferenceActivity extends android.app.ListActivity implements android.preference.PreferenceManager$OnPreferenceTreeClickListener,android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback {
  public android.preference.PreferenceActivity();
  public boolean hasHeaders();
  public boolean isMultiPane();
  public boolean onIsMultiPane();
  public boolean onIsHidingHeaders();
  public android.preference.PreferenceActivity$Header onGetInitialHeader();
  public android.preference.PreferenceActivity$Header onGetNewHeader();
  public void onBuildHeaders(java.util.List<android.preference.PreferenceActivity$Header>);
  public void invalidateHeaders();
  public void loadHeadersFromResource(int, java.util.List<android.preference.PreferenceActivity$Header>);
  public void setListFooter(android.view.View);
  public void onContentChanged();
  public void onHeaderClick(android.preference.PreferenceActivity$Header, int);
  public android.content.Intent onBuildStartFragmentIntent(java.lang.String, android.os.Bundle, int, int);
  public void startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int);
  public void startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int, int, int);
  public void showBreadCrumbs(java.lang.CharSequence, java.lang.CharSequence);
  public void setParentTitle(java.lang.CharSequence, java.lang.CharSequence, android.view.View$OnClickListener);
  public void switchToHeader(java.lang.String, android.os.Bundle);
  public void switchToHeader(android.preference.PreferenceActivity$Header);
  public void startPreferenceFragment(android.app.Fragment, boolean);
  public void startPreferencePanel(java.lang.String, android.os.Bundle, int, java.lang.CharSequence, android.app.Fragment, int);
  public void finishPreferencePanel(android.app.Fragment, int, android.content.Intent);
  public boolean onPreferenceStartFragment(android.preference.PreferenceFragment, android.preference.Preference);
  public android.preference.PreferenceManager getPreferenceManager();
  public void setPreferenceScreen(android.preference.PreferenceScreen);
  public android.preference.PreferenceScreen getPreferenceScreen();
  public void addPreferencesFromIntent(android.content.Intent);
  public void addPreferencesFromResource(int);
  public boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference);
  public android.preference.Preference findPreference(java.lang.CharSequence);
public class android.preference.PreferenceCategory extends android.preference.PreferenceGroup {
  public android.preference.PreferenceCategory(android.content.Context, android.util.AttributeSet, int);
  public android.preference.PreferenceCategory(android.content.Context, android.util.AttributeSet);
  public android.preference.PreferenceCategory(android.content.Context);
  public boolean isEnabled();
  public void handleMessage(android.os.Message);
  public void run();
  public boolean onKey(android.view.View, int, android.view.KeyEvent);
public interface android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback {
  public abstract boolean onPreferenceStartFragment(android.preference.PreferenceFragment, android.preference.Preference);
public abstract class android.preference.PreferenceFragment extends android.app.Fragment implements android.preference.PreferenceManager$OnPreferenceTreeClickListener {
  public android.preference.PreferenceFragment();
  public void onCreate(android.os.Bundle);
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public void onActivityCreated(android.os.Bundle);
  public void onStart();
  public void onStop();
  public void onDestroyView();
  public void onDestroy();
  public void onSaveInstanceState(android.os.Bundle);
  public void onActivityResult(int, int, android.content.Intent);
  public android.preference.PreferenceManager getPreferenceManager();
  public void setPreferenceScreen(android.preference.PreferenceScreen);
  public android.preference.PreferenceScreen getPreferenceScreen();
  public void addPreferencesFromIntent(android.content.Intent);
  public void addPreferencesFromResource(int);
  public boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference);
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public android.widget.ListView getListView();
public abstract class android.preference.PreferenceGroup extends android.preference.Preference implements android.preference.GenericInflater$Parent<android.preference.Preference> {
  public android.preference.PreferenceGroup(android.content.Context, android.util.AttributeSet, int);
  public android.preference.PreferenceGroup(android.content.Context, android.util.AttributeSet);
  public void setOrderingAsAdded(boolean);
  public boolean isOrderingAsAdded();
  public void addItemFromInflater(android.preference.Preference);
  public int getPreferenceCount();
  public android.preference.Preference getPreference(int);
  public boolean addPreference(android.preference.Preference);
  public boolean removePreference(android.preference.Preference);
  public void removeAll();
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public void setEnabled(boolean);
  public void addItemFromInflater(java.lang.Object);
  public void run();
  public int compareTo(android.preference.PreferenceGroupAdapter$PreferenceLayout);
  public int compareTo(java.lang.Object);
  public android.preference.PreferenceGroupAdapter(android.preference.PreferenceGroup);
  public int getCount();
  public android.preference.Preference getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public boolean isEnabled(int);
  public boolean areAllItemsEnabled();
  public void onPreferenceChange(android.preference.Preference);
  public void onPreferenceHierarchyChange(android.preference.Preference);
  public boolean hasStableIds();
  public int getItemViewType(int);
  public int getViewTypeCount();
  public java.lang.Object getItem(int);
  public android.preference.PreferenceInflater(android.content.Context, android.preference.PreferenceManager);
  public android.preference.GenericInflater<android.preference.Preference, android.preference.PreferenceGroup> cloneInContext(android.content.Context);
public interface android.preference.PreferenceManager$OnActivityDestroyListener {
  public abstract void onActivityDestroy();
public interface android.preference.PreferenceManager$OnActivityResultListener {
  public abstract boolean onActivityResult(int, int, android.content.Intent);
public interface android.preference.PreferenceManager$OnActivityStopListener {
  public abstract void onActivityStop();
  public abstract boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference);
public class android.preference.PreferenceManager {
  public android.preference.PreferenceScreen inflateFromResource(android.content.Context, int, android.preference.PreferenceScreen);
  public android.preference.PreferenceScreen createPreferenceScreen(android.content.Context);
  public java.lang.String getSharedPreferencesName();
  public void setSharedPreferencesName(java.lang.String);
  public int getSharedPreferencesMode();
  public void setSharedPreferencesMode(int);
  public android.content.SharedPreferences getSharedPreferences();
  public static android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context);
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public static void setDefaultValues(android.content.Context, int, boolean);
  public static void setDefaultValues(android.content.Context, java.lang.String, int, int, boolean);
  public android.preference.PreferenceScreen$SavedState createFromParcel(android.os.Parcel);
  public android.preference.PreferenceScreen$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.preference.PreferenceScreen$SavedState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.preference.PreferenceScreen$SavedState(android.os.Parcelable);
public final class android.preference.PreferenceScreen extends android.preference.PreferenceGroup implements android.widget.AdapterView$OnItemClickListener,android.content.DialogInterface$OnDismissListener {
  public android.preference.PreferenceScreen(android.content.Context, android.util.AttributeSet);
  public android.widget.ListAdapter getRootAdapter();
  public void bind(android.widget.ListView);
  public void onDismiss(android.content.DialogInterface);
  public android.app.Dialog getDialog();
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
public class android.preference.RingtonePreference extends android.preference.Preference implements android.preference.PreferenceManager$OnActivityResultListener {
  public android.preference.RingtonePreference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.RingtonePreference(android.content.Context, android.util.AttributeSet);
  public android.preference.RingtonePreference(android.content.Context);
  public int getRingtoneType();
  public void setRingtoneType(int);
  public boolean getShowDefault();
  public void setShowDefault(boolean);
  public boolean getShowSilent();
  public void setShowSilent(boolean);
  public boolean onActivityResult(int, int, android.content.Intent);
  public android.preference.TwoStatePreference$SavedState createFromParcel(android.os.Parcel);
  public android.preference.TwoStatePreference$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public android.preference.TwoStatePreference$SavedState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.preference.TwoStatePreference$SavedState(android.os.Parcelable);
public abstract class android.preference.TwoStatePreference extends android.preference.Preference {
  public android.preference.TwoStatePreference(android.content.Context, android.util.AttributeSet, int);
  public android.preference.TwoStatePreference(android.content.Context, android.util.AttributeSet);
  public android.preference.TwoStatePreference(android.content.Context);
  public void setChecked(boolean);
  public boolean isChecked();
  public boolean shouldDisableDependents();
  public void setSummaryOn(java.lang.CharSequence);
  public void setSummaryOn(int);
  public java.lang.CharSequence getSummaryOn();
  public void setSummaryOff(java.lang.CharSequence);
  public void setSummaryOff(int);
  public java.lang.CharSequence getSummaryOff();
  public boolean getDisableDependentsState();
  public void setDisableDependentsState(boolean);
public interface android.provider.BaseColumns {
public class android.provider.Browser$BookmarkColumns implements android.provider.BaseColumns {
  public android.provider.Browser$BookmarkColumns();
public class android.provider.Browser$SearchColumns implements android.provider.BaseColumns {
  public android.provider.Browser$SearchColumns();
public class android.provider.Browser {
  public android.provider.Browser();
  public static final void saveBookmark(android.content.Context, java.lang.String, java.lang.String);
  public static final void sendString(android.content.Context, java.lang.String);
  public static final void sendString(android.content.Context, java.lang.String, java.lang.String);
  public static final void updateVisitedHistory(android.content.ContentResolver, java.lang.String, boolean);
  public static final java.lang.String[] getVisitedHistory(android.content.ContentResolver);
  public static final void truncateHistory(android.content.ContentResolver);
  public static final boolean canClearHistory(android.content.ContentResolver);
  public static final void clearHistory(android.content.ContentResolver);
  public static final void deleteHistoryTimeFrame(android.content.ContentResolver, long, long);
  public static final void deleteFromHistory(android.content.ContentResolver, java.lang.String);
  public static final void addSearchUrl(android.content.ContentResolver, java.lang.String);
  public static final void clearSearches(android.content.ContentResolver);
  public static final void requestAllIcons(android.content.ContentResolver, java.lang.String, android.webkit.WebIconDatabase$IconListener);
public final class android.provider.BrowserContract$Accounts {
  public android.provider.BrowserContract$Accounts();
public final class android.provider.BrowserContract$Bookmarks implements android.provider.BrowserContract$CommonColumns,android.provider.BrowserContract$ImageColumns,android.provider.BrowserContract$SyncColumns {
  public static final android.net.Uri buildFolderUri(long);
public final class android.provider.BrowserContract$ChromeSyncColumns {
public final class android.provider.BrowserContract$Combined implements android.provider.BrowserContract$CommonColumns,android.provider.BrowserContract$HistoryColumns,android.provider.BrowserContract$ImageColumns {
public final class android.provider.BrowserContract$History implements android.provider.BrowserContract$CommonColumns,android.provider.BrowserContract$HistoryColumns,android.provider.BrowserContract$ImageColumns {
public final class android.provider.BrowserContract$Images implements android.provider.BrowserContract$ImageColumns {
public final class android.provider.BrowserContract$Searches {
public final class android.provider.BrowserContract$Settings {
  public static boolean isSyncEnabled(android.content.Context);
  public static void setSyncEnabled(android.content.Context, boolean);
public final class android.provider.BrowserContract$SyncState implements android.provider.SyncStateContract$Columns {
  public static android.content.ContentProviderOperation newSetOperation(android.accounts.Account, byte[]);
public class android.provider.BrowserContract {
  public android.provider.BrowserContract();
public class android.provider.CallLog$Calls implements android.provider.BaseColumns {
  public android.provider.CallLog$Calls();
  public static android.net.Uri addCall(com.android.internal.telephony.CallerInfo, android.content.Context, java.lang.String, int, int, long, int);
  public static java.lang.String getLastOutgoingCall(android.content.Context);
public class android.provider.CallLog {
  public android.provider.CallLog();
public final class android.provider.Contacts$ContactMethods implements android.provider.BaseColumns,android.provider.Contacts$ContactMethodsColumns,android.provider.Contacts$PeopleColumns {
  public static java.lang.String encodePredefinedImProtocol(int);
  public static java.lang.String encodeCustomImProtocol(java.lang.String);
  public static java.lang.Object decodeImProtocol(java.lang.String);
  public static java.lang.String lookupProviderNameFromId(int);
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, int, java.lang.CharSequence);
  public void addPostalLocation(android.content.Context, long, double, double);
public interface android.provider.Contacts$ContactMethodsColumns {
public final class android.provider.Contacts$Extensions implements android.provider.BaseColumns,android.provider.Contacts$ExtensionsColumns {
public interface android.provider.Contacts$ExtensionsColumns {
public final class android.provider.Contacts$GroupMembership implements android.provider.BaseColumns,android.provider.Contacts$GroupsColumns {
public final class android.provider.Contacts$Groups implements android.provider.BaseColumns,android.provider.SyncConstValue,android.provider.Contacts$GroupsColumns {
public interface android.provider.Contacts$GroupsColumns {
public final class android.provider.Contacts$Intents$Insert {
  public android.provider.Contacts$Intents$Insert();
public final class android.provider.Contacts$Intents$UI {
  public android.provider.Contacts$Intents$UI();
public final class android.provider.Contacts$Intents {
  public android.provider.Contacts$Intents();
public interface android.provider.Contacts$OrganizationColumns {
public final class android.provider.Contacts$Organizations implements android.provider.BaseColumns,android.provider.Contacts$OrganizationColumns {
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence);
public final class android.provider.Contacts$People$ContactMethods implements android.provider.BaseColumns,android.provider.Contacts$ContactMethodsColumns,android.provider.Contacts$PeopleColumns {
public class android.provider.Contacts$People$Extensions implements android.provider.BaseColumns,android.provider.Contacts$ExtensionsColumns {
public final class android.provider.Contacts$People$Phones implements android.provider.BaseColumns,android.provider.Contacts$PhonesColumns,android.provider.Contacts$PeopleColumns {
public final class android.provider.Contacts$People implements android.provider.BaseColumns,android.provider.SyncConstValue,android.provider.Contacts$PeopleColumns,android.provider.Contacts$PhonesColumns,android.provider.Contacts$PresenceColumns {
  public static void markAsContacted(android.content.ContentResolver, long);
  public static long tryGetMyContactsGroupId(android.content.ContentResolver);
  public static android.net.Uri addToMyContactsGroup(android.content.ContentResolver, long);
  public static android.net.Uri addToGroup(android.content.ContentResolver, long, java.lang.String);
  public static android.net.Uri addToGroup(android.content.ContentResolver, long, long);
  public static android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver, android.content.ContentValues);
  public static android.database.Cursor queryGroups(android.content.ContentResolver, long);
  public static void setPhotoData(android.content.ContentResolver, android.net.Uri, byte[]);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri);
  public static android.graphics.Bitmap loadContactPhoto(android.content.Context, android.net.Uri, int, android.graphics.BitmapFactory$Options);
public interface android.provider.Contacts$PeopleColumns {
public final class android.provider.Contacts$Phones implements android.provider.BaseColumns,android.provider.Contacts$PhonesColumns,android.provider.Contacts$PeopleColumns {
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence, java.lang.CharSequence[]);
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence);
public interface android.provider.Contacts$PhonesColumns {
public final class android.provider.Contacts$Photos implements android.provider.BaseColumns,android.provider.Contacts$PhotosColumns,android.provider.SyncConstValue {
public interface android.provider.Contacts$PhotosColumns {
public final class android.provider.Contacts$Presence implements android.provider.BaseColumns,android.provider.Contacts$PresenceColumns,android.provider.Contacts$PeopleColumns {
  public android.provider.Contacts$Presence();
  public static final int getPresenceIconResourceId(int);
  public static final void setPresenceIcon(android.widget.ImageView, int);
public interface android.provider.Contacts$PresenceColumns {
public final class android.provider.Contacts$Settings implements android.provider.BaseColumns,android.provider.Contacts$SettingsColumns {
  public static java.lang.String getSetting(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static void setSetting(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String);
public interface android.provider.Contacts$SettingsColumns {
public class android.provider.Contacts {
public final class android.provider.ContactsContract$AggregationExceptions implements android.provider.BaseColumns {
public final class android.provider.ContactsContract$Authorization {
  public android.provider.ContactsContract$Authorization();
public interface android.provider.ContactsContract$BaseSyncColumns {
public interface android.provider.ContactsContract$CommonDataKinds$BaseTypes {
public interface android.provider.ContactsContract$CommonDataKinds$CommonColumns extends android.provider.ContactsContract$CommonDataKinds$BaseTypes {
public final class android.provider.ContactsContract$CommonDataKinds$Email implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$Event implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static int getTypeResource(java.lang.Integer);
public final class android.provider.ContactsContract$CommonDataKinds$GroupMembership implements android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$CommonDataKinds$Identity implements android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$CommonDataKinds$Im implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int getProtocolLabelResource(int);
  public static final java.lang.CharSequence getProtocolLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$Nickname implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
public final class android.provider.ContactsContract$CommonDataKinds$Note implements android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$CommonDataKinds$Organization implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$Phone implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence, java.lang.CharSequence[]);
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence);
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$Photo implements android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$CommonDataKinds$Relation implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$SipAddress implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$StructuredName implements android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$CommonDataKinds$StructuredPostal implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
public final class android.provider.ContactsContract$CommonDataKinds$Website implements android.provider.ContactsContract$DataColumnsWithJoins,android.provider.ContactsContract$CommonDataKinds$CommonColumns {
public final class android.provider.ContactsContract$CommonDataKinds {
public final class android.provider.ContactsContract$ContactCounts {
  public android.provider.ContactsContract$ContactCounts();
public interface android.provider.ContactsContract$ContactNameColumns {
public interface android.provider.ContactsContract$ContactOptionsColumns {
public interface android.provider.ContactsContract$ContactStatusColumns {
public final class android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder {
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder();
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setContactId(long);
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder addParameter(java.lang.String, java.lang.String);
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setLimit(int);
  public android.net.Uri build();
public final class android.provider.ContactsContract$Contacts$AggregationSuggestions implements android.provider.BaseColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactStatusColumns {
  public static final android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder builder();
public final class android.provider.ContactsContract$Contacts$Data implements android.provider.BaseColumns,android.provider.ContactsContract$DataColumns {
public final class android.provider.ContactsContract$Contacts$Entity implements android.provider.BaseColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactNameColumns,android.provider.ContactsContract$RawContactsColumns,android.provider.ContactsContract$BaseSyncColumns,android.provider.ContactsContract$SyncColumns,android.provider.ContactsContract$DataColumns,android.provider.ContactsContract$StatusColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactStatusColumns {
public final class android.provider.ContactsContract$Contacts$Photo implements android.provider.BaseColumns,android.provider.ContactsContract$DataColumnsWithJoins {
public final class android.provider.ContactsContract$Contacts$StreamItems implements android.provider.ContactsContract$StreamItemsColumns {
public class android.provider.ContactsContract$Contacts implements android.provider.BaseColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactNameColumns,android.provider.ContactsContract$ContactStatusColumns {
  public static android.net.Uri getLookupUri(android.content.ContentResolver, android.net.Uri);
  public static android.net.Uri getLookupUri(long, java.lang.String);
  public static android.net.Uri lookupContact(android.content.ContentResolver, android.net.Uri);
  public static void markAsContacted(android.content.ContentResolver, long);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri, boolean);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri);
public interface android.provider.ContactsContract$ContactsColumns {
public final class android.provider.ContactsContract$Data implements android.provider.ContactsContract$DataColumnsWithJoins {
  public static android.net.Uri getContactLookupUri(android.content.ContentResolver, android.net.Uri);
public interface android.provider.ContactsContract$DataColumns {
public interface android.provider.ContactsContract$DataColumnsWithJoins extends android.provider.BaseColumns,android.provider.ContactsContract$DataColumns,android.provider.ContactsContract$StatusColumns,android.provider.ContactsContract$RawContactsColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactNameColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactStatusColumns {
public final class android.provider.ContactsContract$DataUsageFeedback {
  public android.provider.ContactsContract$DataUsageFeedback();
public final class android.provider.ContactsContract$Directory implements android.provider.BaseColumns {
  public static void notifyDirectoryChange(android.content.ContentResolver);
public interface android.provider.ContactsContract$DisplayNameSources {
public final class android.provider.ContactsContract$DisplayPhoto {
public interface android.provider.ContactsContract$FullNameStyle {
  public android.provider.ContactsContract$Groups$EntityIteratorImpl(android.database.Cursor);
public final class android.provider.ContactsContract$Groups implements android.provider.BaseColumns,android.provider.ContactsContract$GroupsColumns,android.provider.ContactsContract$SyncColumns {
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor);
public interface android.provider.ContactsContract$GroupsColumns {
public final class android.provider.ContactsContract$Intents$Insert {
  public android.provider.ContactsContract$Intents$Insert();
public final class android.provider.ContactsContract$Intents$UI {
  public android.provider.ContactsContract$Intents$UI();
public final class android.provider.ContactsContract$Intents {
  public android.provider.ContactsContract$Intents();
public final class android.provider.ContactsContract$PhoneLookup implements android.provider.BaseColumns,android.provider.ContactsContract$PhoneLookupColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactOptionsColumns {
public interface android.provider.ContactsContract$PhoneLookupColumns {
public interface android.provider.ContactsContract$PhoneticNameStyle {
public final class android.provider.ContactsContract$PhotoFiles implements android.provider.BaseColumns,android.provider.ContactsContract$PhotoFilesColumns {
public interface android.provider.ContactsContract$PhotoFilesColumns {
public final class android.provider.ContactsContract$Preferences {
  public android.provider.ContactsContract$Preferences();
public final class android.provider.ContactsContract$Presence extends android.provider.ContactsContract$StatusUpdates {
  public android.provider.ContactsContract$Presence();
public interface android.provider.ContactsContract$PresenceColumns {
public final class android.provider.ContactsContract$Profile implements android.provider.BaseColumns,android.provider.ContactsContract$ContactsColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactNameColumns,android.provider.ContactsContract$ContactStatusColumns {
public final class android.provider.ContactsContract$ProfileSyncState implements android.provider.SyncStateContract$Columns {
  public static android.content.ContentProviderOperation newSetOperation(android.accounts.Account, byte[]);
public final class android.provider.ContactsContract$ProviderStatus {
public final class android.provider.ContactsContract$QuickContact {
  public android.provider.ContactsContract$QuickContact();
  public static void showQuickContact(android.content.Context, android.view.View, android.net.Uri, int, java.lang.String[]);
  public static void showQuickContact(android.content.Context, android.graphics.Rect, android.net.Uri, int, java.lang.String[]);
public final class android.provider.ContactsContract$RawContacts$Data implements android.provider.BaseColumns,android.provider.ContactsContract$DataColumns {
public final class android.provider.ContactsContract$RawContacts$DisplayPhoto {
public final class android.provider.ContactsContract$RawContacts$Entity implements android.provider.BaseColumns,android.provider.ContactsContract$DataColumns {
  public android.provider.ContactsContract$RawContacts$EntityIteratorImpl(android.database.Cursor);
public final class android.provider.ContactsContract$RawContacts$StreamItems implements android.provider.BaseColumns,android.provider.ContactsContract$StreamItemsColumns {
public final class android.provider.ContactsContract$RawContacts implements android.provider.BaseColumns,android.provider.ContactsContract$RawContactsColumns,android.provider.ContactsContract$ContactOptionsColumns,android.provider.ContactsContract$ContactNameColumns,android.provider.ContactsContract$SyncColumns {
  public static android.net.Uri getContactLookupUri(android.content.ContentResolver, android.net.Uri);
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor);
public interface android.provider.ContactsContract$RawContactsColumns {
public final class android.provider.ContactsContract$RawContactsEntity implements android.provider.BaseColumns,android.provider.ContactsContract$DataColumns,android.provider.ContactsContract$RawContactsColumns {
public class android.provider.ContactsContract$SearchSnippetColumns {
  public android.provider.ContactsContract$SearchSnippetColumns();
public final class android.provider.ContactsContract$Settings implements android.provider.ContactsContract$SettingsColumns {
public interface android.provider.ContactsContract$SettingsColumns {
public interface android.provider.ContactsContract$StatusColumns {
public class android.provider.ContactsContract$StatusUpdates implements android.provider.ContactsContract$StatusColumns,android.provider.ContactsContract$PresenceColumns {
  public static final int getPresenceIconResourceId(int);
  public static final int getPresencePrecedence(int);
public final class android.provider.ContactsContract$StreamItemPhotos implements android.provider.BaseColumns,android.provider.ContactsContract$StreamItemPhotosColumns {
public interface android.provider.ContactsContract$StreamItemPhotosColumns {
public final class android.provider.ContactsContract$StreamItems$StreamItemPhotos implements android.provider.BaseColumns,android.provider.ContactsContract$StreamItemPhotosColumns {
public final class android.provider.ContactsContract$StreamItems implements android.provider.BaseColumns,android.provider.ContactsContract$StreamItemsColumns {
public interface android.provider.ContactsContract$StreamItemsColumns {
public interface android.provider.ContactsContract$SyncColumns extends android.provider.ContactsContract$BaseSyncColumns {
public final class android.provider.ContactsContract$SyncState implements android.provider.SyncStateContract$Columns {
  public static android.content.ContentProviderOperation newSetOperation(android.accounts.Account, byte[]);
public interface android.provider.ContactsContract$SyncStateColumns extends android.provider.SyncStateContract$Columns {
public final class android.provider.ContactsContract {
  public android.provider.ContactsContract();
  public static boolean isProfileId(long);
  public static java.lang.String snippetize(java.lang.String, java.lang.String, java.lang.String, char, char, java.lang.String, int);
public class android.provider.Downloads$Impl$RequestHeaders {
  public android.provider.Downloads$Impl$RequestHeaders();
public final class android.provider.Downloads$Impl implements android.provider.BaseColumns {
  public static boolean isStatusInformational(int);
  public static boolean isStatusSuccess(int);
  public static boolean isStatusError(int);
  public static boolean isStatusClientError(int);
  public static boolean isStatusServerError(int);
  public static boolean isNotificationToBeDisplayed(int);
  public static boolean isStatusCompleted(int);
public final class android.provider.Downloads {
public interface android.provider.DrmStore$Audio extends android.provider.DrmStore$Columns {
public interface android.provider.DrmStore$Columns extends android.provider.BaseColumns {
public interface android.provider.DrmStore$Images extends android.provider.DrmStore$Columns {
public final class android.provider.DrmStore {
  public android.provider.DrmStore();
  public static final android.content.Intent addDrmFile(android.content.ContentResolver, java.io.File, java.lang.String);
  public static final android.content.Intent addDrmFile(android.content.ContentResolver, java.io.FileInputStream, java.lang.String);
  public static void enforceAccessDrmPermission(android.content.Context);
public final class android.provider.LiveFolders implements android.provider.BaseColumns {
public interface android.provider.MediaStore$Audio$AlbumColumns {
public final class android.provider.MediaStore$Audio$Albums implements android.provider.BaseColumns,android.provider.MediaStore$Audio$AlbumColumns {
  public android.provider.MediaStore$Audio$Albums();
  public static android.net.Uri getContentUri(java.lang.String);
public interface android.provider.MediaStore$Audio$ArtistColumns {
public final class android.provider.MediaStore$Audio$Artists$Albums implements android.provider.MediaStore$Audio$AlbumColumns {
  public android.provider.MediaStore$Audio$Artists$Albums();
  public static final android.net.Uri getContentUri(java.lang.String, long);
public final class android.provider.MediaStore$Audio$Artists implements android.provider.BaseColumns,android.provider.MediaStore$Audio$ArtistColumns {
  public android.provider.MediaStore$Audio$Artists();
  public static android.net.Uri getContentUri(java.lang.String);
public interface android.provider.MediaStore$Audio$AudioColumns extends android.provider.MediaStore$MediaColumns {
public final class android.provider.MediaStore$Audio$Genres$Members implements android.provider.MediaStore$Audio$AudioColumns {
  public android.provider.MediaStore$Audio$Genres$Members();
  public static final android.net.Uri getContentUri(java.lang.String, long);
public final class android.provider.MediaStore$Audio$Genres implements android.provider.BaseColumns,android.provider.MediaStore$Audio$GenresColumns {
  public android.provider.MediaStore$Audio$Genres();
  public static android.net.Uri getContentUri(java.lang.String);
  public static android.net.Uri getContentUriForAudioId(java.lang.String, int);
public interface android.provider.MediaStore$Audio$GenresColumns {
public final class android.provider.MediaStore$Audio$Media implements android.provider.MediaStore$Audio$AudioColumns {
  public android.provider.MediaStore$Audio$Media();
  public static android.net.Uri getContentUri(java.lang.String);
  public static android.net.Uri getContentUriForPath(java.lang.String);
public final class android.provider.MediaStore$Audio$Playlists$Members implements android.provider.MediaStore$Audio$AudioColumns {
  public android.provider.MediaStore$Audio$Playlists$Members();
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public static final boolean moveItem(android.content.ContentResolver, long, int, int);
public final class android.provider.MediaStore$Audio$Playlists implements android.provider.BaseColumns,android.provider.MediaStore$Audio$PlaylistsColumns {
  public android.provider.MediaStore$Audio$Playlists();
  public static android.net.Uri getContentUri(java.lang.String);
public interface android.provider.MediaStore$Audio$PlaylistsColumns {
public final class android.provider.MediaStore$Audio {
  public android.provider.MediaStore$Audio();
  public static java.lang.String keyFor(java.lang.String);
public interface android.provider.MediaStore$Files$FileColumns extends android.provider.MediaStore$MediaColumns {
public final class android.provider.MediaStore$Files {
  public android.provider.MediaStore$Files();
  public static android.net.Uri getContentUri(java.lang.String);
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public static android.net.Uri getMtpObjectsUri(java.lang.String);
  public static final android.net.Uri getMtpObjectsUri(java.lang.String, long);
  public static final android.net.Uri getMtpReferencesUri(java.lang.String, long);
public interface android.provider.MediaStore$Images$ImageColumns extends android.provider.MediaStore$MediaColumns {
public final class android.provider.MediaStore$Images$Media implements android.provider.MediaStore$Images$ImageColumns {
  public android.provider.MediaStore$Images$Media();
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String);
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public static final java.lang.String insertImage(android.content.ContentResolver, android.graphics.Bitmap, java.lang.String, java.lang.String);
  public static android.net.Uri getContentUri(java.lang.String);
public class android.provider.MediaStore$Images$Thumbnails implements android.provider.BaseColumns {
  public android.provider.MediaStore$Images$Thumbnails();
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
  public static final android.database.Cursor queryMiniThumbnails(android.content.ContentResolver, android.net.Uri, int, java.lang.String[]);
  public static final android.database.Cursor queryMiniThumbnail(android.content.ContentResolver, long, int, java.lang.String[]);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, int, android.graphics.BitmapFactory$Options);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long, long);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, long, int, android.graphics.BitmapFactory$Options);
  public static android.net.Uri getContentUri(java.lang.String);
public final class android.provider.MediaStore$Images {
  public android.provider.MediaStore$Images();
public interface android.provider.MediaStore$MediaColumns extends android.provider.BaseColumns {
public final class android.provider.MediaStore$Video$Media implements android.provider.MediaStore$Video$VideoColumns {
  public android.provider.MediaStore$Video$Media();
  public static android.net.Uri getContentUri(java.lang.String);
public class android.provider.MediaStore$Video$Thumbnails implements android.provider.BaseColumns {
  public android.provider.MediaStore$Video$Thumbnails();
  public static void cancelThumbnailRequest(android.content.ContentResolver, long);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, long, int, android.graphics.BitmapFactory$Options);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long, long);
  public static android.net.Uri getContentUri(java.lang.String);
public interface android.provider.MediaStore$Video$VideoColumns extends android.provider.MediaStore$MediaColumns {
public final class android.provider.MediaStore$Video {
  public android.provider.MediaStore$Video();
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
public final class android.provider.MediaStore {
  public android.provider.MediaStore();
  public static android.net.Uri getMediaScannerUri();
  public static java.lang.String getVersion(android.content.Context);
  public void run();
public class android.provider.SearchRecentSuggestions {
  public android.provider.SearchRecentSuggestions(android.content.Context, java.lang.String, int);
  public void saveRecentQuery(java.lang.String, java.lang.String);
  public void clearHistory();
public final class android.provider.Settings$Bookmarks implements android.provider.BaseColumns {
  public android.provider.Settings$Bookmarks();
  public static android.content.Intent getIntentForShortcut(android.content.ContentResolver, char);
  public static android.net.Uri add(android.content.ContentResolver, android.content.Intent, java.lang.String, java.lang.String, char, int);
  public static java.lang.CharSequence getLabelForFolder(android.content.res.Resources, java.lang.String);
  public static java.lang.CharSequence getTitle(android.content.Context, android.database.Cursor);
  public android.provider.Settings$NameValueCache(java.lang.String, android.net.Uri, java.lang.String);
  public java.lang.String getString(android.content.ContentResolver, java.lang.String);
public class android.provider.Settings$NameValueTable implements android.provider.BaseColumns {
  public android.provider.Settings$NameValueTable();
  public static android.net.Uri getUriFor(android.net.Uri, java.lang.String);
public final class android.provider.Settings$Secure extends android.provider.Settings$NameValueTable {
  public android.provider.Settings$Secure();
  public static synchronized java.lang.String getString(android.content.ContentResolver, java.lang.String);
  public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static android.net.Uri getUriFor(java.lang.String);
  public static int getInt(android.content.ContentResolver, java.lang.String, int);
  public static boolean putInt(android.content.ContentResolver, java.lang.String, int);
  public static long getLong(android.content.ContentResolver, java.lang.String, long);
  public static boolean putLong(android.content.ContentResolver, java.lang.String, long);
  public static float getFloat(android.content.ContentResolver, java.lang.String, float);
  public static boolean putFloat(android.content.ContentResolver, java.lang.String, float);
  public static final java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String);
  public static final java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String);
  public static final java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String);
  public static final boolean isLocationProviderEnabled(android.content.ContentResolver, java.lang.String);
  public static final void setLocationProviderEnabled(android.content.ContentResolver, java.lang.String, boolean);
public class android.provider.Settings$SettingNotFoundException extends android.util.AndroidException {
  public android.provider.Settings$SettingNotFoundException(java.lang.String);
public final class android.provider.Settings$System extends android.provider.Settings$NameValueTable {
  public android.provider.Settings$System();
  public static synchronized java.lang.String getString(android.content.ContentResolver, java.lang.String);
  public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static android.net.Uri getUriFor(java.lang.String);
  public static int getInt(android.content.ContentResolver, java.lang.String, int);
  public static boolean putInt(android.content.ContentResolver, java.lang.String, int);
  public static long getLong(android.content.ContentResolver, java.lang.String, long);
  public static boolean putLong(android.content.ContentResolver, java.lang.String, long);
  public static float getFloat(android.content.ContentResolver, java.lang.String, float);
  public static boolean putFloat(android.content.ContentResolver, java.lang.String, float);
  public static void getConfiguration(android.content.ContentResolver, android.content.res.Configuration);
  public static void clearConfiguration(android.content.res.Configuration);
  public static boolean putConfiguration(android.content.ContentResolver, android.content.res.Configuration);
  public static boolean hasInterestingConfigurationChanges(int);
  public static boolean getShowGTalkServiceStatus(android.content.ContentResolver);
  public static void setShowGTalkServiceStatus(android.content.ContentResolver, boolean);
public final class android.provider.Settings {
  public android.provider.Settings();
  public static java.lang.String getGTalkDeviceId(long);
public interface android.provider.SyncConstValue {
public interface android.provider.SyncStateContract$Columns extends android.provider.BaseColumns {
public class android.provider.SyncStateContract$Constants implements android.provider.SyncStateContract$Columns {
  public android.provider.SyncStateContract$Constants();
public final class android.provider.SyncStateContract$Helpers {
  public android.provider.SyncStateContract$Helpers();
  public static android.content.ContentProviderOperation newSetOperation(android.net.Uri, android.accounts.Account, byte[]);
  public static android.content.ContentProviderOperation newUpdateOperation(android.net.Uri, byte[]);
public class android.provider.SyncStateContract {
  public android.provider.SyncStateContract();
public interface android.provider.Telephony$BaseMmsColumns extends android.provider.BaseColumns {
public interface android.provider.Telephony$CanonicalAddressesColumns extends android.provider.BaseColumns {
public final class android.provider.Telephony$Carriers implements android.provider.BaseColumns {
  public android.provider.Telephony$Carriers();
public final class android.provider.Telephony$Intents {
public final class android.provider.Telephony$Mms$Addr implements android.provider.BaseColumns {
  public android.provider.Telephony$Mms$Addr();
public final class android.provider.Telephony$Mms$Draft implements android.provider.Telephony$BaseMmsColumns {
  public android.provider.Telephony$Mms$Draft();
public final class android.provider.Telephony$Mms$Inbox implements android.provider.Telephony$BaseMmsColumns {
  public android.provider.Telephony$Mms$Inbox();
public final class android.provider.Telephony$Mms$Intents {
public final class android.provider.Telephony$Mms$Outbox implements android.provider.Telephony$BaseMmsColumns {
  public android.provider.Telephony$Mms$Outbox();
public final class android.provider.Telephony$Mms$Part implements android.provider.BaseColumns {
  public android.provider.Telephony$Mms$Part();
public final class android.provider.Telephony$Mms$Rate {
  public android.provider.Telephony$Mms$Rate();
public final class android.provider.Telephony$Mms$Sent implements android.provider.Telephony$BaseMmsColumns {
  public android.provider.Telephony$Mms$Sent();
public final class android.provider.Telephony$Mms implements android.provider.Telephony$BaseMmsColumns {
  public android.provider.Telephony$Mms();
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[]);
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], java.lang.String, java.lang.String);
  public static final java.lang.String getMessageBoxName(int);
  public static java.lang.String extractAddrSpec(java.lang.String);
  public static boolean isEmailAddress(java.lang.String);
  public static boolean isPhoneNumber(java.lang.String);
public final class android.provider.Telephony$MmsSms$PendingMessages implements android.provider.BaseColumns {
  public android.provider.Telephony$MmsSms$PendingMessages();
public final class android.provider.Telephony$MmsSms$WordsTable {
  public android.provider.Telephony$MmsSms$WordsTable();
public final class android.provider.Telephony$MmsSms implements android.provider.BaseColumns {
  public android.provider.Telephony$MmsSms();
public final class android.provider.Telephony$Sms$Conversations implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms$Conversations();
public final class android.provider.Telephony$Sms$Draft implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms$Draft();
  public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long);
  public static boolean saveMessage(android.content.ContentResolver, android.net.Uri, java.lang.String);
public final class android.provider.Telephony$Sms$Inbox implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms$Inbox();
  public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean);
public final class android.provider.Telephony$Sms$Intents {
  public android.provider.Telephony$Sms$Intents();
  public static android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent);
public final class android.provider.Telephony$Sms$Outbox implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms$Outbox();
  public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, long);
public final class android.provider.Telephony$Sms$Sent implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms$Sent();
  public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long);
public final class android.provider.Telephony$Sms implements android.provider.BaseColumns,android.provider.Telephony$TextBasedSmsColumns {
  public android.provider.Telephony$Sms();
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[]);
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], java.lang.String, java.lang.String);
  public static android.net.Uri addMessageToUri(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, boolean);
  public static android.net.Uri addMessageToUri(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, boolean, long);
  public static boolean moveMessageToFolder(android.content.Context, android.net.Uri, int, int);
  public static boolean isOutgoingFolder(int);
public interface android.provider.Telephony$TextBasedSmsColumns {
public final class android.provider.Telephony$Threads implements android.provider.Telephony$ThreadsColumns {
  public static long getOrCreateThreadId(android.content.Context, java.lang.String);
  public static long getOrCreateThreadId(android.content.Context, java.util.Set<java.lang.String>);
public interface android.provider.Telephony$ThreadsColumns extends android.provider.BaseColumns {
public final class android.provider.Telephony {
  public android.provider.Telephony();
public class android.provider.UserDictionary$Words implements android.provider.BaseColumns {
  public android.provider.UserDictionary$Words();
  public static void addWord(android.content.Context, java.lang.String, int, int);
public class android.provider.UserDictionary {
  public android.provider.UserDictionary();
public final class android.renderscript.Allocation$MipmapControl extends java.lang.Enum<android.renderscript.Allocation$MipmapControl> {
  public static android.renderscript.Allocation$MipmapControl[] values();
  public static android.renderscript.Allocation$MipmapControl valueOf(java.lang.String);
public class android.renderscript.Allocation extends android.renderscript.BaseObj {
  public android.renderscript.Type getType();
  public void syncAll(int);
  public void copyFrom(android.renderscript.BaseObj[]);
  public void copyFromUnchecked(int[]);
  public void copyFromUnchecked(short[]);
  public void copyFromUnchecked(byte[]);
  public void copyFromUnchecked(float[]);
  public void copyFrom(int[]);
  public void copyFrom(short[]);
  public void copyFrom(byte[]);
  public void copyFrom(float[]);
  public void copyFrom(android.graphics.Bitmap);
  public void setFromFieldPacker(int, android.renderscript.FieldPacker);
  public void setFromFieldPacker(int, int, android.renderscript.FieldPacker);
  public void generateMipmaps();
  public void copy1DRangeFromUnchecked(int, int, int[]);
  public void copy1DRangeFromUnchecked(int, int, short[]);
  public void copy1DRangeFromUnchecked(int, int, byte[]);
  public void copy1DRangeFromUnchecked(int, int, float[]);
  public void copy1DRangeFrom(int, int, int[]);
  public void copy1DRangeFrom(int, int, short[]);
  public void copy1DRangeFrom(int, int, byte[]);
  public void copy1DRangeFrom(int, int, float[]);
  public void copy1DRangeFrom(int, int, android.renderscript.Allocation, int);
  public void copy2DRangeFrom(int, int, int, int, byte[]);
  public void copy2DRangeFrom(int, int, int, int, short[]);
  public void copy2DRangeFrom(int, int, int, int, int[]);
  public void copy2DRangeFrom(int, int, int, int, float[]);
  public void copy2DRangeFrom(int, int, int, int, android.renderscript.Allocation, int, int);
  public void copy2DRangeFrom(int, int, android.graphics.Bitmap);
  public void copyTo(android.graphics.Bitmap);
  public void copyTo(byte[]);
  public void copyTo(short[]);
  public void copyTo(int[]);
  public void copyTo(float[]);
  public synchronized void resize(int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int, int);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int);
  public static android.renderscript.Allocation createFromString(android.renderscript.RenderScript, java.lang.String, int);
public class android.renderscript.BaseObj {
  public void setName(java.lang.String);
  public java.lang.String getName();
  public synchronized void destroy();
  public int hashCode();
  public boolean equals(java.lang.Object);
public class android.renderscript.Element$Builder {
  public android.renderscript.Element$Builder(android.renderscript.RenderScript);
  public android.renderscript.Element$Builder add(android.renderscript.Element, java.lang.String, int);
  public android.renderscript.Element$Builder add(android.renderscript.Element, java.lang.String);
  public android.renderscript.Element create();
public final class android.renderscript.Element$DataKind extends java.lang.Enum<android.renderscript.Element$DataKind> {
  public static android.renderscript.Element$DataKind[] values();
  public static android.renderscript.Element$DataKind valueOf(java.lang.String);
public final class android.renderscript.Element$DataType extends java.lang.Enum<android.renderscript.Element$DataType> {
  public static android.renderscript.Element$DataType[] values();
  public static android.renderscript.Element$DataType valueOf(java.lang.String);
public class android.renderscript.Element extends android.renderscript.BaseObj {
  public int getSizeBytes();
  public boolean isComplex();
  public int getSubElementCount();
  public android.renderscript.Element getSubElement(int);
  public java.lang.String getSubElementName(int);
  public int getSubElementArraySize(int);
  public int getSubElementOffsetBytes(int);
  public static android.renderscript.Element BOOLEAN(android.renderscript.RenderScript);
  public static android.renderscript.Element U8(android.renderscript.RenderScript);
  public static android.renderscript.Element I8(android.renderscript.RenderScript);
  public static android.renderscript.Element U16(android.renderscript.RenderScript);
  public static android.renderscript.Element I16(android.renderscript.RenderScript);
  public static android.renderscript.Element U32(android.renderscript.RenderScript);
  public static android.renderscript.Element I32(android.renderscript.RenderScript);
  public static android.renderscript.Element U64(android.renderscript.RenderScript);
  public static android.renderscript.Element I64(android.renderscript.RenderScript);
  public static android.renderscript.Element F32(android.renderscript.RenderScript);
  public static android.renderscript.Element F64(android.renderscript.RenderScript);
  public static android.renderscript.Element ELEMENT(android.renderscript.RenderScript);
  public static android.renderscript.Element TYPE(android.renderscript.RenderScript);
  public static android.renderscript.Element ALLOCATION(android.renderscript.RenderScript);
  public static android.renderscript.Element SAMPLER(android.renderscript.RenderScript);
  public static android.renderscript.Element SCRIPT(android.renderscript.RenderScript);
  public static android.renderscript.Element MESH(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript);
  public static android.renderscript.Element A_8(android.renderscript.RenderScript);
  public static android.renderscript.Element RGB_565(android.renderscript.RenderScript);
  public static android.renderscript.Element RGB_888(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_5551(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_4444(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_8888(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript);
  public static android.renderscript.Element createVector(android.renderscript.RenderScript, android.renderscript.Element$DataType, int);
  public static android.renderscript.Element createPixel(android.renderscript.RenderScript, android.renderscript.Element$DataType, android.renderscript.Element$DataKind);
  public boolean isCompatible(android.renderscript.Element);
public final class android.renderscript.FileA3D$EntryType extends java.lang.Enum<android.renderscript.FileA3D$EntryType> {
  public static android.renderscript.FileA3D$EntryType[] values();
  public static android.renderscript.FileA3D$EntryType valueOf(java.lang.String);
public class android.renderscript.FileA3D$IndexEntry {
  public java.lang.String getName();
  public android.renderscript.FileA3D$EntryType getEntryType();
  public android.renderscript.BaseObj getObject();
  public android.renderscript.Mesh getMesh();
public class android.renderscript.FileA3D extends android.renderscript.BaseObj {
  public int getIndexEntryCount();
  public android.renderscript.FileA3D$IndexEntry getIndexEntry(int);
  public static android.renderscript.FileA3D createFromAsset(android.renderscript.RenderScript, android.content.res.AssetManager, java.lang.String);
  public static android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript, java.lang.String);
  public static android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript, java.io.File);
  public static android.renderscript.FileA3D createFromResource(android.renderscript.RenderScript, android.content.res.Resources, int);
public final class android.renderscript.Font$Style extends java.lang.Enum<android.renderscript.Font$Style> {
  public static android.renderscript.Font$Style[] values();
  public static android.renderscript.Font$Style valueOf(java.lang.String);
public class android.renderscript.Font extends android.renderscript.BaseObj {
  public static android.renderscript.Font createFromFile(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, float);
  public static android.renderscript.Font createFromFile(android.renderscript.RenderScript, android.content.res.Resources, java.io.File, float);
  public static android.renderscript.Font createFromAsset(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, float);
  public static android.renderscript.Font createFromResource(android.renderscript.RenderScript, android.content.res.Resources, int, float);
  public static android.renderscript.Font create(android.renderscript.RenderScript, android.content.res.Resources, java.lang.String, android.renderscript.Font$Style, float);
public class android.renderscript.Mesh$AllocationBuilder {
  public android.renderscript.Mesh$AllocationBuilder(android.renderscript.RenderScript);
  public int getCurrentVertexTypeIndex();
  public int getCurrentIndexSetIndex();
  public android.renderscript.Mesh$AllocationBuilder addIndexSetAllocation(android.renderscript.Allocation, android.renderscript.Mesh$Primitive);
  public android.renderscript.Mesh$AllocationBuilder addIndexSetType(android.renderscript.Mesh$Primitive);
  public android.renderscript.Mesh create();
public class android.renderscript.Mesh$Builder {
  public android.renderscript.Mesh$Builder(android.renderscript.RenderScript, int);
  public int getCurrentVertexTypeIndex();
  public int getCurrentIndexSetIndex();
  public android.renderscript.Mesh$Builder addIndexSetType(android.renderscript.Type, android.renderscript.Mesh$Primitive);
  public android.renderscript.Mesh$Builder addIndexSetType(android.renderscript.Mesh$Primitive);
  public android.renderscript.Mesh$Builder addIndexSetType(android.renderscript.Element, int, android.renderscript.Mesh$Primitive);
  public android.renderscript.Mesh create();
public final class android.renderscript.Mesh$Primitive extends java.lang.Enum<android.renderscript.Mesh$Primitive> {
  public static android.renderscript.Mesh$Primitive[] values();
  public static android.renderscript.Mesh$Primitive valueOf(java.lang.String);
public class android.renderscript.Mesh$TriangleMeshBuilder {
  public android.renderscript.Mesh$TriangleMeshBuilder(android.renderscript.RenderScript, int, int);
  public android.renderscript.Mesh$TriangleMeshBuilder addVertex(float, float);
  public android.renderscript.Mesh$TriangleMeshBuilder addVertex(float, float, float);
  public android.renderscript.Mesh$TriangleMeshBuilder setTexture(float, float);
  public android.renderscript.Mesh$TriangleMeshBuilder setNormal(float, float, float);
  public android.renderscript.Mesh$TriangleMeshBuilder setColor(float, float, float, float);
  public android.renderscript.Mesh$TriangleMeshBuilder addTriangle(int, int, int);
  public android.renderscript.Mesh create(boolean);
public class android.renderscript.Mesh extends android.renderscript.BaseObj {
  public int getVertexAllocationCount();
  public android.renderscript.Allocation getVertexAllocation(int);
  public int getPrimitiveCount();
  public android.renderscript.Allocation getIndexSetAllocation(int);
  public android.renderscript.Mesh$Primitive getPrimitive(int);
public class android.renderscript.Program$BaseProgramBuilder {
  public android.renderscript.Program$BaseProgramBuilder setShader(java.lang.String);
  public android.renderscript.Program$BaseProgramBuilder setShader(android.content.res.Resources, int);
  public int getCurrentConstantIndex();
  public int getCurrentTextureIndex();
  public static android.renderscript.Program$ProgramParam[] values();
  public static android.renderscript.Program$ProgramParam valueOf(java.lang.String);
public final class android.renderscript.Program$TextureType extends java.lang.Enum<android.renderscript.Program$TextureType> {
  public static android.renderscript.Program$TextureType[] values();
  public static android.renderscript.Program$TextureType valueOf(java.lang.String);
public class android.renderscript.Program extends android.renderscript.BaseObj {
  public void bindConstants(android.renderscript.Allocation, int);
public final class android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode extends java.lang.Enum<android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode> {
  public static android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode[] values();
  public static android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode valueOf(java.lang.String);
public final class android.renderscript.ProgramFragmentFixedFunction$Builder$Format extends java.lang.Enum<android.renderscript.ProgramFragmentFixedFunction$Builder$Format> {
  public static android.renderscript.ProgramFragmentFixedFunction$Builder$Format[] values();
  public static android.renderscript.ProgramFragmentFixedFunction$Builder$Format valueOf(java.lang.String);
public class android.renderscript.ProgramFragmentFixedFunction$Builder {
  public android.renderscript.ProgramFragmentFixedFunction$Builder(android.renderscript.RenderScript);
  public android.renderscript.ProgramFragmentFixedFunction$Builder setPointSpriteTexCoordinateReplacement(boolean);
  public android.renderscript.ProgramFragmentFixedFunction$Builder setVaryingColor(boolean);
  public android.renderscript.ProgramFragmentFixedFunction create();
  public android.renderscript.ProgramFragmentFixedFunction$InternalBuilder(android.renderscript.RenderScript);
  public android.renderscript.ProgramFragmentFixedFunction create();
public class android.renderscript.ProgramFragmentFixedFunction extends android.renderscript.ProgramFragment {
public class android.renderscript.ProgramRaster$Builder {
  public android.renderscript.ProgramRaster$Builder(android.renderscript.RenderScript);
  public android.renderscript.ProgramRaster$Builder setPointSpriteEnabled(boolean);
  public android.renderscript.ProgramRaster$Builder setCullMode(android.renderscript.ProgramRaster$CullMode);
  public android.renderscript.ProgramRaster create();
public final class android.renderscript.ProgramRaster$CullMode extends java.lang.Enum<android.renderscript.ProgramRaster$CullMode> {
  public static android.renderscript.ProgramRaster$CullMode[] values();
  public static android.renderscript.ProgramRaster$CullMode valueOf(java.lang.String);
public class android.renderscript.ProgramRaster extends android.renderscript.BaseObj {
  public boolean getPointSpriteEnabled();
  public android.renderscript.ProgramRaster$CullMode getCullMode();
  public static android.renderscript.ProgramRaster CULL_BACK(android.renderscript.RenderScript);
  public static android.renderscript.ProgramRaster CULL_FRONT(android.renderscript.RenderScript);
  public static android.renderscript.ProgramRaster CULL_NONE(android.renderscript.RenderScript);
public final class android.renderscript.ProgramStore$BlendDstFunc extends java.lang.Enum<android.renderscript.ProgramStore$BlendDstFunc> {
  public static android.renderscript.ProgramStore$BlendDstFunc[] values();
  public static android.renderscript.ProgramStore$BlendDstFunc valueOf(java.lang.String);
public final class android.renderscript.ProgramStore$BlendSrcFunc extends java.lang.Enum<android.renderscript.ProgramStore$BlendSrcFunc> {
  public static android.renderscript.ProgramStore$BlendSrcFunc[] values();
  public static android.renderscript.ProgramStore$BlendSrcFunc valueOf(java.lang.String);
public class android.renderscript.ProgramStore$Builder {
  public android.renderscript.ProgramStore$Builder(android.renderscript.RenderScript);
  public android.renderscript.ProgramStore$Builder setDepthFunc(android.renderscript.ProgramStore$DepthFunc);
  public android.renderscript.ProgramStore$Builder setDepthMaskEnabled(boolean);
  public android.renderscript.ProgramStore$Builder setColorMaskEnabled(boolean, boolean, boolean, boolean);
  public android.renderscript.ProgramStore$Builder setBlendFunc(android.renderscript.ProgramStore$BlendSrcFunc, android.renderscript.ProgramStore$BlendDstFunc);
  public android.renderscript.ProgramStore$Builder setDitherEnabled(boolean);
  public android.renderscript.ProgramStore create();
public final class android.renderscript.ProgramStore$DepthFunc extends java.lang.Enum<android.renderscript.ProgramStore$DepthFunc> {
  public static android.renderscript.ProgramStore$DepthFunc[] values();
  public static android.renderscript.ProgramStore$DepthFunc valueOf(java.lang.String);
public class android.renderscript.ProgramStore extends android.renderscript.BaseObj {
  public android.renderscript.ProgramStore$DepthFunc getDepthFunc();
  public boolean getDepthMaskEnabled();
  public boolean getColorMaskREnabled();
  public boolean getColorMaskGEnabled();
  public boolean getColorMaskBEnabled();
  public boolean getColorMaskAEnabled();
  public android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc();
  public android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc();
  public boolean getDitherEnabled();
  public static android.renderscript.ProgramStore BLEND_NONE_DEPTH_TEST(android.renderscript.RenderScript);
  public static android.renderscript.ProgramStore BLEND_NONE_DEPTH_NONE(android.renderscript.RenderScript);
  public static android.renderscript.ProgramStore BLEND_ALPHA_DEPTH_TEST(android.renderscript.RenderScript);
  public static android.renderscript.ProgramStore BLEND_ALPHA_DEPTH_NONE(android.renderscript.RenderScript);
public class android.renderscript.RSRuntimeException extends java.lang.RuntimeException {
  public android.renderscript.RSRuntimeException(java.lang.String);
  public void run();
public final class android.renderscript.RenderScript$Priority extends java.lang.Enum<android.renderscript.RenderScript$Priority> {
  public static android.renderscript.RenderScript$Priority[] values();
  public static android.renderscript.RenderScript$Priority valueOf(java.lang.String);
public class android.renderscript.RenderScript$RSErrorHandler implements java.lang.Runnable {
  public android.renderscript.RenderScript$RSErrorHandler();
  public void run();
public class android.renderscript.RenderScript$RSMessageHandler implements java.lang.Runnable {
  public android.renderscript.RenderScript$RSMessageHandler();
  public void run();
public class android.renderscript.RenderScript {
  public void setMessageHandler(android.renderscript.RenderScript$RSMessageHandler);
  public android.renderscript.RenderScript$RSMessageHandler getMessageHandler();
  public void setErrorHandler(android.renderscript.RenderScript$RSErrorHandler);
  public android.renderscript.RenderScript$RSErrorHandler getErrorHandler();
  public void setPriority(android.renderscript.RenderScript$Priority);
  public final android.content.Context getApplicationContext();
  public static android.renderscript.RenderScript create(android.content.Context);
  public void contextDump();
  public void finish();
  public void destroy();
public class android.renderscript.Sampler$Builder {
  public android.renderscript.Sampler$Builder(android.renderscript.RenderScript);
  public void setMinification(android.renderscript.Sampler$Value);
  public void setMagnification(android.renderscript.Sampler$Value);
  public void setWrapS(android.renderscript.Sampler$Value);
  public void setWrapT(android.renderscript.Sampler$Value);
  public void setAnisotropy(float);
  public android.renderscript.Sampler create();
public final class android.renderscript.Sampler$Value extends java.lang.Enum<android.renderscript.Sampler$Value> {
  public static android.renderscript.Sampler$Value[] values();
  public static android.renderscript.Sampler$Value valueOf(java.lang.String);
public class android.renderscript.Sampler extends android.renderscript.BaseObj {
  public android.renderscript.Sampler$Value getMinification();
  public android.renderscript.Sampler$Value getMagnification();
  public android.renderscript.Sampler$Value getWrapS();
  public android.renderscript.Sampler$Value getWrapT();
  public float getAnisotropy();
  public static android.renderscript.Sampler CLAMP_NEAREST(android.renderscript.RenderScript);
  public static android.renderscript.Sampler CLAMP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_NEAREST(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript);
public class android.renderscript.Type$Builder {
  public android.renderscript.Type$Builder(android.renderscript.RenderScript, android.renderscript.Element);
  public android.renderscript.Type$Builder setX(int);
  public android.renderscript.Type$Builder setY(int);
  public android.renderscript.Type$Builder setMipmaps(boolean);
  public android.renderscript.Type$Builder setFaces(boolean);
  public android.renderscript.Type create();
public final class android.renderscript.Type$CubemapFace extends java.lang.Enum<android.renderscript.Type$CubemapFace> {
  public static android.renderscript.Type$CubemapFace[] values();
  public static android.renderscript.Type$CubemapFace valueOf(java.lang.String);
public class android.renderscript.Type extends android.renderscript.BaseObj {
  public android.renderscript.Element getElement();
  public int getX();
  public int getY();
  public int getZ();
  public boolean hasMipmaps();
  public boolean hasFaces();
  public int getCount();
public class android.security.Credentials {
  public android.security.Credentials();
  public static android.security.Credentials getInstance();
  public void unlock(android.content.Context);
  public void install(android.content.Context);
  public void install(android.content.Context, java.security.KeyPair);
  public void install(android.content.Context, java.lang.String, byte[]);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.security.IKeyChainAliasCallback$Stub extends android.os.Binder implements android.security.IKeyChainAliasCallback {
  public android.security.IKeyChainAliasCallback$Stub();
  public static android.security.IKeyChainAliasCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.security.IKeyChainAliasCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.security.IKeyChainService$Stub extends android.os.Binder implements android.security.IKeyChainService {
  public android.security.IKeyChainService$Stub();
  public static android.security.IKeyChainService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.security.IKeyChainService extends android.os.IInterface {
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void alias(java.lang.String);
public final class android.security.KeyChain$KeyChainConnection implements java.io.Closeable {
  public void close();
  public android.security.IKeyChainService getService();
public final class android.security.KeyChain {
  public android.security.KeyChain();
  public static android.content.Intent createInstallIntent();
  public static void choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], java.lang.String, int, java.lang.String);
public interface android.security.KeyChainAliasCallback {
  public abstract void alias(java.lang.String);
public class android.security.KeyChainException extends java.lang.Exception {
  public android.security.KeyChainException();
  public android.security.KeyChainException(java.lang.String);
  public android.security.KeyChainException(java.lang.String, java.lang.Throwable);
  public android.security.KeyChainException(java.lang.Throwable);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.speech.IRecognitionListener$Stub extends android.os.Binder implements android.speech.IRecognitionListener {
  public android.speech.IRecognitionListener$Stub();
  public static android.speech.IRecognitionListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.speech.IRecognitionListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.speech.IRecognitionService$Stub extends android.os.Binder implements android.speech.IRecognitionService {
  public android.speech.IRecognitionService$Stub();
  public static android.speech.IRecognitionService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.speech.IRecognitionService extends android.os.IInterface {
public interface android.speech.RecognitionListener {
  public abstract void onReadyForSpeech(android.os.Bundle);
  public abstract void onBeginningOfSpeech();
  public abstract void onRmsChanged(float);
  public abstract void onBufferReceived(byte[]);
  public abstract void onEndOfSpeech();
  public abstract void onError(int);
  public abstract void onResults(android.os.Bundle);
  public abstract void onPartialResults(android.os.Bundle);
  public abstract void onEvent(int, android.os.Bundle);
public class android.speech.RecognizerIntent {
  public static final android.content.Intent getVoiceDetailsIntent(android.content.Context);
  public void handleMessage(android.os.Message);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void handleMessage(android.os.Message);
  public void onBeginningOfSpeech();
  public void onBufferReceived(byte[]);
  public void onEndOfSpeech();
  public void onError(int);
  public void onReadyForSpeech(android.os.Bundle);
  public void onResults(android.os.Bundle);
  public void onPartialResults(android.os.Bundle);
  public void onRmsChanged(float);
  public void onEvent(int, android.os.Bundle);
public class android.speech.SpeechRecognizer {
  public static boolean isRecognitionAvailable(android.content.Context);
  public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context);
  public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context, android.content.ComponentName);
  public void setRecognitionListener(android.speech.RecognitionListener);
  public void startListening(android.content.Intent);
  public void stopListening();
  public void cancel();
  public void destroy();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.speech.tts.ITextToSpeechCallback$Stub extends android.os.Binder implements android.speech.tts.ITextToSpeechCallback {
  public android.speech.tts.ITextToSpeechCallback$Stub();
  public static android.speech.tts.ITextToSpeechCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.speech.tts.ITextToSpeechCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.speech.tts.ITextToSpeechService$Stub extends android.os.Binder implements android.speech.tts.ITextToSpeechService {
  public android.speech.tts.ITextToSpeechService$Stub();
  public static android.speech.tts.ITextToSpeechService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.speech.tts.ITextToSpeechService extends android.os.IInterface {
  public void onDone(java.lang.String);
  public void onError(java.lang.String);
  public void onStart(java.lang.String);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void disconnect();
  public <R extends java/lang/Object> R runAction(android.speech.tts.TextToSpeech$Action<R>, R, java.lang.String, boolean);
public class android.speech.tts.TextToSpeech$Engine {
  public android.speech.tts.TextToSpeech$Engine(android.speech.tts.TextToSpeech);
public class android.speech.tts.TextToSpeech$EngineInfo {
  public android.speech.tts.TextToSpeech$EngineInfo();
  public java.lang.String toString();
public interface android.speech.tts.TextToSpeech$OnInitListener {
  public abstract void onInit(int);
public interface android.speech.tts.TextToSpeech$OnUtteranceCompletedListener {
  public abstract void onUtteranceCompleted(java.lang.String);
public class android.speech.tts.TextToSpeech {
  public android.speech.tts.TextToSpeech(android.content.Context, android.speech.tts.TextToSpeech$OnInitListener);
  public android.speech.tts.TextToSpeech(android.content.Context, android.speech.tts.TextToSpeech$OnInitListener, java.lang.String);
  public android.speech.tts.TextToSpeech(android.content.Context, android.speech.tts.TextToSpeech$OnInitListener, java.lang.String, java.lang.String);
  public void shutdown();
  public int addSpeech(java.lang.String, java.lang.String, int);
  public int addSpeech(java.lang.String, java.lang.String);
  public int addEarcon(java.lang.String, java.lang.String, int);
  public int addEarcon(java.lang.String, java.lang.String);
  public int speak(java.lang.String, int, java.util.HashMap<java.lang.String, java.lang.String>);
  public int playEarcon(java.lang.String, int, java.util.HashMap<java.lang.String, java.lang.String>);
  public int playSilence(long, int, java.util.HashMap<java.lang.String, java.lang.String>);
  public java.util.Set<java.lang.String> getFeatures(java.util.Locale);
  public boolean isSpeaking();
  public int stop();
  public int setSpeechRate(float);
  public int setPitch(float);
  public java.lang.String getCurrentEngine();
  public int setLanguage(java.util.Locale);
  public java.util.Locale getLanguage();
  public int isLanguageAvailable(java.util.Locale);
  public int synthesizeToFile(java.lang.String, java.util.HashMap<java.lang.String, java.lang.String>, java.lang.String);
  public int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener);
  public int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener);
  public int setEngineByPackageName(java.lang.String);
  public java.lang.String getDefaultEngine();
  public boolean areDefaultsEnforced();
  public java.util.List<android.speech.tts.TextToSpeech$EngineInfo> getEngines();
  public int compare(android.speech.tts.TextToSpeech$EngineInfo, android.speech.tts.TextToSpeech$EngineInfo);
  public int compare(java.lang.Object, java.lang.Object);
public class android.speech.tts.TtsEngines {
  public android.speech.tts.TtsEngines(android.content.Context);
  public java.lang.String getDefaultEngine();
  public java.lang.String getHighestRankedEngineName();
  public android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String);
  public java.util.List<android.speech.tts.TextToSpeech$EngineInfo> getEngines();
  public boolean isEngineInstalled(java.lang.String);
  public android.content.Intent getSettingsIntent(java.lang.String);
  public java.lang.String getLocalePrefForEngine(java.lang.String);
  public static java.lang.String[] parseLocalePref(java.lang.String);
  public synchronized void updateLocalePrefForEngine(java.lang.String, java.lang.String);
  public synchronized void onDone(java.lang.String);
  public void onError(java.lang.String);
  public void onStart(java.lang.String);
public abstract class android.speech.tts.UtteranceProgressListener {
  public android.speech.tts.UtteranceProgressListener();
  public abstract void onStart(java.lang.String);
  public abstract void onDone(java.lang.String);
  public abstract void onError(java.lang.String);
public abstract class android.telephony.CellLocation {
  public android.telephony.CellLocation();
  public static void requestLocationUpdate();
  public static android.telephony.CellLocation newFromBundle(android.os.Bundle);
  public abstract void fillInNotifierBundle(android.os.Bundle);
  public abstract boolean isEmpty();
  public static android.telephony.CellLocation getEmpty();
  public static void format(android.text.Editable);
  public android.telephony.NeighboringCellInfo createFromParcel(android.os.Parcel);
  public android.telephony.NeighboringCellInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.telephony.NeighboringCellInfo implements android.os.Parcelable {
  public android.telephony.NeighboringCellInfo();
  public android.telephony.NeighboringCellInfo(int, int);
  public android.telephony.NeighboringCellInfo(int, java.lang.String, int);
  public android.telephony.NeighboringCellInfo(android.os.Parcel);
  public int getRssi();
  public int getLac();
  public int getCid();
  public int getPsc();
  public int getNetworkType();
  public void setCid(int);
  public void setRssi(int);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.telephony.PhoneNumberUtils$CountryCallingCodeAndNewIndex(int, int);
public class android.telephony.PhoneNumberUtils {
  public android.telephony.PhoneNumberUtils();
  public static boolean isISODigit(char);
  public static final boolean is12Key(char);
  public static final boolean isDialable(char);
  public static final boolean isReallyDialable(char);
  public static final boolean isNonSeparator(char);
  public static final boolean isStartsPostDial(char);
  public static java.lang.String getNumberFromIntent(android.content.Intent, android.content.Context);
  public static java.lang.String extractNetworkPortion(java.lang.String);
  public static java.lang.String extractNetworkPortionAlt(java.lang.String);
  public static java.lang.String stripSeparators(java.lang.String);
  public static java.lang.String convertPreDial(java.lang.String);
  public static java.lang.String extractPostDialPortion(java.lang.String);
  public static boolean compare(java.lang.String, java.lang.String);
  public static boolean compare(android.content.Context, java.lang.String, java.lang.String);
  public static boolean compare(java.lang.String, java.lang.String, boolean);
  public static boolean compareLoosely(java.lang.String, java.lang.String);
  public static boolean compareStrictly(java.lang.String, java.lang.String);
  public static boolean compareStrictly(java.lang.String, java.lang.String, boolean);
  public static java.lang.String toCallerIDMinMatch(java.lang.String);
  public static java.lang.String getStrippedReversed(java.lang.String);
  public static java.lang.String stringFromStringAndTOA(java.lang.String, int);
  public static int toaFromString(java.lang.String);
  public static java.lang.String calledPartyBCDToString(byte[], int, int);
  public static java.lang.String calledPartyBCDFragmentToString(byte[], int, int);
  public static boolean isWellFormedSmsAddress(java.lang.String);
  public static boolean isGlobalPhoneNumber(java.lang.String);
  public static byte[] networkPortionToCalledPartyBCD(java.lang.String);
  public static byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String);
  public static byte[] numberToCalledPartyBCD(java.lang.String);
  public static java.lang.String formatNumber(java.lang.String);
  public static java.lang.String formatNumber(java.lang.String, int);
  public static int getFormatTypeForLocale(java.util.Locale);
  public static void formatNumber(android.text.Editable, int);
  public static void formatNanpNumber(android.text.Editable);
  public static void formatJapaneseNumber(android.text.Editable);
  public static java.lang.String formatNumberToE164(java.lang.String, java.lang.String);
  public static java.lang.String formatNumber(java.lang.String, java.lang.String);
  public static java.lang.String formatNumber(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String normalizeNumber(java.lang.String);
  public static boolean isEmergencyNumber(java.lang.String);
  public static boolean isPotentialEmergencyNumber(java.lang.String);
  public static boolean isEmergencyNumber(java.lang.String, java.lang.String);
  public static boolean isPotentialEmergencyNumber(java.lang.String, java.lang.String);
  public static boolean isLocalEmergencyNumber(java.lang.String, android.content.Context);
  public static boolean isPotentialLocalEmergencyNumber(java.lang.String, android.content.Context);
  public static boolean isVoiceMailNumber(java.lang.String);
  public static java.lang.String convertKeypadLettersToDigits(java.lang.String);
  public static java.lang.String cdmaCheckAndProcessPlusCode(java.lang.String);
  public static java.lang.String cdmaCheckAndProcessPlusCodeByNumberFormat(java.lang.String, int, int);
  public static boolean isUriNumber(java.lang.String);
  public static java.lang.String getUsernameFromUriNumber(java.lang.String);
  public void onServiceStateChanged(android.telephony.ServiceState);
  public void onSignalStrengthChanged(int);
  public void onMessageWaitingIndicatorChanged(boolean);
  public void onCallForwardingIndicatorChanged(boolean);
  public void onCellLocationChanged(android.os.Bundle);
  public void onCallStateChanged(int, java.lang.String);
  public void onDataConnectionStateChanged(int, int);
  public void onDataActivity(int);
  public void onSignalStrengthsChanged(android.telephony.SignalStrength);
  public void onOtaspChanged(int);
  public void handleMessage(android.os.Message);
public class android.telephony.PhoneStateListener {
  public android.telephony.PhoneStateListener();
  public void onServiceStateChanged(android.telephony.ServiceState);
  public void onSignalStrengthChanged(int);
  public void onMessageWaitingIndicatorChanged(boolean);
  public void onCallForwardingIndicatorChanged(boolean);
  public void onCellLocationChanged(android.telephony.CellLocation);
  public void onCallStateChanged(int, java.lang.String);
  public void onDataConnectionStateChanged(int);
  public void onDataConnectionStateChanged(int, int);
  public void onDataActivity(int);
  public void onSignalStrengthsChanged(android.telephony.SignalStrength);
  public void onOtaspChanged(int);
  public android.telephony.ServiceState createFromParcel(android.os.Parcel);
  public android.telephony.ServiceState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.telephony.ServiceState implements android.os.Parcelable {
  public static android.telephony.ServiceState newFromBundle(android.os.Bundle);
  public android.telephony.ServiceState();
  public android.telephony.ServiceState(android.telephony.ServiceState);
  public android.telephony.ServiceState(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public int getState();
  public boolean getRoaming();
  public boolean isEmergencyOnly();
  public int getCdmaRoamingIndicator();
  public int getCdmaDefaultRoamingIndicator();
  public int getCdmaEriIconIndex();
  public int getCdmaEriIconMode();
  public java.lang.String getOperatorAlphaLong();
  public java.lang.String getOperatorAlphaShort();
  public java.lang.String getOperatorNumeric();
  public boolean getIsManualSelection();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public static java.lang.String radioTechnologyToString(int);
  public java.lang.String toString();
  public void setStateOutOfService();
  public void setStateOff();
  public void setState(int);
  public void setRoaming(boolean);
  public void setEmergencyOnly(boolean);
  public void setCdmaRoamingIndicator(int);
  public void setCdmaDefaultRoamingIndicator(int);
  public void setCdmaEriIconIndex(int);
  public void setCdmaEriIconMode(int);
  public void setOperatorName(java.lang.String, java.lang.String, java.lang.String);
  public void setOperatorAlphaLong(java.lang.String);
  public void setIsManualSelection(boolean);
  public void fillInNotifierBundle(android.os.Bundle);
  public void setRadioTechnology(int);
  public void setCssIndicator(int);
  public void setSystemAndNetworkId(int, int);
  public int getRadioTechnology();
  public int getCssIndicator();
  public int getNetworkId();
  public int getSystemId();
  public android.telephony.SignalStrength createFromParcel(android.os.Parcel);
  public android.telephony.SignalStrength[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.telephony.SignalStrength implements android.os.Parcelable {
  public static android.telephony.SignalStrength newFromBundle(android.os.Bundle);
  public android.telephony.SignalStrength();
  public android.telephony.SignalStrength(int, int, int, int, int, int, int, int, int, int, int, int, boolean);
  public android.telephony.SignalStrength(int, int, int, int, int, int, int, boolean);
  public android.telephony.SignalStrength(android.telephony.SignalStrength);
  public android.telephony.SignalStrength(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public int getGsmSignalStrength();
  public int getGsmBitErrorRate();
  public int getCdmaDbm();
  public int getCdmaEcio();
  public int getEvdoDbm();
  public int getEvdoEcio();
  public int getEvdoSnr();
  public int getLevel();
  public int getAsuLevel();
  public int getDbm();
  public int getGsmDbm();
  public int getGsmLevel();
  public int getGsmAsuLevel();
  public int getCdmaLevel();
  public int getCdmaAsuLevel();
  public int getEvdoLevel();
  public int getEvdoAsuLevel();
  public int getLteDbm();
  public int getLteLevel();
  public int getLteAsuLevel();
  public boolean isGsm();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public void fillInNotifierBundle(android.os.Bundle);
public interface android.telephony.SmsCbConstants {
public final class android.telephony.SmsManager {
  public void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent);
  public java.util.ArrayList<java.lang.String> divideMessage(java.lang.String);
  public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList<java.lang.String>, java.util.ArrayList<android.app.PendingIntent>, java.util.ArrayList<android.app.PendingIntent>);
  public void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent);
  public static android.telephony.SmsManager getDefault();
  public boolean copyMessageToIcc(byte[], byte[], int);
  public boolean deleteMessageFromIcc(int);
  public boolean updateMessageOnIcc(int, int, byte[]);
  public static java.util.ArrayList<android.telephony.SmsMessage> getAllMessagesFromIcc();
  public boolean enableCellBroadcast(int);
  public boolean disableCellBroadcast(int);
  public boolean enableCellBroadcastRange(int, int);
  public boolean disableCellBroadcastRange(int, int);
public final class android.telephony.SmsMessage$MessageClass extends java.lang.Enum<android.telephony.SmsMessage$MessageClass> {
  public static android.telephony.SmsMessage$MessageClass[] values();
  public static android.telephony.SmsMessage$MessageClass valueOf(java.lang.String);
public class android.telephony.SmsMessage$SubmitPdu {
  public java.lang.String toString();
public class android.telephony.SmsMessage {
  public static android.telephony.SmsMessage createFromPdu(byte[]);
  public static android.telephony.SmsMessage createFromPdu(byte[], java.lang.String);
  public static android.telephony.SmsMessage newFromCMT(java.lang.String[]);
  public static android.telephony.SmsMessage newFromParcel(android.os.Parcel);
  public static android.telephony.SmsMessage createFromEfRecord(int, byte[]);
  public static int getTPLayerLengthForPDU(java.lang.String);
  public static int[] calculateLength(java.lang.CharSequence, boolean);
  public static java.util.ArrayList<java.lang.String> fragmentText(java.lang.String);
  public static int[] calculateLength(java.lang.String, boolean);
  public static android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean);
  public static android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, short, byte[], boolean);
  public java.lang.String getServiceCenterAddress();
  public java.lang.String getOriginatingAddress();
  public java.lang.String getDisplayOriginatingAddress();
  public java.lang.String getMessageBody();
  public android.telephony.SmsMessage$MessageClass getMessageClass();
  public java.lang.String getDisplayMessageBody();
  public java.lang.String getPseudoSubject();
  public long getTimestampMillis();
  public boolean isEmail();
  public java.lang.String getEmailBody();
  public java.lang.String getEmailFrom();
  public int getProtocolIdentifier();
  public boolean isReplace();
  public boolean isCphsMwiMessage();
  public boolean isMWIClearMessage();
  public boolean isMWISetMessage();
  public boolean isMwiDontStore();
  public byte[] getUserData();
  public byte[] getPdu();
  public int getStatusOnSim();
  public int getStatusOnIcc();
  public int getIndexOnSim();
  public int getIndexOnIcc();
  public int getStatus();
  public boolean isStatusReportMessage();
  public boolean isReplyPathPresent();
public class android.telephony.TelephonyManager {
  public android.telephony.TelephonyManager(android.content.Context);
  public static android.telephony.TelephonyManager getDefault();
  public java.lang.String getDeviceSoftwareVersion();
  public java.lang.String getDeviceId();
  public android.telephony.CellLocation getCellLocation();
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public java.util.List<android.telephony.NeighboringCellInfo> getNeighboringCellInfo();
  public int getCurrentPhoneType();
  public int getPhoneType();
  public java.lang.String getNetworkOperatorName();
  public java.lang.String getNetworkOperator();
  public boolean isNetworkRoaming();
  public java.lang.String getNetworkCountryIso();
  public int getNetworkType();
  public static int getNetworkClass(int);
  public java.lang.String getNetworkTypeName();
  public static java.lang.String getNetworkTypeName(int);
  public boolean hasIccCard();
  public int getSimState();
  public java.lang.String getSimOperator();
  public java.lang.String getSimOperatorName();
  public java.lang.String getSimCountryIso();
  public java.lang.String getSimSerialNumber();
  public int getLteOnCdmaMode();
  public java.lang.String getSubscriberId();
  public java.lang.String getLine1Number();
  public java.lang.String getLine1AlphaTag();
  public java.lang.String getMsisdn();
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getCompleteVoiceMailNumber();
  public int getVoiceMessageCount();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getIsimImpi();
  public java.lang.String getIsimDomain();
  public java.lang.String[] getIsimImpu();
  public int getCallState();
  public int getDataActivity();
  public int getDataState();
  public void listen(android.telephony.PhoneStateListener, int);
  public int getCdmaEriIconIndex();
  public int getCdmaEriIconMode();
  public java.lang.String getCdmaEriText();
  public boolean isVoiceCapable();
  public boolean isSmsCapable();
public class android.telephony.cdma.CdmaCellLocation extends android.telephony.CellLocation {
  public android.telephony.cdma.CdmaCellLocation();
  public android.telephony.cdma.CdmaCellLocation(android.os.Bundle);
  public int getBaseStationId();
  public int getBaseStationLatitude();
  public int getBaseStationLongitude();
  public int getSystemId();
  public int getNetworkId();
  public void setStateInvalid();
  public void setCellLocationData(int, int, int);
  public void setCellLocationData(int, int, int, int, int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public void fillInNotifierBundle(android.os.Bundle);
  public boolean isEmpty();
public class android.telephony.gsm.GsmCellLocation extends android.telephony.CellLocation {
  public android.telephony.gsm.GsmCellLocation();
  public android.telephony.gsm.GsmCellLocation(android.os.Bundle);
  public int getLac();
  public int getCid();
  public int getPsc();
  public void setStateInvalid();
  public void setLacAndCid(int, int);
  public void setPsc(int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public void fillInNotifierBundle(android.os.Bundle);
  public boolean isEmpty();
public class android.test.AndroidTestCase extends junit.framework.TestCase {
  public android.test.AndroidTestCase();
  public void testAndroidTestCaseSetupProperly();
  public void setContext(android.content.Context);
  public android.content.Context getContext();
  public void setTestContext(android.content.Context);
  public android.content.Context getTestContext();
  public void assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String);
  public void assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String);
  public void assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String);
public class android.test.AndroidTestRunner extends junit.runner.BaseTestRunner {
  public android.test.AndroidTestRunner();
  public void setTestClassName(java.lang.String, java.lang.String);
  public void setTest(junit.framework.Test);
  public void clearTestListeners();
  public void addTestListener(junit.framework.TestListener);
  public java.util.List<junit.framework.TestCase> getTestCases();
  public java.lang.String getTestClassName();
  public junit.framework.TestResult getTestResult();
  public void runTest();
  public void runTest(junit.framework.TestResult);
  public void setContext(android.content.Context);
  public void setInstrumentation(android.app.Instrumentation);
  public void setInstrumentaiton(android.app.Instrumentation);
  public void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter);
  public void testStarted(java.lang.String);
  public void testEnded(java.lang.String);
  public void testFailed(int, junit.framework.Test, java.lang.Throwable);
public class android.test.ClassPathPackageInfo {
  public java.util.Set<android.test.ClassPathPackageInfo> getSubpackages();
  public java.util.Set<java.lang.Class<?>> getTopLevelClassesRecursive();
  public boolean equals(java.lang.Object);
  public int hashCode();
public class android.test.ClassPathPackageInfoSource {
  public static void setApkPaths(java.lang.String[]);
  public android.test.ClassPathPackageInfo getPackageInfo(java.lang.String);
  public void setClassLoader(java.lang.ClassLoader);
public interface android.test.FlakyTest extends java.lang.annotation.Annotation {
  public abstract int tolerance();
  public void run();
  public void run();
public class android.test.InstrumentationTestCase extends junit.framework.TestCase {
  public android.test.InstrumentationTestCase();
  public void injectInstrumentation(android.app.Instrumentation);
  public void injectInsrumentation(android.app.Instrumentation);
  public android.app.Instrumentation getInstrumentation();
  public final <T extends android/app/Activity> T launchActivity(java.lang.String, java.lang.Class<T>, android.os.Bundle);
  public final <T extends android/app/Activity> T launchActivityWithIntent(java.lang.String, java.lang.Class<T>, android.content.Intent);
  public void sendKeys(java.lang.String);
  public void sendKeys(int...);
  public void sendRepeatedKeys(int...);
  public android.test.InstrumentationTestRunner$StringResultPrinter(android.test.InstrumentationTestRunner, java.io.PrintStream);
  public android.test.InstrumentationTestRunner$SuiteAssignmentPrinter(android.test.InstrumentationTestRunner);
  public void startTest(junit.framework.Test);
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void endTest(junit.framework.Test);
  public android.test.InstrumentationTestRunner$WatcherResultPrinter(android.test.InstrumentationTestRunner, int);
  public void startTest(junit.framework.Test);
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void endTest(junit.framework.Test);
  public void writeBeginSnapshot(java.lang.String);
  public void writeEndSnapshot(android.os.Bundle);
  public void writeStartTiming(java.lang.String);
  public void writeStopTiming(android.os.Bundle);
  public void writeMeasurement(java.lang.String, long);
  public void writeMeasurement(java.lang.String, float);
  public void writeMeasurement(java.lang.String, java.lang.String);
public class android.test.InstrumentationTestRunner extends android.app.Instrumentation implements android.test.TestSuiteProvider {
  public android.test.InstrumentationTestRunner();
  public void onCreate(android.os.Bundle);
  public android.os.Bundle getBundle();
  public void onStart();
  public junit.framework.TestSuite getTestSuite();
  public junit.framework.TestSuite getAllTests();
  public java.lang.ClassLoader getLoader();
  public android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture(T);
  public boolean cancel(boolean);
  public boolean isCancelled();
  public boolean isDone();
  public android.test.IsolatedContext$MockAccountManager(android.test.IsolatedContext);
  public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean);
  public android.accounts.Account[] getAccounts();
  public android.accounts.AccountManagerFuture<android.accounts.Account[]> getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback<android.accounts.Account[]>, android.os.Handler);
public class android.test.IsolatedContext extends android.content.ContextWrapper {
  public android.test.IsolatedContext(android.content.ContentResolver, android.content.Context);
  public java.util.List<android.content.Intent> getAndClearBroadcastIntents();
  public android.content.ContentResolver getContentResolver();
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public void sendBroadcast(android.content.Intent);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public java.lang.Object getSystemService(java.lang.String);
  public java.io.File getFilesDir();
public class android.test.PackageInfoSources {
  public static android.test.ClassPathPackageInfoSource forClassPath(java.lang.ClassLoader);
public interface android.test.PerformanceCollectorTestCase {
  public abstract void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter);
public interface android.test.PerformanceTestCase$Intermediates {
  public abstract void setInternalIterations(int);
  public abstract void startTiming(boolean);
  public abstract void addIntermediate(java.lang.String);
  public abstract void addIntermediate(java.lang.String, long);
  public abstract void finishTiming(boolean);
public interface android.test.PerformanceTestCase {
  public abstract int startPerformance(android.test.PerformanceTestCase$Intermediates);
  public abstract boolean isPerformanceOnly();
  public android.content.res.Resources getResources();
  public java.io.File getDir(java.lang.String, int);
  public android.content.Context getApplicationContext();
public abstract class android.test.ProviderTestCase2<T extends android.content.ContentProvider> extends android.test.AndroidTestCase {
  public android.test.ProviderTestCase2(java.lang.Class<T>, java.lang.String);
  public T getProvider();
  public android.test.mock.MockContentResolver getMockContentResolver();
  public android.test.IsolatedContext getMockContext();
public class android.test.RenamingDelegatingContext extends android.content.ContextWrapper {
  public void makeExistingFilesAndDbsAccessible();
  java.lang.String publicNameFromDiskName(java.lang.String);
  public android.test.RenamingDelegatingContext(android.content.Context, java.lang.String);
  public android.test.RenamingDelegatingContext(android.content.Context, android.content.Context, java.lang.String);
  public java.lang.String getDatabasePrefix();
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public boolean deleteDatabase(java.lang.String);
  public java.io.File getDatabasePath(java.lang.String);
  public java.lang.String[] databaseList();
  public java.io.File getFileStreamPath(java.lang.String);
  public boolean deleteFile(java.lang.String);
  public java.lang.String[] fileList();
  public java.io.File getCacheDir();
public interface android.test.RepetitiveTest extends java.lang.annotation.Annotation {
  public abstract int numIterations();
public abstract class android.test.ServiceTestCase<T extends android.app.Service> extends android.test.AndroidTestCase {
  public android.test.ServiceTestCase(java.lang.Class<T>);
  public T getService();
  public void setApplication(android.app.Application);
  public android.app.Application getApplication();
  public android.content.Context getSystemContext();
public interface android.test.TestCase extends java.lang.Runnable {
  public abstract void setUp(android.content.Context);
  public abstract void tearDown();
public class android.test.TestCaseUtil {
  public static java.util.List<java.lang.String> getTestCaseNames(junit.framework.Test, boolean);
  public static java.util.List<? extends junit.framework.Test> getTests(junit.framework.Test, boolean);
  public static java.lang.String getTestName(junit.framework.Test);
  public static junit.framework.Test getTestAtIndex(junit.framework.TestSuite, int);
public class android.test.TestPrinter implements android.test.TestRunner$Listener,junit.framework.TestListener {
  public android.test.TestPrinter(java.lang.String, boolean);
  public void started(java.lang.String);
  public void finished(java.lang.String);
  public void performance(java.lang.String, long, int, java.util.List<android.test.TestRunner$IntermediateTime>);
  public void passed(java.lang.String);
  public void failed(java.lang.String, java.lang.Throwable);
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void endTest(junit.framework.Test);
  public void startTest(junit.framework.Test);
public class android.test.TestRunner$IntermediateTime {
  public android.test.TestRunner$IntermediateTime(java.lang.String, long);
public class android.test.TestRunner$JunitTestSuite extends junit.framework.TestSuite implements junit.framework.TestListener {
  public android.test.TestRunner$JunitTestSuite(android.test.TestRunner);
  public void run(junit.framework.TestResult);
  public void startTest(junit.framework.Test);
  public void endTest(junit.framework.Test);
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
public interface android.test.TestRunner$Listener {
  public abstract void started(java.lang.String);
  public abstract void finished(java.lang.String);
  public abstract void performance(java.lang.String, long, int, java.util.List<android.test.TestRunner$IntermediateTime>);
  public abstract void passed(java.lang.String);
  public abstract void failed(java.lang.String, java.lang.Throwable);
public class android.test.TestRunner implements android.test.PerformanceTestCase$Intermediates {
  public android.test.TestRunner(android.content.Context);
  public void addListener(android.test.TestRunner$Listener);
  public void startProfiling();
  public void finishProfiling();
  public void passed(java.lang.String);
  public void failed(java.lang.String, java.lang.Throwable);
  public int passedCount();
  public int failedCount();
  public void run(java.lang.String[]);
  public void setInternalIterations(int);
  public void startTiming(boolean);
  public void addIntermediate(java.lang.String);
  public void addIntermediate(java.lang.String, long);
  public void finishTiming(boolean);
  public void setPerformanceMode(int);
  public void run(java.lang.String);
  public void runSingleJunitTest(java.lang.String);
  public static java.lang.reflect.Method getChildrenMethod(java.lang.Class);
  public static java.lang.reflect.Method getChildrenMethod(android.content.Context, java.lang.String);
  public static java.lang.String[] getChildren(android.content.Context, java.lang.String);
  public static java.lang.String[] getChildren(java.lang.reflect.Method);
  public static java.lang.String[] getTestChildren(android.content.Context, java.lang.String);
  public static java.lang.String[] getTestChildren(java.lang.Class);
  public static java.lang.reflect.Method[] getAllTestMethods(java.lang.Class);
  public static int countJunitTests(java.lang.Class);
  public static boolean isTestSuite(android.content.Context, java.lang.String);
  public boolean isJunitTest(java.lang.String);
  public static int countTests(android.content.Context, java.lang.String);
  public static java.lang.String getTitle(java.lang.String);
public interface android.test.TestSuiteProvider {
  public abstract junit.framework.TestSuite getTestSuite();
public interface android.test.TimedTest extends java.lang.annotation.Annotation {
  public abstract boolean includeDetailedStats();
public interface android.test.UiThreadTest extends java.lang.annotation.Annotation {
public class android.test.mock.MockApplication extends android.app.Application {
  public android.test.mock.MockApplication();
  public void onCreate();
  public void onTerminate();
  public void onConfigurationChanged(android.content.res.Configuration);
public class android.test.mock.MockContentResolver extends android.content.ContentResolver {
  public android.test.mock.MockContentResolver();
  public void addProvider(java.lang.String, android.content.ContentProvider);
  public boolean releaseProvider(android.content.IContentProvider);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean);
public class android.test.mock.MockContext extends android.content.Context {
  public android.test.mock.MockContext();
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.pm.PackageManager getPackageManager();
  public android.content.ContentResolver getContentResolver();
  public android.os.Looper getMainLooper();
  public android.content.Context getApplicationContext();
  public void setTheme(int);
  public android.content.res.Resources$Theme getTheme();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.String getPackageName();
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public java.lang.String getPackageResourcePath();
  public java.io.File getSharedPrefsFile(java.lang.String);
  public java.lang.String getPackageCodePath();
  public android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public boolean deleteFile(java.lang.String);
  public java.io.File getFileStreamPath(java.lang.String);
  public java.lang.String[] fileList();
  public java.io.File getFilesDir();
  public java.io.File getExternalFilesDir(java.lang.String);
  public java.io.File getObbDir();
  public java.io.File getCacheDir();
  public java.io.File getExternalCacheDir();
  public java.io.File getDir(java.lang.String, int);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public java.io.File getDatabasePath(java.lang.String);
  public java.lang.String[] databaseList();
  public boolean deleteDatabase(java.lang.String);
  public android.graphics.drawable.Drawable getWallpaper();
  public android.graphics.drawable.Drawable peekWallpaper();
  public int getWallpaperDesiredMinimumWidth();
  public int getWallpaperDesiredMinimumHeight();
  public void clearWallpaper();
  public void startActivity(android.content.Intent);
  public void startActivities(android.content.Intent[]);
  public void sendBroadcast(android.content.Intent);
  public void sendBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyBroadcast(android.content.Intent);
  public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void removeStickyBroadcast(android.content.Intent);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ComponentName startService(android.content.Intent);
  public boolean stopService(android.content.Intent);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public void unbindService(android.content.ServiceConnection);
  public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public java.lang.Object getSystemService(java.lang.String);
  public int checkPermission(java.lang.String, int, int);
  public int checkCallingPermission(java.lang.String);
  public int checkCallingOrSelfPermission(java.lang.String);
  public void enforcePermission(java.lang.String, int, int, java.lang.String);
  public void enforceCallingPermission(java.lang.String, java.lang.String);
  public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public void grantUriPermission(java.lang.String, android.net.Uri, int);
  public void revokeUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkCallingUriPermission(android.net.Uri, int);
  public int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public boolean isRestricted();
  public boolean apply(android.test.suitebuilder.TestMethod);
  public boolean apply(java.lang.Object);
  public int compare(java.lang.Class<? extends junit.framework.TestCase>, java.lang.Class<? extends junit.framework.TestCase>);
  public int compare(java.lang.Object, java.lang.Object);
  public int compare(java.lang.Class<? extends junit.framework.TestCase>, java.lang.Class<? extends junit.framework.TestCase>);
  public int compare(java.lang.Object, java.lang.Object);
  public boolean apply(java.lang.Class);
  public boolean apply(java.lang.Object);
  public boolean apply(java.lang.reflect.Method);
  public boolean apply(java.lang.Object);
public class android.test.suitebuilder.TestGrouping {
  public android.test.suitebuilder.TestGrouping(java.util.Comparator<java.lang.Class<? extends junit.framework.TestCase>>);
  public java.util.List<android.test.suitebuilder.TestMethod> getTests();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.test.suitebuilder.TestGrouping addPackagesRecursive(java.lang.String...);
  public android.test.suitebuilder.TestGrouping removePackagesRecursive(java.lang.String...);
  public java.lang.String getFirstIncludedPackage();
  public void setClassLoader(java.lang.ClassLoader);
public class android.test.suitebuilder.TestMethod {
  public android.test.suitebuilder.TestMethod(java.lang.reflect.Method, java.lang.Class<? extends junit.framework.TestCase>);
  public android.test.suitebuilder.TestMethod(java.lang.String, java.lang.Class<? extends junit.framework.TestCase>);
  public android.test.suitebuilder.TestMethod(junit.framework.TestCase);
  public java.lang.String getName();
  public java.lang.String getEnclosingClassname();
  public <T extends java/lang/annotation/Annotation> T getAnnotation(java.lang.Class<T>);
  public java.lang.Class<? extends junit.framework.TestCase> getEnclosingClass();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public class android.test.suitebuilder.TestPredicates {
  public android.test.suitebuilder.TestPredicates();
public class android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests extends junit.framework.TestCase {
  public android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests(java.lang.Exception);
  public void testSuiteConstructionFailed();
public class android.test.suitebuilder.TestSuiteBuilder {
  public android.test.suitebuilder.TestSuiteBuilder(java.lang.Class);
  public android.test.suitebuilder.TestSuiteBuilder(java.lang.String, java.lang.ClassLoader);
  public android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String, java.lang.String, android.content.Context);
  public android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite);
  public android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String...);
  public android.test.suitebuilder.TestSuiteBuilder excludePackages(java.lang.String...);
  public android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>>);
  public final android.test.suitebuilder.TestSuiteBuilder includeAllPackagesUnderHere();
  public android.test.suitebuilder.TestSuiteBuilder named(java.lang.String);
  public final junit.framework.TestSuite build();
  public final android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>...);
public class android.test.suitebuilder.annotation.HasAnnotation implements com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> {
  public android.test.suitebuilder.annotation.HasAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public boolean apply(android.test.suitebuilder.TestMethod);
  public boolean apply(java.lang.Object);
  public android.test.suitebuilder.annotation.HasClassAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public boolean apply(android.test.suitebuilder.TestMethod);
  public boolean apply(java.lang.Object);
  public android.test.suitebuilder.annotation.HasMethodAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public boolean apply(android.test.suitebuilder.TestMethod);
  public boolean apply(java.lang.Object);
public interface android.test.suitebuilder.annotation.LargeTest extends java.lang.annotation.Annotation {
public interface android.test.suitebuilder.annotation.MediumTest extends java.lang.annotation.Annotation {
public interface android.test.suitebuilder.annotation.SmallTest extends java.lang.annotation.Annotation {
public interface android.test.suitebuilder.annotation.Smoke extends java.lang.annotation.Annotation {
public interface android.test.suitebuilder.annotation.Suppress extends java.lang.annotation.Annotation {
  public <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public int getSpanStart(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int nextSpanTransition(int, int, java.lang.Class);
public class android.text.AlteredCharSequence implements java.lang.CharSequence,android.text.GetChars {
  public static android.text.AlteredCharSequence make(java.lang.CharSequence, char[], int, int);
  public char charAt(int);
  public int length();
  public java.lang.CharSequence subSequence(int, int);
  public void getChars(int, int, char[], int);
  public java.lang.String toString();
  public static int bidi(int, char[], byte[], int, boolean);
  public static android.text.Layout$Directions directions(int, byte[], int, char[], int, int);
public class android.text.AndroidCharacter {
  public android.text.AndroidCharacter();
  public static native void getDirectionalities(char[], byte[], int);
  public static native int getEastAsianWidth(char);
  public static native void getEastAsianWidths(char[], int, int, byte[]);
  public static native boolean mirror(char[], int, int);
  public static native char getMirror(char);
public class android.text.Annotation implements android.text.ParcelableSpan {
  public android.text.Annotation(java.lang.String, java.lang.String);
  public android.text.Annotation(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getKey();
  public java.lang.String getValue();
public class android.text.AutoText {
  public static java.lang.String get(java.lang.CharSequence, int, int, android.view.View);
  public static int getSize(android.view.View);
public class android.text.BoringLayout$Metrics extends android.graphics.Paint$FontMetricsInt {
  public android.text.BoringLayout$Metrics();
  public java.lang.String toString();
public class android.text.BoringLayout extends android.text.Layout implements android.text.TextUtils$EllipsizeCallback {
  public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
  public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
  public android.text.BoringLayout(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public android.text.BoringLayout(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.BoringLayout$Metrics);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout$Metrics);
  public int getHeight();
  public int getLineCount();
  public int getLineTop(int);
  public int getLineDescent(int);
  public int getLineStart(int);
  public int getParagraphDirection(int);
  public boolean getLineContainsTab(int);
  public float getLineMax(int);
  public final android.text.Layout$Directions getLineDirections(int);
  public int getTopPadding();
  public int getBottomPadding();
  public int getEllipsisCount(int);
  public int getEllipsisStart(int);
  public int getEllipsizedWidth();
  public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int);
  public void ellipsized(int, int);
public abstract class android.text.ClipboardManager {
  public android.text.ClipboardManager();
  public abstract java.lang.CharSequence getText();
  public abstract void setText(java.lang.CharSequence);
  public abstract boolean hasText();
  public android.text.DynamicLayout$ChangeWatcher(android.text.DynamicLayout);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
public class android.text.DynamicLayout extends android.text.Layout {
  public android.text.DynamicLayout(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public android.text.DynamicLayout(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public android.text.DynamicLayout(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean, android.text.TextUtils$TruncateAt, int);
  public android.text.DynamicLayout(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float, boolean, android.text.TextUtils$TruncateAt, int);
  public int getLineCount();
  public int getLineTop(int);
  public int getLineDescent(int);
  public int getLineStart(int);
  public boolean getLineContainsTab(int);
  public int getParagraphDirection(int);
  public final android.text.Layout$Directions getLineDirections(int);
  public int getTopPadding();
  public int getBottomPadding();
  public int getEllipsizedWidth();
  public int getEllipsisStart(int);
  public int getEllipsisCount(int);
public class android.text.Editable$Factory {
  public android.text.Editable$Factory();
  public static android.text.Editable$Factory getInstance();
  public android.text.Editable newEditable(java.lang.CharSequence);
public interface android.text.Editable extends java.lang.CharSequence,android.text.GetChars,android.text.Spannable,java.lang.Appendable {
  public abstract android.text.Editable replace(int, int, java.lang.CharSequence, int, int);
  public abstract android.text.Editable replace(int, int, java.lang.CharSequence);
  public abstract android.text.Editable insert(int, java.lang.CharSequence, int, int);
  public abstract android.text.Editable insert(int, java.lang.CharSequence);
  public abstract android.text.Editable delete(int, int);
  public abstract android.text.Editable append(java.lang.CharSequence);
  public abstract android.text.Editable append(java.lang.CharSequence, int, int);
  public abstract android.text.Editable append(char);
  public abstract void clear();
  public abstract void clearSpans();
  public abstract void setFilters(android.text.InputFilter[]);
  public abstract android.text.InputFilter[] getFilters();
public interface android.text.GetChars extends java.lang.CharSequence {
  public abstract void getChars(int, int, char[], int);
public interface android.text.GraphicsOperations extends java.lang.CharSequence {
  public abstract void drawText(android.graphics.Canvas, int, int, float, float, android.graphics.Paint);
  public abstract void drawTextRun(android.graphics.Canvas, int, int, int, int, float, float, int, android.graphics.Paint);
  public abstract float measureText(int, int, android.graphics.Paint);
  public abstract int getTextWidths(int, int, float[], android.graphics.Paint);
  public abstract float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint);
  public abstract float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint, int);
  public abstract int getTextRunCursor(int, int, int, int, int, android.graphics.Paint);
public interface android.text.Html$ImageGetter {
  public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String);
public interface android.text.Html$TagHandler {
  public abstract void handleTag(boolean, java.lang.String, android.text.Editable, org.xml.sax.XMLReader);
public class android.text.Html {
  public static android.text.Spanned fromHtml(java.lang.String);
  public static android.text.Spanned fromHtml(java.lang.String, android.text.Html$ImageGetter, android.text.Html$TagHandler);
  public static java.lang.String toHtml(android.text.Spanned);
  public android.text.HtmlToSpannedConverter$Font(java.lang.String, java.lang.String);
  public android.text.HtmlToSpannedConverter$Header(int);
  public android.text.HtmlToSpannedConverter$Href(java.lang.String);
  public android.text.HtmlToSpannedConverter(java.lang.String, android.text.Html$ImageGetter, android.text.Html$TagHandler, org.ccil.cowan.tagsoup.Parser);
  public android.text.Spanned convert();
  public void setDocumentLocator(org.xml.sax.Locator);
public class android.text.InputFilter$AllCaps implements android.text.InputFilter {
  public android.text.InputFilter$AllCaps();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
public class android.text.InputFilter$LengthFilter implements android.text.InputFilter {
  public android.text.InputFilter$LengthFilter(int);
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
public interface android.text.InputFilter {
  public abstract java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
public interface android.text.InputType {
public final class android.text.Layout$Alignment extends java.lang.Enum<android.text.Layout$Alignment> {
  public static android.text.Layout$Alignment[] values();
  public static android.text.Layout$Alignment valueOf(java.lang.String);
public class android.text.Layout$Directions {
  public android.text.Layout$Ellipsizer(java.lang.CharSequence);
  public char charAt(int);
  public void getChars(int, int, char[], int);
  public int length();
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public android.text.Layout$SpannedEllipsizer(java.lang.CharSequence);
  public <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public int getSpanStart(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int nextSpanTransition(int, int, java.lang.Class);
  public java.lang.CharSequence subSequence(int, int);
  public static float nextDefaultStop(float, int);
public abstract class android.text.Layout {
  public static float getDesiredWidth(java.lang.CharSequence, android.text.TextPaint);
  public static float getDesiredWidth(java.lang.CharSequence, int, int, android.text.TextPaint);
  public void draw(android.graphics.Canvas);
  public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int);
  public final java.lang.CharSequence getText();
  public final android.text.TextPaint getPaint();
  public final int getWidth();
  public int getEllipsizedWidth();
  public final void increaseWidthTo(int);
  public int getHeight();
  public final android.text.Layout$Alignment getAlignment();
  public final float getSpacingMultiplier();
  public final float getSpacingAdd();
  public final android.text.TextDirectionHeuristic getTextDirectionHeuristic();
  public abstract int getLineCount();
  public int getLineBounds(int, android.graphics.Rect);
  public abstract int getLineTop(int);
  public abstract int getLineDescent(int);
  public abstract int getLineStart(int);
  public abstract int getParagraphDirection(int);
  public abstract boolean getLineContainsTab(int);
  public abstract android.text.Layout$Directions getLineDirections(int);
  public abstract int getTopPadding();
  public abstract int getBottomPadding();
  public boolean isLevelBoundary(int);
  public boolean isRtlCharAt(int);
  public float getPrimaryHorizontal(int);
  public float getSecondaryHorizontal(int);
  public float getLineLeft(int);
  public float getLineRight(int);
  public float getLineMax(int);
  public float getLineWidth(int);
  public int getLineForVertical(int);
  public int getLineForOffset(int);
  public int getOffsetForHorizontal(int, float);
  public final int getLineEnd(int);
  public int getLineVisibleEnd(int);
  public final int getLineBottom(int);
  public final int getLineBaseline(int);
  public final int getLineAscent(int);
  public int getOffsetToLeftOf(int);
  public int getOffsetToRightOf(int);
  public void getCursorPath(int, android.graphics.Path, java.lang.CharSequence);
  public void getSelectionPath(int, int, android.graphics.Path);
  public final android.text.Layout$Alignment getParagraphAlignment(int);
  public final int getParagraphLeft(int);
  public final int getParagraphRight(int);
  public abstract int getEllipsisStart(int);
  public abstract int getEllipsisCount(int);
public class android.text.NoCopySpan$Concrete implements android.text.NoCopySpan {
  public android.text.NoCopySpan$Concrete();
public interface android.text.NoCopySpan {
  public android.text.PackedIntVector(int);
  public int getValue(int, int);
  public void setValue(int, int, int);
  public void adjustValuesBelow(int, int, int);
  public void insertAt(int, int[]);
  public void deleteAt(int, int);
  public int size();
  public int width();
  public android.text.PackedObjectVector(int);
  public E getValue(int, int);
  public void setValue(int, int, E);
  public void insertAt(int, E[]);
  public void deleteAt(int, int);
  public int size();
  public int width();
  public void dump();
public interface android.text.ParcelableSpan extends android.os.Parcelable {
  public abstract int getSpanTypeId();
public interface android.text.Selection$PositionIterator {
  public abstract int preceding(int);
  public abstract int following(int);
public class android.text.Selection {
  public static final int getSelectionStart(java.lang.CharSequence);
  public static final int getSelectionEnd(java.lang.CharSequence);
  public static void setSelection(android.text.Spannable, int, int);
  public static final void setSelection(android.text.Spannable, int);
  public static final void selectAll(android.text.Spannable);
  public static final void extendSelection(android.text.Spannable, int);
  public static final void removeSelection(android.text.Spannable);
  public static boolean moveUp(android.text.Spannable, android.text.Layout);
  public static boolean moveDown(android.text.Spannable, android.text.Layout);
  public static boolean moveLeft(android.text.Spannable, android.text.Layout);
  public static boolean moveRight(android.text.Spannable, android.text.Layout);
  public static boolean extendUp(android.text.Spannable, android.text.Layout);
  public static boolean extendDown(android.text.Spannable, android.text.Layout);
  public static boolean extendLeft(android.text.Spannable, android.text.Layout);
  public static boolean extendRight(android.text.Spannable, android.text.Layout);
  public static boolean extendToLeftEdge(android.text.Spannable, android.text.Layout);
  public static boolean extendToRightEdge(android.text.Spannable, android.text.Layout);
  public static boolean moveToLeftEdge(android.text.Spannable, android.text.Layout);
  public static boolean moveToRightEdge(android.text.Spannable, android.text.Layout);
  public static boolean moveToPreceding(android.text.Spannable, android.text.Selection$PositionIterator, boolean);
  public static boolean moveToFollowing(android.text.Spannable, android.text.Selection$PositionIterator, boolean);
public interface android.text.SpanWatcher extends android.text.NoCopySpan {
  public abstract void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public abstract void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
  public abstract void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
public class android.text.Spannable$Factory {
  public android.text.Spannable$Factory();
  public static android.text.Spannable$Factory getInstance();
  public android.text.Spannable newSpannable(java.lang.CharSequence);
public interface android.text.Spannable extends android.text.Spanned {
  public abstract void setSpan(java.lang.Object, int, int, int);
  public abstract void removeSpan(java.lang.Object);
public class android.text.SpannableString extends android.text.SpannableStringInternal implements java.lang.CharSequence,android.text.GetChars,android.text.Spannable {
  public android.text.SpannableString(java.lang.CharSequence);
  public static android.text.SpannableString valueOf(java.lang.CharSequence);
  public void setSpan(java.lang.Object, int, int, int);
  public void removeSpan(java.lang.Object);
  public final java.lang.CharSequence subSequence(int, int);
  public int nextSpanTransition(int, int, java.lang.Class);
  public java.lang.Object[] getSpans(int, int, java.lang.Class);
  public int getSpanFlags(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanStart(java.lang.Object);
public class android.text.SpannableStringBuilder implements java.lang.CharSequence,android.text.GetChars,android.text.Spannable,android.text.Editable,java.lang.Appendable,android.text.GraphicsOperations {
  public android.text.SpannableStringBuilder();
  public android.text.SpannableStringBuilder(java.lang.CharSequence);
  public android.text.SpannableStringBuilder(java.lang.CharSequence, int, int);
  public static android.text.SpannableStringBuilder valueOf(java.lang.CharSequence);
  public char charAt(int);
  public int length();
  public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence, int, int);
  public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence);
  public android.text.SpannableStringBuilder delete(int, int);
  public void clear();
  public void clearSpans();
  public android.text.SpannableStringBuilder append(java.lang.CharSequence);
  public android.text.SpannableStringBuilder append(java.lang.CharSequence, int, int);
  public android.text.SpannableStringBuilder append(char);
  public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence);
  public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence, int, int);
  public void setSpan(java.lang.Object, int, int, int);
  public void removeSpan(java.lang.Object);
  public int getSpanStart(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public int nextSpanTransition(int, int, java.lang.Class);
  public java.lang.CharSequence subSequence(int, int);
  public void getChars(int, int, char[], int);
  public java.lang.String toString();
  public java.lang.String substring(int, int);
  public void drawText(android.graphics.Canvas, int, int, float, float, android.graphics.Paint);
  public void drawTextRun(android.graphics.Canvas, int, int, int, int, float, float, int, android.graphics.Paint);
  public float measureText(int, int, android.graphics.Paint);
  public int getTextWidths(int, int, float[], android.graphics.Paint);
  public float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint);
  public float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint, int);
  public int getTextRunCursor(int, int, int, int, int, android.graphics.Paint);
  public void setFilters(android.text.InputFilter[]);
  public android.text.InputFilter[] getFilters();
  public android.text.Editable append(char);
  public android.text.Editable append(java.lang.CharSequence, int, int);
  public android.text.Editable append(java.lang.CharSequence);
  public android.text.Editable delete(int, int);
  public android.text.Editable insert(int, java.lang.CharSequence);
  public android.text.Editable insert(int, java.lang.CharSequence, int, int);
  public android.text.Editable replace(int, int, java.lang.CharSequence);
  public android.text.Editable replace(int, int, java.lang.CharSequence, int, int);
  public final int length();
  public final char charAt(int);
  public final java.lang.String toString();
  public final void getChars(int, int, char[], int);
  public int getSpanStart(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public int nextSpanTransition(int, int, java.lang.Class);
public interface android.text.Spanned extends java.lang.CharSequence {
  public abstract <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public abstract int getSpanStart(java.lang.Object);
  public abstract int getSpanEnd(java.lang.Object);
  public abstract int getSpanFlags(java.lang.Object);
  public abstract int nextSpanTransition(int, int, java.lang.Class);
public final class android.text.SpannedString extends android.text.SpannableStringInternal implements java.lang.CharSequence,android.text.GetChars,android.text.Spanned {
  public android.text.SpannedString(java.lang.CharSequence);
  public java.lang.CharSequence subSequence(int, int);
  public static android.text.SpannedString valueOf(java.lang.CharSequence);
  public int nextSpanTransition(int, int, java.lang.Class);
  public java.lang.Object[] getSpans(int, int, java.lang.Class);
  public int getSpanFlags(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanStart(java.lang.Object);
public class android.text.StaticLayout extends android.text.Layout {
  public android.text.StaticLayout(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public android.text.StaticLayout(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float, boolean);
  public android.text.StaticLayout(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public android.text.StaticLayout(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float, boolean);
  public android.text.StaticLayout(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean, android.text.TextUtils$TruncateAt, int);
  public android.text.StaticLayout(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float, boolean, android.text.TextUtils$TruncateAt, int, int);
  public int getLineForVertical(int);
  public int getLineCount();
  public int getLineTop(int);
  public int getLineDescent(int);
  public int getLineStart(int);
  public int getParagraphDirection(int);
  public boolean getLineContainsTab(int);
  public final android.text.Layout$Directions getLineDirections(int);
  public int getTopPadding();
  public int getBottomPadding();
  public int getEllipsisCount(int);
  public int getEllipsisStart(int);
  public int getEllipsizedWidth();
public interface android.text.TextDirectionHeuristic {
  public abstract boolean isRtl(char[], int, int);
public class android.text.TextDirectionHeuristics$AnyStrong implements android.text.TextDirectionHeuristics$TextDirectionAlgorithm {
  public android.text.TextDirectionHeuristics$TriState checkRtl(char[], int, int);
public class android.text.TextDirectionHeuristics$FirstStrong implements android.text.TextDirectionHeuristics$TextDirectionAlgorithm {
  public android.text.TextDirectionHeuristics$TriState checkRtl(char[], int, int);
public interface android.text.TextDirectionHeuristics$TextDirectionAlgorithm {
  public abstract android.text.TextDirectionHeuristics$TriState checkRtl(char[], int, int);
public abstract class android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl implements android.text.TextDirectionHeuristic {
  public android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl(android.text.TextDirectionHeuristics$TextDirectionAlgorithm);
  public boolean isRtl(char[], int, int);
public class android.text.TextDirectionHeuristics$TextDirectionHeuristicLocale extends android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl {
  public android.text.TextDirectionHeuristics$TextDirectionHeuristicLocale();
  public static android.text.TextDirectionHeuristics$TriState[] values();
  public static android.text.TextDirectionHeuristics$TriState valueOf(java.lang.String);
public class android.text.TextDirectionHeuristics {
  public android.text.TextDirectionHeuristics();
  public void init(android.text.Spanned, int, int);
  public boolean hasSpansIntersecting(int, int);
  public void recycle();
public class android.text.TextPaint extends android.graphics.Paint {
  public android.text.TextPaint();
  public android.text.TextPaint(int);
  public android.text.TextPaint(android.graphics.Paint);
  public void set(android.text.TextPaint);
  public void setUnderlineText(int, float);
public interface android.text.TextUtils$EllipsizeCallback {
  public abstract void ellipsized(int, int);
  public android.text.TextUtils$Reverser(java.lang.CharSequence, int, int);
  public int length();
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public char charAt(int);
  public void getChars(int, int, char[], int);
public class android.text.TextUtils$SimpleStringSplitter implements android.text.TextUtils$StringSplitter, java.util.Iterator<java.lang.String> {
  public android.text.TextUtils$SimpleStringSplitter(char);
  public void setString(java.lang.String);
  public java.util.Iterator<java.lang.String> iterator();
  public boolean hasNext();
  public java.lang.String next();
  public void remove();
  public java.lang.Object next();
public interface android.text.TextUtils$StringSplitter extends java.lang.Iterable<java.lang.String> {
  public abstract void setString(java.lang.String);
public final class android.text.TextUtils$TruncateAt extends java.lang.Enum<android.text.TextUtils$TruncateAt> {
  public static android.text.TextUtils$TruncateAt[] values();
  public static android.text.TextUtils$TruncateAt valueOf(java.lang.String);
public class android.text.TextUtils {
  public static void getChars(java.lang.CharSequence, int, int, char[], int);
  public static int indexOf(java.lang.CharSequence, char);
  public static int indexOf(java.lang.CharSequence, char, int);
  public static int indexOf(java.lang.CharSequence, char, int, int);
  public static int lastIndexOf(java.lang.CharSequence, char);
  public static int lastIndexOf(java.lang.CharSequence, char, int);
  public static int lastIndexOf(java.lang.CharSequence, char, int, int);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int);
  public static boolean regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int);
  public static java.lang.String substring(java.lang.CharSequence, int, int);
  public static java.lang.CharSequence join(java.lang.Iterable<java.lang.CharSequence>);
  public static java.lang.String join(java.lang.CharSequence, java.lang.Object[]);
  public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable);
  public static java.lang.String[] split(java.lang.String, java.lang.String);
  public static java.lang.String[] split(java.lang.String, java.util.regex.Pattern);
  public static java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence);
  public static boolean isEmpty(java.lang.CharSequence);
  public static int getTrimmedLength(java.lang.CharSequence);
  public static boolean equals(java.lang.CharSequence, java.lang.CharSequence);
  public static java.lang.CharSequence getReverse(java.lang.CharSequence, int, int);
  public static void writeToParcel(java.lang.CharSequence, android.os.Parcel, int);
  public static void dumpSpans(java.lang.CharSequence, android.util.Printer, java.lang.String);
  public static java.lang.CharSequence replace(java.lang.CharSequence, java.lang.String[], java.lang.CharSequence[]);
  public static java.lang.CharSequence expandTemplate(java.lang.CharSequence, java.lang.CharSequence...);
  public static int getOffsetBefore(java.lang.CharSequence, int);
  public static int getOffsetAfter(java.lang.CharSequence, int);
  public static void copySpansFrom(android.text.Spanned, int, int, java.lang.Class, android.text.Spannable, int);
  public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt);
  public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback);
  public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback, android.text.TextDirectionHeuristic, java.lang.String);
  public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String);
  public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String, android.text.TextDirectionHeuristic);
  public static java.lang.String htmlEncode(java.lang.String);
  public static java.lang.CharSequence concat(java.lang.CharSequence...);
  public static boolean isGraphic(java.lang.CharSequence);
  public static boolean isGraphic(char);
  public static boolean isDigitsOnly(java.lang.CharSequence);
  public static boolean isPrintableAscii(char);
  public static boolean isPrintableAsciiOnly(java.lang.CharSequence);
  public static int getCapsMode(java.lang.CharSequence, int, int);
  public static boolean delimitedStringContains(java.lang.String, char, java.lang.String);
  public static <T extends java/lang/Object> T[] removeEmptySpans(T[], android.text.Spanned, java.lang.Class<T>);
public interface android.text.TextWatcher extends android.text.NoCopySpan {
  public abstract void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public abstract void onTextChanged(java.lang.CharSequence, int, int, int);
  public abstract void afterTextChanged(android.text.Editable);
public class android.text.format.DateFormat {
  public android.text.format.DateFormat();
  public static boolean is24HourFormat(android.content.Context);
  public static final java.text.DateFormat getTimeFormat(android.content.Context);
  public static final java.text.DateFormat getDateFormat(android.content.Context);
  public static java.text.DateFormat getDateFormatForSetting(android.content.Context, java.lang.String);
  public static final java.text.DateFormat getLongDateFormat(android.content.Context);
  public static final java.text.DateFormat getMediumDateFormat(android.content.Context);
  public static final char[] getDateFormatOrder(android.content.Context);
  public static final java.lang.CharSequence format(java.lang.CharSequence, long);
  public static final java.lang.CharSequence format(java.lang.CharSequence, java.util.Date);
  public static final java.lang.CharSequence format(java.lang.CharSequence, java.util.Calendar);
public class android.text.format.DateUtils {
  public android.text.format.DateUtils();
  public static java.lang.String getDayOfWeekString(int, int);
  public static java.lang.String getAMPMString(int);
  public static java.lang.String getMonthString(int, int);
  public static java.lang.String getStandaloneMonthString(int, int);
  public static java.lang.CharSequence getRelativeTimeSpanString(long);
  public static java.lang.CharSequence getRelativeTimeSpanString(long, long, long);
  public static java.lang.CharSequence getRelativeTimeSpanString(long, long, long, int);
  public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context, long, long, long, int);
  public static final java.lang.CharSequence timeString(long);
  public static java.lang.String formatElapsedTime(long);
  public static java.lang.String formatElapsedTime(java.lang.StringBuilder, long);
  public static final java.lang.CharSequence formatSameDayTime(long, long, int, int);
  public static java.util.Calendar newCalendar(boolean);
  public static boolean isToday(long);
  public static boolean isUTC(java.lang.String);
  public static java.lang.String writeDateTime(java.util.Calendar);
  public static java.lang.String writeDateTime(java.util.Calendar, boolean);
  public static java.lang.String writeDateTime(java.util.Calendar, java.lang.StringBuilder);
  public static void assign(java.util.Calendar, java.util.Calendar);
  public static java.lang.String formatDateRange(android.content.Context, long, long, int);
  public static java.util.Formatter formatDateRange(android.content.Context, java.util.Formatter, long, long, int);
  public static java.util.Formatter formatDateRange(android.content.Context, java.util.Formatter, long, long, int, java.lang.String);
  public static java.lang.String formatDateTime(android.content.Context, long, int);
  public static java.lang.CharSequence getRelativeTimeSpanString(android.content.Context, long, boolean);
  public static java.lang.CharSequence getRelativeTimeSpanString(android.content.Context, long);
public final class android.text.format.Formatter {
  public android.text.format.Formatter();
  public static java.lang.String formatFileSize(android.content.Context, long);
  public static java.lang.String formatShortFileSize(android.content.Context, long);
  public static java.lang.String formatIpAddress(int);
public class android.text.format.Time {
  public android.text.format.Time(java.lang.String);
  public android.text.format.Time();
  public android.text.format.Time(android.text.format.Time);
  public native long normalize(boolean);
  public native void switchTimezone(java.lang.String);
  public int getActualMaximum(int);
  public void clear(java.lang.String);
  public static int compare(android.text.format.Time, android.text.format.Time);
  public java.lang.String format(java.lang.String);
  public native java.lang.String toString();
  public boolean parse(java.lang.String);
  public boolean parse3339(java.lang.String);
  public static java.lang.String getCurrentTimezone();
  public native void setToNow();
  public native long toMillis(boolean);
  public native void set(long);
  public native java.lang.String format2445();
  public void set(android.text.format.Time);
  public void set(int, int, int, int, int, int);
  public void set(int, int, int);
  public boolean before(android.text.format.Time);
  public boolean after(android.text.format.Time);
  public int getWeekNumber();
  public java.lang.String format3339(boolean);
  public static boolean isEpoch(android.text.format.Time);
  public static int getJulianDay(long, long);
  public long setJulianDay(int);
  public static int getWeeksSinceEpochFromJulianDay(int, int);
  public static int getJulianMondayFromWeeksSinceEpoch(int);
public class android.text.method.AllCapsTransformationMethod implements android.text.method.TransformationMethod2 {
  public android.text.method.AllCapsTransformationMethod(android.content.Context);
  public java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
  public void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
  public void setLengthChangesAllowed(boolean);
public class android.text.method.ArrowKeyMovementMethod extends android.text.method.BaseMovementMethod implements android.text.method.MovementMethod {
  public android.text.method.ArrowKeyMovementMethod();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public boolean canSelectArbitrarily();
  public void initialize(android.widget.TextView, android.text.Spannable);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  public static android.text.method.MovementMethod getInstance();
public abstract class android.text.method.BaseKeyListener extends android.text.method.MetaKeyKeyListener implements android.text.method.KeyListener {
  public android.text.method.BaseKeyListener();
  public boolean backspace(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean forwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
public class android.text.method.BaseMovementMethod implements android.text.method.MovementMethod {
  public android.text.method.BaseMovementMethod();
  public boolean canSelectArbitrarily();
  public void initialize(android.widget.TextView, android.text.Spannable);
  public boolean onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.widget.TextView, android.text.Spannable, android.view.KeyEvent);
  public boolean onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public boolean onTrackballEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public android.text.method.CharacterPickerDialog$OptionsAdapter(android.text.method.CharacterPickerDialog, android.content.Context);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public final int getCount();
  public final java.lang.Object getItem(int);
  public final long getItemId(int);
public class android.text.method.CharacterPickerDialog extends android.app.Dialog implements android.widget.AdapterView$OnItemClickListener,android.view.View$OnClickListener {
  public android.text.method.CharacterPickerDialog(android.content.Context, android.view.View, android.text.Editable, java.lang.String, boolean);
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  public void onClick(android.view.View);
public class android.text.method.DateKeyListener extends android.text.method.NumberKeyListener {
  public android.text.method.DateKeyListener();
  public int getInputType();
  public static android.text.method.DateKeyListener getInstance();
public class android.text.method.DateTimeKeyListener extends android.text.method.NumberKeyListener {
  public android.text.method.DateTimeKeyListener();
  public int getInputType();
  public static android.text.method.DateTimeKeyListener getInstance();
public class android.text.method.DialerKeyListener extends android.text.method.NumberKeyListener {
  public android.text.method.DialerKeyListener();
  public static android.text.method.DialerKeyListener getInstance();
  public int getInputType();
public class android.text.method.DigitsKeyListener extends android.text.method.NumberKeyListener {
  public android.text.method.DigitsKeyListener();
  public android.text.method.DigitsKeyListener(boolean, boolean);
  public static android.text.method.DigitsKeyListener getInstance();
  public static android.text.method.DigitsKeyListener getInstance(boolean, boolean);
  public static android.text.method.DigitsKeyListener getInstance(java.lang.String);
  public int getInputType();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
public interface android.text.method.KeyListener {
  public abstract int getInputType();
  public abstract boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public abstract boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public abstract boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
  public abstract void clearMetaKeyState(android.view.View, android.text.Editable, int);
public class android.text.method.LinkMovementMethod extends android.text.method.ScrollingMovementMethod {
  public android.text.method.LinkMovementMethod();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void initialize(android.widget.TextView, android.text.Spannable);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  public static android.text.method.MovementMethod getInstance();
public abstract class android.text.method.MetaKeyKeyListener {
  public android.text.method.MetaKeyKeyListener();
  public static void resetMetaState(android.text.Spannable);
  public static final int getMetaState(java.lang.CharSequence);
  public static final int getMetaState(java.lang.CharSequence, int);
  public static void adjustMetaAfterKeypress(android.text.Spannable);
  public static boolean isMetaTracker(java.lang.CharSequence, java.lang.Object);
  public static boolean isSelectingMetaTracker(java.lang.CharSequence, java.lang.Object);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public static void startSelecting(android.view.View, android.text.Spannable);
  public static void stopSelecting(android.view.View, android.text.Spannable);
  public boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public void clearMetaKeyState(android.view.View, android.text.Editable, int);
  public static void clearMetaKeyState(android.text.Editable, int);
  public static long resetLockedMeta(long);
  public static final int getMetaState(long);
  public static final int getMetaState(long, int);
  public static long adjustMetaAfterKeypress(long);
  public static long handleKeyDown(long, int, android.view.KeyEvent);
  public static long handleKeyUp(long, int, android.view.KeyEvent);
  public long clearMetaKeyState(long, int);
public interface android.text.method.MovementMethod {
  public abstract void initialize(android.widget.TextView, android.text.Spannable);
  public abstract boolean onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public abstract boolean onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public abstract boolean onKeyOther(android.widget.TextView, android.text.Spannable, android.view.KeyEvent);
  public abstract void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  public abstract boolean onTrackballEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract boolean onGenericMotionEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract boolean canSelectArbitrarily();
  public android.text.method.MultiTapKeyListener$Timeout(android.text.method.MultiTapKeyListener, android.text.Editable);
  public void run();
public class android.text.method.MultiTapKeyListener extends android.text.method.BaseKeyListener implements android.text.SpanWatcher {
  public android.text.method.MultiTapKeyListener(android.text.method.TextKeyListener$Capitalize, boolean);
  public static android.text.method.MultiTapKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public int getInputType();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
public abstract class android.text.method.NumberKeyListener extends android.text.method.BaseKeyListener implements android.text.InputFilter {
  public android.text.method.NumberKeyListener();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public android.text.method.PasswordTransformationMethod$PasswordCharSequence(java.lang.CharSequence);
  public int length();
  public char charAt(int);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public void getChars(int, int, char[], int);
  public android.text.method.PasswordTransformationMethod$ViewReference(android.view.View);
  public android.text.method.PasswordTransformationMethod$Visible(android.text.Spannable, android.text.method.PasswordTransformationMethod);
  public void run();
public class android.text.method.PasswordTransformationMethod implements android.text.method.TransformationMethod,android.text.TextWatcher {
  public android.text.method.PasswordTransformationMethod();
  public java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
  public static android.text.method.PasswordTransformationMethod getInstance();
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
  public android.text.method.QwertyKeyListener$Replaced(char[]);
public class android.text.method.QwertyKeyListener extends android.text.method.BaseKeyListener {
  public android.text.method.QwertyKeyListener(android.text.method.TextKeyListener$Capitalize, boolean);
  public static android.text.method.QwertyKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public static android.text.method.QwertyKeyListener getInstanceForFullKeyboard();
  public int getInputType();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public static void markAsReplaced(android.text.Spannable, int, int, java.lang.String);
  public android.text.method.ReplacementTransformationMethod$ReplacementCharSequence(java.lang.CharSequence, char[], char[]);
  public int length();
  public char charAt(int);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public void getChars(int, int, char[], int);
  public android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence(android.text.Spanned, char[], char[]);
  public java.lang.CharSequence subSequence(int, int);
  public <T extends java/lang/Object> T[] getSpans(int, int, java.lang.Class<T>);
  public int getSpanStart(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int nextSpanTransition(int, int, java.lang.Class);
public abstract class android.text.method.ReplacementTransformationMethod implements android.text.method.TransformationMethod {
  public android.text.method.ReplacementTransformationMethod();
  public java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
  public void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
public class android.text.method.ScrollingMovementMethod extends android.text.method.BaseMovementMethod implements android.text.method.MovementMethod {
  public android.text.method.ScrollingMovementMethod();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  public static android.text.method.MovementMethod getInstance();
public class android.text.method.SingleLineTransformationMethod extends android.text.method.ReplacementTransformationMethod {
  public android.text.method.SingleLineTransformationMethod();
  public static android.text.method.SingleLineTransformationMethod getInstance();
public final class android.text.method.TextKeyListener$Capitalize extends java.lang.Enum<android.text.method.TextKeyListener$Capitalize> {
  public static android.text.method.TextKeyListener$Capitalize[] values();
  public static android.text.method.TextKeyListener$Capitalize valueOf(java.lang.String);
  public int getInputType();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
  public void clearMetaKeyState(android.view.View, android.text.Editable, int);
  public static android.text.method.TextKeyListener$NullKeyListener getInstance();
  public android.text.method.TextKeyListener$SettingsObserver(android.text.method.TextKeyListener);
  public void onChange(boolean);
public class android.text.method.TextKeyListener extends android.text.method.BaseKeyListener implements android.text.SpanWatcher {
  public android.text.method.TextKeyListener(android.text.method.TextKeyListener$Capitalize, boolean);
  public static android.text.method.TextKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public static android.text.method.TextKeyListener getInstance();
  public static boolean shouldCap(android.text.method.TextKeyListener$Capitalize, java.lang.CharSequence, int);
  public int getInputType();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
  public static void clear(android.text.Editable);
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public void release();
public class android.text.method.TimeKeyListener extends android.text.method.NumberKeyListener {
  public android.text.method.TimeKeyListener();
  public int getInputType();
  public static android.text.method.TimeKeyListener getInstance();
  public android.text.method.Touch$DragState(float, float, int, int);
public class android.text.method.Touch {
  public static void scrollTo(android.widget.TextView, android.text.Layout, int, int);
  public static boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public static int getInitialScrollX(android.widget.TextView, android.text.Spannable);
  public static int getInitialScrollY(android.widget.TextView, android.text.Spannable);
public interface android.text.method.TransformationMethod {
  public abstract java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
  public abstract void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
public interface android.text.method.TransformationMethod2 extends android.text.method.TransformationMethod {
  public abstract void setLengthChangesAllowed(boolean);
public class android.text.method.WordIterator implements android.text.Selection$PositionIterator {
  public android.text.method.WordIterator();
  public android.text.method.WordIterator(java.util.Locale);
  public void setCharSequence(java.lang.CharSequence, int, int);
  public int preceding(int);
  public int following(int);
  public int getBeginning(int);
  public int getEnd(int);
public class android.text.style.AbsoluteSizeSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.AbsoluteSizeSpan(int);
  public android.text.style.AbsoluteSizeSpan(int, boolean);
  public android.text.style.AbsoluteSizeSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getSize();
  public boolean getDip();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.AlignmentSpan$Standard implements android.text.style.AlignmentSpan,android.text.ParcelableSpan {
  public android.text.style.AlignmentSpan$Standard(android.text.Layout$Alignment);
  public android.text.style.AlignmentSpan$Standard(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.text.Layout$Alignment getAlignment();
public interface android.text.style.AlignmentSpan extends android.text.style.ParagraphStyle {
  public abstract android.text.Layout$Alignment getAlignment();
public class android.text.style.BackgroundColorSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance,android.text.ParcelableSpan {
  public android.text.style.BackgroundColorSpan(int);
  public android.text.style.BackgroundColorSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getBackgroundColor();
  public void updateDrawState(android.text.TextPaint);
public class android.text.style.BulletSpan implements android.text.style.LeadingMarginSpan,android.text.ParcelableSpan {
  public android.text.style.BulletSpan();
  public android.text.style.BulletSpan(int);
  public android.text.style.BulletSpan(int, int);
  public android.text.style.BulletSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getLeadingMargin(boolean);
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
  public android.text.style.CharacterStyle$Passthrough(android.text.style.CharacterStyle);
  public void updateDrawState(android.text.TextPaint);
  public android.text.style.CharacterStyle getUnderlying();
public abstract class android.text.style.CharacterStyle {
  public android.text.style.CharacterStyle();
  public abstract void updateDrawState(android.text.TextPaint);
  public static android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle);
  public android.text.style.CharacterStyle getUnderlying();
public abstract class android.text.style.ClickableSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance {
  public android.text.style.ClickableSpan();
  public abstract void onClick(android.view.View);
  public void updateDrawState(android.text.TextPaint);
public abstract class android.text.style.DynamicDrawableSpan extends android.text.style.ReplacementSpan {
  public android.text.style.DynamicDrawableSpan();
  public int getVerticalAlignment();
  public abstract android.graphics.drawable.Drawable getDrawable();
  public int getSize(android.graphics.Paint, java.lang.CharSequence, int, int, android.graphics.Paint$FontMetricsInt);
  public void draw(android.graphics.Canvas, java.lang.CharSequence, int, int, float, int, int, int, android.graphics.Paint);
public class android.text.style.EasyEditSpan implements android.text.ParcelableSpan {
  public android.text.style.EasyEditSpan();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getSpanTypeId();
public class android.text.style.ForegroundColorSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance,android.text.ParcelableSpan {
  public android.text.style.ForegroundColorSpan(int);
  public android.text.style.ForegroundColorSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getForegroundColor();
  public void updateDrawState(android.text.TextPaint);
public class android.text.style.ImageSpan extends android.text.style.DynamicDrawableSpan {
  public android.text.style.ImageSpan(android.graphics.Bitmap);
  public android.text.style.ImageSpan(android.graphics.Bitmap, int);
  public android.text.style.ImageSpan(android.content.Context, android.graphics.Bitmap);
  public android.text.style.ImageSpan(android.content.Context, android.graphics.Bitmap, int);
  public android.text.style.ImageSpan(android.graphics.drawable.Drawable);
  public android.text.style.ImageSpan(android.graphics.drawable.Drawable, int);
  public android.text.style.ImageSpan(android.graphics.drawable.Drawable, java.lang.String);
  public android.text.style.ImageSpan(android.graphics.drawable.Drawable, java.lang.String, int);
  public android.text.style.ImageSpan(android.content.Context, android.net.Uri);
  public android.text.style.ImageSpan(android.content.Context, android.net.Uri, int);
  public android.text.style.ImageSpan(android.content.Context, int);
  public android.text.style.ImageSpan(android.content.Context, int, int);
  public android.graphics.drawable.Drawable getDrawable();
  public java.lang.String getSource();
public interface android.text.style.LeadingMarginSpan$LeadingMarginSpan2 extends android.text.style.LeadingMarginSpan,android.text.style.WrapTogetherSpan {
  public abstract int getLeadingMarginLineCount();
public class android.text.style.LeadingMarginSpan$Standard implements android.text.style.LeadingMarginSpan,android.text.ParcelableSpan {
  public android.text.style.LeadingMarginSpan$Standard(int, int);
  public android.text.style.LeadingMarginSpan$Standard(int);
  public android.text.style.LeadingMarginSpan$Standard(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getLeadingMargin(boolean);
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
public interface android.text.style.LeadingMarginSpan extends android.text.style.ParagraphStyle {
  public abstract int getLeadingMargin(boolean);
  public abstract void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
public interface android.text.style.LineBackgroundSpan extends android.text.style.ParagraphStyle {
  public abstract void drawBackground(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, int);
public interface android.text.style.LineHeightSpan$WithDensity extends android.text.style.LineHeightSpan {
  public abstract void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt, android.text.TextPaint);
public interface android.text.style.LineHeightSpan extends android.text.style.ParagraphStyle,android.text.style.WrapTogetherSpan {
  public abstract void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt);
  public android.text.style.MetricAffectingSpan$Passthrough(android.text.style.MetricAffectingSpan);
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public android.text.style.MetricAffectingSpan getUnderlying();
  public android.text.style.CharacterStyle getUnderlying();
public abstract class android.text.style.MetricAffectingSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateLayout {
  public android.text.style.MetricAffectingSpan();
  public abstract void updateMeasureState(android.text.TextPaint);
  public android.text.style.MetricAffectingSpan getUnderlying();
  public android.text.style.CharacterStyle getUnderlying();
public interface android.text.style.ParagraphStyle {
public class android.text.style.QuoteSpan implements android.text.style.LeadingMarginSpan,android.text.ParcelableSpan {
  public android.text.style.QuoteSpan();
  public android.text.style.QuoteSpan(int);
  public android.text.style.QuoteSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getColor();
  public int getLeadingMargin(boolean);
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
public class android.text.style.RelativeSizeSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.RelativeSizeSpan(float);
  public android.text.style.RelativeSizeSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public float getSizeChange();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public abstract class android.text.style.ReplacementSpan extends android.text.style.MetricAffectingSpan {
  public android.text.style.ReplacementSpan();
  public abstract int getSize(android.graphics.Paint, java.lang.CharSequence, int, int, android.graphics.Paint$FontMetricsInt);
  public abstract void draw(android.graphics.Canvas, java.lang.CharSequence, int, int, float, int, int, int, android.graphics.Paint);
  public void updateMeasureState(android.text.TextPaint);
  public void updateDrawState(android.text.TextPaint);
public class android.text.style.ScaleXSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.ScaleXSpan(float);
  public android.text.style.ScaleXSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public float getScaleX();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.SpellCheckSpan implements android.text.ParcelableSpan {
  public android.text.style.SpellCheckSpan();
  public android.text.style.SpellCheckSpan(android.os.Parcel);
  public void setSpellCheckInProgress(boolean);
  public boolean isSpellCheckInProgress();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getSpanTypeId();
public class android.text.style.StrikethroughSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance,android.text.ParcelableSpan {
  public android.text.style.StrikethroughSpan();
  public android.text.style.StrikethroughSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void updateDrawState(android.text.TextPaint);
public class android.text.style.StyleSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.StyleSpan(int);
  public android.text.style.StyleSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getStyle();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.SubscriptSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.SubscriptSpan();
  public android.text.style.SubscriptSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.SuggestionRangeSpan extends android.text.style.CharacterStyle implements android.text.ParcelableSpan {
  public android.text.style.SuggestionRangeSpan();
  public android.text.style.SuggestionRangeSpan(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getSpanTypeId();
  public void setBackgroundColor(int);
  public void updateDrawState(android.text.TextPaint);
  public android.text.style.SuggestionSpan createFromParcel(android.os.Parcel);
  public android.text.style.SuggestionSpan[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.text.style.SuggestionSpan extends android.text.style.CharacterStyle implements android.text.ParcelableSpan {
  public android.text.style.SuggestionSpan(android.content.Context, java.lang.String[], int);
  public android.text.style.SuggestionSpan(java.util.Locale, java.lang.String[], int);
  public android.text.style.SuggestionSpan(android.content.Context, java.util.Locale, java.lang.String[], int, java.lang.Class<?>);
  public android.text.style.SuggestionSpan(android.os.Parcel);
  public java.lang.String[] getSuggestions();
  public java.lang.String getLocale();
  public java.lang.String getNotificationTargetClassName();
  public int getFlags();
  public void setFlags(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int getSpanTypeId();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void updateDrawState(android.text.TextPaint);
  public int getUnderlineColor();
public class android.text.style.SuperscriptSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.SuperscriptSpan();
  public android.text.style.SuperscriptSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.TabStopSpan$Standard implements android.text.style.TabStopSpan {
  public android.text.style.TabStopSpan$Standard(int);
  public int getTabStop();
public interface android.text.style.TabStopSpan extends android.text.style.ParagraphStyle {
  public abstract int getTabStop();
public class android.text.style.TextAppearanceSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.TextAppearanceSpan(android.content.Context, int);
  public android.text.style.TextAppearanceSpan(android.content.Context, int, int);
  public android.text.style.TextAppearanceSpan(java.lang.String, int, int, android.content.res.ColorStateList, android.content.res.ColorStateList);
  public android.text.style.TextAppearanceSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getFamily();
  public android.content.res.ColorStateList getTextColor();
  public android.content.res.ColorStateList getLinkTextColor();
  public int getTextSize();
  public int getTextStyle();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.TypefaceSpan extends android.text.style.MetricAffectingSpan implements android.text.ParcelableSpan {
  public android.text.style.TypefaceSpan(java.lang.String);
  public android.text.style.TypefaceSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getFamily();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
public class android.text.style.URLSpan extends android.text.style.ClickableSpan implements android.text.ParcelableSpan {
  public android.text.style.URLSpan(java.lang.String);
  public android.text.style.URLSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getURL();
  public void onClick(android.view.View);
public class android.text.style.UnderlineSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance,android.text.ParcelableSpan {
  public android.text.style.UnderlineSpan();
  public android.text.style.UnderlineSpan(android.os.Parcel);
  public int getSpanTypeId();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void updateDrawState(android.text.TextPaint);
public interface android.text.style.UpdateAppearance {
public interface android.text.style.UpdateLayout extends android.text.style.UpdateAppearance {
public interface android.text.style.WrapTogetherSpan extends android.text.style.ParagraphStyle {
  public final boolean acceptMatch(java.lang.CharSequence, int, int);
  public final boolean acceptMatch(java.lang.CharSequence, int, int);
  public final java.lang.String transformUrl(java.util.regex.Matcher, java.lang.String);
  public final int compare(android.text.util.LinkSpec, android.text.util.LinkSpec);
  public final boolean equals(java.lang.Object);
  public int compare(java.lang.Object, java.lang.Object);
public interface android.text.util.Linkify$MatchFilter {
  public abstract boolean acceptMatch(java.lang.CharSequence, int, int);
public interface android.text.util.Linkify$TransformFilter {
  public abstract java.lang.String transformUrl(java.util.regex.Matcher, java.lang.String);
public class android.text.util.Linkify {
  public android.text.util.Linkify();
  public static final boolean addLinks(android.text.Spannable, int);
  public static final boolean addLinks(android.widget.TextView, int);
  public static final void addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String);
  public static final void addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
  public static final boolean addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String);
  public static final boolean addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
public class android.util.AndroidException extends java.lang.Exception {
  public android.util.AndroidException();
  public android.util.AndroidException(java.lang.String);
  public android.util.AndroidException(java.lang.String, java.lang.Throwable);
  public android.util.AndroidException(java.lang.Exception);
public class android.util.AndroidRuntimeException extends java.lang.RuntimeException {
  public android.util.AndroidRuntimeException();
  public android.util.AndroidRuntimeException(java.lang.String);
  public android.util.AndroidRuntimeException(java.lang.String, java.lang.Throwable);
  public android.util.AndroidRuntimeException(java.lang.Exception);
public interface android.util.AttributeSet {
  public abstract int getAttributeCount();
  public abstract java.lang.String getAttributeName(int);
  public abstract java.lang.String getAttributeValue(int);
  public abstract java.lang.String getAttributeValue(java.lang.String, java.lang.String);
  public abstract java.lang.String getPositionDescription();
  public abstract int getAttributeNameResource(int);
  public abstract int getAttributeListValue(java.lang.String, java.lang.String, java.lang.String[], int);
  public abstract boolean getAttributeBooleanValue(java.lang.String, java.lang.String, boolean);
  public abstract int getAttributeResourceValue(java.lang.String, java.lang.String, int);
  public abstract int getAttributeIntValue(java.lang.String, java.lang.String, int);
  public abstract int getAttributeUnsignedIntValue(java.lang.String, java.lang.String, int);
  public abstract float getAttributeFloatValue(java.lang.String, java.lang.String, float);
  public abstract int getAttributeListValue(int, java.lang.String[], int);
  public abstract boolean getAttributeBooleanValue(int, boolean);
  public abstract int getAttributeResourceValue(int, int);
  public abstract int getAttributeIntValue(int, int);
  public abstract int getAttributeUnsignedIntValue(int, int);
  public abstract float getAttributeFloatValue(int, float);
  public abstract java.lang.String getIdAttribute();
  public abstract java.lang.String getClassAttribute();
  public abstract int getIdAttributeResourceValue(int);
  public abstract int getStyleAttribute();
  public abstract boolean process(byte[], int, int, boolean);
  public abstract int maxOutputSize(int);
  public android.util.Base64$Decoder(int, byte[]);
  public int maxOutputSize(int);
  public boolean process(byte[], int, int, boolean);
  public android.util.Base64$Encoder(int, byte[]);
  public int maxOutputSize(int);
  public boolean process(byte[], int, int, boolean);
public class android.util.Base64 {
  public static byte[] decode(java.lang.String, int);
  public static byte[] decode(byte[], int);
  public static byte[] decode(byte[], int, int, int);
  public static java.lang.String encodeToString(byte[], int);
  public static java.lang.String encodeToString(byte[], int, int, int);
  public static byte[] encode(byte[], int);
  public static byte[] encode(byte[], int, int, int);
public class android.util.Base64DataException extends java.io.IOException {
  public android.util.Base64DataException(java.lang.String);
public class android.util.Base64OutputStream extends java.io.FilterOutputStream {
  public android.util.Base64OutputStream(java.io.OutputStream, int);
  public android.util.Base64OutputStream(java.io.OutputStream, int, boolean);
public final class android.util.Config {
  public android.util.Config();
public class android.util.DebugUtils {
  public android.util.DebugUtils();
  public static boolean isObjectSelected(java.lang.Object);
  public static void buildShortClassTag(java.lang.Object, java.lang.StringBuilder);
public class android.util.DisplayMetrics {
  public android.util.DisplayMetrics();
  public void setTo(android.util.DisplayMetrics);
  public void setToDefaults();
  public java.lang.String toString();
public final class android.util.EventLog$Event {
  public int getProcessId();
  public int getThreadId();
  public long getTimeNanos();
  public int getTag();
  public synchronized java.lang.Object getData();
public class android.util.EventLog {
  public android.util.EventLog();
  public static native int writeEvent(int, int);
  public static native int writeEvent(int, long);
  public static native int writeEvent(int, java.lang.String);
  public static native int writeEvent(int, java.lang.Object...);
  public static java.lang.String getTagName(int);
  public static int getTagCode(java.lang.String);
  public T acquire();
  public void release(T);
public class android.util.FloatMath {
  public static native float floor(float);
  public static native float ceil(float);
  public static native float sin(float);
  public static native float cos(float);
  public static native float sqrt(float);
public abstract class android.util.FloatProperty<T> extends android.util.Property<T, java.lang.Float> {
  public android.util.FloatProperty(java.lang.String);
  public abstract void setValue(T, float);
  public final void set(T, java.lang.Float);
  public void set(java.lang.Object, java.lang.Object);
public abstract class android.util.IntProperty<T> extends android.util.Property<T, java.lang.Integer> {
  public android.util.IntProperty(java.lang.String);
  public abstract void setValue(T, int);
  public final void set(T, java.lang.Integer);
  public void set(java.lang.Object, java.lang.Object);
public final class android.util.JsonToken extends java.lang.Enum<android.util.JsonToken> {
  public static android.util.JsonToken[] values();
  public static android.util.JsonToken valueOf(java.lang.String);
public class android.util.LocaleUtil {
  public static int getLayoutDirectionFromLocale(java.util.Locale);
  public void onTerribleFailure(java.lang.String, android.util.Log$TerribleFailure);
public interface android.util.Log$TerribleFailureHandler {
  public abstract void onTerribleFailure(java.lang.String, android.util.Log$TerribleFailure);
public final class android.util.Log {
  public static int v(java.lang.String, java.lang.String);
  public static int v(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int d(java.lang.String, java.lang.String);
  public static int d(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int i(java.lang.String, java.lang.String);
  public static int i(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int w(java.lang.String, java.lang.String);
  public static int w(java.lang.String, java.lang.String, java.lang.Throwable);
  public static native boolean isLoggable(java.lang.String, int);
  public static int w(java.lang.String, java.lang.Throwable);
  public static int e(java.lang.String, java.lang.String);
  public static int e(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int wtf(java.lang.String, java.lang.String);
  public static int wtf(java.lang.String, java.lang.Throwable);
  public static int wtf(java.lang.String, java.lang.String, java.lang.Throwable);
  public static android.util.Log$TerribleFailureHandler setWtfHandler(android.util.Log$TerribleFailureHandler);
  public static java.lang.String getStackTraceString(java.lang.Throwable);
  public static int println(int, java.lang.String, java.lang.String);
  public static native int println_native(int, int, java.lang.String, java.lang.String);
public class android.util.LogWriter extends java.io.Writer {
  public android.util.LogWriter(int, java.lang.String);
  public android.util.LogWriter(int, java.lang.String, int);
  public void close();
  public void flush();
  public void write(char[], int, int);
public class android.util.LongSparseArray<E> {
  public android.util.LongSparseArray();
  public android.util.LongSparseArray(int);
  public long[] getKeys();
  public void setValues(long[], E);
  public E get(long);
  public E get(long, E);
  public void delete(long);
  public void remove(long);
  public void put(long, E);
  public int size();
  public long keyAt(int);
  public E valueAt(int);
  public void setValueAt(int, E);
  public int indexOfKey(long);
  public int indexOfValue(E);
  public void clear();
  public void append(long, E);
public class android.util.LruCache<K, V> {
  public android.util.LruCache(int);
  public final V get(K);
  public final V put(K, V);
  public final V remove(K);
  public final void evictAll();
  public final synchronized int size();
  public final synchronized int maxSize();
  public final synchronized int hitCount();
  public final synchronized int missCount();
  public final synchronized int createCount();
  public final synchronized int putCount();
  public final synchronized int evictionCount();
  public final synchronized java.util.Map<K, V> snapshot();
  public final synchronized java.lang.String toString();
public final class android.util.MathUtils {
  public static float abs(float);
  public static int constrain(int, int, int);
  public static float constrain(float, float, float);
  public static float log(float);
  public static float exp(float);
  public static float pow(float, float);
  public static float max(float, float);
  public static float max(int, int);
  public static float max(float, float, float);
  public static float max(int, int, int);
  public static float min(float, float);
  public static float min(int, int);
  public static float min(float, float, float);
  public static float min(int, int, int);
  public static float dist(float, float, float, float);
  public static float dist(float, float, float, float, float, float);
  public static float mag(float, float);
  public static float mag(float, float, float);
  public static float sq(float);
  public static float radians(float);
  public static float degrees(float);
  public static float acos(float);
  public static float asin(float);
  public static float atan(float);
  public static float atan2(float, float);
  public static float tan(float);
  public static float lerp(float, float, float);
  public static float norm(float, float, float);
  public static float map(float, float, float, float, float);
  public static int random(int);
  public static int random(int, int);
  public static float random(float);
  public static float random(float, float);
  public static void randomSeed(long);
public class android.util.NoSuchPropertyException extends java.lang.RuntimeException {
  public android.util.NoSuchPropertyException(java.lang.String);
public class android.util.Pair<F, S> {
  public android.util.Pair(F, S);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public static <A extends java/lang/Object, B extends java/lang/Object> android.util.Pair<A, B> create(A, B);
public class android.util.Patterns {
  public static final java.lang.String concatGroups(java.util.regex.Matcher);
  public static final java.lang.String digitsAndPlusOnly(java.util.regex.Matcher);
public interface android.util.Pool<T extends android.util.Poolable<T>> {
  public abstract T acquire();
  public abstract void release(T);
public interface android.util.Poolable<T> {
  public abstract void setNextPoolable(T);
  public abstract T getNextPoolable();
  public abstract boolean isPooled();
  public abstract void setPooled(boolean);
public interface android.util.PoolableManager<T extends android.util.Poolable<T>> {
  public abstract T newInstance();
  public abstract void onAcquired(T);
  public abstract void onReleased(T);
public class android.util.Pools {
  public static <T extends android/util/Poolable<T>> android.util.Pool<T> simplePool(android.util.PoolableManager<T>);
  public static <T extends android/util/Poolable<T>> android.util.Pool<T> finitePool(android.util.PoolableManager<T>, int);
  public static <T extends android/util/Poolable<T>> android.util.Pool<T> synchronizedPool(android.util.Pool<T>);
  public static <T extends android/util/Poolable<T>> android.util.Pool<T> synchronizedPool(android.util.Pool<T>, java.lang.Object);
public class android.util.PrefixPrinter implements android.util.Printer {
  public static android.util.Printer create(android.util.Printer, java.lang.String);
  public void println(java.lang.String);
public class android.util.PrintWriterPrinter implements android.util.Printer {
  public android.util.PrintWriterPrinter(java.io.PrintWriter);
  public void println(java.lang.String);
public interface android.util.Printer {
  public abstract void println(java.lang.String);
public abstract class android.util.Property<T, V> {
  public static <T extends java/lang/Object, V extends java/lang/Object> android.util.Property<T, V> of(java.lang.Class<T>, java.lang.Class<V>, java.lang.String);
  public android.util.Property(java.lang.Class<V>, java.lang.String);
  public boolean isReadOnly();
  public void set(T, V);
  public abstract V get(T);
  public java.lang.String getName();
  public java.lang.Class<V> getType();
  public android.util.ReflectiveProperty(java.lang.Class<T>, java.lang.Class<V>, java.lang.String);
  public void set(T, V);
  public V get(T);
  public boolean isReadOnly();
public abstract class android.util.Singleton<T> {
  public android.util.Singleton();
  public final T get();
public final class android.util.Slog {
  public static int v(java.lang.String, java.lang.String);
  public static int v(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int d(java.lang.String, java.lang.String);
  public static int d(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int i(java.lang.String, java.lang.String);
  public static int i(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int w(java.lang.String, java.lang.String);
  public static int w(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int w(java.lang.String, java.lang.Throwable);
  public static int e(java.lang.String, java.lang.String);
  public static int e(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int println(int, java.lang.String, java.lang.String);
public class android.util.SparseArray<E> implements java.lang.Cloneable {
  public android.util.SparseArray();
  public android.util.SparseArray(int);
  public android.util.SparseArray<E> clone();
  public E get(int);
  public E get(int, E);
  public void delete(int);
  public void remove(int);
  public void removeAt(int);
  public void put(int, E);
  public int size();
  public int keyAt(int);
  public E valueAt(int);
  public void setValueAt(int, E);
  public int indexOfKey(int);
  public int indexOfValue(E);
  public void clear();
  public void append(int, E);
public class android.util.SparseBooleanArray implements java.lang.Cloneable {
  public android.util.SparseBooleanArray();
  public android.util.SparseBooleanArray(int);
  public android.util.SparseBooleanArray clone();
  public boolean get(int);
  public boolean get(int, boolean);
  public void delete(int);
  public void put(int, boolean);
  public int size();
  public int keyAt(int);
  public boolean valueAt(int);
  public int indexOfKey(int);
  public int indexOfValue(boolean);
  public void clear();
  public void append(int, boolean);
public class android.util.SparseIntArray implements java.lang.Cloneable {
  public android.util.SparseIntArray();
  public android.util.SparseIntArray(int);
  public android.util.SparseIntArray clone();
  public int get(int);
  public int get(int, int);
  public void delete(int);
  public void removeAt(int);
  public void put(int, int);
  public int size();
  public int keyAt(int);
  public int valueAt(int);
  public int indexOfKey(int);
  public int indexOfValue(int);
  public void clear();
  public void append(int, int);
public class android.util.StateSet {
  public android.util.StateSet();
  public static boolean isWildCard(int[]);
  public static boolean stateSetMatches(int[], int[]);
  public static boolean stateSetMatches(int[], int);
  public static int[] trimStateSet(int[], int);
  public static java.lang.String dump(int[]);
  public android.util.SynchronizedPool(android.util.Pool<T>);
  public android.util.SynchronizedPool(android.util.Pool<T>, java.lang.Object);
  public T acquire();
  public void release(T);
public class android.util.TimeFormatException extends java.lang.RuntimeException {
public class android.util.TimeUtils {
  public android.util.TimeUtils();
  public static java.util.TimeZone getTimeZone(int, boolean, long, java.lang.String);
  public static java.lang.String getTimeZoneDatabaseVersion();
  public static void formatDuration(long, java.lang.StringBuilder);
  public static void formatDuration(long, java.io.PrintWriter, int);
  public static void formatDuration(long, java.io.PrintWriter);
  public static void formatDuration(long, long, java.io.PrintWriter);
public class android.util.TypedValue {
  public android.util.TypedValue();
  public final float getFloat();
  public static float complexToFloat(int);
  public static float complexToDimension(int, android.util.DisplayMetrics);
  public static int complexToDimensionPixelOffset(int, android.util.DisplayMetrics);
  public static int complexToDimensionPixelSize(int, android.util.DisplayMetrics);
  public static float complexToDimensionNoisy(int, android.util.DisplayMetrics);
  public static float applyDimension(int, float, android.util.DisplayMetrics);
  public float getDimension(android.util.DisplayMetrics);
  public static float complexToFraction(int, float, float);
  public float getFraction(float, float);
  public final java.lang.CharSequence coerceToString();
  public static final java.lang.String coerceToString(int, int);
  public void setTo(android.util.TypedValue);
  public java.lang.String toString();
public final class android.util.Xml$Encoding extends java.lang.Enum<android.util.Xml$Encoding> {
  public static android.util.Xml$Encoding[] values();
  public static android.util.Xml$Encoding valueOf(java.lang.String);
public class android.util.Xml {
  public android.util.Xml();
  public static org.xmlpull.v1.XmlPullParser newPullParser();
  public static org.xmlpull.v1.XmlSerializer newSerializer();
  public static android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser);
  public android.util.XmlPullAttributes(org.xmlpull.v1.XmlPullParser);
  public int getAttributeCount();
  public java.lang.String getAttributeName(int);
  public java.lang.String getAttributeValue(int);
  public java.lang.String getAttributeValue(java.lang.String, java.lang.String);
  public java.lang.String getPositionDescription();
  public int getAttributeNameResource(int);
  public int getAttributeListValue(java.lang.String, java.lang.String, java.lang.String[], int);
  public boolean getAttributeBooleanValue(java.lang.String, java.lang.String, boolean);
  public int getAttributeResourceValue(java.lang.String, java.lang.String, int);
  public int getAttributeIntValue(java.lang.String, java.lang.String, int);
  public int getAttributeUnsignedIntValue(java.lang.String, java.lang.String, int);
  public float getAttributeFloatValue(java.lang.String, java.lang.String, float);
  public int getAttributeListValue(int, java.lang.String[], int);
  public boolean getAttributeBooleanValue(int, boolean);
  public int getAttributeResourceValue(int, int);
  public int getAttributeIntValue(int, int);
  public int getAttributeUnsignedIntValue(int, int);
  public float getAttributeFloatValue(int, float);
  public java.lang.String getIdAttribute();
  public java.lang.String getClassAttribute();
  public int getIdAttributeResourceValue(int);
  public int getStyleAttribute();
  public android.view.AbsSavedState createFromParcel(android.os.Parcel);
  public android.view.AbsSavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public abstract class android.view.AbsSavedState implements android.os.Parcelable {
  public final android.os.Parcelable getSuperState();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.view.ActionMode$Callback {
  public abstract boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public abstract boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public abstract boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public abstract void onDestroyActionMode(android.view.ActionMode);
public abstract class android.view.ActionMode {
  public android.view.ActionMode();
  public void setTag(java.lang.Object);
  public java.lang.Object getTag();
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void setTitle(int);
  public abstract void setSubtitle(java.lang.CharSequence);
  public abstract void setSubtitle(int);
  public abstract void setCustomView(android.view.View);
  public abstract void invalidate();
  public abstract void finish();
  public abstract android.view.Menu getMenu();
  public abstract java.lang.CharSequence getTitle();
  public abstract java.lang.CharSequence getSubtitle();
  public abstract android.view.View getCustomView();
  public abstract android.view.MenuInflater getMenuInflater();
  public boolean isUiFocusable();
public interface android.view.ActionProvider$SubUiVisibilityListener {
  public abstract void onSubUiVisibilityChanged(boolean);
public abstract class android.view.ActionProvider {
  public android.view.ActionProvider(android.content.Context);
  public abstract android.view.View onCreateActionView();
  public boolean onPerformDefaultAction();
  public boolean hasSubMenu();
  public void onPrepareSubMenu(android.view.SubMenu);
  public void subUiVisibilityChanged(boolean);
  public void setSubUiVisibilityListener(android.view.ActionProvider$SubUiVisibilityListener);
public interface android.view.CollapsibleActionView {
  public abstract void onActionViewExpanded();
  public abstract void onActionViewCollapsed();
public class android.view.CompatibilityInfoHolder {
  public android.view.CompatibilityInfoHolder();
  public void set(android.content.res.CompatibilityInfo);
  public android.content.res.CompatibilityInfo get();
  public android.content.res.CompatibilityInfo getIfNeeded();
public interface android.view.ContextMenu$ContextMenuInfo {
public interface android.view.ContextMenu extends android.view.Menu {
  public abstract android.view.ContextMenu setHeaderTitle(int);
  public abstract android.view.ContextMenu setHeaderTitle(java.lang.CharSequence);
  public abstract android.view.ContextMenu setHeaderIcon(int);
  public abstract android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable);
  public abstract android.view.ContextMenu setHeaderView(android.view.View);
  public abstract void clearHeader();
public class android.view.ContextThemeWrapper extends android.content.ContextWrapper {
  public android.view.ContextThemeWrapper();
  public android.view.ContextThemeWrapper(android.content.Context, int);
  public void setTheme(int);
  public int getThemeResId();
  public android.content.res.Resources$Theme getTheme();
  public java.lang.Object getSystemService(java.lang.String);
public class android.view.Display {
  public int getDisplayId();
  public void getSize(android.graphics.Point);
  public void getRectSize(android.graphics.Rect);
  public int getMaximumSizeDimension();
  public int getWidth();
  public int getHeight();
  public void getRealSize(android.graphics.Point);
  public int getRawWidth();
  public int getRawHeight();
  public int getRotation();
  public native int getOrientation();
  public int getPixelFormat();
  public float getRefreshRate();
  public void getMetrics(android.util.DisplayMetrics);
  public void getRealMetrics(android.util.DisplayMetrics);
  public int getRawExternalWidth();
  public int getRawExternalHeight();
  public void getMetricsWithSize(android.util.DisplayMetrics, int, int);
  public static android.view.Display createCompatibleDisplay(int, android.view.CompatibilityInfoHolder);
public abstract class android.view.DisplayList {
  public android.view.DisplayList();
  public android.view.DragEvent createFromParcel(android.os.Parcel);
  public android.view.DragEvent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.DragEvent implements android.os.Parcelable {
  public static android.view.DragEvent obtain(int, float, float, java.lang.Object, android.content.ClipDescription, android.content.ClipData, boolean);
  public static android.view.DragEvent obtain(android.view.DragEvent);
  public int getAction();
  public float getX();
  public float getY();
  public android.content.ClipData getClipData();
  public android.content.ClipDescription getClipDescription();
  public java.lang.Object getLocalState();
  public boolean getResult();
  public final void recycle();
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public interface android.view.FallbackEventHandler {
  public abstract void setView(android.view.View);
  public abstract void preDispatchKeyEvent(android.view.KeyEvent);
  public abstract boolean dispatchKeyEvent(android.view.KeyEvent);
  public void recycle();
  public void setRoot(android.view.ViewGroup);
  public int compare(android.view.View, android.view.View);
  public int compare(java.lang.Object, java.lang.Object);
public class android.view.FocusFinder {
  public static android.view.FocusFinder getInstance();
  public final android.view.View findNextFocus(android.view.ViewGroup, android.view.View, int);
  public android.view.View findNextFocusFromRect(android.view.ViewGroup, android.graphics.Rect, int);
  public android.view.View findNearestTouchable(android.view.ViewGroup, int, int, int, int[]);
  public android.view.GLES20Canvas$CanvasFinalizer(int);
  public boolean isOpaque();
  public int getWidth();
  public int getHeight();
  public int getMaximumBitmapWidth();
  public int getMaximumBitmapHeight();
  public void setViewport(int, int);
  public static boolean preserveBackBuffer();
  public static boolean isBackBufferPreserved();
  public static void disableVsync();
  public boolean callDrawGLFunction(int);
  public static void flushCaches(int);
  public static void terminateCaches();
  public static void initCaches();
  public boolean drawDisplayList(android.view.DisplayList, int, int, android.graphics.Rect);
  public boolean clipPath(android.graphics.Path);
  public boolean clipPath(android.graphics.Path, android.graphics.Region$Op);
  public boolean clipRect(float, float, float, float);
  public boolean clipRect(float, float, float, float, android.graphics.Region$Op);
  public boolean clipRect(int, int, int, int);
  public boolean clipRect(android.graphics.Rect);
  public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op);
  public boolean clipRect(android.graphics.RectF);
  public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op);
  public boolean clipRegion(android.graphics.Region);
  public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op);
  public boolean getClipBounds(android.graphics.Rect);
  public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType);
  public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType);
  public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType);
  public void translate(float, float);
  public void skew(float, float);
  public void rotate(float);
  public void scale(float, float);
  public void setMatrix(android.graphics.Matrix);
  public void getMatrix(android.graphics.Matrix);
  public void concat(android.graphics.Matrix);
  public int save();
  public int save(int);
  public int saveLayer(android.graphics.RectF, android.graphics.Paint, int);
  public int saveLayer(float, float, float, float, android.graphics.Paint, int);
  public int saveLayerAlpha(android.graphics.RectF, int, int);
  public int saveLayerAlpha(float, float, float, float, int, int);
  public void restore();
  public void restoreToCount(int);
  public int getSaveCount();
  public void setDrawFilter(android.graphics.DrawFilter);
  public android.graphics.DrawFilter getDrawFilter();
  public void drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint);
  public void drawARGB(int, int, int, int);
  public void drawPatch(android.graphics.Bitmap, byte[], android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint);
  public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint);
  public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint);
  public void drawCircle(float, float, float, android.graphics.Paint);
  public void drawColor(int);
  public void drawColor(int, android.graphics.PorterDuff$Mode);
  public void drawLine(float, float, float, float, android.graphics.Paint);
  public void drawLines(float[], int, int, android.graphics.Paint);
  public void drawLines(float[], android.graphics.Paint);
  public void drawOval(android.graphics.RectF, android.graphics.Paint);
  public void drawPaint(android.graphics.Paint);
  public void drawPath(android.graphics.Path, android.graphics.Paint);
  public void drawPicture(android.graphics.Picture);
  public void drawPicture(android.graphics.Picture, android.graphics.Rect);
  public void drawPicture(android.graphics.Picture, android.graphics.RectF);
  public void drawPoint(float, float, android.graphics.Paint);
  public void drawPoints(float[], android.graphics.Paint);
  public void drawPoints(float[], int, int, android.graphics.Paint);
  public void drawPosText(char[], int, int, float[], android.graphics.Paint);
  public void drawPosText(java.lang.String, float[], android.graphics.Paint);
  public void drawRect(float, float, float, float, android.graphics.Paint);
  public void drawRect(android.graphics.Rect, android.graphics.Paint);
  public void drawRect(android.graphics.RectF, android.graphics.Paint);
  public void drawRGB(int, int, int);
  public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint);
  public void drawText(char[], int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, float, float, android.graphics.Paint);
  public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextRun(char[], int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint);
  public android.view.GLES20DisplayList$DisplayListFinalizer(int);
  public android.view.GLES20Layer$Finalizer(int);
  public int getLayer();
  public android.view.GLES20RecordingCanvas newInstance();
  public void onAcquired(android.view.GLES20RecordingCanvas);
  public void onReleased(android.view.GLES20RecordingCanvas);
  public void onReleased(android.util.Poolable);
  public void onAcquired(android.util.Poolable);
  public android.util.Poolable newInstance();
  public void drawPatch(android.graphics.Bitmap, byte[], android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint);
  public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint);
  public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint);
  public void drawCircle(float, float, float, android.graphics.Paint);
  public void drawLine(float, float, float, float, android.graphics.Paint);
  public void drawLines(float[], int, int, android.graphics.Paint);
  public void drawLines(float[], android.graphics.Paint);
  public void drawOval(android.graphics.RectF, android.graphics.Paint);
  public void drawPaint(android.graphics.Paint);
  public void drawPath(android.graphics.Path, android.graphics.Paint);
  public void drawPoint(float, float, android.graphics.Paint);
  public void drawPoints(float[], int, int, android.graphics.Paint);
  public void drawPoints(float[], android.graphics.Paint);
  public void drawPosText(char[], int, int, float[], android.graphics.Paint);
  public void drawPosText(java.lang.String, float[], android.graphics.Paint);
  public void drawRect(float, float, float, float, android.graphics.Paint);
  public void drawRect(android.graphics.Rect, android.graphics.Paint);
  public void drawRect(android.graphics.RectF, android.graphics.Paint);
  public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint);
  public void drawText(char[], int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, float, float, android.graphics.Paint);
  public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextRun(char[], int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, int, android.graphics.Paint);
  public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint);
  public android.view.GLES20RecordingCanvas getNextPoolable();
  public void setNextPoolable(android.view.GLES20RecordingCanvas);
  public boolean isPooled();
  public void setPooled(boolean);
  public java.lang.Object getNextPoolable();
  public void setNextPoolable(java.lang.Object);
  public void handleMessage(android.os.Message);
public interface android.view.GestureDetector$OnDoubleTapListener {
  public abstract boolean onSingleTapConfirmed(android.view.MotionEvent);
  public abstract boolean onDoubleTap(android.view.MotionEvent);
  public abstract boolean onDoubleTapEvent(android.view.MotionEvent);
public interface android.view.GestureDetector$OnGestureListener {
  public abstract boolean onDown(android.view.MotionEvent);
  public abstract void onShowPress(android.view.MotionEvent);
  public abstract boolean onSingleTapUp(android.view.MotionEvent);
  public abstract boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public abstract void onLongPress(android.view.MotionEvent);
  public abstract boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
public class android.view.GestureDetector$SimpleOnGestureListener implements android.view.GestureDetector$OnGestureListener,android.view.GestureDetector$OnDoubleTapListener {
  public android.view.GestureDetector$SimpleOnGestureListener();
  public boolean onSingleTapUp(android.view.MotionEvent);
  public void onLongPress(android.view.MotionEvent);
  public boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public void onShowPress(android.view.MotionEvent);
  public boolean onDown(android.view.MotionEvent);
  public boolean onDoubleTap(android.view.MotionEvent);
  public boolean onDoubleTapEvent(android.view.MotionEvent);
  public boolean onSingleTapConfirmed(android.view.MotionEvent);
public class android.view.GestureDetector {
  public android.view.GestureDetector(android.view.GestureDetector$OnGestureListener, android.os.Handler);
  public android.view.GestureDetector(android.view.GestureDetector$OnGestureListener);
  public android.view.GestureDetector(android.content.Context, android.view.GestureDetector$OnGestureListener);
  public android.view.GestureDetector(android.content.Context, android.view.GestureDetector$OnGestureListener, android.os.Handler);
  public android.view.GestureDetector(android.content.Context, android.view.GestureDetector$OnGestureListener, android.os.Handler, boolean);
  public void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
  public void setIsLongpressEnabled(boolean);
  public boolean isLongpressEnabled();
  public boolean onTouchEvent(android.view.MotionEvent);
public class android.view.Gravity {
  public android.view.Gravity();
  public static void apply(int, int, int, android.graphics.Rect, android.graphics.Rect);
  public static void apply(int, int, int, android.graphics.Rect, android.graphics.Rect, int);
  public static void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect);
  public static void applyDisplay(int, android.graphics.Rect, android.graphics.Rect);
  public static boolean isVertical(int);
  public static boolean isHorizontal(int);
  public static int getAbsoluteGravity(int, int);
public abstract class android.view.HardwareCanvas extends android.graphics.Canvas {
  public android.view.HardwareCanvas();
  public boolean isHardwareAccelerated();
  public void setBitmap(android.graphics.Bitmap);
  public boolean callDrawGLFunction(int);
  public void run();
  public android.view.HardwareRenderer$Gl20Renderer$Gl20RendererEglContext(javax.microedition.khronos.egl.EGLContext);
  public void onTerminate(javax.microedition.khronos.egl.EGLContext);
  public abstract void onHardwarePreDraw(android.view.HardwareCanvas);
  public abstract void onHardwarePostDraw(android.view.HardwareCanvas);
public abstract class android.view.HardwareRenderer {
  public android.view.HardwareRenderer();
  public static void disable(boolean);
  public static boolean isAvailable();
  public static void setupDiskCache(java.io.File);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.IApplicationToken$Stub extends android.os.Binder implements android.view.IApplicationToken {
  public android.view.IApplicationToken$Stub();
  public static android.view.IApplicationToken asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.IApplicationToken extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.IOnKeyguardExitResult$Stub extends android.os.Binder implements android.view.IOnKeyguardExitResult {
  public android.view.IOnKeyguardExitResult$Stub();
  public static android.view.IOnKeyguardExitResult asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.IOnKeyguardExitResult extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.IRotationWatcher$Stub extends android.os.Binder implements android.view.IRotationWatcher {
  public android.view.IRotationWatcher$Stub();
  public static android.view.IRotationWatcher asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.IRotationWatcher extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.IWindow$Stub extends android.os.Binder implements android.view.IWindow {
  public android.view.IWindow$Stub();
  public static android.view.IWindow asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.IWindow extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.IWindowManager$Stub extends android.os.Binder implements android.view.IWindowManager {
  public android.view.IWindowManager$Stub();
  public static android.view.IWindowManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.IWindowManager extends android.os.IInterface {
public class android.view.InflateException extends java.lang.RuntimeException {
  public android.view.InflateException();
  public android.view.InflateException(java.lang.String, java.lang.Throwable);
  public android.view.InflateException(java.lang.String);
  public android.view.InflateException(java.lang.Throwable);
  public android.view.InputChannel createFromParcel(android.os.Parcel);
  public android.view.InputChannel[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.InputChannel implements android.os.Parcelable {
  public android.view.InputChannel();
  public static android.view.InputChannel[] openInputChannelPair(java.lang.String);
  public java.lang.String getName();
  public void dispose();
  public void transferTo(android.view.InputChannel);
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public android.view.InputDevice createFromParcel(android.os.Parcel);
  public android.view.InputDevice[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.InputDevice$MotionRange {
  public int getAxis();
  public int getSource();
  public float getMin();
  public float getMax();
  public float getRange();
  public float getFlat();
  public float getFuzz();
public final class android.view.InputDevice implements android.os.Parcelable {
  public static android.view.InputDevice getDevice(int);
  public static int[] getDeviceIds();
  public int getId();
  public java.lang.String getName();
  public int getSources();
  public int getKeyboardType();
  public android.view.KeyCharacterMap getKeyCharacterMap();
  public android.view.InputDevice$MotionRange getMotionRange(int);
  public android.view.InputDevice$MotionRange getMotionRange(int, int);
  public java.util.List<android.view.InputDevice$MotionRange> getMotionRanges();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public java.lang.String toString();
  public android.view.InputEvent createFromParcel(android.os.Parcel);
  public android.view.InputEvent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public abstract class android.view.InputEvent implements android.os.Parcelable {
  public abstract int getDeviceId();
  public final android.view.InputDevice getDevice();
  public abstract int getSource();
  public abstract void setSource(int);
  public abstract android.view.InputEvent copy();
  public abstract void recycle();
  public abstract boolean isTainted();
  public abstract void setTainted(boolean);
  public abstract long getEventTimeNano();
  public int describeContents();
  public static android.view.InputEventConsistencyVerifier$KeyState obtain(int, int, int);
  public void recycle();
public final class android.view.InputEventConsistencyVerifier {
  public android.view.InputEventConsistencyVerifier(java.lang.Object, int);
  public android.view.InputEventConsistencyVerifier(java.lang.Object, int, java.lang.String);
  public static boolean isInstrumentationEnabled();
  public void reset();
  public void onInputEvent(android.view.InputEvent, int);
  public void onKeyEvent(android.view.KeyEvent, int);
  public void onTrackballEvent(android.view.MotionEvent, int);
  public void onTouchEvent(android.view.MotionEvent, int);
  public void onGenericMotionEvent(android.view.MotionEvent, int);
  public void onUnhandledEvent(android.view.InputEvent, int);
public interface android.view.InputHandler {
  public abstract void handleKey(android.view.KeyEvent, android.view.InputQueue$FinishedCallback);
  public abstract void handleMotion(android.view.MotionEvent, android.view.InputQueue$FinishedCallback);
public interface android.view.InputQueue$Callback {
  public abstract void onInputQueueCreated(android.view.InputQueue);
  public abstract void onInputQueueDestroyed(android.view.InputQueue);
public final class android.view.InputQueue$FinishedCallback {
  public static android.view.InputQueue$FinishedCallback obtain(long);
  public void finished(boolean);
public final class android.view.InputQueue {
  public android.view.InputQueue(android.view.InputChannel);
  public android.view.InputChannel getInputChannel();
  public static void registerInputChannel(android.view.InputChannel, android.view.InputHandler, android.os.MessageQueue);
  public static void unregisterInputChannel(android.view.InputChannel);
public final class android.view.KeyCharacterMap$FallbackAction {
  public android.view.KeyCharacterMap$FallbackAction();
public class android.view.KeyCharacterMap$KeyData {
  public android.view.KeyCharacterMap$KeyData();
public class android.view.KeyCharacterMap$UnavailableException extends android.util.AndroidRuntimeException {
  public android.view.KeyCharacterMap$UnavailableException(java.lang.String);
public class android.view.KeyCharacterMap {
  public static android.view.KeyCharacterMap load(int);
  public int get(int, int);
  public boolean getFallbackAction(int, int, android.view.KeyCharacterMap$FallbackAction);
  public char getNumber(int);
  public char getMatch(int, char[]);
  public char getMatch(int, char[], int);
  public char getDisplayLabel(int);
  public static int getDeadChar(int, int);
  public boolean getKeyData(int, android.view.KeyCharacterMap$KeyData);
  public android.view.KeyEvent[] getEvents(char[]);
  public boolean isPrintingKey(int);
  public int getKeyboardType();
  public int getModifierBehavior();
  public static boolean deviceHasKey(int);
  public static boolean[] deviceHasKeys(int[]);
  public android.view.KeyEvent createFromParcel(android.os.Parcel);
  public android.view.KeyEvent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public interface android.view.KeyEvent$Callback {
  public abstract boolean onKeyDown(int, android.view.KeyEvent);
  public abstract boolean onKeyLongPress(int, android.view.KeyEvent);
  public abstract boolean onKeyUp(int, android.view.KeyEvent);
  public abstract boolean onKeyMultiple(int, int, android.view.KeyEvent);
public class android.view.KeyEvent$DispatcherState {
  public android.view.KeyEvent$DispatcherState();
  public void reset();
  public void reset(java.lang.Object);
  public void startTracking(android.view.KeyEvent, java.lang.Object);
  public boolean isTracking(android.view.KeyEvent);
  public void performedLongPress(android.view.KeyEvent);
  public void handleUpEvent(android.view.KeyEvent);
public class android.view.KeyEvent extends android.view.InputEvent implements android.os.Parcelable {
  public static int getMaxKeyCode();
  public static int getDeadChar(int, int);
  public android.view.KeyEvent(int, int);
  public android.view.KeyEvent(long, long, int, int, int);
  public android.view.KeyEvent(long, long, int, int, int, int);
  public android.view.KeyEvent(long, long, int, int, int, int, int, int);
  public android.view.KeyEvent(long, long, int, int, int, int, int, int, int);
  public android.view.KeyEvent(long, long, int, int, int, int, int, int, int, int);
  public android.view.KeyEvent(long, java.lang.String, int, int);
  public android.view.KeyEvent(android.view.KeyEvent);
  public android.view.KeyEvent(android.view.KeyEvent, long, int);
  public static android.view.KeyEvent obtain(long, long, int, int, int, int, int, int, int, int, java.lang.String);
  public static android.view.KeyEvent obtain(android.view.KeyEvent);
  public android.view.KeyEvent copy();
  public final void recycle();
  public static android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int);
  public static android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int, int);
  public static android.view.KeyEvent changeAction(android.view.KeyEvent, int);
  public static android.view.KeyEvent changeFlags(android.view.KeyEvent, int);
  public final boolean isTainted();
  public final void setTainted(boolean);
  public final boolean isDown();
  public final boolean isSystem();
  public final boolean hasDefaultAction();
  public static final boolean isGamepadButton(int);
  public final int getDeviceId();
  public final int getSource();
  public final void setSource(int);
  public final int getMetaState();
  public final int getModifiers();
  public final int getFlags();
  public static int getModifierMetaStateMask();
  public static boolean isModifierKey(int);
  public static int normalizeMetaState(int);
  public static boolean metaStateHasNoModifiers(int);
  public static boolean metaStateHasModifiers(int, int);
  public final boolean hasNoModifiers();
  public final boolean hasModifiers(int);
  public final boolean isAltPressed();
  public final boolean isShiftPressed();
  public final boolean isSymPressed();
  public final boolean isCtrlPressed();
  public final boolean isMetaPressed();
  public final boolean isFunctionPressed();
  public final boolean isCapsLockOn();
  public final boolean isNumLockOn();
  public final boolean isScrollLockOn();
  public final int getAction();
  public final boolean isCanceled();
  public final void startTracking();
  public final boolean isTracking();
  public final boolean isLongPress();
  public final int getKeyCode();
  public final java.lang.String getCharacters();
  public final int getScanCode();
  public final int getRepeatCount();
  public final long getDownTime();
  public final long getEventTime();
  public final long getEventTimeNano();
  public final int getKeyboardDevice();
  public final android.view.KeyCharacterMap getKeyCharacterMap();
  public char getDisplayLabel();
  public int getUnicodeChar();
  public int getUnicodeChar(int);
  public boolean getKeyData(android.view.KeyCharacterMap$KeyData);
  public char getMatch(char[]);
  public char getMatch(char[], int);
  public char getNumber();
  public boolean isPrintingKey();
  public final boolean dispatch(android.view.KeyEvent$Callback);
  public final boolean dispatch(android.view.KeyEvent$Callback, android.view.KeyEvent$DispatcherState, java.lang.Object);
  public java.lang.String toString();
  public static java.lang.String actionToString(int);
  public static java.lang.String keyCodeToString(int);
  public static int keyCodeFromString(java.lang.String);
  public static java.lang.String metaStateToString(int);
  public static android.view.KeyEvent createFromParcelBody(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.view.InputEvent copy();
  public boolean handleMessage(android.os.Message);
  public android.view.LayoutInflater$BlinkLayout(android.content.Context, android.util.AttributeSet);
public interface android.view.LayoutInflater$Factory {
  public abstract android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet);
public interface android.view.LayoutInflater$Factory2 extends android.view.LayoutInflater$Factory {
  public abstract android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
  public android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet);
  public android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
public interface android.view.LayoutInflater$Filter {
  public abstract boolean onLoadClass(java.lang.Class);
public abstract class android.view.LayoutInflater {
  public static android.view.LayoutInflater from(android.content.Context);
  public abstract android.view.LayoutInflater cloneInContext(android.content.Context);
  public android.content.Context getContext();
  public final android.view.LayoutInflater$Factory getFactory();
  public final android.view.LayoutInflater$Factory2 getFactory2();
  public void setFactory(android.view.LayoutInflater$Factory);
  public void setFactory2(android.view.LayoutInflater$Factory2);
  public void setPrivateFactory(android.view.LayoutInflater$Factory2);
  public android.view.LayoutInflater$Filter getFilter();
  public void setFilter(android.view.LayoutInflater$Filter);
  public android.view.View inflate(int, android.view.ViewGroup);
  public android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup);
  public android.view.View inflate(int, android.view.ViewGroup, boolean);
  public android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean);
public interface android.view.Menu {
  public abstract android.view.MenuItem add(java.lang.CharSequence);
  public abstract android.view.MenuItem add(int);
  public abstract android.view.MenuItem add(int, int, int, java.lang.CharSequence);
  public abstract android.view.MenuItem add(int, int, int, int);
  public abstract android.view.SubMenu addSubMenu(java.lang.CharSequence);
  public abstract android.view.SubMenu addSubMenu(int);
  public abstract android.view.SubMenu addSubMenu(int, int, int, java.lang.CharSequence);
  public abstract android.view.SubMenu addSubMenu(int, int, int, int);
  public abstract int addIntentOptions(int, int, int, android.content.ComponentName, android.content.Intent[], android.content.Intent, int, android.view.MenuItem[]);
  public abstract void removeItem(int);
  public abstract void removeGroup(int);
  public abstract void clear();
  public abstract void setGroupCheckable(int, boolean, boolean);
  public abstract void setGroupVisible(int, boolean);
  public abstract void setGroupEnabled(int, boolean);
  public abstract boolean hasVisibleItems();
  public abstract android.view.MenuItem findItem(int);
  public abstract int size();
  public abstract android.view.MenuItem getItem(int);
  public abstract void close();
  public abstract boolean performShortcut(int, android.view.KeyEvent, int);
  public abstract boolean isShortcutKey(int, android.view.KeyEvent);
  public abstract boolean performIdentifierAction(int, int);
  public abstract void setQwertyMode(boolean);
  public android.view.MenuInflater$InflatedOnMenuItemClickListener(android.content.Context, java.lang.String);
  public boolean onMenuItemClick(android.view.MenuItem);
  public android.view.MenuInflater$MenuState(android.view.MenuInflater, android.view.Menu);
  public void resetGroup();
  public void readGroup(android.util.AttributeSet);
  public void readItem(android.util.AttributeSet);
  public void addItem();
  public android.view.SubMenu addSubMenuItem();
  public boolean hasAddedItem();
public class android.view.MenuInflater {
  public android.view.MenuInflater(android.content.Context);
  public void inflate(int, android.view.Menu);
public interface android.view.MenuItem$OnActionExpandListener {
  public abstract boolean onMenuItemActionExpand(android.view.MenuItem);
  public abstract boolean onMenuItemActionCollapse(android.view.MenuItem);
public interface android.view.MenuItem$OnMenuItemClickListener {
  public abstract boolean onMenuItemClick(android.view.MenuItem);
public interface android.view.MenuItem {
  public abstract int getItemId();
  public abstract int getGroupId();
  public abstract int getOrder();
  public abstract android.view.MenuItem setTitle(java.lang.CharSequence);
  public abstract android.view.MenuItem setTitle(int);
  public abstract java.lang.CharSequence getTitle();
  public abstract android.view.MenuItem setTitleCondensed(java.lang.CharSequence);
  public abstract java.lang.CharSequence getTitleCondensed();
  public abstract android.view.MenuItem setIcon(android.graphics.drawable.Drawable);
  public abstract android.view.MenuItem setIcon(int);
  public abstract android.graphics.drawable.Drawable getIcon();
  public abstract android.view.MenuItem setIntent(android.content.Intent);
  public abstract android.content.Intent getIntent();
  public abstract android.view.MenuItem setShortcut(char, char);
  public abstract android.view.MenuItem setNumericShortcut(char);
  public abstract char getNumericShortcut();
  public abstract android.view.MenuItem setAlphabeticShortcut(char);
  public abstract char getAlphabeticShortcut();
  public abstract android.view.MenuItem setCheckable(boolean);
  public abstract boolean isCheckable();
  public abstract android.view.MenuItem setChecked(boolean);
  public abstract boolean isChecked();
  public abstract android.view.MenuItem setVisible(boolean);
  public abstract boolean isVisible();
  public abstract android.view.MenuItem setEnabled(boolean);
  public abstract boolean isEnabled();
  public abstract boolean hasSubMenu();
  public abstract android.view.SubMenu getSubMenu();
  public abstract android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener);
  public abstract android.view.ContextMenu$ContextMenuInfo getMenuInfo();
  public abstract void setShowAsAction(int);
  public abstract android.view.MenuItem setShowAsActionFlags(int);
  public abstract android.view.MenuItem setActionView(android.view.View);
  public abstract android.view.MenuItem setActionView(int);
  public abstract android.view.View getActionView();
  public abstract android.view.MenuItem setActionProvider(android.view.ActionProvider);
  public abstract android.view.ActionProvider getActionProvider();
  public abstract boolean expandActionView();
  public abstract boolean collapseActionView();
  public abstract boolean isActionViewExpanded();
  public abstract android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener);
  public android.view.MotionEvent createFromParcel(android.os.Parcel);
  public android.view.MotionEvent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.MotionEvent$PointerCoords {
  public android.view.MotionEvent$PointerCoords();
  public android.view.MotionEvent$PointerCoords(android.view.MotionEvent$PointerCoords);
  public static android.view.MotionEvent$PointerCoords[] createArray(int);
  public void clear();
  public void copyFrom(android.view.MotionEvent$PointerCoords);
  public float getAxisValue(int);
  public void setAxisValue(int, float);
public final class android.view.MotionEvent$PointerProperties {
  public android.view.MotionEvent$PointerProperties();
  public android.view.MotionEvent$PointerProperties(android.view.MotionEvent$PointerProperties);
  public static android.view.MotionEvent$PointerProperties[] createArray(int);
  public void clear();
  public void copyFrom(android.view.MotionEvent$PointerProperties);
public final class android.view.MotionEvent extends android.view.InputEvent implements android.os.Parcelable {
  public static android.view.MotionEvent obtain(long, long, int, int, android.view.MotionEvent$PointerProperties[], android.view.MotionEvent$PointerCoords[], int, int, float, float, int, int, int, int);
  public static android.view.MotionEvent obtain(long, long, int, int, int[], android.view.MotionEvent$PointerCoords[], int, float, float, int, int, int, int);
  public static android.view.MotionEvent obtain(long, long, int, float, float, float, float, int, float, float, int, int);
  public static android.view.MotionEvent obtain(long, long, int, int, float, float, float, float, int, float, float, int, int);
  public static android.view.MotionEvent obtain(long, long, int, float, float, int);
  public static android.view.MotionEvent obtain(android.view.MotionEvent);
  public static android.view.MotionEvent obtainNoHistory(android.view.MotionEvent);
  public android.view.MotionEvent copy();
  public final void recycle();
  public final void scale(float);
  public final int getDeviceId();
  public final int getSource();
  public final void setSource(int);
  public final int getAction();
  public final int getActionMasked();
  public final int getActionIndex();
  public final boolean isTouchEvent();
  public final int getFlags();
  public final boolean isTainted();
  public final void setTainted(boolean);
  public final long getDownTime();
  public final void setDownTime(long);
  public final long getEventTime();
  public final long getEventTimeNano();
  public final float getX();
  public final float getY();
  public final float getPressure();
  public final float getSize();
  public final float getTouchMajor();
  public final float getTouchMinor();
  public final float getToolMajor();
  public final float getToolMinor();
  public final float getOrientation();
  public final float getAxisValue(int);
  public final int getPointerCount();
  public final int getPointerId(int);
  public final int getToolType(int);
  public final int findPointerIndex(int);
  public final float getX(int);
  public final float getY(int);
  public final float getPressure(int);
  public final float getSize(int);
  public final float getTouchMajor(int);
  public final float getTouchMinor(int);
  public final float getToolMajor(int);
  public final float getToolMinor(int);
  public final float getOrientation(int);
  public final float getAxisValue(int, int);
  public final void getPointerCoords(int, android.view.MotionEvent$PointerCoords);
  public final void getPointerProperties(int, android.view.MotionEvent$PointerProperties);
  public final int getMetaState();
  public final int getButtonState();
  public final float getRawX();
  public final float getRawY();
  public final float getXPrecision();
  public final float getYPrecision();
  public final int getHistorySize();
  public final long getHistoricalEventTime(int);
  public final float getHistoricalX(int);
  public final float getHistoricalY(int);
  public final float getHistoricalPressure(int);
  public final float getHistoricalSize(int);
  public final float getHistoricalTouchMajor(int);
  public final float getHistoricalTouchMinor(int);
  public final float getHistoricalToolMajor(int);
  public final float getHistoricalToolMinor(int);
  public final float getHistoricalOrientation(int);
  public final float getHistoricalAxisValue(int, int);
  public final float getHistoricalX(int, int);
  public final float getHistoricalY(int, int);
  public final float getHistoricalPressure(int, int);
  public final float getHistoricalSize(int, int);
  public final float getHistoricalTouchMajor(int, int);
  public final float getHistoricalTouchMinor(int, int);
  public final float getHistoricalToolMajor(int, int);
  public final float getHistoricalToolMinor(int, int);
  public final float getHistoricalOrientation(int, int);
  public final float getHistoricalAxisValue(int, int, int);
  public final void getHistoricalPointerCoords(int, int, android.view.MotionEvent$PointerCoords);
  public final int getEdgeFlags();
  public final void setEdgeFlags(int);
  public final void setAction(int);
  public final void offsetLocation(float, float);
  public final void setLocation(float, float);
  public final void transform(android.graphics.Matrix);
  public final void addBatch(long, float, float, float, float, int);
  public final void addBatch(long, android.view.MotionEvent$PointerCoords[], int);
  public final boolean isWithinBoundsNoHistory(float, float, float, float);
  public final android.view.MotionEvent clampNoHistory(float, float, float, float);
  public final int getPointerIdBits();
  public final android.view.MotionEvent split(int);
  public java.lang.String toString();
  public static java.lang.String actionToString(int);
  public static java.lang.String axisToString(int);
  public static int axisFromString(java.lang.String);
  public static java.lang.String buttonStateToString(int);
  public static java.lang.String toolTypeToString(int);
  public static android.view.MotionEvent createFromParcelBody(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.view.InputEvent copy();
public interface android.view.RemotableViewMethod extends java.lang.annotation.Annotation {
public interface android.view.ScaleGestureDetector$OnScaleGestureListener {
  public abstract boolean onScale(android.view.ScaleGestureDetector);
  public abstract boolean onScaleBegin(android.view.ScaleGestureDetector);
  public abstract void onScaleEnd(android.view.ScaleGestureDetector);
public class android.view.ScaleGestureDetector$SimpleOnScaleGestureListener implements android.view.ScaleGestureDetector$OnScaleGestureListener {
  public android.view.ScaleGestureDetector$SimpleOnScaleGestureListener();
  public boolean onScale(android.view.ScaleGestureDetector);
  public boolean onScaleBegin(android.view.ScaleGestureDetector);
  public void onScaleEnd(android.view.ScaleGestureDetector);
public class android.view.ScaleGestureDetector {
  public android.view.ScaleGestureDetector(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean isInProgress();
  public float getFocusX();
  public float getFocusY();
  public float getCurrentSpan();
  public float getCurrentSpanX();
  public float getCurrentSpanY();
  public float getPreviousSpan();
  public float getPreviousSpanX();
  public float getPreviousSpanY();
  public float getScaleFactor();
  public long getTimeDelta();
  public long getEventTime();
public class android.view.SoundEffectConstants {
  public static int getContantForFocusDirection(int);
public interface android.view.SubMenu extends android.view.Menu {
  public abstract android.view.SubMenu setHeaderTitle(int);
  public abstract android.view.SubMenu setHeaderTitle(java.lang.CharSequence);
  public abstract android.view.SubMenu setHeaderIcon(int);
  public abstract android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable);
  public abstract android.view.SubMenu setHeaderView(android.view.View);
  public abstract void clearHeader();
  public abstract android.view.SubMenu setIcon(int);
  public abstract android.view.SubMenu setIcon(android.graphics.drawable.Drawable);
  public abstract android.view.MenuItem getItem();
  public android.view.Surface createFromParcel(android.os.Parcel);
  public android.view.Surface[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int getWidth();
  public int getHeight();
  public void setMatrix(android.graphics.Matrix);
  public void getMatrix(android.graphics.Matrix);
public class android.view.Surface$OutOfResourcesException extends java.lang.Exception {
  public android.view.Surface$OutOfResourcesException();
  public android.view.Surface$OutOfResourcesException(java.lang.String);
public class android.view.Surface implements android.os.Parcelable {
  public android.view.Surface(android.graphics.SurfaceTexture);
  public native boolean isValid();
  public native void release();
  public native void unlockCanvasAndPost(android.graphics.Canvas);
  public native void unlockCanvas(android.graphics.Canvas);
  public java.lang.String toString();
  public int describeContents();
  public native void readFromParcel(android.os.Parcel);
  public native void writeToParcel(android.os.Parcel, int);
  public android.view.Surface();
  public native void copyFrom(android.view.Surface);
  public native void transferFrom(android.view.Surface);
  public int getGenerationId();
  public native void destroy();
  public static native void freezeDisplay(int);
  public static native void unfreezeDisplay(int);
  public static native void setOrientation(int, int, int);
  public static void setOrientation(int, int);
  public static native android.graphics.Bitmap screenshot(int, int);
  public static native android.graphics.Bitmap screenshot(int, int, int, int);
  public static native void openTransaction();
  public static native void closeTransaction();
  public native void setLayer(int);
  public void setPosition(int, int);
  public native void setPosition(float, float);
  public native void setSize(int, int);
  public native void hide();
  public native void show();
  public native void setTransparentRegionHint(android.graphics.Region);
  public native void setAlpha(float);
  public native void setMatrix(float, float, float, float);
  public native void freeze();
  public native void unfreeze();
  public native void setFreezeTint(int);
  public native void setFlags(int, int);
public class android.view.SurfaceHolder$BadSurfaceTypeException extends java.lang.RuntimeException {
  public android.view.SurfaceHolder$BadSurfaceTypeException();
  public android.view.SurfaceHolder$BadSurfaceTypeException(java.lang.String);
public interface android.view.SurfaceHolder$Callback {
  public abstract void surfaceCreated(android.view.SurfaceHolder);
  public abstract void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public abstract void surfaceDestroyed(android.view.SurfaceHolder);
public interface android.view.SurfaceHolder$Callback2 extends android.view.SurfaceHolder$Callback {
  public abstract void surfaceRedrawNeeded(android.view.SurfaceHolder);
public interface android.view.SurfaceHolder {
  public abstract void addCallback(android.view.SurfaceHolder$Callback);
  public abstract void removeCallback(android.view.SurfaceHolder$Callback);
  public abstract boolean isCreating();
  public abstract void setType(int);
  public abstract void setFixedSize(int, int);
  public abstract void setSizeFromLayout();
  public abstract void setFormat(int);
  public abstract void setKeepScreenOn(boolean);
  public abstract android.graphics.Canvas lockCanvas();
  public abstract android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public abstract void unlockCanvasAndPost(android.graphics.Canvas);
  public abstract android.graphics.Rect getSurfaceFrame();
  public abstract android.view.Surface getSurface();
  public void handleMessage(android.os.Message);
  public void onScrollChanged();
  public boolean onPreDraw();
  public boolean isCreating();
  public void addCallback(android.view.SurfaceHolder$Callback);
  public void removeCallback(android.view.SurfaceHolder$Callback);
  public void setFixedSize(int, int);
  public void setSizeFromLayout();
  public void setFormat(int);
  public void setType(int);
  public void setKeepScreenOn(boolean);
  public android.graphics.Canvas lockCanvas();
  public android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public void unlockCanvasAndPost(android.graphics.Canvas);
  public android.view.Surface getSurface();
  public android.graphics.Rect getSurfaceFrame();
  public android.view.SurfaceView$MyWindow(android.view.SurfaceView);
  public void resized(int, int, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration);
  public void dispatchAppVisibility(boolean);
  public void dispatchGetNewSurface();
  public void windowFocusChanged(boolean, boolean);
  public void executeCommand(java.lang.String, java.lang.String, android.os.ParcelFileDescriptor);
public class android.view.SurfaceView extends android.view.View {
  public android.view.SurfaceView(android.content.Context);
  public android.view.SurfaceView(android.content.Context, android.util.AttributeSet);
  public android.view.SurfaceView(android.content.Context, android.util.AttributeSet, int);
  public android.view.SurfaceHolder getHolder();
  public void setVisibility(int);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void draw(android.graphics.Canvas);
  public void setZOrderMediaOverlay(boolean);
  public void setZOrderOnTop(boolean);
  public void setWindowType(int);
  public boolean isFixedSize();
public class android.view.TouchDelegate {
  public android.view.TouchDelegate(android.graphics.Rect, android.view.View);
  public boolean onTouchEvent(android.view.MotionEvent);
  public android.view.VelocityTracker newInstance();
  public void onAcquired(android.view.VelocityTracker);
  public void onReleased(android.view.VelocityTracker);
  public void onReleased(android.util.Poolable);
  public void onAcquired(android.util.Poolable);
  public android.util.Poolable newInstance();
public final class android.view.VelocityTracker$Estimator {
  public android.view.VelocityTracker$Estimator();
  public float estimateX(float);
  public float estimateY(float);
public final class android.view.VelocityTracker implements android.util.Poolable<android.view.VelocityTracker> {
  public static android.view.VelocityTracker obtain();
  public void recycle();
  public void setNextPoolable(android.view.VelocityTracker);
  public android.view.VelocityTracker getNextPoolable();
  public boolean isPooled();
  public void setPooled(boolean);
  public void clear();
  public void addMovement(android.view.MotionEvent);
  public void computeCurrentVelocity(int);
  public void computeCurrentVelocity(int, float);
  public float getXVelocity();
  public float getYVelocity();
  public float getXVelocity(int);
  public float getYVelocity(int);
  public boolean getEstimator(int, int, int, android.view.VelocityTracker$Estimator);
  public java.lang.Object getNextPoolable();
  public void setNextPoolable(java.lang.Object);
  public void onClick(android.view.View);
  public boolean apply(android.view.View);
  public boolean apply(java.lang.Object);
  public boolean apply(android.view.View);
  public boolean apply(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
  public void setValue(android.view.View, float);
  public java.lang.Float get(android.view.View);
  public void setValue(java.lang.Object, float);
  public java.lang.Object get(java.lang.Object);
public class android.view.View$AccessibilityDelegate {
  public android.view.View$AccessibilityDelegate();
  public void sendAccessibilityEvent(android.view.View, int);
  public void sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo);
  public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent);
  public abstract void playSoundEffect(int);
  public abstract boolean performHapticFeedback(int, boolean);
  public android.view.View$AttachInfo$InvalidateInfo newInstance();
  public void onAcquired(android.view.View$AttachInfo$InvalidateInfo);
  public void onReleased(android.view.View$AttachInfo$InvalidateInfo);
  public void onReleased(android.util.Poolable);
  public void onAcquired(android.util.Poolable);
  public android.util.Poolable newInstance();
  public void setNextPoolable(android.view.View$AttachInfo$InvalidateInfo);
  public android.view.View$AttachInfo$InvalidateInfo getNextPoolable();
  public boolean isPooled();
  public void setPooled(boolean);
  public java.lang.Object getNextPoolable();
  public void setNextPoolable(java.lang.Object);
  public android.view.View$BaseSavedState createFromParcel(android.os.Parcel);
  public android.view.View$BaseSavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.View$BaseSavedState extends android.view.AbsSavedState {
  public android.view.View$BaseSavedState(android.os.Parcel);
  public android.view.View$BaseSavedState(android.os.Parcelable);
  public void run();
  public void rememberWindowAttachCount();
  public void run();
public class android.view.View$DragShadowBuilder {
  public android.view.View$DragShadowBuilder(android.view.View);
  public android.view.View$DragShadowBuilder();
  public final android.view.View getView();
  public void onProvideShadowMetrics(android.graphics.Point, android.graphics.Point);
  public void onDrawShadow(android.graphics.Canvas);
public class android.view.View$MeasureSpec {
  public android.view.View$MeasureSpec();
  public static int makeMeasureSpec(int, int);
  public static int getMode(int);
  public static int getSize(int);
  public static java.lang.String toString(int);
public interface android.view.View$OnAttachStateChangeListener {
  public abstract void onViewAttachedToWindow(android.view.View);
  public abstract void onViewDetachedFromWindow(android.view.View);
public interface android.view.View$OnClickListener {
  public abstract void onClick(android.view.View);
public interface android.view.View$OnCreateContextMenuListener {
  public abstract void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
public interface android.view.View$OnDragListener {
  public abstract boolean onDrag(android.view.View, android.view.DragEvent);
public interface android.view.View$OnFocusChangeListener {
  public abstract void onFocusChange(android.view.View, boolean);
public interface android.view.View$OnGenericMotionListener {
  public abstract boolean onGenericMotion(android.view.View, android.view.MotionEvent);
public interface android.view.View$OnHoverListener {
  public abstract boolean onHover(android.view.View, android.view.MotionEvent);
public interface android.view.View$OnKeyListener {
  public abstract boolean onKey(android.view.View, int, android.view.KeyEvent);
public interface android.view.View$OnLayoutChangeListener {
  public abstract void onLayoutChange(android.view.View, int, int, int, int, int, int, int, int);
public interface android.view.View$OnLongClickListener {
  public abstract boolean onLongClick(android.view.View);
public interface android.view.View$OnSystemUiVisibilityChangeListener {
  public abstract void onSystemUiVisibilityChange(int);
public interface android.view.View$OnTouchListener {
  public abstract boolean onTouch(android.view.View, android.view.MotionEvent);
  public void run();
  public android.view.View$ScrollabilityCache(android.view.ViewConfiguration, android.view.View);
  public void setFadeColor(int);
  public void run();
  public void run();
  public void run();
public class android.view.View implements android.graphics.drawable.Drawable$Callback,android.graphics.drawable.Drawable$Callback2,android.view.KeyEvent$Callback,android.view.accessibility.AccessibilityEventSource {
  public android.view.View(android.content.Context);
  public android.view.View(android.content.Context, android.util.AttributeSet);
  public android.view.View(android.content.Context, android.util.AttributeSet, int);
  public int getVerticalFadingEdgeLength();
  public void setFadingEdgeLength(int);
  public int getHorizontalFadingEdgeLength();
  public int getVerticalScrollbarWidth();
  public void setVerticalScrollbarPosition(int);
  public int getVerticalScrollbarPosition();
  public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener);
  public void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public android.view.View$OnFocusChangeListener getOnFocusChangeListener();
  public void setOnClickListener(android.view.View$OnClickListener);
  public boolean hasOnClickListeners();
  public void setOnLongClickListener(android.view.View$OnLongClickListener);
  public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener);
  public boolean performClick();
  public boolean callOnClick();
  public boolean performLongClick();
  public boolean showContextMenu();
  public boolean showContextMenu(float, float, int);
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public void setOnKeyListener(android.view.View$OnKeyListener);
  public void setOnTouchListener(android.view.View$OnTouchListener);
  public void setOnGenericMotionListener(android.view.View$OnGenericMotionListener);
  public void setOnHoverListener(android.view.View$OnHoverListener);
  public void setOnDragListener(android.view.View$OnDragListener);
  public boolean requestRectangleOnScreen(android.graphics.Rect);
  public boolean requestRectangleOnScreen(android.graphics.Rect, boolean);
  public void clearFocus();
  public boolean hasFocus();
  public boolean hasFocusable();
  public void sendAccessibilityEvent(int);
  public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo();
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void setAccessibilityDelegate(android.view.View$AccessibilityDelegate);
  public int getAccessibilityViewId();
  public int getAccessibilityWindowId();
  public java.lang.CharSequence getContentDescription();
  public void setContentDescription(java.lang.CharSequence);
  public boolean isFocused();
  public android.view.View findFocus();
  public void setScrollContainer(boolean);
  public int getDrawingCacheQuality();
  public void setDrawingCacheQuality(int);
  public boolean getKeepScreenOn();
  public void setKeepScreenOn(boolean);
  public int getNextFocusLeftId();
  public void setNextFocusLeftId(int);
  public int getNextFocusRightId();
  public void setNextFocusRightId(int);
  public int getNextFocusUpId();
  public void setNextFocusUpId(int);
  public int getNextFocusDownId();
  public void setNextFocusDownId(int);
  public int getNextFocusForwardId();
  public void setNextFocusForwardId(int);
  public boolean isShown();
  public void setFitsSystemWindows(boolean);
  public boolean fitsSystemWindows();
  public int getVisibility();
  public void setVisibility(int);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public void setFocusable(boolean);
  public void setFocusableInTouchMode(boolean);
  public void setSoundEffectsEnabled(boolean);
  public boolean isSoundEffectsEnabled();
  public void setHapticFeedbackEnabled(boolean);
  public boolean isHapticFeedbackEnabled();
  public int getLayoutDirection();
  public void setLayoutDirection(int);
  public int getResolvedLayoutDirection();
  public boolean isLayoutRtl();
  public void setWillNotDraw(boolean);
  public boolean willNotDraw();
  public void setWillNotCacheDrawing(boolean);
  public boolean willNotCacheDrawing();
  public boolean isClickable();
  public void setClickable(boolean);
  public boolean isLongClickable();
  public void setLongClickable(boolean);
  public void setPressed(boolean);
  public boolean isPressed();
  public boolean isSaveEnabled();
  public void setSaveEnabled(boolean);
  public boolean getFilterTouchesWhenObscured();
  public void setFilterTouchesWhenObscured(boolean);
  public boolean isSaveFromParentEnabled();
  public void setSaveFromParentEnabled(boolean);
  public final boolean isFocusable();
  public final boolean isFocusableInTouchMode();
  public android.view.View focusSearch(int);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public java.util.ArrayList<android.view.View> getFocusables(int);
  public void addFocusables(java.util.ArrayList<android.view.View>, int);
  public void addFocusables(java.util.ArrayList<android.view.View>, int, int);
  public void findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int);
  public java.util.ArrayList<android.view.View> getTouchables();
  public void addTouchables(java.util.ArrayList<android.view.View>);
  public final boolean requestFocus();
  public final boolean requestFocus(int);
  public boolean requestFocus(int, android.graphics.Rect);
  public final boolean requestFocusFromTouch();
  public void dispatchStartTemporaryDetach();
  public void onStartTemporaryDetach();
  public void dispatchFinishTemporaryDetach();
  public void onFinishTemporaryDetach();
  public android.view.KeyEvent$DispatcherState getKeyDispatcherState();
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean onFilterTouchEventForSecurity(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public final boolean dispatchPointerEvent(android.view.MotionEvent);
  public void dispatchWindowFocusChanged(boolean);
  public void onWindowFocusChanged(boolean);
  public boolean hasWindowFocus();
  public void dispatchDisplayHint(int);
  public void dispatchWindowVisibilityChanged(int);
  public int getWindowVisibility();
  public void getWindowVisibleDisplayFrame(android.graphics.Rect);
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public boolean isInTouchMode();
  public final android.content.Context getContext();
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onCheckIsTextEditor();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public boolean checkInputConnectionProxy(android.view.View);
  public void createContextMenu(android.view.ContextMenu);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean isHovered();
  public void setHovered(boolean);
  public void onHoverChanged(boolean);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean isInScrollingContainer();
  public void cancelLongPress();
  public void setTouchDelegate(android.view.TouchDelegate);
  public android.view.TouchDelegate getTouchDelegate();
  public void bringToFront();
  public final android.view.ViewParent getParent();
  public void setScrollX(int);
  public void setScrollY(int);
  public final int getScrollX();
  public final int getScrollY();
  public final int getWidth();
  public final int getHeight();
  public void getDrawingRect(android.graphics.Rect);
  public final int getMeasuredWidth();
  public final int getMeasuredWidthAndState();
  public final int getMeasuredHeight();
  public final int getMeasuredHeightAndState();
  public final int getMeasuredState();
  public android.graphics.Matrix getMatrix();
  public void setCameraDistance(float);
  public float getRotation();
  public void setRotation(float);
  public float getRotationY();
  public void setRotationY(float);
  public float getRotationX();
  public void setRotationX(float);
  public float getScaleX();
  public void setScaleX(float);
  public float getScaleY();
  public void setScaleY(float);
  public float getPivotX();
  public void setPivotX(float);
  public float getPivotY();
  public void setPivotY(float);
  public float getAlpha();
  public void setAlpha(float);
  public final int getTop();
  public final void setTop(int);
  public final int getBottom();
  public boolean isDirty();
  public final void setBottom(int);
  public final int getLeft();
  public final void setLeft(int);
  public final int getRight();
  public final void setRight(int);
  public float getX();
  public void setX(float);
  public float getY();
  public void setY(float);
  public float getTranslationX();
  public void setTranslationX(float);
  public float getTranslationY();
  public void setTranslationY(float);
  public void setFastTranslationX(float);
  public void setFastTranslationY(float);
  public void setFastX(float);
  public void setFastY(float);
  public void setFastScaleX(float);
  public void setFastScaleY(float);
  public void setFastAlpha(float);
  public void setFastRotationY(float);
  public void getHitRect(android.graphics.Rect);
  public void getFocusedRect(android.graphics.Rect);
  public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point);
  public final boolean getGlobalVisibleRect(android.graphics.Rect);
  public final boolean getLocalVisibleRect(android.graphics.Rect);
  public void offsetTopAndBottom(int);
  public void offsetLeftAndRight(int);
  public android.view.ViewGroup$LayoutParams getLayoutParams();
  public void setLayoutParams(android.view.ViewGroup$LayoutParams);
  public void scrollTo(int, int);
  public void scrollBy(int, int);
  public void invalidate(android.graphics.Rect);
  public void invalidate(int, int, int, int);
  public void invalidate();
  public void fastInvalidate();
  public boolean isOpaque();
  public android.os.Handler getHandler();
  public boolean post(java.lang.Runnable);
  public boolean postDelayed(java.lang.Runnable, long);
  public boolean removeCallbacks(java.lang.Runnable);
  public void postInvalidate();
  public void postInvalidate(int, int, int, int);
  public void postInvalidateDelayed(long);
  public void postInvalidateDelayed(long, int, int, int, int);
  public void computeScroll();
  public boolean isHorizontalFadingEdgeEnabled();
  public void setHorizontalFadingEdgeEnabled(boolean);
  public boolean isVerticalFadingEdgeEnabled();
  public void setVerticalFadingEdgeEnabled(boolean);
  public boolean isHorizontalScrollBarEnabled();
  public void setHorizontalScrollBarEnabled(boolean);
  public boolean isVerticalScrollBarEnabled();
  public void setVerticalScrollBarEnabled(boolean);
  public void setScrollbarFadingEnabled(boolean);
  public boolean isScrollbarFadingEnabled();
  public void setScrollBarStyle(int);
  public int getScrollBarStyle();
  public boolean canScrollHorizontally(int);
  public boolean canScrollVertically(int);
  public android.os.IBinder getWindowToken();
  public android.os.IBinder getApplicationWindowToken();
  public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>);
  public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>);
  public long getDrawingTime();
  public void setDuplicateParentStateEnabled(boolean);
  public boolean isDuplicateParentStateEnabled();
  public void setLayerType(int, android.graphics.Paint);
  public int getLayerType();
  public void buildLayer();
  public void setDrawingCacheEnabled(boolean);
  public boolean isDrawingCacheEnabled();
  public void outputDirtyFlags(java.lang.String, boolean, int);
  public boolean canHaveDisplayList();
  public android.view.DisplayList getDisplayList();
  public android.graphics.Bitmap getDrawingCache();
  public android.graphics.Bitmap getDrawingCache(boolean);
  public void destroyDrawingCache();
  public void setDrawingCacheBackgroundColor(int);
  public int getDrawingCacheBackgroundColor();
  public void buildDrawingCache();
  public void buildDrawingCache(boolean);
  public boolean isInEditMode();
  public boolean isHardwareAccelerated();
  public void draw(android.graphics.Canvas);
  public int getSolidColor();
  public boolean isLayoutRequested();
  public void layout(int, int, int, int);
  public android.content.res.Resources getResources();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public void unscheduleDrawable(android.graphics.drawable.Drawable);
  public int getResolvedLayoutDirection(android.graphics.drawable.Drawable);
  public void refreshDrawableState();
  public final int[] getDrawableState();
  public void jumpDrawablesToCurrentState();
  public void setBackgroundColor(int);
  public void setBackgroundResource(int);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getBackground();
  public void setPadding(int, int, int, int);
  public void setPaddingRelative(int, int, int, int);
  public int getPaddingTop();
  public int getPaddingBottom();
  public int getPaddingLeft();
  public int getPaddingStart();
  public int getPaddingRight();
  public int getPaddingEnd();
  public boolean isPaddingRelative();
  public void setSelected(boolean);
  public boolean isSelected();
  public void setActivated(boolean);
  public boolean isActivated();
  public android.view.ViewTreeObserver getViewTreeObserver();
  public android.view.View getRootView();
  public void getLocationOnScreen(int[]);
  public void getLocationInWindow(int[]);
  public final android.view.View findViewById(int);
  public final android.view.View findViewWithTag(java.lang.Object);
  public final android.view.View findViewByPredicate(com.android.internal.util.Predicate<android.view.View>);
  public final android.view.View findViewByPredicateInsideOut(android.view.View, com.android.internal.util.Predicate<android.view.View>);
  public void setId(int);
  public void setIsRootNamespace(boolean);
  public boolean isRootNamespace();
  public int getId();
  public java.lang.Object getTag();
  public void setTag(java.lang.Object);
  public java.lang.Object getTag(int);
  public void setTag(int, java.lang.Object);
  public void setTagInternal(int, java.lang.Object);
  public void debug();
  public int getBaseline();
  public void requestLayout();
  public void forceLayout();
  public final void measure(int, int);
  public static int combineMeasuredStates(int, int);
  public static int resolveSize(int, int);
  public static int resolveSizeAndState(int, int, int);
  public static int getDefaultSize(int, int);
  public void setMinimumHeight(int);
  public void setMinimumWidth(int);
  public android.view.animation.Animation getAnimation();
  public void startAnimation(android.view.animation.Animation);
  public void clearAnimation();
  public void setAnimation(android.view.animation.Animation);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void playSoundEffect(int);
  public boolean performHapticFeedback(int);
  public boolean performHapticFeedback(int, int);
  public void setSystemUiVisibility(int);
  public int getSystemUiVisibility();
  public void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener);
  public void dispatchSystemUiVisibilityChanged(int);
  public final boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int);
  public boolean onDragEvent(android.view.DragEvent);
  public boolean dispatchDragEvent(android.view.DragEvent);
  public void onCloseSystemDialogs(java.lang.String);
  public void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable, android.graphics.Region);
  public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup);
  public int getOverScrollMode();
  public void setOverScrollMode(int);
  public int getTextDirection();
  public void setTextDirection(int);
  public int getResolvedTextDirection();
  public void hackTurnOffWindowResizeAnim(boolean);
  public android.view.ViewPropertyAnimator animate();
public class android.view.ViewConfiguration {
  public android.view.ViewConfiguration();
  public static android.view.ViewConfiguration get(android.content.Context);
  public static int getScrollBarSize();
  public int getScaledScrollBarSize();
  public static int getScrollBarFadeDuration();
  public static int getScrollDefaultDelay();
  public static int getFadingEdgeLength();
  public int getScaledFadingEdgeLength();
  public static int getPressedStateDuration();
  public static int getLongPressTimeout();
  public static int getKeyRepeatTimeout();
  public static int getKeyRepeatDelay();
  public static int getTapTimeout();
  public static int getJumpTapTimeout();
  public static int getDoubleTapTimeout();
  public static int getHoverTapTimeout();
  public static int getHoverTapSlop();
  public static int getEdgeSlop();
  public int getScaledEdgeSlop();
  public static int getTouchSlop();
  public int getScaledTouchSlop();
  public int getScaledPagingTouchSlop();
  public static int getDoubleTapSlop();
  public int getScaledDoubleTapSlop();
  public int getScaledTouchExplorationTapSlop();
  public static long getSendRecurringAccessibilityEventsInterval();
  public static int getWindowTouchSlop();
  public int getScaledWindowTouchSlop();
  public static int getMinimumFlingVelocity();
  public int getScaledMinimumFlingVelocity();
  public static int getMaximumFlingVelocity();
  public int getScaledMaximumFlingVelocity();
  public static int getMaximumDrawingCacheSize();
  public int getScaledMaximumDrawingCacheSize();
  public int getScaledOverscrollDistance();
  public int getScaledOverflingDistance();
  public static long getZoomControlsTimeout();
  public static long getGlobalActionKeyTimeout();
  public static float getScrollFriction();
  public boolean hasPermanentMenuKey();
  public boolean isFadingMarqueeEnabled();
  public void run();
  public java.lang.Void[] pre();
  public void run(java.lang.Void...);
  public void post(java.lang.Void...);
  public void post(java.lang.Object[]);
  public void run(java.lang.Object[]);
  public java.lang.Object[] pre();
  public java.lang.Void[] pre();
  public void run(java.lang.Void...);
  public void post(java.lang.Void...);
  public void post(java.lang.Object[]);
  public void run(java.lang.Object[]);
  public java.lang.Object[] pre();
  public java.lang.Object[] pre();
  public void run(java.lang.Object...);
  public void post(java.lang.Object...);
  public void run();
  public void run();
public interface android.view.ViewDebug$CapturedViewProperty extends java.lang.annotation.Annotation {
  public abstract boolean retrieveReturn();
public interface android.view.ViewDebug$ExportedProperty extends java.lang.annotation.Annotation {
  public abstract boolean resolveId();
  public abstract android.view.ViewDebug$IntToString[] mapping();
  public abstract android.view.ViewDebug$IntToString[] indexMapping();
  public abstract android.view.ViewDebug$FlagToString[] flagMapping();
  public abstract boolean deepExport();
  public abstract java.lang.String prefix();
  public abstract java.lang.String category();
public interface android.view.ViewDebug$FlagToString extends java.lang.annotation.Annotation {
  public abstract int mask();
  public abstract int equals();
  public abstract java.lang.String name();
  public abstract boolean outputIf();
public final class android.view.ViewDebug$HierarchyTraceType extends java.lang.Enum<android.view.ViewDebug$HierarchyTraceType> {
  public static android.view.ViewDebug$HierarchyTraceType[] values();
  public static android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String);
public interface android.view.ViewDebug$IntToString extends java.lang.annotation.Annotation {
  public abstract int from();
  public abstract java.lang.String to();
  public void run();
  public void println(java.lang.String);
  public void profile(android.os.Message, long, long, long, long);
public final class android.view.ViewDebug$RecyclerTraceType extends java.lang.Enum<android.view.ViewDebug$RecyclerTraceType> {
  public static android.view.ViewDebug$RecyclerTraceType[] values();
  public static android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String);
  public abstract T[] pre();
  public abstract void run(T...);
  public abstract void post(T...);
public class android.view.ViewDebug {
  public android.view.ViewDebug();
  public static long getViewInstanceCount();
  public static long getViewRootImplCount();
  public static void startLooperProfiling(java.lang.String, java.io.FileDescriptor);
  public static void stopLooperProfiling();
  public static void trace(android.view.View, android.view.ViewDebug$RecyclerTraceType, int...);
  public static void startRecyclerTracing(java.lang.String, android.view.View);
  public static void stopRecyclerTracing();
  public static void trace(android.view.View, android.view.ViewDebug$HierarchyTraceType);
  public static void startHierarchyTracing(java.lang.String, android.view.View);
  public static void stopHierarchyTracing();
  public static void dumpCapturedView(java.lang.String, java.lang.Object);
  public static android.view.ViewGroup$HoverTarget obtain(android.view.View);
  public void recycle();
public class android.view.ViewGroup$LayoutParams {
  public android.view.ViewGroup$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams(int, int);
  public android.view.ViewGroup$LayoutParams(android.view.ViewGroup$LayoutParams);
  public java.lang.String debug(java.lang.String);
public class android.view.ViewGroup$MarginLayoutParams extends android.view.ViewGroup$LayoutParams {
  public android.view.ViewGroup$MarginLayoutParams(android.content.Context, android.util.AttributeSet);
  public android.view.ViewGroup$MarginLayoutParams(int, int);
  public android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$MarginLayoutParams);
  public android.view.ViewGroup$MarginLayoutParams(android.view.ViewGroup$LayoutParams);
  public void setMargins(int, int, int, int);
  public void setMarginsRelative(int, int, int, int);
  public int getMarginStart();
  public int getMarginEnd();
  public boolean isMarginRelative();
public interface android.view.ViewGroup$OnHierarchyChangeListener {
  public abstract void onChildViewAdded(android.view.View, android.view.View);
  public abstract void onChildViewRemoved(android.view.View, android.view.View);
  public static android.view.ViewGroup$TouchTarget obtain(android.view.View, int);
  public void recycle();
public abstract class android.view.ViewGroup extends android.view.View implements android.view.ViewParent,android.view.ViewManager {
  public android.view.ViewGroup(android.content.Context);
  public android.view.ViewGroup(android.content.Context, android.util.AttributeSet);
  public android.view.ViewGroup(android.content.Context, android.util.AttributeSet, int);
  public int getDescendantFocusability();
  public void setDescendantFocusability(int);
  public void requestChildFocus(android.view.View, android.view.View);
  public void focusableViewAvailable(android.view.View);
  public boolean showContextMenuForChild(android.view.View);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public android.view.View focusSearch(android.view.View, int);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public void clearChildFocus(android.view.View);
  public void clearFocus();
  public android.view.View getFocusedChild();
  public boolean hasFocus();
  public android.view.View findFocus();
  public boolean hasFocusable();
  public void addFocusables(java.util.ArrayList<android.view.View>, int);
  public void addFocusables(java.util.ArrayList<android.view.View>, int, int);
  public void findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int);
  public void dispatchWindowFocusChanged(boolean);
  public void addTouchables(java.util.ArrayList<android.view.View>);
  public void dispatchDisplayHint(int);
  public void dispatchWindowVisibilityChanged(int);
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void recomputeViewAttributes(android.view.View);
  public void bringChildToFront(android.view.View);
  public boolean dispatchDragEvent(android.view.DragEvent);
  public void dispatchSystemUiVisibilityChanged(int);
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean onInterceptHoverEvent(android.view.MotionEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public void setMotionEventSplittingEnabled(boolean);
  public boolean isMotionEventSplittingEnabled();
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean requestFocus(int, android.graphics.Rect);
  public void dispatchStartTemporaryDetach();
  public void dispatchFinishTemporaryDetach();
  public void setPadding(int, int, int, int);
  public void setChildrenLayersEnabled(boolean);
  public void setClipChildren(boolean);
  public void setClipToPadding(boolean);
  public void dispatchSetSelected(boolean);
  public void dispatchSetActivated(boolean);
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public void removeView(android.view.View);
  public void removeViewInLayout(android.view.View);
  public void removeViewsInLayout(int, int);
  public void removeViewAt(int);
  public void removeViews(int, int);
  public void setLayoutTransition(android.animation.LayoutTransition);
  public android.animation.LayoutTransition getLayoutTransition();
  public void removeAllViews();
  public void removeAllViewsInLayout();
  public final void invalidateChild(android.view.View, android.graphics.Rect);
  public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
  public final void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect);
  public final void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect);
  public void offsetChildrenTopAndBottom(int);
  public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public final void layout(int, int, int, int);
  public void startLayoutAnimation();
  public void scheduleLayoutAnimation();
  public void setLayoutAnimation(android.view.animation.LayoutAnimationController);
  public android.view.animation.LayoutAnimationController getLayoutAnimation();
  public boolean isAnimationCacheEnabled();
  public void setAnimationCacheEnabled(boolean);
  public boolean isAlwaysDrawnWithCacheEnabled();
  public void setAlwaysDrawnWithCacheEnabled(boolean);
  public int getPersistentDrawingCache();
  public void setPersistentDrawingCache(int);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public int indexOfChild(android.view.View);
  public int getChildCount();
  public android.view.View getChildAt(int);
  public static int getChildMeasureSpec(int, int, int);
  public void clearDisappearingChildren();
  public void startViewTransition(android.view.View);
  public void endViewTransition(android.view.View);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void requestTransparentRegion(android.view.View);
  public android.view.animation.Animation$AnimationListener getLayoutAnimationListener();
  public void jumpDrawablesToCurrentState();
  public void setAddStatesFromChildren(boolean);
  public boolean addStatesFromChildren();
  public void childDrawableStateChanged(android.view.View);
  public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener);
  public void requestTransitionStart(android.animation.LayoutTransition);
  public boolean shouldDelayChildPressedState();
public interface android.view.ViewManager {
  public abstract void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void removeView(android.view.View);
public interface android.view.ViewParent {
  public abstract void requestLayout();
  public abstract boolean isLayoutRequested();
  public abstract void requestTransparentRegion(android.view.View);
  public abstract void invalidateChild(android.view.View, android.graphics.Rect);
  public abstract android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
  public abstract android.view.ViewParent getParent();
  public abstract void requestChildFocus(android.view.View, android.view.View);
  public abstract void recomputeViewAttributes(android.view.View);
  public abstract void clearChildFocus(android.view.View);
  public abstract boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public abstract android.view.View focusSearch(android.view.View, int);
  public abstract void bringChildToFront(android.view.View);
  public abstract void focusableViewAvailable(android.view.View);
  public abstract boolean showContextMenuForChild(android.view.View);
  public abstract void createContextMenu(android.view.ContextMenu);
  public abstract android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public abstract void childDrawableStateChanged(android.view.View);
  public abstract void requestDisallowInterceptTouchEvent(boolean);
  public abstract boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public abstract boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void run();
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationUpdate(android.animation.ValueAnimator);
public class android.view.ViewPropertyAnimator {
  public android.view.ViewPropertyAnimator setDuration(long);
  public long getDuration();
  public long getStartDelay();
  public android.view.ViewPropertyAnimator setStartDelay(long);
  public android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator);
  public android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener);
  public void start();
  public void cancel();
  public android.view.ViewPropertyAnimator x(float);
  public android.view.ViewPropertyAnimator xBy(float);
  public android.view.ViewPropertyAnimator y(float);
  public android.view.ViewPropertyAnimator yBy(float);
  public android.view.ViewPropertyAnimator rotation(float);
  public android.view.ViewPropertyAnimator rotationBy(float);
  public android.view.ViewPropertyAnimator rotationX(float);
  public android.view.ViewPropertyAnimator rotationXBy(float);
  public android.view.ViewPropertyAnimator rotationY(float);
  public android.view.ViewPropertyAnimator rotationYBy(float);
  public android.view.ViewPropertyAnimator translationX(float);
  public android.view.ViewPropertyAnimator translationXBy(float);
  public android.view.ViewPropertyAnimator translationY(float);
  public android.view.ViewPropertyAnimator translationYBy(float);
  public android.view.ViewPropertyAnimator scaleX(float);
  public android.view.ViewPropertyAnimator scaleXBy(float);
  public android.view.ViewPropertyAnimator scaleY(float);
  public android.view.ViewPropertyAnimator scaleYBy(float);
  public android.view.ViewPropertyAnimator alpha(float);
  public android.view.ViewPropertyAnimator alphaBy(float);
  public void run();
  public void handleKey(android.view.KeyEvent, android.view.InputQueue$FinishedCallback);
  public void handleMotion(android.view.MotionEvent, android.view.InputQueue$FinishedCallback);
  public android.view.Surface getSurface();
  public boolean isCreating();
  public void addCallback(android.view.SurfaceHolder$Callback);
  public void removeCallback(android.view.SurfaceHolder$Callback);
  public void setFixedSize(int, int);
  public void setSizeFromLayout();
  public void setFormat(int);
  public void setType(int);
  public void setKeepScreenOn(boolean);
  public android.graphics.Canvas lockCanvas();
  public android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public void unlockCanvasAndPost(android.graphics.Canvas);
  public android.graphics.Rect getSurfaceFrame();
  public void findAccessibilityNodeInfoByAccessibilityId(int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void performAccessibilityAction(int, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void findAccessibilityNodeInfoByViewId(int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void findAccessibilityNodeInfosByViewText(java.lang.String, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void onAccessibilityStateChanged(boolean);
  public void ensureConnection();
  public void ensureNoConnection();
  public android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs newInstance();
  public void onAcquired(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs);
  public void onReleased(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs);
  public void onReleased(android.util.Poolable);
  public void onAcquired(android.util.Poolable);
  public android.util.Poolable newInstance();
public class android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs implements android.util.Poolable<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs> {
  public android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs(android.view.ViewRootImpl$AccessibilityInteractionController);
  public android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs getNextPoolable();
  public boolean isPooled();
  public void setNextPoolable(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs);
  public void setPooled(boolean);
  public java.lang.Object getNextPoolable();
  public void setNextPoolable(java.lang.Object);
  public void findAccessibilityNodeInfoByAccessibilityIdClientThread(int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void findAccessibilityNodeInfoByAccessibilityIdUiThread(android.os.Message);
  public void findAccessibilityNodeInfoByViewIdClientThread(int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void findAccessibilityNodeInfoByViewIdUiThread(android.os.Message);
  public void findAccessibilityNodeInfosByViewTextClientThread(java.lang.String, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void findAccessibilityNodeInfosByViewTextUiThread(android.os.Message);
  public void performAccessibilityActionClientThread(int, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long);
  public void perfromAccessibilityActionUiThread(android.os.Message);
public final class android.view.ViewRootImpl$CalledFromWrongThreadException extends android.util.AndroidRuntimeException {
  public android.view.ViewRootImpl$CalledFromWrongThreadException(java.lang.String);
  public static android.view.ViewRootImpl$InputEventMessage obtain(android.os.Message);
  public void recycle();
  public android.view.ViewRootImpl$InputMethodCallback(android.view.ViewRootImpl);
  public void finishedEvent(int, boolean);
  public void sessionCreated(com.android.internal.view.IInputMethodSession);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void run();
  public boolean onAllowLockCanvas();
  public void onRelayoutContainer();
  public void setFormat(int);
  public void setType(int);
  public void onUpdateSurface();
  public boolean isCreating();
  public void setFixedSize(int, int);
  public void setKeepScreenOn(boolean);
  public void resized(int, int, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration);
  public void dispatchAppVisibility(boolean);
  public void dispatchGetNewSurface();
  public void windowFocusChanged(boolean, boolean);
  public void executeCommand(java.lang.String, java.lang.String, android.os.ParcelFileDescriptor);
  public void closeSystemDialogs(java.lang.String);
  public void dispatchWallpaperOffsets(float, float, float, float, boolean);
  public void dispatchWallpaperCommand(java.lang.String, int, int, int, android.os.Bundle, boolean);
  public void dispatchDragEvent(android.view.DragEvent);
  public void dispatchSystemUiVisibilityChanged(int, int, int, int);
public final class android.view.ViewRootImpl extends android.os.Handler implements android.view.ViewParent,android.view.View$AttachInfo$Callbacks,android.view.HardwareRenderer$HardwareDrawCallbacks {
  public static android.view.IWindowSession getWindowSession(android.os.Looper);
  public android.view.ViewRootImpl(android.content.Context);
  public static void addFirstDrawHandler(java.lang.Runnable);
  public static void addConfigCallback(android.content.ComponentCallbacks);
  public void profile();
  public void setView(android.view.View, android.view.WindowManager$LayoutParams, android.view.View);
  public android.view.View getView();
  public void requestLayout();
  public boolean isLayoutRequested();
  public void invalidateChild(android.view.View, android.graphics.Rect);
  public android.view.ViewParent getParent();
  public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
  public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public void bringChildToFront(android.view.View);
  public void scheduleTraversals();
  public void unscheduleTraversals();
  public void requestTransitionStart(android.animation.LayoutTransition);
  public void requestTransparentRegion(android.view.View);
  public void onHardwarePreDraw(android.view.HardwareCanvas);
  public void onHardwarePostDraw(android.view.HardwareCanvas);
  public void requestChildFocus(android.view.View, android.view.View);
  public void clearChildFocus(android.view.View);
  public void focusableViewAvailable(android.view.View);
  public void recomputeViewAttributes(android.view.View);
  public java.lang.String getMessageName(android.os.Message);
  public void handleMessage(android.os.Message);
  public void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo);
  public void getLastTouchPoint(android.graphics.Point);
  public void setDragFocus(android.view.View);
  public android.view.ViewRootImpl$AccessibilityInteractionController getAccessibilityInteractionController();
  public void playSoundEffect(int);
  public boolean performHapticFeedback(int, boolean);
  public android.view.View focusSearch(android.view.View, int);
  public void debug();
  public void dumpGfxInfo(java.io.PrintWriter, int[]);
  public void die(boolean);
  public void requestUpdateConfiguration(android.content.res.Configuration);
  public void dispatchFinishedEvent(int, boolean);
  public void dispatchResized(int, int, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration);
  public void dispatchKey(android.view.KeyEvent);
  public void dispatchAppVisibility(boolean);
  public void dispatchGetNewSurface();
  public void windowFocusChanged(boolean, boolean);
  public void dispatchCloseSystemDialogs(java.lang.String);
  public void dispatchDragEvent(android.view.DragEvent);
  public void dispatchSystemUiVisibilityChanged(int, int, int, int);
  public boolean showContextMenuForChild(android.view.View);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public void createContextMenu(android.view.ContextMenu);
  public void childDrawableStateChanged(android.view.View);
  public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
public interface android.view.ViewStub$OnInflateListener {
  public abstract void onInflate(android.view.ViewStub, android.view.View);
public final class android.view.ViewStub extends android.view.View {
  public android.view.ViewStub(android.content.Context);
  public android.view.ViewStub(android.content.Context, int);
  public android.view.ViewStub(android.content.Context, android.util.AttributeSet);
  public android.view.ViewStub(android.content.Context, android.util.AttributeSet, int);
  public int getInflatedId();
  public void setInflatedId(int);
  public int getLayoutResource();
  public void setLayoutResource(int);
  public void draw(android.graphics.Canvas);
  public void setVisibility(int);
  public android.view.View inflate();
  public void setOnInflateListener(android.view.ViewStub$OnInflateListener);
public final class android.view.ViewTreeObserver$InternalInsetsInfo {
  public android.view.ViewTreeObserver$InternalInsetsInfo();
  public void setTouchableInsets(int);
  public int getTouchableInsets();
  public boolean equals(java.lang.Object);
public interface android.view.ViewTreeObserver$OnComputeInternalInsetsListener {
  public abstract void onComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo);
public interface android.view.ViewTreeObserver$OnGlobalFocusChangeListener {
  public abstract void onGlobalFocusChanged(android.view.View, android.view.View);
public interface android.view.ViewTreeObserver$OnGlobalLayoutListener {
  public abstract void onGlobalLayout();
public interface android.view.ViewTreeObserver$OnPreDrawListener {
  public abstract boolean onPreDraw();
public interface android.view.ViewTreeObserver$OnScrollChangedListener {
  public abstract void onScrollChanged();
public interface android.view.ViewTreeObserver$OnTouchModeChangeListener {
  public abstract void onTouchModeChanged(boolean);
public final class android.view.ViewTreeObserver {
  public void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener);
  public void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener);
  public void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener);
  public void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener);
  public void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener);
  public void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener);
  public void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener);
  public void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener);
  public void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener);
  public void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener);
  public void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener);
  public void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener);
  public boolean isAlive();
  public final void dispatchOnGlobalLayout();
  public final boolean dispatchOnPreDraw();
public interface android.view.Window$Callback {
  public abstract boolean dispatchKeyEvent(android.view.KeyEvent);
  public abstract boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public abstract boolean dispatchTouchEvent(android.view.MotionEvent);
  public abstract boolean dispatchTrackballEvent(android.view.MotionEvent);
  public abstract boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public abstract boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public abstract android.view.View onCreatePanelView(int);
  public abstract boolean onCreatePanelMenu(int, android.view.Menu);
  public abstract boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public abstract boolean onMenuOpened(int, android.view.Menu);
  public abstract boolean onMenuItemSelected(int, android.view.MenuItem);
  public abstract void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public abstract void onContentChanged();
  public abstract void onWindowFocusChanged(boolean);
  public abstract void onAttachedToWindow();
  public abstract void onDetachedFromWindow();
  public abstract void onPanelClosed(int, android.view.Menu);
  public abstract boolean onSearchRequested();
  public abstract android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public abstract void onActionModeStarted(android.view.ActionMode);
  public abstract void onActionModeFinished(android.view.ActionMode);
  public boolean isHardwareAccelerated();
  public final void addView(android.view.View, android.view.ViewGroup$LayoutParams);
public abstract class android.view.Window {
  public android.view.Window(android.content.Context);
  public final android.content.Context getContext();
  public final android.content.res.TypedArray getWindowStyle();
  public void setContainer(android.view.Window);
  public final android.view.Window getContainer();
  public final boolean hasChildren();
  public final void destroy();
  public final boolean isDestroyed();
  public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String);
  public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String, boolean);
  public android.view.WindowManager getWindowManager();
  public void setCallback(android.view.Window$Callback);
  public final android.view.Window$Callback getCallback();
  public abstract void takeSurface(android.view.SurfaceHolder$Callback2);
  public abstract void takeInputQueue(android.view.InputQueue$Callback);
  public abstract boolean isFloating();
  public void setLayout(int, int);
  public void setGravity(int);
  public void setType(int);
  public void setFormat(int);
  public void setWindowAnimations(int);
  public void setSoftInputMode(int);
  public void addFlags(int);
  public void clearFlags(int);
  public void setFlags(int, int);
  public void setDimAmount(float);
  public void setAttributes(android.view.WindowManager$LayoutParams);
  public final android.view.WindowManager$LayoutParams getAttributes();
  public void setCloseOnTouchOutside(boolean);
  public void setCloseOnTouchOutsideIfNotSet(boolean);
  public abstract void alwaysReadCloseOnTouchAttr();
  public boolean shouldCloseOnTouch(android.content.Context, android.view.MotionEvent);
  public boolean requestFeature(int);
  public final void makeActive();
  public final boolean isActive();
  public android.view.View findViewById(int);
  public abstract void setContentView(int);
  public abstract void setContentView(android.view.View);
  public abstract void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract android.view.View getCurrentFocus();
  public abstract android.view.LayoutInflater getLayoutInflater();
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void setTitleColor(int);
  public abstract void openPanel(int, android.view.KeyEvent);
  public abstract void closePanel(int);
  public abstract void togglePanel(int, android.view.KeyEvent);
  public abstract void invalidatePanelMenu(int);
  public abstract boolean performPanelShortcut(int, int, android.view.KeyEvent, int);
  public abstract boolean performPanelIdentifierAction(int, int, int);
  public abstract void closeAllPanels();
  public abstract boolean performContextMenuIdentifierAction(int, int);
  public abstract void onConfigurationChanged(android.content.res.Configuration);
  public void setBackgroundDrawableResource(int);
  public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public abstract void setFeatureDrawableResource(int, int);
  public abstract void setFeatureDrawableUri(int, android.net.Uri);
  public abstract void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public abstract void setFeatureDrawableAlpha(int, int);
  public abstract void setFeatureInt(int, int);
  public abstract void takeKeyEvents(boolean);
  public abstract boolean superDispatchKeyEvent(android.view.KeyEvent);
  public abstract boolean superDispatchKeyShortcutEvent(android.view.KeyEvent);
  public abstract boolean superDispatchTouchEvent(android.view.MotionEvent);
  public abstract boolean superDispatchTrackballEvent(android.view.MotionEvent);
  public abstract boolean superDispatchGenericMotionEvent(android.view.MotionEvent);
  public abstract android.view.View getDecorView();
  public abstract android.view.View peekDecorView();
  public abstract android.os.Bundle saveHierarchyState();
  public abstract void restoreHierarchyState(android.os.Bundle);
  public boolean hasFeature(int);
  public abstract void setChildDrawable(int, android.graphics.drawable.Drawable);
  public abstract void setChildInt(int, int);
  public abstract boolean isShortcutKey(int, android.view.KeyEvent);
  public abstract void setVolumeControlStream(int);
  public abstract int getVolumeControlStream();
  public void setUiOptions(int);
  public void setUiOptions(int, int);
  public android.view.WindowLeaked(java.lang.String);
public class android.view.WindowManager$BadTokenException extends java.lang.RuntimeException {
  public android.view.WindowManager$BadTokenException();
  public android.view.WindowManager$BadTokenException(java.lang.String);
  public android.view.WindowManager$LayoutParams createFromParcel(android.os.Parcel);
  public android.view.WindowManager$LayoutParams[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.WindowManager$LayoutParams extends android.view.ViewGroup$LayoutParams implements android.os.Parcelable {
  public static boolean mayUseInputMethod(int);
  public android.view.WindowManager$LayoutParams();
  public android.view.WindowManager$LayoutParams(int);
  public android.view.WindowManager$LayoutParams(int, int);
  public android.view.WindowManager$LayoutParams(int, int, int);
  public android.view.WindowManager$LayoutParams(int, int, int, int, int);
  public android.view.WindowManager$LayoutParams(int, int, int, int, int, int, int);
  public final void setTitle(java.lang.CharSequence);
  public final java.lang.CharSequence getTitle();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.view.WindowManager$LayoutParams(android.os.Parcel);
  public final int copyFrom(android.view.WindowManager$LayoutParams);
  public java.lang.String debug(java.lang.String);
  public java.lang.String toString();
  public void scale(float);
public interface android.view.WindowManager extends android.view.ViewManager {
  public abstract android.view.Display getDefaultDisplay();
  public abstract void removeViewImmediate(android.view.View);
  public abstract boolean isHardwareAccelerated();
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  public void removeView(android.view.View);
  public android.view.Display getDefaultDisplay();
  public void removeViewImmediate(android.view.View);
  public boolean isHardwareAccelerated();
public class android.view.WindowManagerImpl implements android.view.WindowManager {
  public android.view.WindowManagerImpl();
  public static android.view.WindowManagerImpl getDefault();
  public static android.view.WindowManager getDefault(android.content.res.CompatibilityInfo);
  public static android.view.WindowManager getDefault(android.view.CompatibilityInfoHolder);
  public boolean isHardwareAccelerated();
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams, android.view.CompatibilityInfoHolder);
  public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  public void removeView(android.view.View);
  public void removeViewImmediate(android.view.View);
  public void closeAll(android.os.IBinder, java.lang.String, java.lang.String);
  public void trimMemory(int);
  public void trimLocalMemory();
  public void dumpGfxInfo(java.io.FileDescriptor);
  public void setStoppedState(android.os.IBinder, boolean);
  public void reportNewConfiguration(android.content.res.Configuration);
  public android.view.WindowManager$LayoutParams getRootViewLayoutParameter(android.view.View);
  public void closeAll();
  public android.view.Display getDefaultDisplay();
  public android.view.accessibility.AccessibilityEvent createFromParcel(android.os.Parcel);
  public android.view.accessibility.AccessibilityEvent[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.accessibility.AccessibilityEvent extends android.view.accessibility.AccessibilityRecord implements android.os.Parcelable {
  public void setSealed(boolean);
  public int getRecordCount();
  public void appendRecord(android.view.accessibility.AccessibilityRecord);
  public android.view.accessibility.AccessibilityRecord getRecord(int);
  public int getEventType();
  public void setEventType(int);
  public long getEventTime();
  public void setEventTime(long);
  public java.lang.CharSequence getPackageName();
  public void setPackageName(java.lang.CharSequence);
  public static android.view.accessibility.AccessibilityEvent obtain(int);
  public static android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent);
  public static android.view.accessibility.AccessibilityEvent obtain();
  public void recycle();
  public void initFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public java.lang.String toString();
  public static java.lang.String eventTypeToString(int);
public interface android.view.accessibility.AccessibilityEventSource {
  public abstract void sendAccessibilityEvent(int);
  public abstract void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
public final class android.view.accessibility.AccessibilityInteractionClient extends android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub {
  public android.view.accessibility.AccessibilityInteractionClient();
  public static android.view.accessibility.AccessibilityInteractionClient getInstance();
  public void setSameThreadMessage(android.os.Message);
  public android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int, int, int);
  public android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByViewIdInActiveWindow(int, int);
  public java.util.List<android.view.accessibility.AccessibilityNodeInfo> findAccessibilityNodeInfosByViewTextInActiveWindow(int, java.lang.String);
  public java.util.List<android.view.accessibility.AccessibilityNodeInfo> findAccessibilityNodeInfosByViewText(int, java.lang.String, int, int);
  public boolean performAccessibilityAction(int, int, int, int);
  public void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo, int);
  public void setFindAccessibilityNodeInfosResult(java.util.List<android.view.accessibility.AccessibilityNodeInfo>, int);
  public void setPerformAccessibilityActionResult(boolean, int);
  public android.accessibilityservice.IAccessibilityServiceConnection getConnection(int);
  public void addConnection(int, android.accessibilityservice.IAccessibilityServiceConnection);
  public void removeConnection(int);
  public void setState(int);
public interface android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener {
  public abstract void onAccessibilityStateChanged(boolean);
  public void handleMessage(android.os.Message);
public final class android.view.accessibility.AccessibilityManager {
  public static android.view.accessibility.AccessibilityManager getInstance(android.content.Context);
  public android.view.accessibility.AccessibilityManager(android.content.Context, android.view.accessibility.IAccessibilityManager);
  public boolean isEnabled();
  public boolean isTouchExplorationEnabled();
  public android.view.accessibility.IAccessibilityManagerClient getClient();
  public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void interrupt();
  public java.util.List<android.content.pm.ServiceInfo> getAccessibilityServiceList();
  public java.util.List<android.accessibilityservice.AccessibilityServiceInfo> getInstalledAccessibilityServiceList();
  public java.util.List<android.accessibilityservice.AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int);
  public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener);
  public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener);
  public int addAccessibilityInteractionConnection(android.view.IWindow, android.view.accessibility.IAccessibilityInteractionConnection);
  public void removeAccessibilityInteractionConnection(android.view.IWindow);
  public android.view.accessibility.AccessibilityNodeInfo createFromParcel(android.os.Parcel);
  public android.view.accessibility.AccessibilityNodeInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.accessibility.AccessibilityNodeInfo implements android.os.Parcelable {
  public void setSource(android.view.View);
  public int getWindowId();
  public int getChildCount();
  public android.view.accessibility.AccessibilityNodeInfo getChild(int);
  public void addChild(android.view.View);
  public int getActions();
  public void addAction(int);
  public boolean performAction(int);
  public java.util.List<android.view.accessibility.AccessibilityNodeInfo> findAccessibilityNodeInfosByText(java.lang.String);
  public android.view.accessibility.AccessibilityNodeInfo getParent();
  public void setParent(android.view.View);
  public void getBoundsInParent(android.graphics.Rect);
  public void setBoundsInParent(android.graphics.Rect);
  public void getBoundsInScreen(android.graphics.Rect);
  public void setBoundsInScreen(android.graphics.Rect);
  public boolean isCheckable();
  public void setCheckable(boolean);
  public boolean isChecked();
  public void setChecked(boolean);
  public boolean isFocusable();
  public void setFocusable(boolean);
  public boolean isFocused();
  public void setFocused(boolean);
  public boolean isSelected();
  public void setSelected(boolean);
  public boolean isClickable();
  public void setClickable(boolean);
  public boolean isLongClickable();
  public void setLongClickable(boolean);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isPassword();
  public void setPassword(boolean);
  public boolean isScrollable();
  public void setScrollable(boolean);
  public java.lang.CharSequence getPackageName();
  public void setPackageName(java.lang.CharSequence);
  public java.lang.CharSequence getClassName();
  public void setClassName(java.lang.CharSequence);
  public java.lang.CharSequence getText();
  public void setText(java.lang.CharSequence);
  public java.lang.CharSequence getContentDescription();
  public void setContentDescription(java.lang.CharSequence);
  public void setConnectionId(int);
  public int describeContents();
  public void setSealed(boolean);
  public boolean isSealed();
  public static android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View);
  public static android.view.accessibility.AccessibilityNodeInfo obtain();
  public static android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo);
  public void recycle();
  public void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public class android.view.accessibility.AccessibilityRecord {
  public void setSource(android.view.View);
  public android.view.accessibility.AccessibilityNodeInfo getSource();
  public int getWindowId();
  public boolean isChecked();
  public void setChecked(boolean);
  public boolean isEnabled();
  public void setEnabled(boolean);
  public boolean isPassword();
  public void setPassword(boolean);
  public boolean isFullScreen();
  public void setFullScreen(boolean);
  public boolean isScrollable();
  public void setScrollable(boolean);
  public int getItemCount();
  public void setItemCount(int);
  public int getCurrentItemIndex();
  public void setCurrentItemIndex(int);
  public int getFromIndex();
  public void setFromIndex(int);
  public int getToIndex();
  public void setToIndex(int);
  public int getScrollX();
  public void setScrollX(int);
  public int getScrollY();
  public void setScrollY(int);
  public int getMaxScrollX();
  public void setMaxScrollX(int);
  public int getMaxScrollY();
  public void setMaxScrollY(int);
  public int getAddedCount();
  public void setAddedCount(int);
  public int getRemovedCount();
  public void setRemovedCount(int);
  public java.lang.CharSequence getClassName();
  public void setClassName(java.lang.CharSequence);
  public java.util.List<java.lang.CharSequence> getText();
  public java.lang.CharSequence getBeforeText();
  public void setBeforeText(java.lang.CharSequence);
  public java.lang.CharSequence getContentDescription();
  public void setContentDescription(java.lang.CharSequence);
  public android.os.Parcelable getParcelableData();
  public void setParcelableData(android.os.Parcelable);
  public void setConnectionId(int);
  public void setSealed(boolean);
  public static android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord);
  public static android.view.accessibility.AccessibilityRecord obtain();
  public void recycle();
  public java.lang.String toString();
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.accessibility.IAccessibilityInteractionConnection$Stub extends android.os.Binder implements android.view.accessibility.IAccessibilityInteractionConnection {
  public android.view.accessibility.IAccessibilityInteractionConnection$Stub();
  public static android.view.accessibility.IAccessibilityInteractionConnection asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.accessibility.IAccessibilityInteractionConnection extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub extends android.os.Binder implements android.view.accessibility.IAccessibilityInteractionConnectionCallback {
  public android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub();
  public static android.view.accessibility.IAccessibilityInteractionConnectionCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.accessibility.IAccessibilityInteractionConnectionCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.accessibility.IAccessibilityManager$Stub extends android.os.Binder implements android.view.accessibility.IAccessibilityManager {
  public android.view.accessibility.IAccessibilityManager$Stub();
  public static android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.accessibility.IAccessibilityManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class android.view.accessibility.IAccessibilityManagerClient$Stub extends android.os.Binder implements android.view.accessibility.IAccessibilityManagerClient {
  public android.view.accessibility.IAccessibilityManagerClient$Stub();
  public static android.view.accessibility.IAccessibilityManagerClient asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface android.view.accessibility.IAccessibilityManagerClient extends android.os.IInterface {
public class android.view.animation.AccelerateDecelerateInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.AccelerateDecelerateInterpolator();
  public android.view.animation.AccelerateDecelerateInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.AccelerateInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.AccelerateInterpolator();
  public android.view.animation.AccelerateInterpolator(float);
  public android.view.animation.AccelerateInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.AlphaAnimation extends android.view.animation.Animation {
  public android.view.animation.AlphaAnimation(android.content.Context, android.util.AttributeSet);
  public android.view.animation.AlphaAnimation(float, float);
  public boolean willChangeTransformationMatrix();
  public boolean willChangeBounds();
  public boolean hasAlpha();
public interface android.view.animation.Animation$AnimationListener {
  public abstract void onAnimationStart(android.view.animation.Animation);
  public abstract void onAnimationEnd(android.view.animation.Animation);
  public abstract void onAnimationRepeat(android.view.animation.Animation);
public class android.view.animation.Animation$Description {
public abstract class android.view.animation.Animation implements java.lang.Cloneable {
  public android.view.animation.Animation();
  public android.view.animation.Animation(android.content.Context, android.util.AttributeSet);
  public void reset();
  public void cancel();
  public void detach();
  public boolean isInitialized();
  public void initialize(int, int, int, int);
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public void setStartOffset(long);
  public void setDuration(long);
  public void restrictDuration(long);
  public void scaleCurrentDuration(float);
  public void setStartTime(long);
  public void start();
  public void startNow();
  public void setRepeatMode(int);
  public void setRepeatCount(int);
  public boolean isFillEnabled();
  public void setFillEnabled(boolean);
  public void setFillBefore(boolean);
  public void setFillAfter(boolean);
  public void setZAdjustment(int);
  public void setBackgroundColor(int);
  public void setDetachWallpaper(boolean);
  public android.view.animation.Interpolator getInterpolator();
  public long getStartTime();
  public long getDuration();
  public long getStartOffset();
  public int getRepeatMode();
  public int getRepeatCount();
  public boolean getFillBefore();
  public boolean getFillAfter();
  public int getZAdjustment();
  public int getBackgroundColor();
  public boolean getDetachWallpaper();
  public boolean willChangeTransformationMatrix();
  public boolean willChangeBounds();
  public void setAnimationListener(android.view.animation.Animation$AnimationListener);
  public long computeDurationHint();
  public boolean getTransformation(long, android.view.animation.Transformation);
  public boolean getTransformation(long, android.view.animation.Transformation, float);
  public boolean hasStarted();
  public boolean hasEnded();
  public void getInvalidateRegion(int, int, int, int, android.graphics.RectF, android.view.animation.Transformation);
  public void initializeInvalidateRegion(int, int, int, int);
  public boolean hasAlpha();
public class android.view.animation.AnimationSet extends android.view.animation.Animation {
  public android.view.animation.AnimationSet(android.content.Context, android.util.AttributeSet);
  public android.view.animation.AnimationSet(boolean);
  public void setFillAfter(boolean);
  public void setFillBefore(boolean);
  public void setRepeatMode(int);
  public void setStartOffset(long);
  public boolean hasAlpha();
  public void setDuration(long);
  public void addAnimation(android.view.animation.Animation);
  public void setStartTime(long);
  public long getStartTime();
  public void restrictDuration(long);
  public long getDuration();
  public long computeDurationHint();
  public void initializeInvalidateRegion(int, int, int, int);
  public boolean getTransformation(long, android.view.animation.Transformation);
  public void scaleCurrentDuration(float);
  public void initialize(int, int, int, int);
  public void reset();
  public java.util.List<android.view.animation.Animation> getAnimations();
  public boolean willChangeTransformationMatrix();
  public boolean willChangeBounds();
public class android.view.animation.AnimationUtils {
  public android.view.animation.AnimationUtils();
  public static long currentAnimationTimeMillis();
  public static android.view.animation.Animation makeInAnimation(android.content.Context, boolean);
  public static android.view.animation.Animation makeOutAnimation(android.content.Context, boolean);
  public static android.view.animation.Animation makeInChildBottomAnimation(android.content.Context);
public class android.view.animation.AnticipateInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.AnticipateInterpolator();
  public android.view.animation.AnticipateInterpolator(float);
  public android.view.animation.AnticipateInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.AnticipateOvershootInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.AnticipateOvershootInterpolator();
  public android.view.animation.AnticipateOvershootInterpolator(float);
  public android.view.animation.AnticipateOvershootInterpolator(float, float);
  public android.view.animation.AnticipateOvershootInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.BounceInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.BounceInterpolator();
  public android.view.animation.BounceInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.CycleInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.CycleInterpolator(float);
  public android.view.animation.CycleInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.DecelerateInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.DecelerateInterpolator();
  public android.view.animation.DecelerateInterpolator(float);
  public android.view.animation.DecelerateInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.GridLayoutAnimationController$AnimationParameters extends android.view.animation.LayoutAnimationController$AnimationParameters {
  public android.view.animation.GridLayoutAnimationController$AnimationParameters();
public class android.view.animation.GridLayoutAnimationController extends android.view.animation.LayoutAnimationController {
  public android.view.animation.GridLayoutAnimationController(android.content.Context, android.util.AttributeSet);
  public android.view.animation.GridLayoutAnimationController(android.view.animation.Animation);
  public android.view.animation.GridLayoutAnimationController(android.view.animation.Animation, float, float);
  public float getColumnDelay();
  public void setColumnDelay(float);
  public float getRowDelay();
  public void setRowDelay(float);
  public int getDirection();
  public void setDirection(int);
  public int getDirectionPriority();
  public void setDirectionPriority(int);
  public boolean willOverlap();
public interface android.view.animation.Interpolator extends android.animation.TimeInterpolator {
public class android.view.animation.LayoutAnimationController$AnimationParameters {
  public android.view.animation.LayoutAnimationController$AnimationParameters();
public class android.view.animation.LayoutAnimationController {
  public android.view.animation.LayoutAnimationController(android.content.Context, android.util.AttributeSet);
  public android.view.animation.LayoutAnimationController(android.view.animation.Animation);
  public android.view.animation.LayoutAnimationController(android.view.animation.Animation, float);
  public int getOrder();
  public void setOrder(int);
  public void setAnimation(android.content.Context, int);
  public void setAnimation(android.view.animation.Animation);
  public android.view.animation.Animation getAnimation();
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public android.view.animation.Interpolator getInterpolator();
  public float getDelay();
  public void setDelay(float);
  public boolean willOverlap();
  public void start();
  public final android.view.animation.Animation getAnimationForView(android.view.View);
  public boolean isDone();
public class android.view.animation.LinearInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.LinearInterpolator();
  public android.view.animation.LinearInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.OvershootInterpolator implements android.view.animation.Interpolator {
  public android.view.animation.OvershootInterpolator();
  public android.view.animation.OvershootInterpolator(float);
  public android.view.animation.OvershootInterpolator(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
public class android.view.animation.RotateAnimation extends android.view.animation.Animation {
  public android.view.animation.RotateAnimation(android.content.Context, android.util.AttributeSet);
  public android.view.animation.RotateAnimation(float, float);
  public android.view.animation.RotateAnimation(float, float, float, float);
  public android.view.animation.RotateAnimation(float, float, int, float, int, float);
  public void initialize(int, int, int, int);
public class android.view.animation.ScaleAnimation extends android.view.animation.Animation {
  public android.view.animation.ScaleAnimation(android.content.Context, android.util.AttributeSet);
  public android.view.animation.ScaleAnimation(float, float, float, float);
  public android.view.animation.ScaleAnimation(float, float, float, float, float, float);
  public android.view.animation.ScaleAnimation(float, float, float, float, int, float, int, float);
  public void initialize(int, int, int, int);
public class android.view.animation.Transformation {
  public android.view.animation.Transformation();
  public void clear();
  public int getTransformationType();
  public void setTransformationType(int);
  public void set(android.view.animation.Transformation);
  public void compose(android.view.animation.Transformation);
  public android.graphics.Matrix getMatrix();
  public void setAlpha(float);
  public float getAlpha();
  public java.lang.String toString();
  public java.lang.String toShortString();
  public void toShortString(java.lang.StringBuilder);
  public void printShortString(java.io.PrintWriter);
public class android.view.animation.TranslateAnimation extends android.view.animation.Animation {
  public android.view.animation.TranslateAnimation(android.content.Context, android.util.AttributeSet);
  public android.view.animation.TranslateAnimation(float, float, float, float);
  public android.view.animation.TranslateAnimation(int, float, int, float, int, float, int, float);
  public void initialize(int, int, int, int);
public class android.view.inputmethod.BaseInputConnection implements android.view.inputmethod.InputConnection {
  public android.view.inputmethod.BaseInputConnection(android.view.View, boolean);
  public static final void removeComposingSpans(android.text.Spannable);
  public static void setComposingSpans(android.text.Spannable);
  public static void setComposingSpans(android.text.Spannable, int, int);
  public static int getComposingSpanStart(android.text.Spannable);
  public static int getComposingSpanEnd(android.text.Spannable);
  public android.text.Editable getEditable();
  public boolean beginBatchEdit();
  public boolean endBatchEdit();
  public boolean clearMetaKeyStates(int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean commitText(java.lang.CharSequence, int);
  public boolean deleteSurroundingText(int, int);
  public boolean finishComposingText();
  public int getCursorCapsMode(int);
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public java.lang.CharSequence getTextBeforeCursor(int, int);
  public java.lang.CharSequence getSelectedText(int);
  public java.lang.CharSequence getTextAfterCursor(int, int);
  public boolean performEditorAction(int);
  public boolean performContextMenuAction(int);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
  public boolean setComposingText(java.lang.CharSequence, int);
  public boolean setComposingRegion(int, int);
  public boolean setSelection(int, int);
  public boolean sendKeyEvent(android.view.KeyEvent);
  public boolean reportFullscreenMode(boolean);
  public android.view.inputmethod.CompletionInfo createFromParcel(android.os.Parcel);
  public android.view.inputmethod.CompletionInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.inputmethod.CompletionInfo implements android.os.Parcelable {
  public android.view.inputmethod.CompletionInfo(long, int, java.lang.CharSequence);
  public android.view.inputmethod.CompletionInfo(long, int, java.lang.CharSequence, java.lang.CharSequence);
  public long getId();
  public int getPosition();
  public java.lang.CharSequence getText();
  public java.lang.CharSequence getLabel();
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public android.view.inputmethod.CorrectionInfo createFromParcel(android.os.Parcel);
  public android.view.inputmethod.CorrectionInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.inputmethod.CorrectionInfo implements android.os.Parcelable {
  public android.view.inputmethod.CorrectionInfo(int, java.lang.CharSequence, java.lang.CharSequence);
  public int getOffset();
  public java.lang.CharSequence getOldText();
  public java.lang.CharSequence getNewText();
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public android.view.inputmethod.EditorInfo createFromParcel(android.os.Parcel);
  public android.view.inputmethod.EditorInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.inputmethod.EditorInfo implements android.text.InputType,android.os.Parcelable {
  public android.view.inputmethod.EditorInfo();
  public final void makeCompatible(int);
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public android.view.inputmethod.ExtractedText createFromParcel(android.os.Parcel);
  public android.view.inputmethod.ExtractedText[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.inputmethod.ExtractedText implements android.os.Parcelable {
  public android.view.inputmethod.ExtractedText();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public android.view.inputmethod.ExtractedTextRequest createFromParcel(android.os.Parcel);
  public android.view.inputmethod.ExtractedTextRequest[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.view.inputmethod.ExtractedTextRequest implements android.os.Parcelable {
  public android.view.inputmethod.ExtractedTextRequest();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public android.view.inputmethod.InputBinding createFromParcel(android.os.Parcel);
  public android.view.inputmethod.InputBinding[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.inputmethod.InputBinding implements android.os.Parcelable {
  public android.view.inputmethod.InputBinding(android.view.inputmethod.InputConnection, android.os.IBinder, int, int);
  public android.view.inputmethod.InputBinding(android.view.inputmethod.InputConnection, android.view.inputmethod.InputBinding);
  public android.view.inputmethod.InputConnection getConnection();
  public android.os.IBinder getConnectionToken();
  public int getUid();
  public int getPid();
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
public interface android.view.inputmethod.InputConnection {
  public abstract java.lang.CharSequence getTextBeforeCursor(int, int);
  public abstract java.lang.CharSequence getTextAfterCursor(int, int);
  public abstract java.lang.CharSequence getSelectedText(int);
  public abstract int getCursorCapsMode(int);
  public abstract android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public abstract boolean deleteSurroundingText(int, int);
  public abstract boolean setComposingText(java.lang.CharSequence, int);
  public abstract boolean setComposingRegion(int, int);
  public abstract boolean finishComposingText();
  public abstract boolean commitText(java.lang.CharSequence, int);
  public abstract boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public abstract boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public abstract boolean setSelection(int, int);
  public abstract boolean performEditorAction(int);
  public abstract boolean performContextMenuAction(int);
  public abstract boolean beginBatchEdit();
  public abstract boolean endBatchEdit();
  public abstract boolean sendKeyEvent(android.view.KeyEvent);
  public abstract boolean clearMetaKeyStates(int);
  public abstract boolean reportFullscreenMode(boolean);
  public abstract boolean performPrivateCommand(java.lang.String, android.os.Bundle);
public class android.view.inputmethod.InputConnectionWrapper implements android.view.inputmethod.InputConnection {
  public android.view.inputmethod.InputConnectionWrapper(android.view.inputmethod.InputConnection, boolean);
  public void setTarget(android.view.inputmethod.InputConnection);
  public java.lang.CharSequence getTextBeforeCursor(int, int);
  public java.lang.CharSequence getTextAfterCursor(int, int);
  public java.lang.CharSequence getSelectedText(int);
  public int getCursorCapsMode(int);
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public boolean deleteSurroundingText(int, int);
  public boolean setComposingText(java.lang.CharSequence, int);
  public boolean setComposingRegion(int, int);
  public boolean finishComposingText();
  public boolean commitText(java.lang.CharSequence, int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean setSelection(int, int);
  public boolean performEditorAction(int);
  public boolean performContextMenuAction(int);
  public boolean beginBatchEdit();
  public boolean endBatchEdit();
  public boolean sendKeyEvent(android.view.KeyEvent);
  public boolean clearMetaKeyStates(int);
  public boolean reportFullscreenMode(boolean);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
public interface android.view.inputmethod.InputMethod$SessionCallback {
  public abstract void sessionCreated(android.view.inputmethod.InputMethodSession);
public interface android.view.inputmethod.InputMethod {
  public abstract void attachToken(android.os.IBinder);
  public abstract void bindInput(android.view.inputmethod.InputBinding);
  public abstract void unbindInput();
  public abstract void startInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public abstract void restartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public abstract void createSession(android.view.inputmethod.InputMethod$SessionCallback);
  public abstract void setSessionEnabled(android.view.inputmethod.InputMethodSession, boolean);
  public abstract void revokeSession(android.view.inputmethod.InputMethodSession);
  public abstract void showSoftInput(int, android.os.ResultReceiver);
  public abstract void hideSoftInput(int, android.os.ResultReceiver);
  public abstract void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public android.view.inputmethod.InputMethodInfo createFromParcel(android.os.Parcel);
  public android.view.inputmethod.InputMethodInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.inputmethod.InputMethodInfo implements android.os.Parcelable {
  public android.view.inputmethod.InputMethodInfo(java.lang.String, java.lang.String, java.lang.CharSequence, java.lang.String);
  public java.lang.String getId();
  public java.lang.String getPackageName();
  public java.lang.String getServiceName();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.content.ComponentName getComponent();
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public java.lang.String getSettingsActivity();
  public int getSubtypeCount();
  public android.view.inputmethod.InputMethodSubtype getSubtypeAt(int);
  public int getIsDefaultResourceId();
  public void dump(android.util.Printer, java.lang.String);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean isAuxiliaryIme();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public void setUsingInputMethod(boolean);
  public void onBindMethod(com.android.internal.view.InputBindResult);
  public void onUnbindMethod(int);
  public void setActive(boolean);
  public void run();
  public android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper(android.os.Looper, android.view.inputmethod.InputConnection, android.view.inputmethod.InputMethodManager);
  public boolean isActive();
  public void handleMessage(android.os.Message);
public final class android.view.inputmethod.InputMethodManager {
  public static android.view.inputmethod.InputMethodManager getInstance(android.content.Context);
  public static android.view.inputmethod.InputMethodManager getInstance(android.os.Looper);
  public static android.view.inputmethod.InputMethodManager peekInstance();
  public com.android.internal.view.IInputMethodClient getClient();
  public com.android.internal.view.IInputContext getInputContext();
  public java.util.List<android.view.inputmethod.InputMethodInfo> getInputMethodList();
  public java.util.List<android.view.inputmethod.InputMethodInfo> getEnabledInputMethodList();
  public java.util.List<android.view.inputmethod.InputMethodSubtype> getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo, boolean);
  public void showStatusIcon(android.os.IBinder, java.lang.String, int);
  public void hideStatusIcon(android.os.IBinder);
  public void setImeWindowStatus(android.os.IBinder, int, int);
  public void setFullscreenMode(boolean);
  public void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[]);
  public void notifySuggestionPicked(android.text.style.SuggestionSpan, java.lang.String, int);
  public boolean isFullscreenMode();
  public boolean isActive(android.view.View);
  public boolean isActive();
  public boolean isAcceptingText();
  public void reportFinishInputConnection(android.view.inputmethod.InputConnection);
  public void displayCompletions(android.view.View, android.view.inputmethod.CompletionInfo[]);
  public void updateExtractedText(android.view.View, int, android.view.inputmethod.ExtractedText);
  public boolean showSoftInput(android.view.View, int);
  public boolean showSoftInput(android.view.View, int, android.os.ResultReceiver);
  public void showSoftInputUnchecked(int, android.os.ResultReceiver);
  public boolean hideSoftInputFromWindow(android.os.IBinder, int);
  public boolean hideSoftInputFromWindow(android.os.IBinder, int, android.os.ResultReceiver);
  public void toggleSoftInputFromWindow(android.os.IBinder, int, int);
  public void toggleSoftInput(int, int);
  public void restartInput(android.view.View);
  public void windowDismissed(android.os.IBinder);
  public void focusIn(android.view.View);
  public void focusOut(android.view.View);
  public void checkFocus();
  public void onWindowFocus(android.view.View, android.view.View, int, boolean, int);
  public void startGettingWindowFocus(android.view.View);
  public void updateSelection(android.view.View, int, int, int, int);
  public void viewClicked(android.view.View);
  public boolean isWatchingCursor(android.view.View);
  public void updateCursor(android.view.View, int, int, int, int);
  public void sendAppPrivateCommand(android.view.View, java.lang.String, android.os.Bundle);
  public void setInputMethod(android.os.IBinder, java.lang.String);
  public void setInputMethodAndSubtype(android.os.IBinder, java.lang.String, android.view.inputmethod.InputMethodSubtype);
  public void hideSoftInputFromInputMethod(android.os.IBinder, int);
  public void showSoftInputFromInputMethod(android.os.IBinder, int);
  public void dispatchKeyEvent(android.content.Context, int, android.view.KeyEvent, com.android.internal.view.IInputMethodCallback);
  public void showInputMethodPicker();
  public void showInputMethodAndSubtypeEnabler(java.lang.String);
  public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
  public boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public java.util.Map<android.view.inputmethod.InputMethodInfo, java.util.List<android.view.inputmethod.InputMethodSubtype>> getShortcutInputMethodsAndSubtypes();
  public boolean switchToLastInputMethod(android.os.IBinder);
  public void setAdditionalInputMethodSubtypes(java.lang.String, android.view.inputmethod.InputMethodSubtype[]);
  public android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype();
public interface android.view.inputmethod.InputMethodSession$EventCallback {
  public abstract void finishedEvent(int, boolean);
public interface android.view.inputmethod.InputMethodSession {
  public abstract void finishInput();
  public abstract void updateSelection(int, int, int, int, int, int);
  public abstract void viewClicked(boolean);
  public abstract void updateCursor(android.graphics.Rect);
  public abstract void displayCompletions(android.view.inputmethod.CompletionInfo[]);
  public abstract void updateExtractedText(int, android.view.inputmethod.ExtractedText);
  public abstract void dispatchKeyEvent(int, android.view.KeyEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public abstract void dispatchTrackballEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public abstract void appPrivateCommand(java.lang.String, android.os.Bundle);
  public abstract void toggleSoftInput(int, int);
  public android.view.inputmethod.InputMethodSubtype createFromParcel(android.os.Parcel);
  public android.view.inputmethod.InputMethodSubtype[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.inputmethod.InputMethodSubtype implements android.os.Parcelable {
  public android.view.inputmethod.InputMethodSubtype(int, int, java.lang.String, java.lang.String, java.lang.String, boolean);
  public android.view.inputmethod.InputMethodSubtype(int, int, java.lang.String, java.lang.String, java.lang.String, boolean, boolean);
  public int getNameResId();
  public int getIconResId();
  public java.lang.String getLocale();
  public java.lang.String getMode();
  public java.lang.String getExtraValue();
  public boolean isAuxiliary();
  public boolean overridesImplicitlyEnabledSubtype();
  public java.lang.CharSequence getDisplayName(android.content.Context, java.lang.String, android.content.pm.ApplicationInfo);
  public boolean containsExtraValueKey(java.lang.String);
  public java.lang.String getExtraValueOf(java.lang.String);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static java.util.List<android.view.inputmethod.InputMethodSubtype> sort(android.content.Context, int, android.view.inputmethod.InputMethodInfo, java.util.List<android.view.inputmethod.InputMethodSubtype>);
  public android.view.textservice.SpellCheckerInfo createFromParcel(android.os.Parcel);
  public android.view.textservice.SpellCheckerInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.textservice.SpellCheckerInfo implements android.os.Parcelable {
  public android.view.textservice.SpellCheckerInfo(android.os.Parcel);
  public java.lang.String getId();
  public android.content.ComponentName getComponent();
  public java.lang.String getPackageName();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.content.pm.ServiceInfo getServiceInfo();
  public java.lang.String getSettingsActivity();
  public int getSubtypeCount();
  public android.view.textservice.SpellCheckerSubtype getSubtypeAt(int);
  public int describeContents();
  public void handleMessage(android.os.Message);
  public android.view.textservice.SpellCheckerSession$InternalListener(android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl);
  public void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession);
public interface android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener {
  public abstract void onGetSuggestions(android.view.textservice.SuggestionsInfo[]);
  public void handleMessage(android.os.Message);
  public android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl$SpellCheckerParams(int, android.view.textservice.TextInfo[], int, boolean);
  public android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl(android.os.Handler);
  public synchronized void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession);
  public void cancel();
  public void getSuggestionsMultiple(android.view.textservice.TextInfo[], int, boolean);
  public void close();
  public boolean isDisconnected();
  public void onGetSuggestions(android.view.textservice.SuggestionsInfo[]);
public class android.view.textservice.SpellCheckerSession {
  public android.view.textservice.SpellCheckerSession(android.view.textservice.SpellCheckerInfo, com.android.internal.textservice.ITextServicesManager, android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener);
  public boolean isSessionDisconnected();
  public android.view.textservice.SpellCheckerInfo getSpellChecker();
  public void cancel();
  public void close();
  public void getSuggestions(android.view.textservice.TextInfo, int);
  public void getSuggestions(android.view.textservice.TextInfo[], int, boolean);
  public com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener();
  public com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener();
  public android.view.textservice.SpellCheckerSubtype createFromParcel(android.os.Parcel);
  public android.view.textservice.SpellCheckerSubtype[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.textservice.SpellCheckerSubtype implements android.os.Parcelable {
  public android.view.textservice.SpellCheckerSubtype(int, java.lang.String, java.lang.String);
  public int getNameResId();
  public java.lang.String getLocale();
  public java.lang.String getExtraValue();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.CharSequence getDisplayName(android.content.Context, java.lang.String, android.content.pm.ApplicationInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static java.util.List<android.view.textservice.SpellCheckerSubtype> sort(android.content.Context, int, android.view.textservice.SpellCheckerInfo, java.util.List<android.view.textservice.SpellCheckerSubtype>);
  public android.view.textservice.SuggestionsInfo createFromParcel(android.os.Parcel);
  public android.view.textservice.SuggestionsInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.textservice.SuggestionsInfo implements android.os.Parcelable {
  public android.view.textservice.SuggestionsInfo(int, java.lang.String[]);
  public android.view.textservice.SuggestionsInfo(int, java.lang.String[], int, int);
  public android.view.textservice.SuggestionsInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void setCookieAndSequence(int, int);
  public int getCookie();
  public int getSequence();
  public int getSuggestionsAttributes();
  public int getSuggestionsCount();
  public java.lang.String getSuggestionAt(int);
  public int describeContents();
  public android.view.textservice.TextInfo createFromParcel(android.os.Parcel);
  public android.view.textservice.TextInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class android.view.textservice.TextInfo implements android.os.Parcelable {
  public android.view.textservice.TextInfo(java.lang.String);
  public android.view.textservice.TextInfo(java.lang.String, int, int);
  public android.view.textservice.TextInfo(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getText();
  public int getCookie();
  public int getSequence();
  public int describeContents();
public final class android.view.textservice.TextServicesManager {
  public static android.view.textservice.TextServicesManager getInstance();
  public android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle, java.util.Locale, android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener, boolean);
  public android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers();
  public android.view.textservice.SpellCheckerInfo getCurrentSpellChecker();
  public void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo);
  public android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean);
  public void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype);
  public void setSpellCheckerEnabled(boolean);
  public boolean isSpellCheckerEnabled();
  public int getKeyCode();
  public int getModifiers();
  public int getActionCount();
  public int getAction(int);
  public int getActionCode(int);
  public int getFirstArgument(int);
  public int getSecondArgument(int);
  public int getThirdArgument(int);
  public android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding(long, int[]);
  public java.lang.String toString();
  public android.webkit.AccessibilityInjector(android.webkit.WebView);
  public boolean onKeyEvent(android.view.KeyEvent);
  public void onSelectionStringChange(java.lang.String);
  public boolean useHttpAuthUsernamePassword();
  public void proceed(java.lang.String, java.lang.String);
  public void cancel();
  public boolean suppressDialog();
  public void proceed();
  public void cancel();
  public synchronized void addHandler(android.os.Handler);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public android.webkit.BrowserFrame(android.content.Context, android.webkit.WebViewCore, android.webkit.CallbackProxy, android.webkit.WebSettings, java.util.Map<java.lang.String, java.lang.Object>);
  public void loadUrl(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);
  public void postUrl(java.lang.String, byte[]);
  public void loadData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void goBackOrForward(int);
  public void destroy();
  public void handleMessage(android.os.Message);
  public void externalRepresentation(android.os.Message);
  public void documentAsText(android.os.Message);
  public boolean handleUrl(java.lang.String);
  public void addJavascriptInterface(java.lang.Object, java.lang.String);
  public void removeJavascriptInterface(java.lang.String);
  public native void nativeDestroyFrame();
  public native void reload(boolean);
  public native java.lang.String stringByEvaluatingJavaScriptFromString(java.lang.String);
  public native boolean cacheDisabled();
  public native void clearCache();
  public void stopLoading();
  public native boolean documentHasImages();
public class android.webkit.ByteArrayBuilder$Chunk {
  public android.webkit.ByteArrayBuilder$Chunk(int);
  public void release();
  public android.webkit.ByteArrayBuilder();
  public synchronized void append(byte[], int, int);
  public synchronized android.webkit.ByteArrayBuilder$Chunk getFirstChunk();
  public synchronized boolean isEmpty();
  public synchronized int getByteSize();
  public synchronized void clear();
  public void run();
  public boolean accept(java.io.File, java.lang.String);
public class android.webkit.CacheManager$CacheResult {
  public android.webkit.CacheManager$CacheResult();
  public int getHttpStatusCode();
  public long getContentLength();
  public java.lang.String getLocalPath();
  public long getExpires();
  public java.lang.String getExpiresString();
  public java.lang.String getLastModified();
  public java.lang.String getETag();
  public java.lang.String getMimeType();
  public java.lang.String getLocation();
  public java.lang.String getEncoding();
  public java.lang.String getContentDisposition();
  public java.io.InputStream getInputStream();
  public java.io.OutputStream getOutputStream();
  public void setInputStream(java.io.InputStream);
  public void setEncoding(java.lang.String);
  public void setContentLength(long);
public final class android.webkit.CacheManager {
  public android.webkit.CacheManager();
  public static java.io.File getCacheFileBaseDir();
  public static boolean cacheDisabled();
  public static boolean startCacheTransaction();
  public static boolean endCacheTransaction();
  public static android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);
  public static android.webkit.CacheManager$CacheResult createCacheFile(java.lang.String, int, android.net.http.Headers, java.lang.String, boolean);
  public static void saveCacheFile(java.lang.String, android.webkit.CacheManager$CacheResult);
  public void onCancel(android.content.DialogInterface);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void onCancel(android.content.DialogInterface);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void onCancel(android.content.DialogInterface);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public android.webkit.CallbackProxy$ResultTransport(E);
  public synchronized void setResult(E);
  public synchronized E getResult();
  public void onReceiveValue(android.net.Uri);
  public android.net.Uri getResult();
  public void onReceiveValue(java.lang.Object);
  public android.webkit.CallbackProxy$UploadFileMessageData(android.webkit.CallbackProxy$UploadFile, java.lang.String);
  public android.webkit.CallbackProxy$UploadFile getUploadFile();
  public java.lang.String getAcceptType();
  public android.webkit.CallbackProxy(android.content.Context, android.webkit.WebView);
  public void setWebViewClient(android.webkit.WebViewClient);
  public android.webkit.WebViewClient getWebViewClient();
  public void setWebChromeClient(android.webkit.WebChromeClient);
  public android.webkit.WebChromeClient getWebChromeClient();
  public void setDownloadListener(android.webkit.DownloadListener);
  public android.webkit.WebBackForwardList getBackForwardList();
  public boolean uiOverrideUrlLoading(java.lang.String);
  public boolean uiOverrideKeyEvent(android.view.KeyEvent);
  public void handleMessage(android.os.Message);
  public int getProgress();
  public void onPageStarted(java.lang.String, android.graphics.Bitmap);
  public void onPageFinished(java.lang.String);
  public void onTooManyRedirects(android.os.Message, android.os.Message);
  public void onReceivedError(int, java.lang.String, java.lang.String);
  public void onFormResubmission(android.os.Message, android.os.Message);
  public boolean shouldOverrideUrlLoading(java.lang.String);
  public void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler, java.lang.String, java.lang.String);
  public void onReceivedSslError(android.webkit.SslErrorHandler, android.net.http.SslError);
  public void onProceededAfterSslError(android.net.http.SslError);
  public void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler, java.lang.String);
  public void onReceivedCertificate(android.net.http.SslCertificate);
  public void doUpdateVisitedHistory(java.lang.String, boolean);
  public void onUnhandledKeyEvent(android.view.KeyEvent);
  public void onScaleChanged(float, float);
  public boolean onDownloadStart(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long);
  public boolean onSavePassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void onReceivedHttpAuthCredentials(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void onProgressChanged(int);
  public android.webkit.BrowserFrame createWindow(boolean, boolean);
  public void onRequestFocus();
  public void onCloseWindow(android.webkit.WebView);
  public void onReceivedIcon(android.graphics.Bitmap);
  public void onReceivedTitle(java.lang.String);
  public void onJsAlert(java.lang.String, java.lang.String);
  public boolean onJsConfirm(java.lang.String, java.lang.String);
  public java.lang.String onJsPrompt(java.lang.String, java.lang.String, java.lang.String);
  public boolean onJsBeforeUnload(java.lang.String, java.lang.String);
  public void onExceededDatabaseQuota(java.lang.String, java.lang.String, long, long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onReachedMaxAppCacheSize(long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onGeolocationPermissionsShowPrompt(java.lang.String, android.webkit.GeolocationPermissions$Callback);
  public void onGeolocationPermissionsHidePrompt();
  public void addMessageToConsole(java.lang.String, int, java.lang.String, int);
  public boolean onJsTimeout();
  public void getVisitedHistory(android.webkit.ValueCallback<java.lang.String[]>);
public final class android.webkit.ClientCertRequestHandler {
  public void proceed(java.security.PrivateKey, java.security.cert.X509Certificate[]);
  public void ignore();
  public void cancel();
public final class android.webkit.ConsoleMessage$MessageLevel extends java.lang.Enum<android.webkit.ConsoleMessage$MessageLevel> {
  public static android.webkit.ConsoleMessage$MessageLevel[] values();
  public static android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String);
public class android.webkit.ConsoleMessage {
  public android.webkit.ConsoleMessage(java.lang.String, java.lang.String, int, android.webkit.ConsoleMessage$MessageLevel);
  public android.webkit.ConsoleMessage$MessageLevel messageLevel();
  public java.lang.String message();
  public java.lang.String sourceId();
  public int lineNumber();
  public void run();
  public void run();
  public void run();
  public java.lang.String toString();
  public int compare(android.webkit.CookieManager$Cookie, android.webkit.CookieManager$Cookie);
  public int compare(java.lang.Object, java.lang.Object);
public final class android.webkit.CookieManager {
  public static synchronized android.webkit.CookieManager getInstance();
  public synchronized void setAcceptCookie(boolean);
  public synchronized boolean acceptCookie();
  public void setCookie(java.lang.String, java.lang.String);
  public void setCookie(java.lang.String, java.lang.String, boolean);
  public synchronized void setCookie(android.net.WebAddress, java.lang.String);
  public java.lang.String getCookie(java.lang.String);
  public java.lang.String getCookie(java.lang.String, boolean);
  public synchronized java.lang.String getCookie(android.net.WebAddress);
  public void waitForCookieOperationsToComplete();
  public void removeSessionCookie();
  public void removeAllCookie();
  public synchronized boolean hasCookies();
  public synchronized boolean hasCookies(boolean);
  public void removeExpiredCookie();
  public static boolean allowFileSchemeCookies();
  public static void setAcceptFileSchemeCookies(boolean);
public final class android.webkit.CookieSyncManager extends android.webkit.WebSyncManager {
  public static synchronized android.webkit.CookieSyncManager getInstance();
  public static synchronized android.webkit.CookieSyncManager createInstance(android.content.Context);
  public void stopSync();
  public void startSync();
  public void resetSync();
  public void sync();
  public void run();
public final class android.webkit.DeviceMotionAndOrientationManager {
  public android.webkit.DeviceMotionAndOrientationManager(android.webkit.WebViewCore);
  public void useMock();
  public void setMockOrientation(boolean, double, boolean, double, boolean, double);
  public void onMotionChange(java.lang.Double, java.lang.Double, java.lang.Double, double);
  public void onOrientationChange(java.lang.Double, java.lang.Double, java.lang.Double);
  public void run();
  public void run();
  public android.webkit.DeviceMotionService(android.webkit.DeviceMotionAndOrientationManager, android.content.Context);
  public void start();
  public void stop();
  public void suspend();
  public void resume();
  public void onSensorChanged(android.hardware.SensorEvent);
  public void onAccuracyChanged(android.hardware.Sensor, int);
  public void run();
  public android.webkit.DeviceOrientationService(android.webkit.DeviceMotionAndOrientationManager, android.content.Context);
  public void start();
  public void stop();
  public void suspend();
  public void resume();
  public void onSensorChanged(android.hardware.SensorEvent);
  public void onAccuracyChanged(android.hardware.Sensor, int);
public interface android.webkit.DownloadListener {
  public abstract void onDownloadStart(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long);
  public void showSoftInput();
  public boolean onLongClick(android.view.View);
  public void onClick(android.view.View);
  public boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public void onDestroyActionMode(android.view.ActionMode);
  public boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public int getActionModeGlobalBottom();
  public void setReferrer(java.lang.String);
  public void setPostData(byte[]);
  public void setContentTypeForPost(java.lang.String);
  public void setCacheMode(int);
  public void setHeaders(java.util.HashMap);
  public android.webkit.LoadListener getLoadListener();
  public boolean executeLoad();
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public interface android.webkit.GeolocationPermissions$Callback {
  public abstract void invoke(java.lang.String, boolean, boolean);
public final class android.webkit.GeolocationPermissions {
  public android.webkit.GeolocationPermissions();
  public static android.webkit.GeolocationPermissions getInstance();
  public void createUIHandler();
  public synchronized void createHandler();
  public void getOrigins(android.webkit.ValueCallback<java.util.Set<java.lang.String>>);
  public void getAllowed(java.lang.String, android.webkit.ValueCallback<java.lang.Boolean>);
  public void clear(java.lang.String);
  public void allow(java.lang.String);
  public void clearAll();
  public void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void surfaceCreated(android.view.SurfaceHolder);
  public void surfaceDestroyed(android.view.SurfaceHolder);
  public void onCustomViewHidden();
  public void onBufferingUpdate(android.media.MediaPlayer, int);
  public android.webkit.HTML5VideoFullScreen$FullScreenMediaController(android.content.Context, android.view.View);
  public void show();
  public void hide();
  public android.webkit.HTML5VideoFullScreen$VideoSurfaceView(android.webkit.HTML5VideoFullScreen, android.content.Context);
public class android.webkit.HTML5VideoFullScreen extends android.webkit.HTML5VideoView implements android.widget.MediaController$MediaPlayerControl,android.media.MediaPlayer$OnPreparedListener,android.view.View$OnTouchListener {
  public void decideDisplayMode();
  public void onPrepared(android.media.MediaPlayer);
  public boolean fullScreenExited();
  public void enterFullScreenVideoState(int, android.webkit.HTML5VideoViewProxy, android.webkit.WebView);
  public boolean isFullScreenMode();
  public boolean canPause();
  public boolean canSeekBackward();
  public boolean canSeekForward();
  public int getBufferPercentage();
  public boolean onTouch(android.view.View, android.view.MotionEvent);
public class android.webkit.HTML5VideoInline extends android.webkit.HTML5VideoView {
  public void start();
  public void decideDisplayMode();
  public void prepareDataAndDisplayMode(android.webkit.HTML5VideoViewProxy);
  public void pauseAndDispatch(android.webkit.HTML5VideoViewProxy);
  public android.graphics.SurfaceTexture getSurfaceTexture(int);
  public boolean surfaceTextureDeleted();
  public void deleteSurfaceTexture();
  public int getTextureName();
  public android.webkit.HTML5VideoView$TimeupdateTask(android.webkit.HTML5VideoViewProxy);
  public void run();
public class android.webkit.HTML5VideoView implements android.media.MediaPlayer$OnPreparedListener {
  public void start();
  public void pause();
  public int getDuration();
  public int getCurrentPosition();
  public void seekTo(int);
  public boolean isPlaying();
  public void release();
  public void stopPlayback();
  public boolean getAutostart();
  public boolean getPauseDuringPreparing();
  public void init(int, int, boolean);
  public void setVideoURI(java.lang.String, android.webkit.HTML5VideoViewProxy);
  public void setOnCompletionListener(android.webkit.HTML5VideoViewProxy);
  public void setOnErrorListener(android.webkit.HTML5VideoViewProxy);
  public void setOnPreparedListener(android.webkit.HTML5VideoViewProxy);
  public void setOnInfoListener(android.webkit.HTML5VideoViewProxy);
  public void prepareDataAndDisplayMode(android.webkit.HTML5VideoViewProxy);
  public int getVideoLayerId();
  public int getCurrentState();
  public void onPrepared(android.media.MediaPlayer);
  public void pauseAndDispatch(android.webkit.HTML5VideoViewProxy);
  public void enterFullScreenVideoState(int, android.webkit.HTML5VideoViewProxy, android.webkit.WebView);
  public boolean isFullScreenMode();
  public void decideDisplayMode();
  public boolean getReadyToUseSurfTex();
  public android.graphics.SurfaceTexture getSurfaceTexture(int);
  public void deleteSurfaceTexture();
  public int getTextureName();
  public boolean getPlayerBuffering();
  public void setPlayerBuffering(boolean);
  public boolean surfaceTextureDeleted();
  public boolean fullScreenExited();
  public void handleMessage(android.os.Message);
  public void run();
  public android.webkit.HTML5VideoViewProxy$PosterDownloader(java.lang.String, android.webkit.HTML5VideoViewProxy);
  public void start();
  public void cancelAndReleaseQueue();
  public void status(int, int, int, java.lang.String);
  public void headers(android.net.http.Headers);
  public void data(byte[], int);
  public void endData();
  public void certificate(android.net.http.SslCertificate);
  public void error(int, java.lang.String);
  public boolean handleSslErrorRequest(android.net.http.SslError);
  public static void setBaseLayer(int);
  public static void pauseAndDispatch();
  public static void enterFullScreenVideo(int, java.lang.String, android.webkit.HTML5VideoViewProxy, android.webkit.WebView);
  public static void play(java.lang.String, int, android.webkit.HTML5VideoViewProxy, android.webkit.WebChromeClient, int);
  public static boolean isPlaying(android.webkit.HTML5VideoViewProxy);
  public static int getCurrentPosition();
  public static void seek(int, android.webkit.HTML5VideoViewProxy);
  public static void pause(android.webkit.HTML5VideoViewProxy);
  public static void onPrepared();
  public static void end();
  public void onPrepared(android.media.MediaPlayer);
  public void onCompletion(android.media.MediaPlayer);
  public boolean onError(android.media.MediaPlayer, int, int);
  public void dispatchOnEnded();
  public void dispatchOnPaused();
  public void dispatchOnStopFullScreen();
  public void onTimeupdate();
  public void onFrameAvailable(android.graphics.SurfaceTexture);
  public void handleMessage(android.os.Message);
  public android.content.Context getContext();
  public void play(java.lang.String, int, int);
  public void seek(int);
  public void pause();
  public void teardown();
  public void loadPoster(java.lang.String);
  public void setBaseLayer(int);
  public void pauseAndDispatch();
  public void enterFullScreenVideo(int, java.lang.String);
  public static android.webkit.HTML5VideoViewProxy getInstance(android.webkit.WebViewCore, int);
  public boolean onInfo(android.media.MediaPlayer, int, int);
public class android.webkit.HttpAuthHandler extends android.os.Handler {
  public boolean useHttpAuthUsernamePassword();
  public void cancel();
  public void proceed(java.lang.String, java.lang.String);
  public boolean suppressDialog();
  public void handleMessage(android.os.Message);
  public void proceed(java.lang.String, java.lang.String);
  public void cancel();
  public boolean useHttpAuthUsernamePassword();
  public static void onReceivedCredentials(android.webkit.LoadListener, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.webkit.JWebCoreJavaBridge();
  public void handleMessage(android.os.Message);
  public void pause();
  public void resume();
  public native void setCacheSize(int);
  public void storeFilePathForContentUri(java.lang.String, java.lang.String);
  public void updateProxy(android.net.ProxyProperties);
  public native void setNetworkOnLine(boolean);
  public native void setNetworkType(java.lang.String, java.lang.String);
  public native void addPackageNames(java.util.Set<java.lang.String>);
  public native void addPackageName(java.lang.String);
  public native void removePackageName(java.lang.String);
  public native void nativeUpdateProxy(java.lang.String, java.lang.String);
public class android.webkit.JsPromptResult extends android.webkit.JsResult {
  public void confirm(java.lang.String);
public class android.webkit.JsResult {
  public final void cancel();
  public final void confirm();
  public android.webkit.KeyStoreHandler(java.lang.String);
  public void didReceiveData(byte[], int);
  public void installCert(android.content.Context);
public class android.webkit.L10nUtils {
  public android.webkit.L10nUtils();
  public static void setApplicationContext(android.content.Context);
  public static java.lang.String getLocalisedString(int);
  public void header(java.lang.String, java.lang.String);
  public static android.webkit.LoadListener getLoadListener(android.content.Context, android.webkit.BrowserFrame, java.lang.String, int, boolean, boolean, boolean, boolean, long, java.lang.String, java.lang.String);
  public static int getNativeLoaderCount();
  public void handleMessage(android.os.Message);
  public boolean cancelled();
  public void headers(android.net.http.Headers);
  public void status(int, int, int, java.lang.String);
  public void certificate(android.net.http.SslCertificate);
  public void error(int, java.lang.String);
  public void data(byte[], int);
  public void endData();
  public boolean handleSslErrorRequest(android.net.http.SslError);
  public void cancel();
public class android.webkit.MimeTypeMap {
  public static java.lang.String getFileExtensionFromUrl(java.lang.String);
  public boolean hasMimeType(java.lang.String);
  public java.lang.String getMimeTypeFromExtension(java.lang.String);
  public boolean hasExtension(java.lang.String);
  public java.lang.String getExtensionFromMimeType(java.lang.String);
  public static android.webkit.MimeTypeMap getSingleton();
  public void onReceive(android.content.Context, android.content.Intent);
  public static synchronized android.webkit.Network getInstance(android.content.Context);
  public static void enablePlatformNotifications();
  public static void disablePlatformNotifications();
  public boolean requestURL(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, byte[], android.webkit.LoadListener);
  public boolean isValidProxySet();
  public java.lang.String getProxyHostname();
  public synchronized java.lang.String getProxyUsername();
  public synchronized void setProxyUsername(java.lang.String);
  public synchronized java.lang.String getProxyPassword();
  public synchronized void setProxyPassword(java.lang.String);
  public boolean saveState(android.os.Bundle);
  public boolean restoreState(android.os.Bundle);
  public void clearUserSslPrefTable();
  public void handleSslErrorRequest(android.webkit.LoadListener);
  public void handleAuthRequest(android.webkit.LoadListener);
  public void startTiming();
  public void stopTiming();
public class android.webkit.OverScrollGlow {
  public android.webkit.OverScrollGlow(android.webkit.WebView);
  public void pullGlow(int, int, int, int, int, int);
  public void setOverScrollDeltas(int, int);
  public void absorbGlow(int, int, int, int, int, int);
  public boolean drawEdgeGlows(android.graphics.Canvas);
  public boolean isAnimating();
  public void releaseAll();
  public void handleClickEvent(android.content.Context);
  public void onClick(android.content.DialogInterface, int);
public interface android.webkit.Plugin$PreferencesClickHandler {
  public abstract void handleClickEvent(android.content.Context);
public class android.webkit.Plugin {
  public android.webkit.Plugin(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toString();
  public java.lang.String getName();
  public java.lang.String getPath();
  public java.lang.String getFileName();
  public java.lang.String getDescription();
  public void setName(java.lang.String);
  public void setPath(java.lang.String);
  public void setFileName(java.lang.String);
  public void setDescription(java.lang.String);
  public void setClickHandler(android.webkit.Plugin$PreferencesClickHandler);
  public void dispatchClickEvent(android.content.Context);
  public void onCustomViewHidden();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void setContentView(android.view.View);
  public void show();
  public void hide();
public class android.webkit.PluginList {
  public android.webkit.PluginList();
  public synchronized java.util.List getList();
  public synchronized void addPlugin(android.webkit.Plugin);
  public synchronized void removePlugin(android.webkit.Plugin);
  public synchronized void clear();
  public synchronized void pluginClicked(android.content.Context, int);
public class android.webkit.PluginManager {
  public static synchronized android.webkit.PluginManager getInstance(android.content.Context);
  public void refreshPlugins(boolean);
public interface android.webkit.SearchBox$IsSupportedCallback {
  public abstract void searchBoxIsSupported(boolean);
public abstract class android.webkit.SearchBox$SearchBoxListener {
  public android.webkit.SearchBox$SearchBoxListener();
  public void onSuggestionsReceived(java.lang.String, java.util.List<java.lang.String>);
  public void onChangeComplete(boolean);
  public void onSubmitComplete(boolean);
  public void onResizeComplete(boolean);
  public void onCancelComplete(boolean);
public interface android.webkit.SearchBox {
  public abstract void setQuery(java.lang.String);
  public abstract void setVerbatim(boolean);
  public abstract void setSelection(int, int);
  public abstract void setDimensions(int, int, int, int);
  public abstract void onchange(android.webkit.SearchBox$SearchBoxListener);
  public abstract void onsubmit(android.webkit.SearchBox$SearchBoxListener);
  public abstract void onresize(android.webkit.SearchBox$SearchBoxListener);
  public abstract void oncancel(android.webkit.SearchBox$SearchBoxListener);
  public abstract void addSearchBoxListener(android.webkit.SearchBox$SearchBoxListener);
  public abstract void removeSearchBoxListener(android.webkit.SearchBox$SearchBoxListener);
  public abstract void isSupported(android.webkit.SearchBox$IsSupportedCallback);
  public void setQuery(java.lang.String);
  public void setVerbatim(boolean);
  public void setSelection(int, int);
  public void setDimensions(int, int, int, int);
  public void onchange(android.webkit.SearchBox$SearchBoxListener);
  public void onsubmit(android.webkit.SearchBox$SearchBoxListener);
  public void onresize(android.webkit.SearchBox$SearchBoxListener);
  public void oncancel(android.webkit.SearchBox$SearchBoxListener);
  public void addSearchBoxListener(android.webkit.SearchBox$SearchBoxListener);
  public void removeSearchBoxListener(android.webkit.SearchBox$SearchBoxListener);
  public void isSupported(android.webkit.SearchBox$IsSupportedCallback);
  public void isSupportedCallback(boolean);
  public void handleIsSupportedCallback(boolean);
  public void dispatchCompleteCallback(java.lang.String, int, boolean);
  public void handleDispatchCompleteCallback(java.lang.String, int, boolean);
  public void setSuggestions(java.lang.String);
  public boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public void onDestroyActionMode(android.view.ActionMode);
  public static android.webkit.SslCertLookupTable getInstance();
  public void setIsAllowed(android.net.http.SslError);
  public boolean isAllowed(android.net.http.SslError);
  public void clear();
  public static synchronized android.webkit.SslClientCertLookupTable getInstance();
  public void Allow(java.lang.String, byte[], byte[][]);
  public void Deny(java.lang.String);
  public boolean IsAllowed(java.lang.String);
  public boolean IsDenied(java.lang.String);
  public byte[] PrivateKey(java.lang.String);
  public byte[][] CertificateChain(java.lang.String);
public class android.webkit.SslErrorHandler extends android.os.Handler {
  public void proceed();
  public void cancel();
  public void handleMessage(android.os.Message);
  public void proceed();
  public void cancel();
  public boolean handleMessage(android.os.Message);
public final class android.webkit.URLUtil {
  public android.webkit.URLUtil();
  public static java.lang.String guessUrl(java.lang.String);
  public static java.lang.String composeSearchUrl(java.lang.String, java.lang.String, java.lang.String);
  public static boolean isAssetUrl(java.lang.String);
  public static boolean isResourceUrl(java.lang.String);
  public static boolean isCookielessProxyUrl(java.lang.String);
  public static boolean isFileUrl(java.lang.String);
  public static boolean isAboutUrl(java.lang.String);
  public static boolean isDataUrl(java.lang.String);
  public static boolean isJavaScriptUrl(java.lang.String);
  public static boolean isHttpUrl(java.lang.String);
  public static boolean isHttpsUrl(java.lang.String);
  public static boolean isNetworkUrl(java.lang.String);
  public static boolean isContentUrl(java.lang.String);
  public static boolean isValidUrl(java.lang.String);
  public static java.lang.String stripAnchor(java.lang.String);
  public static final java.lang.String guessFileName(java.lang.String, java.lang.String, java.lang.String);
public interface android.webkit.ValueCallback<T> {
  public abstract void onReceiveValue(T);
  public void run();
  public void run();
  public void run();
  public void run();
  public void run();
public class android.webkit.WebBackForwardList implements java.lang.Cloneable,java.io.Serializable {
  public synchronized android.webkit.WebHistoryItem getCurrentItem();
  public synchronized int getCurrentIndex();
  public synchronized android.webkit.WebHistoryItem getItemAtIndex(int);
  public synchronized int getSize();
public abstract class android.webkit.WebBackForwardListClient {
  public android.webkit.WebBackForwardListClient();
  public void onNewHistoryItem(android.webkit.WebHistoryItem);
  public void onIndexChanged(android.webkit.WebHistoryItem, int);
public interface android.webkit.WebChromeClient$CustomViewCallback {
  public abstract void onCustomViewHidden();
public class android.webkit.WebChromeClient {
  public android.webkit.WebChromeClient();
  public void onProgressChanged(android.webkit.WebView, int);
  public void onReceivedTitle(android.webkit.WebView, java.lang.String);
  public void onReceivedIcon(android.webkit.WebView, android.graphics.Bitmap);
  public void onReceivedTouchIconUrl(android.webkit.WebView, java.lang.String, boolean);
  public void onShowCustomView(android.view.View, android.webkit.WebChromeClient$CustomViewCallback);
  public void onShowCustomView(android.view.View, int, android.webkit.WebChromeClient$CustomViewCallback);
  public void onHideCustomView();
  public boolean onCreateWindow(android.webkit.WebView, boolean, boolean, android.os.Message);
  public void onRequestFocus(android.webkit.WebView);
  public void onCloseWindow(android.webkit.WebView);
  public boolean onJsAlert(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public boolean onJsConfirm(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public boolean onJsPrompt(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String, android.webkit.JsPromptResult);
  public boolean onJsBeforeUnload(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public void onExceededDatabaseQuota(java.lang.String, java.lang.String, long, long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onReachedMaxAppCacheSize(long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onGeolocationPermissionsShowPrompt(java.lang.String, android.webkit.GeolocationPermissions$Callback);
  public void onGeolocationPermissionsHidePrompt();
  public boolean onJsTimeout();
  public void onConsoleMessage(java.lang.String, int, java.lang.String);
  public boolean onConsoleMessage(android.webkit.ConsoleMessage);
  public android.graphics.Bitmap getDefaultVideoPoster();
  public android.view.View getVideoLoadingProgressView();
  public void getVisitedHistory(android.webkit.ValueCallback<java.lang.String[]>);
  public void openFileChooser(android.webkit.ValueCallback<android.net.Uri>, java.lang.String);
  public void setInstallableWebApp();
  public void setupAutoFill(android.os.Message);
public class android.webkit.WebHistoryItem implements java.lang.Cloneable {
  public int getId();
  public java.lang.String getUrl();
  public java.lang.String getOriginalUrl();
  public java.lang.String getTitle();
  public android.graphics.Bitmap getFavicon();
  public java.lang.String getTouchIconUrl();
  public java.lang.Object getCustomData();
  public void setCustomData(java.lang.Object);
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public interface android.webkit.WebIconDatabase$IconListener {
  public abstract void onReceivedIcon(java.lang.String, android.graphics.Bitmap);
public final class android.webkit.WebIconDatabase {
  public void open(java.lang.String);
  public void close();
  public void removeAllIcons();
  public void requestIconForPageUrl(java.lang.String, android.webkit.WebIconDatabase$IconListener);
  public void bulkRequestIconForPageUrl(android.content.ContentResolver, java.lang.String, android.webkit.WebIconDatabase$IconListener);
  public void retainIconForPageUrl(java.lang.String);
  public void releaseIconForPageUrl(java.lang.String);
  public static android.webkit.WebIconDatabase getInstance();
public class android.webkit.WebResourceResponse {
  public android.webkit.WebResourceResponse(java.lang.String, java.lang.String, java.io.InputStream);
  public void setMimeType(java.lang.String);
  public java.lang.String getMimeType();
  public void setEncoding(java.lang.String);
  public java.lang.String getEncoding();
  public void setData(java.io.InputStream);
  public java.io.InputStream getData();
public class android.webkit.WebSettings$AutoFillProfile {
  public android.webkit.WebSettings$AutoFillProfile(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public int getUniqueId();
  public java.lang.String getFullName();
  public java.lang.String getEmailAddress();
  public java.lang.String getCompanyName();
  public java.lang.String getAddressLine1();
  public java.lang.String getAddressLine2();
  public java.lang.String getCity();
  public java.lang.String getState();
  public java.lang.String getZipCode();
  public java.lang.String getCountry();
  public java.lang.String getPhoneNumber();
  public void handleMessage(android.os.Message);
public final class android.webkit.WebSettings$LayoutAlgorithm extends java.lang.Enum<android.webkit.WebSettings$LayoutAlgorithm> {
  public static android.webkit.WebSettings$LayoutAlgorithm[] values();
  public static android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String);
public final class android.webkit.WebSettings$PluginState extends java.lang.Enum<android.webkit.WebSettings$PluginState> {
  public static android.webkit.WebSettings$PluginState[] values();
  public static android.webkit.WebSettings$PluginState valueOf(java.lang.String);
public final class android.webkit.WebSettings$RenderPriority extends java.lang.Enum<android.webkit.WebSettings$RenderPriority> {
  public static android.webkit.WebSettings$RenderPriority[] values();
  public static android.webkit.WebSettings$RenderPriority valueOf(java.lang.String);
public final class android.webkit.WebSettings$TextSize extends java.lang.Enum<android.webkit.WebSettings$TextSize> {
  public static android.webkit.WebSettings$TextSize[] values();
  public static android.webkit.WebSettings$TextSize valueOf(java.lang.String);
public final class android.webkit.WebSettings$ZoomDensity extends java.lang.Enum<android.webkit.WebSettings$ZoomDensity> {
  public static android.webkit.WebSettings$ZoomDensity[] values();
  public static android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String);
public class android.webkit.WebSettings {
  public void setNavDump(boolean);
  public boolean getNavDump();
  public void setSupportZoom(boolean);
  public boolean supportZoom();
  public void setBuiltInZoomControls(boolean);
  public boolean getBuiltInZoomControls();
  public void setDisplayZoomControls(boolean);
  public boolean getDisplayZoomControls();
  public void setAllowFileAccess(boolean);
  public boolean getAllowFileAccess();
  public void setAllowContentAccess(boolean);
  public boolean getAllowContentAccess();
  public void setLoadWithOverviewMode(boolean);
  public boolean getLoadWithOverviewMode();
  public void setEnableSmoothTransition(boolean);
  public boolean enableSmoothTransition();
  public void setUseWebViewBackgroundForOverscrollBackground(boolean);
  public boolean getUseWebViewBackgroundForOverscrollBackground();
  public void setSaveFormData(boolean);
  public boolean getSaveFormData();
  public void setSavePassword(boolean);
  public boolean getSavePassword();
  public synchronized void setTextZoom(int);
  public synchronized int getTextZoom();
  public synchronized void setTextSize(android.webkit.WebSettings$TextSize);
  public synchronized android.webkit.WebSettings$TextSize getTextSize();
  public void setDoubleTapZoom(int);
  public int getDoubleTapZoom();
  public void setDefaultZoom(android.webkit.WebSettings$ZoomDensity);
  public android.webkit.WebSettings$ZoomDensity getDefaultZoom();
  public void setLightTouchEnabled(boolean);
  public boolean getLightTouchEnabled();
  public synchronized void setUseDoubleTree(boolean);
  public synchronized boolean getUseDoubleTree();
  public synchronized void setUserAgent(int);
  public synchronized int getUserAgent();
  public synchronized void setUseWideViewPort(boolean);
  public synchronized boolean getUseWideViewPort();
  public synchronized void setSupportMultipleWindows(boolean);
  public synchronized boolean supportMultipleWindows();
  public synchronized void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm);
  public synchronized android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();
  public synchronized void setStandardFontFamily(java.lang.String);
  public synchronized java.lang.String getStandardFontFamily();
  public synchronized void setFixedFontFamily(java.lang.String);
  public synchronized java.lang.String getFixedFontFamily();
  public synchronized void setSansSerifFontFamily(java.lang.String);
  public synchronized java.lang.String getSansSerifFontFamily();
  public synchronized void setSerifFontFamily(java.lang.String);
  public synchronized java.lang.String getSerifFontFamily();
  public synchronized void setCursiveFontFamily(java.lang.String);
  public synchronized java.lang.String getCursiveFontFamily();
  public synchronized void setFantasyFontFamily(java.lang.String);
  public synchronized java.lang.String getFantasyFontFamily();
  public synchronized void setMinimumFontSize(int);
  public synchronized int getMinimumFontSize();
  public synchronized void setMinimumLogicalFontSize(int);
  public synchronized int getMinimumLogicalFontSize();
  public synchronized void setDefaultFontSize(int);
  public synchronized int getDefaultFontSize();
  public synchronized void setDefaultFixedFontSize(int);
  public synchronized int getDefaultFixedFontSize();
  public synchronized void setPageCacheCapacity(int);
  public synchronized void setLoadsImagesAutomatically(boolean);
  public synchronized boolean getLoadsImagesAutomatically();
  public synchronized void setBlockNetworkImage(boolean);
  public synchronized boolean getBlockNetworkImage();
  public synchronized void setBlockNetworkLoads(boolean);
  public synchronized boolean getBlockNetworkLoads();
  public synchronized void setJavaScriptEnabled(boolean);
  public synchronized void setHardwareAccelSkiaEnabled(boolean);
  public synchronized boolean getHardwareAccelSkiaEnabled();
  public synchronized void setShowVisualIndicator(boolean);
  public synchronized boolean getShowVisualIndicator();
  public synchronized void setPluginsEnabled(boolean);
  public synchronized void setPluginState(android.webkit.WebSettings$PluginState);
  public synchronized void setPluginsPath(java.lang.String);
  public synchronized void setDatabasePath(java.lang.String);
  public synchronized void setGeolocationDatabasePath(java.lang.String);
  public synchronized void setAppCacheEnabled(boolean);
  public synchronized void setAppCachePath(java.lang.String);
  public synchronized void setAppCacheMaxSize(long);
  public synchronized void setDatabaseEnabled(boolean);
  public synchronized void setDomStorageEnabled(boolean);
  public synchronized boolean getDomStorageEnabled();
  public synchronized java.lang.String getDatabasePath();
  public synchronized boolean getDatabaseEnabled();
  public synchronized void setWorkersEnabled(boolean);
  public synchronized void setGeolocationEnabled(boolean);
  public synchronized void setXSSAuditorEnabled(boolean);
  public synchronized boolean getJavaScriptEnabled();
  public synchronized boolean getPluginsEnabled();
  public synchronized android.webkit.WebSettings$PluginState getPluginState();
  public synchronized java.lang.String getPluginsPath();
  public synchronized void setJavaScriptCanOpenWindowsAutomatically(boolean);
  public synchronized boolean getJavaScriptCanOpenWindowsAutomatically();
  public synchronized void setDefaultTextEncodingName(java.lang.String);
  public synchronized java.lang.String getDefaultTextEncodingName();
  public synchronized void setUserAgentString(java.lang.String);
  public synchronized java.lang.String getUserAgentString();
  public void setNeedInitialFocus(boolean);
  public synchronized void setRenderPriority(android.webkit.WebSettings$RenderPriority);
  public void setCacheMode(int);
  public int getCacheMode();
  public void setShrinksStandaloneImagesToFit(boolean);
  public void setMaximumDecodedImageSize(long);
  public boolean forceUserScalable();
  public synchronized void setForceUserScalable(boolean);
  public synchronized void setAutoFillEnabled(boolean);
  public synchronized boolean getAutoFillEnabled();
  public synchronized void setAutoFillProfile(android.webkit.WebSettings$AutoFillProfile);
  public synchronized android.webkit.WebSettings$AutoFillProfile getAutoFillProfile();
  public void setProperty(java.lang.String, java.lang.String);
  public java.lang.String getProperty(java.lang.String);
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public class android.webkit.WebStorage$Origin {
  public java.lang.String getOrigin();
  public long getQuota();
  public long getUsage();
public interface android.webkit.WebStorage$QuotaUpdater {
  public abstract void updateQuota(long);
public final class android.webkit.WebStorage {
  public android.webkit.WebStorage();
  public void createUIHandler();
  public synchronized void createHandler();
  public void getOrigins(android.webkit.ValueCallback<java.util.Map>);
  public void getUsageForOrigin(java.lang.String, android.webkit.ValueCallback<java.lang.Long>);
  public void getQuotaForOrigin(java.lang.String, android.webkit.ValueCallback<java.lang.Long>);
  public void setQuotaForOrigin(java.lang.String, long);
  public void deleteOrigin(java.lang.String);
  public void deleteAllData();
  public void setAppCacheMaximumSize(long);
  public static android.webkit.WebStorage getInstance();
  public void update();
  public void handleMessage(android.os.Message);
  public void run();
  public void sync();
  public void resetSync();
  public void startSync();
  public void stopSync();
  public void handleMessage(android.os.Message);
public class android.webkit.WebTextView$AutoCompleteAdapter extends android.widget.ArrayAdapter<java.lang.String> {
  public android.webkit.WebTextView$AutoCompleteAdapter(android.content.Context, java.util.ArrayList<java.lang.String>);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.webkit.WebTextView$BackgroundDrawable(int);
  public void draw(android.graphics.Canvas);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public android.webkit.WebTextView$MyResultReceiver(android.webkit.WebTextView, android.os.Handler);
  public android.webkit.WebTextView$WebTextViewLayout(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean, android.text.TextUtils$TruncateAt, int, float);
  public int getLineTop(int);
  public void setAutoFillable(int);
  public void setPadding(int, int, int, int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public void onEditorAction(int);
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean performLongClick();
  public boolean requestRectangleOnScreen(android.graphics.Rect, boolean);
  public void setAdapterCustom(android.webkit.WebTextView$AutoCompleteAdapter);
  public void setInputType(int);
  public void setGravityForRtl(boolean);
  public void onCancel(android.content.DialogInterface);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void run();
  public void run();
  public void run();
  public void run();
  public void run();
public class android.webkit.WebView$HitTestResult {
  public int getType();
  public java.lang.String getExtra();
  public void onGlobalLayout();
  public void onScrollChanged();
  public void onClick(android.content.DialogInterface, int);
  public void onClick(android.content.DialogInterface, int);
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public void onCancel(android.content.DialogInterface);
  public java.lang.String toString();
  public android.webkit.WebView$InvokeListBox$MyArrayListAdapter(android.webkit.WebView$InvokeListBox);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public boolean hasStableIds();
  public long getItemId(int);
  public boolean areAllItemsEnabled();
  public boolean isEnabled(int);
  public android.webkit.WebView$InvokeListBox$SingleDataSetObserver(android.webkit.WebView$InvokeListBox, long, android.widget.ListView, android.widget.Adapter);
  public void onChanged();
  public void run();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public void onReceive(android.content.Context, android.content.Intent);
public interface android.webkit.WebView$PictureListener {
  public abstract void onNewPicture(android.webkit.WebView, android.graphics.Picture);
  public void handleMessage(android.os.Message);
  public void onReceive(android.content.Context, android.content.Intent);
  public android.webkit.WebView$QueuedTouch set(android.webkit.WebViewCore$TouchEventData);
  public android.webkit.WebView$QueuedTouch set(android.view.MotionEvent, long);
  public android.webkit.WebView$QueuedTouch add(android.webkit.WebView$QueuedTouch);
  public android.webkit.WebView$RequestFormData(android.webkit.WebView, java.lang.String, java.lang.String, android.os.Message, boolean, boolean);
  public void run();
  public void ignoreCurrentlyMissingEvents();
  public void preQueueTouchEventData(android.webkit.WebViewCore$TouchEventData);
  public void reset();
  public long nextTouchSequence();
  public boolean enqueueTouchEvent(android.webkit.WebViewCore$TouchEventData);
  public void enqueueTouchEvent(android.view.MotionEvent);
public class android.webkit.WebView$WebViewTransport {
  public android.webkit.WebView$WebViewTransport(android.webkit.WebView);
  public synchronized void setWebView(android.webkit.WebView);
  public synchronized android.webkit.WebView getWebView();
public class android.webkit.WebView extends android.widget.AbsoluteLayout implements android.view.ViewTreeObserver$OnGlobalFocusChangeListener,android.view.ViewGroup$OnHierarchyChangeListener {
  public android.webkit.WebView(android.content.Context);
  public android.webkit.WebView(android.content.Context, android.util.AttributeSet);
  public android.webkit.WebView(android.content.Context, android.util.AttributeSet, int);
  public android.webkit.WebView(android.content.Context, android.util.AttributeSet, int, boolean);
  public boolean shouldDelayChildPressedState();
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void setOverScrollMode(int);
  public void setScrollBarStyle(int);
  public void setHorizontalScrollbarOverlay(boolean);
  public void setVerticalScrollbarOverlay(boolean);
  public boolean overlayHorizontalScrollbar();
  public boolean overlayVerticalScrollbar();
  public int getVisibleTitleHeight();
  public android.net.http.SslCertificate getCertificate();
  public void setCertificate(android.net.http.SslCertificate);
  public void savePassword(java.lang.String, java.lang.String, java.lang.String);
  public void setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String, java.lang.String);
  public void destroy();
  public static void enablePlatformNotifications();
  public static void disablePlatformNotifications();
  public void setJsFlags(java.lang.String);
  public void setNetworkAvailable(boolean);
  public void setNetworkType(java.lang.String, java.lang.String);
  public android.webkit.WebBackForwardList saveState(android.os.Bundle);
  public boolean savePicture(android.os.Bundle, java.io.File);
  public boolean restorePicture(android.os.Bundle, java.io.File);
  public boolean saveViewState(java.io.OutputStream);
  public boolean loadViewState(java.io.InputStream);
  public void clearViewState();
  public android.webkit.WebBackForwardList restoreState(android.os.Bundle);
  public void loadUrl(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);
  public void loadUrl(java.lang.String);
  public void postUrl(java.lang.String, byte[]);
  public void loadData(java.lang.String, java.lang.String, java.lang.String);
  public void loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void saveWebArchive(java.lang.String);
  public void saveWebArchive(java.lang.String, boolean, android.webkit.ValueCallback<java.lang.String>);
  public void stopLoading();
  public void reload();
  public boolean canGoBack();
  public void goBack();
  public boolean canGoForward();
  public void goForward();
  public boolean canGoBackOrForward(int);
  public void goBackOrForward(int);
  public boolean isPrivateBrowsingEnabled();
  public boolean pageUp(boolean);
  public boolean pageDown(boolean);
  public void clearView();
  public android.graphics.Picture capturePicture();
  public float getScale();
  public void setInitialScale(int);
  public void invokeZoomPicker();
  public android.webkit.WebView$HitTestResult getHitTestResult();
  public void requestFocusNodeHref(android.os.Message);
  public void requestImageRef(android.os.Message);
  public void setEmbeddedTitleBar(android.view.View);
  public void setTitleBarGravity(int);
  public java.lang.String getUrl();
  public java.lang.String getOriginalUrl();
  public java.lang.String getTitle();
  public android.graphics.Bitmap getFavicon();
  public java.lang.String getTouchIconUrl();
  public int getProgress();
  public int getContentHeight();
  public int getContentWidth();
  public int getPageBackgroundColor();
  public void pauseTimers();
  public void resumeTimers();
  public void onPause();
  public void onResume();
  public boolean isPaused();
  public void freeMemory();
  public void clearCache(boolean);
  public void clearFormData();
  public void clearHistory();
  public void clearSslPreferences();
  public android.webkit.WebBackForwardList copyBackForwardList();
  public void findNext(boolean);
  public int findAll(java.lang.String);
  public boolean showFindDialog(java.lang.String, boolean);
  public static java.lang.String findAddress(java.lang.String);
  public static java.lang.String findAddress(java.lang.String, boolean);
  public void clearMatches();
  public void documentHasImages(android.os.Message);
  public void stopScroll();
  public void computeScroll();
  public void setWebViewClient(android.webkit.WebViewClient);
  public android.webkit.WebViewClient getWebViewClient();
  public void setDownloadListener(android.webkit.DownloadListener);
  public void setWebChromeClient(android.webkit.WebChromeClient);
  public android.webkit.WebChromeClient getWebChromeClient();
  public void setWebBackForwardListClient(android.webkit.WebBackForwardListClient);
  public android.webkit.WebBackForwardListClient getWebBackForwardListClient();
  public void setPictureListener(android.webkit.WebView$PictureListener);
  public void externalRepresentation(android.os.Message);
  public void documentAsText(android.os.Message);
  public void addJavascriptInterface(java.lang.Object, java.lang.String);
  public void removeJavascriptInterface(java.lang.String);
  public android.webkit.WebSettings getSettings();
  public static synchronized android.webkit.PluginList getPluginList();
  public void refreshPlugins(boolean);
  public void setLayoutParams(android.view.ViewGroup$LayoutParams);
  public boolean performLongClick();
  public boolean selectText();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public void dumpDisplayTree();
  public void dumpDomTree(boolean);
  public void dumpRenderTree(boolean);
  public void useMockDeviceOrientation();
  public void setMockDeviceOrientation(boolean, double, boolean, double, boolean, double);
  public void dumpV8Counters();
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void emulateShiftHeld();
  public void selectAll();
  public boolean copySelection();
  public android.webkit.SearchBox getSearchBox();
  public void onChildViewAdded(android.view.View, android.view.View);
  public void onChildViewRemoved(android.view.View, android.view.View);
  public void onGlobalFocusChanged(android.view.View, android.view.View);
  public void onWindowFocusChanged(boolean);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public void setMapTrackballToArrowKeys(boolean);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void flingScroll(int, int);
  public android.view.View getZoomControls();
  public boolean canZoomIn();
  public boolean canZoomOut();
  public boolean zoomIn();
  public boolean zoomOut();
  public boolean requestFocus(int, android.graphics.Rect);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public synchronized android.webkit.WebViewCore getWebViewCore();
  public void setBackgroundColor(int);
  public void debugDump();
  public void drawPage(android.graphics.Canvas);
  public void setHTML5VideoViewProxy(android.webkit.HTML5VideoViewProxy);
  public void setTouchInterval(int);
  public void tileProfilingStart();
  public float tileProfilingStop();
  public void tileProfilingClear();
  public int tileProfilingNumFrames();
  public int tileProfilingNumTilesInFrame(int);
  public int tileProfilingGetInt(int, int, java.lang.String);
  public float tileProfilingGetFloat(int, int, java.lang.String);
public class android.webkit.WebViewClient {
  public android.webkit.WebViewClient();
  public boolean shouldOverrideUrlLoading(android.webkit.WebView, java.lang.String);
  public void onPageStarted(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
  public void onPageFinished(android.webkit.WebView, java.lang.String);
  public void onLoadResource(android.webkit.WebView, java.lang.String);
  public android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView, java.lang.String);
  public void onTooManyRedirects(android.webkit.WebView, android.os.Message, android.os.Message);
  public void onReceivedError(android.webkit.WebView, int, java.lang.String, java.lang.String);
  public void onFormResubmission(android.webkit.WebView, android.os.Message, android.os.Message);
  public void doUpdateVisitedHistory(android.webkit.WebView, java.lang.String, boolean);
  public void onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError);
  public void onProceededAfterSslError(android.webkit.WebView, android.net.http.SslError);
  public void onReceivedClientCertRequest(android.webkit.WebView, android.webkit.ClientCertRequestHandler, java.lang.String);
  public void onReceivedHttpAuthRequest(android.webkit.WebView, android.webkit.HttpAuthHandler, java.lang.String, java.lang.String);
  public boolean shouldOverrideKeyEvent(android.webkit.WebView, android.view.KeyEvent);
  public void onUnhandledKeyEvent(android.webkit.WebView, android.view.KeyEvent);
  public void onScaleChanged(android.webkit.WebView, float, float);
  public void onReceivedLoginRequest(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String);
  public void updateQuota(long);
  public void updateQuota(long);
  public void onReceiveValue(java.lang.String[]);
  public void onReceiveValue(java.lang.Object);
  public void invoke(java.lang.String, boolean, boolean);
  public android.webkit.WebViewCore$AutoFillData();
  public android.webkit.WebViewCore$AutoFillData(int, java.lang.String);
  public int getQueryId();
  public java.lang.String getPreviewString();
  public void handleMessage(android.os.Message);
public class android.webkit.WebViewCore$EventHub {
  public android.webkit.WebViewCore$TextSelectionData(int, int);
  public void handleMessage(android.os.Message);
  public void run();
public final class android.webkit.WebViewCore {
  public android.webkit.WebViewCore(android.content.Context, android.webkit.WebView, android.webkit.CallbackProxy, java.util.Map<java.lang.String, java.lang.Object>);
  public static void pauseTimers();
  public static void resumeTimers();
  public android.webkit.WebSettings getSettings();
  public void sendMessage(android.os.Message);
  public void setMockDeviceOrientation(boolean, double, boolean, double, boolean, double);
  public void run();
public class android.webkit.WebViewDatabase {
  public static synchronized android.webkit.WebViewDatabase getInstance(android.content.Context);
  public boolean hasUsernamePassword();
  public void clearUsernamePassword();
  public boolean hasHttpAuthUsernamePassword();
  public void clearHttpAuthUsernamePassword();
  public boolean hasFormData();
  public void clearFormData();
  public void handleMessage(android.os.Message);
  public abstract void show();
  public abstract void hide();
  public abstract void update();
  public abstract boolean isVisible();
  public void onVisibilityChanged(boolean);
  public void onZoom(boolean);
  public android.webkit.ZoomControlEmbedded(android.webkit.ZoomManager, android.webkit.WebView);
  public void show();
  public void hide();
  public boolean isVisible();
  public void update();
  public void run();
  public void onClick(android.view.View);
  public void onClick(android.view.View);
  public android.webkit.ZoomControlExternal$ExtendedZoomControls(android.content.Context);
  public void show(boolean);
  public void hide();
  public boolean hasFocus();
  public void setOnZoomInClickListener(android.view.View$OnClickListener);
  public void setOnZoomOutClickListener(android.view.View$OnClickListener);
  public android.webkit.ZoomControlExternal(android.webkit.WebView);
  public void show();
  public void hide();
  public boolean isVisible();
  public void update();
  public android.webkit.ZoomControlExternal$ExtendedZoomControls getControls();
  public android.webkit.ZoomManager$PostScale(android.webkit.ZoomManager, boolean, boolean, boolean);
  public void run();
  public boolean onScaleBegin(android.view.ScaleGestureDetector);
  public boolean isPanningOnly(android.view.ScaleGestureDetector);
  public boolean handleScale(android.view.ScaleGestureDetector);
  public boolean onScale(android.view.ScaleGestureDetector);
  public void onScaleEnd(android.view.ScaleGestureDetector);
  public android.webkit.ZoomManager(android.webkit.WebView, android.webkit.CallbackProxy);
  public void init(float);
  public void updateDefaultZoomDensity(float);
  public final float getScale();
  public final float getInvScale();
  public final float getTextWrapScale();
  public final float getMaxZoomScale();
  public final float getMinZoomScale();
  public final float getDefaultScale();
  public final float getReadingLevelScale();
  public final float getInvDefaultScale();
  public final float getDefaultMaxZoomScale();
  public final float getDefaultMinZoomScale();
  public final int getDocumentAnchorX();
  public final int getDocumentAnchorY();
  public final void clearDocumentAnchor();
  public final void setZoomCenter(float, float);
  public final void setInitialScaleInPercent(int);
  public final float computeScaleWithLimits(float);
  public final boolean isScaleOverLimits(float);
  public final boolean isZoomScaleFixed();
  public static final boolean exceedsMinScaleIncrement(float, float);
  public boolean willScaleTriggerZoom(float);
  public final boolean canZoomIn();
  public final boolean canZoomOut();
  public boolean zoomIn();
  public boolean zoomOut();
  public boolean startZoomAnimation(float, boolean);
  public void animateZoom(android.graphics.Canvas);
  public boolean isZoomAnimating();
  public boolean isFixedLengthAnimationInProgress();
  public void updateDoubleTapZoom(int);
  public void refreshZoomScale(boolean);
  public void setZoomScale(float, boolean);
  public boolean isDoubleTapEnabled();
  public void handleDoubleTap(float, float);
  public boolean isInZoomOverview();
  public void updateMultiTouchSupport(android.content.Context);
  public boolean supportsMultiTouchZoom();
  public boolean supportsPanDuringZoom();
  public boolean isPreventingWebkitUpdates();
  public android.view.ScaleGestureDetector getMultiTouchGestureDetector();
  public void onSizeChanged(int, int, int, int);
  public void updateZoomRange(android.webkit.WebViewCore$ViewState, int, int);
  public void onNewPicture(android.webkit.WebViewCore$DrawData);
  public void onFirstLayout(android.webkit.WebViewCore$DrawData);
  public void saveZoomState(android.os.Bundle);
  public void restoreZoomState(android.os.Bundle);
  public void invokeZoomPicker();
  public void dismissZoomPicker();
  public boolean isZoomPickerVisible();
  public void updateZoomPicker();
  public void keepZoomPickerVisible();
  public android.view.View getExternalZoomPicker();
  public void setHardwareAccelerated();
  public void run();
  public void onChanged();
  public void onInvalidated();
  public void run();
  public void run();
  public void run();
  public void run();
  public void run();
public class android.widget.AbsListView$LayoutParams extends android.view.ViewGroup$LayoutParams {
  public android.widget.AbsListView$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsListView$LayoutParams(int, int);
  public android.widget.AbsListView$LayoutParams(int, int, int);
  public android.widget.AbsListView$LayoutParams(android.view.ViewGroup$LayoutParams);
public interface android.widget.AbsListView$MultiChoiceModeListener extends android.view.ActionMode$Callback {
  public abstract void onItemCheckedStateChanged(android.view.ActionMode, int, long, boolean);
  public void setWrapped(android.widget.AbsListView$MultiChoiceModeListener);
  public boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public void onDestroyActionMode(android.view.ActionMode);
  public void onItemCheckedStateChanged(android.view.ActionMode, int, long, boolean);
public interface android.widget.AbsListView$OnScrollListener {
  public abstract void onScrollStateChanged(android.widget.AbsListView, int);
  public abstract void onScroll(android.widget.AbsListView, int, int, int);
  public void run();
  public void run();
  public void setViewTypeCount(int);
  public void markChildrenDirty();
  public boolean shouldRecycleViewType(int);
public interface android.widget.AbsListView$RecyclerListener {
  public abstract void onMovedToScrapHeap(android.view.View);
  public android.widget.AbsListView$SavedState createFromParcel(android.os.Parcel);
  public android.widget.AbsListView$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public interface android.widget.AbsListView$SelectionBoundsAdjuster {
  public abstract void adjustListItemSelectionBounds(android.graphics.Rect);
  public void rememberWindowAttachCount();
  public boolean sameWindow();
public abstract class android.widget.AbsListView extends android.widget.AdapterView<android.widget.ListAdapter> implements android.text.TextWatcher, android.view.ViewTreeObserver$OnGlobalLayoutListener, android.widget.Filter$FilterListener, android.view.ViewTreeObserver$OnTouchModeChangeListener, android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback {
  public android.widget.AbsListView(android.content.Context);
  public android.widget.AbsListView(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsListView(android.content.Context, android.util.AttributeSet, int);
  public void setOverScrollMode(int);
  public void setAdapter(android.widget.ListAdapter);
  public int getCheckedItemCount();
  public boolean isItemChecked(int);
  public int getCheckedItemPosition();
  public android.util.SparseBooleanArray getCheckedItemPositions();
  public long[] getCheckedItemIds();
  public void clearChoices();
  public void setItemChecked(int, boolean);
  public boolean performItemClick(android.view.View, int, long);
  public int getChoiceMode();
  public void setChoiceMode(int);
  public void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener);
  public void setFastScrollEnabled(boolean);
  public void setFastScrollAlwaysVisible(boolean);
  public boolean isFastScrollAlwaysVisible();
  public int getVerticalScrollbarWidth();
  public boolean isFastScrollEnabled();
  public void setVerticalScrollbarPosition(int);
  public void setSmoothScrollbarEnabled(boolean);
  public boolean isSmoothScrollbarEnabled();
  public void setOnScrollListener(android.widget.AbsListView$OnScrollListener);
  public void sendAccessibilityEvent(int);
  public boolean isScrollingCacheEnabled();
  public void setScrollingCacheEnabled(boolean);
  public void setTextFilterEnabled(boolean);
  public boolean isTextFilterEnabled();
  public void getFocusedRect(android.graphics.Rect);
  public boolean isStackFromBottom();
  public void setStackFromBottom(boolean);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setFilterText(java.lang.String);
  public java.lang.CharSequence getTextFilter();
  public void requestLayout();
  public android.view.View getSelectedView();
  public int getListPaddingTop();
  public int getListPaddingBottom();
  public int getListPaddingLeft();
  public int getListPaddingRight();
  public void setDrawSelectorOnTop(boolean);
  public void setSelector(int);
  public void setSelector(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getSelector();
  public void setScrollIndicators(android.view.View, android.view.View);
  public boolean verifyDrawable(android.graphics.drawable.Drawable);
  public void jumpDrawablesToCurrentState();
  public void onWindowFocusChanged(boolean);
  public boolean showContextMenu(float, float, int);
  public boolean showContextMenuForChild(android.view.View);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public int pointToPosition(int, int);
  public long pointToRowId(int, int);
  public void onTouchModeChanged(boolean);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public void draw(android.graphics.Canvas);
  public void setOverScrollEffectPadding(int, int);
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public void addTouchables(java.util.ArrayList<android.view.View>);
  public void setFriction(float);
  public void setVelocityScale(float);
  public void smoothScrollToPosition(int);
  public void smoothScrollToPositionFromTop(int, int, int);
  public void smoothScrollToPositionFromTop(int, int);
  public void smoothScrollToPosition(int, int);
  public void smoothScrollBy(int, int);
  public void invalidateViews();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public boolean checkInputConnectionProxy(android.view.View);
  public void clearTextFilter();
  public boolean hasTextFilter();
  public void onGlobalLayout();
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public void onFilterComplete(int);
  public android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void setTranscriptMode(int);
  public int getTranscriptMode();
  public int getSolidColor();
  public void setCacheColorHint(int);
  public int getCacheColorHint();
  public void reclaimViews(java.util.List<android.view.View>);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void deferNotifyDataSetChanged();
  public boolean onRemoteAdapterConnected();
  public void onRemoteAdapterDisconnected();
  public void setRecyclerListener(android.widget.AbsListView$RecyclerListener);
  public void setAdapter(android.widget.Adapter);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
public abstract class android.widget.AbsSeekBar extends android.widget.ProgressBar {
  public android.widget.AbsSeekBar(android.content.Context);
  public android.widget.AbsSeekBar(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsSeekBar(android.content.Context, android.util.AttributeSet, int);
  public void setThumb(android.graphics.drawable.Drawable);
  public int getThumbOffset();
  public void setThumbOffset(int);
  public void setKeyProgressIncrement(int);
  public int getKeyProgressIncrement();
  public synchronized void setMax(int);
  public void jumpDrawablesToCurrentState();
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public void put(int, android.view.View);
  public android.widget.AbsSpinner$SavedState createFromParcel(android.os.Parcel);
  public android.widget.AbsSpinner$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public abstract class android.widget.AbsSpinner extends android.widget.AdapterView<android.widget.SpinnerAdapter> {
  public android.widget.AbsSpinner(android.content.Context);
  public android.widget.AbsSpinner(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsSpinner(android.content.Context, android.util.AttributeSet, int);
  public void setAdapter(android.widget.SpinnerAdapter);
  public void setSelection(int, boolean);
  public void setSelection(int);
  public android.view.View getSelectedView();
  public void requestLayout();
  public android.widget.SpinnerAdapter getAdapter();
  public int getCount();
  public int pointToPosition(int, int);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setAdapter(android.widget.Adapter);
  public android.widget.Adapter getAdapter();
public class android.widget.AbsoluteLayout$LayoutParams extends android.view.ViewGroup$LayoutParams {
  public android.widget.AbsoluteLayout$LayoutParams(int, int, int, int);
  public android.widget.AbsoluteLayout$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsoluteLayout$LayoutParams(android.view.ViewGroup$LayoutParams);
  public java.lang.String debug(java.lang.String);
public class android.widget.AbsoluteLayout extends android.view.ViewGroup {
  public android.widget.AbsoluteLayout(android.content.Context);
  public android.widget.AbsoluteLayout(android.content.Context, android.util.AttributeSet);
  public android.widget.AbsoluteLayout(android.content.Context, android.util.AttributeSet, int);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public boolean shouldDelayChildPressedState();
public interface android.widget.ActivityChooserModel$ActivityChooserModelClient {
  public abstract void setActivityChooserModel(android.widget.ActivityChooserModel);
public final class android.widget.ActivityChooserModel$ActivityResolveInfo implements java.lang.Comparable<android.widget.ActivityChooserModel$ActivityResolveInfo> {
  public android.widget.ActivityChooserModel$ActivityResolveInfo(android.widget.ActivityChooserModel, android.content.pm.ResolveInfo);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(android.widget.ActivityChooserModel$ActivityResolveInfo);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public interface android.widget.ActivityChooserModel$ActivitySorter {
  public abstract void sort(android.content.Intent, java.util.List<android.widget.ActivityChooserModel$ActivityResolveInfo>, java.util.List<android.widget.ActivityChooserModel$HistoricalRecord>);
  public void onPackageAdded(java.lang.String, int);
  public void onPackageAppeared(java.lang.String, int);
  public void onPackageRemoved(java.lang.String, int);
  public void onPackageDisappeared(java.lang.String, int);
  public void sort(android.content.Intent, java.util.List<android.widget.ActivityChooserModel$ActivityResolveInfo>, java.util.List<android.widget.ActivityChooserModel$HistoricalRecord>);
public final class android.widget.ActivityChooserModel$HistoricalRecord {
  public android.widget.ActivityChooserModel$HistoricalRecord(java.lang.String, long, float);
  public android.widget.ActivityChooserModel$HistoricalRecord(android.content.ComponentName, long, float);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public void run();
  public void run();
  public void run();
public interface android.widget.ActivityChooserModel$OnChooseActivityListener {
  public abstract boolean onChooseActivity(android.widget.ActivityChooserModel, android.content.Intent);
public class android.widget.ActivityChooserModel extends android.database.DataSetObservable {
  public static android.widget.ActivityChooserModel get(android.content.Context, java.lang.String);
  public void setIntent(android.content.Intent);
  public android.content.Intent getIntent();
  public int getActivityCount();
  public android.content.pm.ResolveInfo getActivity(int);
  public int getActivityIndex(android.content.pm.ResolveInfo);
  public android.content.Intent chooseActivity(int);
  public void setOnChooseActivityListener(android.widget.ActivityChooserModel$OnChooseActivityListener);
  public android.content.pm.ResolveInfo getDefaultActivity();
  public void setDefaultActivity(int);
  public void setActivitySorter(android.widget.ActivityChooserModel$ActivitySorter);
  public void setHistoryMaxSize(int);
  public int getHistoryMaxSize();
  public int getHistorySize();
  public void onChanged();
  public void onInvalidated();
  public void onGlobalLayout();
  public void onChanged();
  public void setDataModel(android.widget.ActivityChooserModel);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public int measureContentWidth();
  public void setMaxActivityCount(int);
  public android.content.pm.ResolveInfo getDefaultActivity();
  public void setShowFooterView(boolean);
  public int getActivityCount();
  public int getHistorySize();
  public int getMaxActivityCount();
  public android.widget.ActivityChooserModel getDataModel();
  public void setShowDefaultActivity(boolean, boolean);
  public boolean getShowDefaultActivity();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public void onClick(android.view.View);
  public boolean onLongClick(android.view.View);
  public void onDismiss();
public class android.widget.ActivityChooserView extends android.view.ViewGroup implements android.widget.ActivityChooserModel$ActivityChooserModelClient {
  public android.widget.ActivityChooserView(android.content.Context);
  public android.widget.ActivityChooserView(android.content.Context, android.util.AttributeSet);
  public android.widget.ActivityChooserView(android.content.Context, android.util.AttributeSet, int);
  public void setActivityChooserModel(android.widget.ActivityChooserModel);
  public void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable);
  public void setExpandActivityOverflowButtonContentDescription(int);
  public void setProvider(android.view.ActionProvider);
  public boolean showPopup();
  public boolean dismissPopup();
  public boolean isShowingPopup();
  public android.widget.ActivityChooserModel getDataModel();
  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
  public void setInitialActivityCount(int);
  public void setDefaultActionButtonContentDescription(int);
public interface android.widget.Adapter {
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract int getCount();
  public abstract java.lang.Object getItem(int);
  public abstract long getItemId(int);
  public abstract boolean hasStableIds();
  public abstract android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public abstract int getItemViewType(int);
  public abstract int getViewTypeCount();
  public abstract boolean isEmpty();
public class android.widget.AdapterView$AdapterContextMenuInfo implements android.view.ContextMenu$ContextMenuInfo {
  public android.widget.AdapterView$AdapterContextMenuInfo(android.view.View, int, long);
  public void onChanged();
  public void onInvalidated();
  public void clearSavedState();
public interface android.widget.AdapterView$OnItemClickListener {
  public abstract void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
public interface android.widget.AdapterView$OnItemLongClickListener {
  public abstract boolean onItemLongClick(android.widget.AdapterView<?>, android.view.View, int, long);
public interface android.widget.AdapterView$OnItemSelectedListener {
  public abstract void onItemSelected(android.widget.AdapterView<?>, android.view.View, int, long);
  public abstract void onNothingSelected(android.widget.AdapterView<?>);
  public void run();
public abstract class android.widget.AdapterView<T extends android.widget.Adapter> extends android.view.ViewGroup {
  public android.widget.AdapterView(android.content.Context);
  public android.widget.AdapterView(android.content.Context, android.util.AttributeSet);
  public android.widget.AdapterView(android.content.Context, android.util.AttributeSet, int);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public final android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
  public boolean performItemClick(android.view.View, int, long);
  public void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener);
  public final android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener();
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public final android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
  public abstract T getAdapter();
  public abstract void setAdapter(T);
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void removeView(android.view.View);
  public void removeViewAt(int);
  public void removeAllViews();
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public abstract android.view.View getSelectedView();
  public java.lang.Object getSelectedItem();
  public int getCount();
  public int getPositionForView(android.view.View);
  public int getFirstVisiblePosition();
  public int getLastVisiblePosition();
  public abstract void setSelection(int);
  public void setEmptyView(android.view.View);
  public android.view.View getEmptyView();
  public void setFocusable(boolean);
  public void setFocusableInTouchMode(boolean);
  public java.lang.Object getItemAtPosition(int);
  public long getItemIdAtPosition(int);
  public void setOnClickListener(android.view.View$OnClickListener);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void run();
  public void run();
  public void run();
  public void run();
  public android.widget.AdapterViewAnimator$SavedState createFromParcel(android.os.Parcel);
  public android.widget.AdapterViewAnimator$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public abstract class android.widget.AdapterViewAnimator extends android.widget.AdapterView<android.widget.Adapter> implements android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback, android.widget.Advanceable {
  public android.widget.AdapterViewAnimator(android.content.Context);
  public android.widget.AdapterViewAnimator(android.content.Context, android.util.AttributeSet);
  public android.widget.AdapterViewAnimator(android.content.Context, android.util.AttributeSet, int);
  public void setDisplayedChild(int);
  public int getDisplayedChild();
  public void showNext();
  public void showPrevious();
  public boolean onTouchEvent(android.view.MotionEvent);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public android.view.View getCurrentView();
  public android.animation.ObjectAnimator getInAnimation();
  public void setInAnimation(android.animation.ObjectAnimator);
  public android.animation.ObjectAnimator getOutAnimation();
  public void setOutAnimation(android.animation.ObjectAnimator);
  public void setInAnimation(android.content.Context, int);
  public void setOutAnimation(android.content.Context, int);
  public void setAnimateFirstView(boolean);
  public int getBaseline();
  public android.widget.Adapter getAdapter();
  public void setAdapter(android.widget.Adapter);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setSelection(int);
  public android.view.View getSelectedView();
  public void deferNotifyDataSetChanged();
  public boolean onRemoteAdapterConnected();
  public void onRemoteAdapterDisconnected();
  public void advance();
  public void fyiWillBeAdvancedByHostKThx();
public interface android.widget.Advanceable {
  public abstract void advance();
  public abstract void fyiWillBeAdvancedByHostKThx();
public class android.widget.ArrayAdapter<T> extends android.widget.BaseAdapter implements android.widget.Filterable {
  public android.widget.ArrayAdapter(android.content.Context, int);
  public android.widget.ArrayAdapter(android.content.Context, int, int);
  public android.widget.ArrayAdapter(android.content.Context, int, T[]);
  public android.widget.ArrayAdapter(android.content.Context, int, int, T[]);
  public android.widget.ArrayAdapter(android.content.Context, int, java.util.List<T>);
  public android.widget.ArrayAdapter(android.content.Context, int, int, java.util.List<T>);
  public void add(T);
  public void addAll(java.util.Collection<? extends T>);
  public void addAll(T...);
  public void insert(T, int);
  public void remove(T);
  public void clear();
  public void sort(java.util.Comparator<? super T>);
  public void notifyDataSetChanged();
  public void setNotifyOnChange(boolean);
  public android.content.Context getContext();
  public int getCount();
  public T getItem(int);
  public int getPosition(T);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public void setDropDownViewResource(int);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public static android.widget.ArrayAdapter<java.lang.CharSequence> createFromResource(android.content.Context, int, int);
  public android.widget.Filter getFilter();
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  public void afterTextChanged(android.text.Editable);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void onClick(android.view.View);
  public void run();
  public void onChanged();
public interface android.widget.AutoCompleteTextView$Validator {
  public abstract boolean isValid(java.lang.CharSequence);
  public abstract java.lang.CharSequence fixText(java.lang.CharSequence);
public class android.widget.AutoCompleteTextView extends android.widget.EditText implements android.widget.Filter$FilterListener {
  public android.widget.AutoCompleteTextView(android.content.Context);
  public android.widget.AutoCompleteTextView(android.content.Context, android.util.AttributeSet);
  public android.widget.AutoCompleteTextView(android.content.Context, android.util.AttributeSet, int);
  public void setOnClickListener(android.view.View$OnClickListener);
  public void setCompletionHint(java.lang.CharSequence);
  public int getDropDownWidth();
  public void setDropDownWidth(int);
  public int getDropDownHeight();
  public void setDropDownHeight(int);
  public int getDropDownAnchor();
  public void setDropDownAnchor(int);
  public android.graphics.drawable.Drawable getDropDownBackground();
  public void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setDropDownBackgroundResource(int);
  public void setDropDownVerticalOffset(int);
  public int getDropDownVerticalOffset();
  public void setDropDownHorizontalOffset(int);
  public int getDropDownHorizontalOffset();
  public void setDropDownAnimationStyle(int);
  public int getDropDownAnimationStyle();
  public boolean isDropDownAlwaysVisible();
  public void setDropDownAlwaysVisible(boolean);
  public boolean isDropDownDismissedOnCompletion();
  public void setDropDownDismissedOnCompletion(boolean);
  public int getThreshold();
  public void setThreshold(int);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public android.widget.AdapterView$OnItemClickListener getItemClickListener();
  public android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener();
  public android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
  public android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
  public android.widget.ListAdapter getAdapter();
  public <T extends android/widget/ListAdapter & android/widget/Filterable> void setAdapter(T);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean enoughToFilter();
  public boolean isPopupShowing();
  public void clearListSelection();
  public void setListSelection(int);
  public int getListSelection();
  public void performCompletion();
  public void onCommitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean isPerformingCompletion();
  public void setText(java.lang.CharSequence, boolean);
  public void onFilterComplete(int);
  public void onWindowFocusChanged(boolean);
  public void dismissDropDown();
  public void showDropDownAfterLayout();
  public void ensureImeVisible(boolean);
  public boolean isInputMethodNotNeeded();
  public void showDropDown();
  public void setForceIgnoreOutsideTouch(boolean);
  public void setValidator(android.widget.AutoCompleteTextView$Validator);
  public android.widget.AutoCompleteTextView$Validator getValidator();
  public void performValidation();
public abstract class android.widget.BaseAdapter implements android.widget.ListAdapter,android.widget.SpinnerAdapter {
  public android.widget.BaseAdapter();
  public boolean hasStableIds();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public void notifyDataSetChanged();
  public void notifyDataSetInvalidated();
  public boolean areAllItemsEnabled();
  public boolean isEnabled(int);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public boolean isEmpty();
public abstract class android.widget.BaseExpandableListAdapter implements android.widget.ExpandableListAdapter,android.widget.HeterogeneousExpandableList {
  public android.widget.BaseExpandableListAdapter();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public void notifyDataSetInvalidated();
  public void notifyDataSetChanged();
  public boolean areAllItemsEnabled();
  public void onGroupCollapsed(int);
  public void onGroupExpanded(int);
  public long getCombinedChildId(long, long);
  public long getCombinedGroupId(long);
  public boolean isEmpty();
  public int getChildType(int, int);
  public int getChildTypeCount();
  public int getGroupType(int);
  public int getGroupTypeCount();
public class android.widget.Button extends android.widget.TextView {
  public android.widget.Button(android.content.Context);
  public android.widget.Button(android.content.Context, android.util.AttributeSet);
  public android.widget.Button(android.content.Context, android.util.AttributeSet, int);
  public void onChanged();
  public void onScrollStateChanged(android.widget.AbsListView, int);
  public void onScroll(android.widget.AbsListView, int, int, int);
public interface android.widget.CalendarView$OnDateChangeListener {
  public abstract void onSelectedDayChange(android.widget.CalendarView, int, int, int);
  public void doScrollStateChange(android.widget.AbsListView, int);
  public void run();
  public android.widget.CalendarView$WeekView(android.widget.CalendarView, android.content.Context);
  public void init(int, int, int);
  public int getMonthOfFirstWeekDay();
  public int getMonthOfLastWeekDay();
  public java.util.Calendar getFirstDay();
  public boolean getDayFromLocation(float, java.util.Calendar);
  public boolean onSingleTapUp(android.view.MotionEvent);
  public android.widget.CalendarView$WeeksAdapter(android.widget.CalendarView, android.content.Context);
  public void setSelectedDay(java.util.Calendar);
  public java.util.Calendar getSelectedDay();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public void setFocusMonth(int);
  public boolean onTouch(android.view.View, android.view.MotionEvent);
public class android.widget.CalendarView extends android.widget.FrameLayout {
  public android.widget.CalendarView(android.content.Context);
  public android.widget.CalendarView(android.content.Context, android.util.AttributeSet);
  public android.widget.CalendarView(android.content.Context, android.util.AttributeSet, int);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public long getMinDate();
  public void setMinDate(long);
  public long getMaxDate();
  public void setMaxDate(long);
  public void setShowWeekNumber(boolean);
  public boolean getShowWeekNumber();
  public int getFirstDayOfWeek();
  public void setFirstDayOfWeek(int);
  public void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener);
  public long getDate();
  public void setDate(long);
  public void setDate(long, boolean, boolean);
public class android.widget.CheckBox extends android.widget.CompoundButton {
  public android.widget.CheckBox(android.content.Context);
  public android.widget.CheckBox(android.content.Context, android.util.AttributeSet);
  public android.widget.CheckBox(android.content.Context, android.util.AttributeSet, int);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
public interface android.widget.Checkable {
  public abstract void setChecked(boolean);
  public abstract boolean isChecked();
  public abstract void toggle();
public class android.widget.CheckedTextView extends android.widget.TextView implements android.widget.Checkable {
  public android.widget.CheckedTextView(android.content.Context);
  public android.widget.CheckedTextView(android.content.Context, android.util.AttributeSet);
  public android.widget.CheckedTextView(android.content.Context, android.util.AttributeSet, int);
  public void toggle();
  public boolean isChecked();
  public void setChecked(boolean);
  public void setCheckMarkDrawable(int);
  public void setCheckMarkDrawable(android.graphics.drawable.Drawable);
  public void setPadding(int, int, int, int);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
public interface android.widget.CompoundButton$OnCheckedChangeListener {
  public abstract void onCheckedChanged(android.widget.CompoundButton, boolean);
  public android.widget.CompoundButton$SavedState createFromParcel(android.os.Parcel);
  public android.widget.CompoundButton$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
public abstract class android.widget.CompoundButton extends android.widget.Button implements android.widget.Checkable {
  public android.widget.CompoundButton(android.content.Context);
  public android.widget.CompoundButton(android.content.Context, android.util.AttributeSet);
  public android.widget.CompoundButton(android.content.Context, android.util.AttributeSet, int);
  public void toggle();
  public boolean performClick();
  public boolean isChecked();
  public void setChecked(boolean);
  public void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener);
  public void setButtonDrawable(int);
  public void setButtonDrawable(android.graphics.drawable.Drawable);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void jumpDrawablesToCurrentState();
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public android.widget.CursorAdapter$ChangeObserver(android.widget.CursorAdapter);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
  public void onChanged();
  public void onInvalidated();
public abstract class android.widget.CursorAdapter extends android.widget.BaseAdapter implements android.widget.Filterable,android.widget.CursorFilter$CursorFilterClient {
  public android.widget.CursorAdapter(android.content.Context, android.database.Cursor);
  public android.widget.CursorAdapter(android.content.Context, android.database.Cursor, boolean);
  public android.widget.CursorAdapter(android.content.Context, android.database.Cursor, int);
  public android.database.Cursor getCursor();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public boolean hasStableIds();
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public abstract android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public android.view.View newDropDownView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public abstract void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public void changeCursor(android.database.Cursor);
  public android.database.Cursor swapCursor(android.database.Cursor);
  public java.lang.CharSequence convertToString(android.database.Cursor);
  public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
  public android.widget.Filter getFilter();
  public android.widget.FilterQueryProvider getFilterQueryProvider();
  public void setFilterQueryProvider(android.widget.FilterQueryProvider);
  public abstract java.lang.CharSequence convertToString(android.database.Cursor);
  public abstract android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
  public abstract android.database.Cursor getCursor();
  public abstract void changeCursor(android.database.Cursor);
  public java.lang.CharSequence convertResultToString(java.lang.Object);
  public void onValueChange(android.widget.NumberPicker, int, int);
  public void onSelectedDayChange(android.widget.CalendarView, int, int, int);
public interface android.widget.DatePicker$OnDateChangedListener {
  public abstract void onDateChanged(android.widget.DatePicker, int, int, int);
  public android.widget.DatePicker$SavedState createFromParcel(android.os.Parcel);
  public android.widget.DatePicker$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
public class android.widget.DatePicker extends android.widget.FrameLayout {
  public android.widget.DatePicker(android.content.Context);
  public android.widget.DatePicker(android.content.Context, android.util.AttributeSet);
  public android.widget.DatePicker(android.content.Context, android.util.AttributeSet, int);
  public long getMinDate();
  public void setMinDate(long);
  public long getMaxDate();
  public void setMaxDate(long);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean getCalendarViewShown();
  public android.widget.CalendarView getCalendarView();
  public void setCalendarViewShown(boolean);
  public boolean getSpinnersShown();
  public void setSpinnersShown(boolean);
  public void updateDate(int, int, int);
  public void init(int, int, int, android.widget.DatePicker$OnDateChangedListener);
  public int getYear();
  public int getMonth();
  public int getDayOfMonth();
public class android.widget.EdgeEffect {
  public android.widget.EdgeEffect(android.content.Context);
  public void setSize(int, int);
  public boolean isFinished();
  public void finish();
  public void onPull(float);
  public void onRelease();
  public void onAbsorb(int);
  public boolean draw(android.graphics.Canvas);
public class android.widget.EditText extends android.widget.TextView {
  public android.widget.EditText(android.content.Context);
  public android.widget.EditText(android.content.Context, android.util.AttributeSet);
  public android.widget.EditText(android.content.Context, android.util.AttributeSet, int);
  public android.text.Editable getText();
  public void setText(java.lang.CharSequence, android.widget.TextView$BufferType);
  public void setSelection(int, int);
  public void setSelection(int);
  public void selectAll();
  public void extendSelection(int);
  public void setEllipsize(android.text.TextUtils$TruncateAt);
  public java.lang.CharSequence getText();
public interface android.widget.ExpandableListAdapter {
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract int getGroupCount();
  public abstract int getChildrenCount(int);
  public abstract java.lang.Object getGroup(int);
  public abstract java.lang.Object getChild(int, int);
  public abstract long getGroupId(int);
  public abstract long getChildId(int, int);
  public abstract boolean hasStableIds();
  public abstract android.view.View getGroupView(int, boolean, android.view.View, android.view.ViewGroup);
  public abstract android.view.View getChildView(int, int, boolean, android.view.View, android.view.ViewGroup);
  public abstract boolean isChildSelectable(int, int);
  public abstract boolean areAllItemsEnabled();
  public abstract boolean isEmpty();
  public abstract void onGroupExpanded(int);
  public abstract void onGroupCollapsed(int);
  public abstract long getCombinedChildId(long, long);
  public abstract long getCombinedGroupId(long);
  public android.widget.ExpandableListConnector$GroupMetadata createFromParcel(android.os.Parcel);
  public android.widget.ExpandableListConnector$GroupMetadata[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int compareTo(android.widget.ExpandableListConnector$GroupMetadata);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int compareTo(java.lang.Object);
public class android.widget.ExpandableListConnector$MyDataSetObserver extends android.database.DataSetObserver {
  public void onChanged();
  public void onInvalidated();
public class android.widget.ExpandableListConnector$PositionMetadata {
  public void recycle();
  public boolean isExpanded();
  public android.widget.ExpandableListConnector(android.widget.ExpandableListAdapter);
  public void setExpandableListAdapter(android.widget.ExpandableListAdapter);
  public boolean areAllItemsEnabled();
  public boolean isEnabled(int);
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public boolean hasStableIds();
  public boolean isGroupExpanded(int);
  public void setMaxExpGroupCount(int);
  public android.widget.Filter getFilter();
  public boolean isEmpty();
  public void recycle();
public class android.widget.ExpandableListView$ExpandableListContextMenuInfo implements android.view.ContextMenu$ContextMenuInfo {
  public android.widget.ExpandableListView$ExpandableListContextMenuInfo(android.view.View, long, long);
public interface android.widget.ExpandableListView$OnChildClickListener {
  public abstract boolean onChildClick(android.widget.ExpandableListView, android.view.View, int, int, long);
public interface android.widget.ExpandableListView$OnGroupClickListener {
  public abstract boolean onGroupClick(android.widget.ExpandableListView, android.view.View, int, long);
public interface android.widget.ExpandableListView$OnGroupCollapseListener {
  public abstract void onGroupCollapse(int);
public interface android.widget.ExpandableListView$OnGroupExpandListener {
  public abstract void onGroupExpand(int);
  public android.widget.ExpandableListView$SavedState createFromParcel(android.os.Parcel);
  public android.widget.ExpandableListView$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
public class android.widget.ExpandableListView extends android.widget.ListView {
  public android.widget.ExpandableListView(android.content.Context);
  public android.widget.ExpandableListView(android.content.Context, android.util.AttributeSet);
  public android.widget.ExpandableListView(android.content.Context, android.util.AttributeSet, int);
  public void setChildDivider(android.graphics.drawable.Drawable);
  public void setAdapter(android.widget.ListAdapter);
  public android.widget.ListAdapter getAdapter();
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setAdapter(android.widget.ExpandableListAdapter);
  public android.widget.ExpandableListAdapter getExpandableListAdapter();
  public boolean performItemClick(android.view.View, int, long);
  public boolean expandGroup(int);
  public boolean expandGroup(int, boolean);
  public boolean collapseGroup(int);
  public void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener);
  public void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener);
  public void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener);
  public void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener);
  public long getExpandableListPosition(int);
  public int getFlatListPosition(long);
  public long getSelectedPosition();
  public long getSelectedId();
  public void setSelectedGroup(int);
  public boolean setSelectedChild(int, int, boolean);
  public boolean isGroupExpanded(int);
  public static int getPackedPositionType(long);
  public static int getPackedPositionGroup(long);
  public static int getPackedPositionChild(long);
  public static long getPackedPositionForChild(int, int);
  public static long getPackedPositionForGroup(int);
  public void setChildIndicator(android.graphics.drawable.Drawable);
  public void setChildIndicatorBounds(int, int);
  public void setGroupIndicator(android.graphics.drawable.Drawable);
  public void setIndicatorBounds(int, int);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setAdapter(android.widget.Adapter);
  public android.widget.Adapter getAdapter();
  public void run();
public class android.widget.FastScroller$ScrollFade implements java.lang.Runnable {
  public android.widget.FastScroller$ScrollFade(android.widget.FastScroller);
  public void run();
  public android.widget.FastScroller(android.content.Context, android.widget.AbsListView);
  public void setAlwaysShow(boolean);
  public boolean isAlwaysShowEnabled();
  public void setScrollbarPosition(int);
  public int getWidth();
  public void setState(int);
  public int getState();
  public void draw(android.graphics.Canvas);
  public void onSectionsChanged();
public interface android.widget.Filter$Delayer {
  public abstract long getPostingDelay(java.lang.CharSequence);
public interface android.widget.Filter$FilterListener {
  public abstract void onFilterComplete(int);
public class android.widget.Filter$FilterResults {
  public android.widget.Filter$FilterResults();
  public android.widget.Filter$RequestHandler(android.widget.Filter, android.os.Looper);
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public abstract class android.widget.Filter {
  public android.widget.Filter();
  public void setDelayer(android.widget.Filter$Delayer);
  public final void filter(java.lang.CharSequence);
  public final void filter(java.lang.CharSequence, android.widget.Filter$FilterListener);
  public java.lang.CharSequence convertResultToString(java.lang.Object);
public interface android.widget.FilterQueryProvider {
  public abstract android.database.Cursor runQuery(java.lang.CharSequence);
public interface android.widget.Filterable {
  public abstract android.widget.Filter getFilter();
public class android.widget.FrameLayout$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
  public android.widget.FrameLayout$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.FrameLayout$LayoutParams(int, int);
  public android.widget.FrameLayout$LayoutParams(int, int, int);
  public android.widget.FrameLayout$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.FrameLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
public class android.widget.FrameLayout extends android.view.ViewGroup {
  public android.widget.FrameLayout(android.content.Context);
  public android.widget.FrameLayout(android.content.Context, android.util.AttributeSet);
  public android.widget.FrameLayout(android.content.Context, android.util.AttributeSet, int);
  public void setForegroundGravity(int);
  public void jumpDrawablesToCurrentState();
  public void setForeground(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getForeground();
  public void draw(android.graphics.Canvas);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void setMeasureAllChildren(boolean);
  public boolean getConsiderGoneChildrenWhenMeasuring();
  public boolean getMeasureAllChildren();
  public android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public boolean shouldDelayChildPressedState();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void run();
  public void run();
  public android.widget.Gallery$FlingRunnable(android.widget.Gallery);
  public void startUsingVelocity(int);
  public void startUsingDistance(int);
  public void stop(boolean);
  public void run();
public class android.widget.Gallery$LayoutParams extends android.view.ViewGroup$LayoutParams {
  public android.widget.Gallery$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.Gallery$LayoutParams(int, int);
  public android.widget.Gallery$LayoutParams(android.view.ViewGroup$LayoutParams);
public class android.widget.Gallery extends android.widget.AbsSpinner implements android.view.GestureDetector$OnGestureListener {
  public android.widget.Gallery(android.content.Context);
  public android.widget.Gallery(android.content.Context, android.util.AttributeSet);
  public android.widget.Gallery(android.content.Context, android.util.AttributeSet, int);
  public void setCallbackDuringFling(boolean);
  public void setCallbackOnUnselectedItemClick(boolean);
  public void setAnimationDuration(int);
  public void setSpacing(int);
  public void setUnselectedAlpha(float);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onSingleTapUp(android.view.MotionEvent);
  public boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onDown(android.view.MotionEvent);
  public void onLongPress(android.view.MotionEvent);
  public void onShowPress(android.view.MotionEvent);
  public void dispatchSetSelected(boolean);
  public boolean showContextMenuForChild(android.view.View);
  public boolean showContextMenu();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void setGravity(int);
public class android.widget.GridView extends android.widget.AbsListView {
  public android.widget.GridView(android.content.Context);
  public android.widget.GridView(android.content.Context, android.util.AttributeSet);
  public android.widget.GridView(android.content.Context, android.util.AttributeSet, int);
  public android.widget.ListAdapter getAdapter();
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setAdapter(android.widget.ListAdapter);
  public void smoothScrollToPosition(int);
  public void smoothScrollByOffset(int);
  public void setSelection(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void setGravity(int);
  public void setHorizontalSpacing(int);
  public void setVerticalSpacing(int);
  public void setStretchMode(int);
  public int getStretchMode();
  public void setColumnWidth(int);
  public void setNumColumns(int);
  public int getNumColumns();
  public void setAdapter(android.widget.Adapter);
  public android.widget.Adapter getAdapter();
public class android.widget.HeaderViewListAdapter implements android.widget.WrapperListAdapter,android.widget.Filterable {
  public android.widget.HeaderViewListAdapter(java.util.ArrayList<android.widget.ListView$FixedViewInfo>, java.util.ArrayList<android.widget.ListView$FixedViewInfo>, android.widget.ListAdapter);
  public int getHeadersCount();
  public int getFootersCount();
  public boolean isEmpty();
  public boolean removeHeader(android.view.View);
  public boolean removeFooter(android.view.View);
  public int getCount();
  public boolean areAllItemsEnabled();
  public boolean isEnabled(int);
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public boolean hasStableIds();
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.widget.Filter getFilter();
  public android.widget.ListAdapter getWrappedAdapter();
public interface android.widget.HeterogeneousExpandableList {
  public abstract int getGroupType(int);
  public abstract int getChildType(int, int);
  public abstract int getGroupTypeCount();
  public abstract int getChildTypeCount();
public class android.widget.HorizontalScrollView extends android.widget.FrameLayout {
  public android.widget.HorizontalScrollView(android.content.Context);
  public android.widget.HorizontalScrollView(android.content.Context, android.util.AttributeSet);
  public android.widget.HorizontalScrollView(android.content.Context, android.util.AttributeSet, int);
  public int getMaxScrollAmount();
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public boolean isFillViewport();
  public void setFillViewport(boolean);
  public boolean isSmoothScrollingEnabled();
  public void setSmoothScrollingEnabled(boolean);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean executeKeyEvent(android.view.KeyEvent);
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean shouldDelayChildPressedState();
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean pageScroll(int);
  public boolean fullScroll(int);
  public boolean arrowScroll(int);
  public final void smoothScrollBy(int, int);
  public final void smoothScrollTo(int, int);
  public void computeScroll();
  public void requestChildFocus(android.view.View, android.view.View);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public void requestLayout();
  public void fling(int);
  public void scrollTo(int, int);
  public void setOverScrollMode(int);
  public void draw(android.graphics.Canvas);
public class android.widget.ImageButton extends android.widget.ImageView {
  public android.widget.ImageButton(android.content.Context);
  public android.widget.ImageButton(android.content.Context, android.util.AttributeSet);
  public android.widget.ImageButton(android.content.Context, android.util.AttributeSet, int);
public final class android.widget.ImageView$ScaleType extends java.lang.Enum<android.widget.ImageView$ScaleType> {
  public static android.widget.ImageView$ScaleType[] values();
  public static android.widget.ImageView$ScaleType valueOf(java.lang.String);
public class android.widget.ImageView extends android.view.View {
  public android.widget.ImageView(android.content.Context);
  public android.widget.ImageView(android.content.Context, android.util.AttributeSet);
  public android.widget.ImageView(android.content.Context, android.util.AttributeSet, int);
  public void jumpDrawablesToCurrentState();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public int getResolvedLayoutDirection(android.graphics.drawable.Drawable);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void setAdjustViewBounds(boolean);
  public void setMaxWidth(int);
  public void setMaxHeight(int);
  public android.graphics.drawable.Drawable getDrawable();
  public void setImageResource(int);
  public void setImageURI(android.net.Uri);
  public void setImageDrawable(android.graphics.drawable.Drawable);
  public void setImageBitmap(android.graphics.Bitmap);
  public void setImageState(int[], boolean);
  public void setSelected(boolean);
  public void setImageLevel(int);
  public void setScaleType(android.widget.ImageView$ScaleType);
  public android.widget.ImageView$ScaleType getScaleType();
  public android.graphics.Matrix getImageMatrix();
  public void setImageMatrix(android.graphics.Matrix);
  public int[] onCreateDrawableState(int);
  public int getBaseline();
  public void setBaseline(int);
  public void setBaselineAlignBottom(boolean);
  public boolean getBaselineAlignBottom();
  public final void setColorFilter(int, android.graphics.PorterDuff$Mode);
  public final void setColorFilter(int);
  public final void clearColorFilter();
  public void setColorFilter(android.graphics.ColorFilter);
  public void setAlpha(int);
  public void setVisibility(int);
public class android.widget.LinearLayout$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
  public android.widget.LinearLayout$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams(int, int);
  public android.widget.LinearLayout$LayoutParams(int, int, float);
  public android.widget.LinearLayout$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.LinearLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
  public java.lang.String debug(java.lang.String);
public class android.widget.LinearLayout extends android.view.ViewGroup {
  public android.widget.LinearLayout(android.content.Context);
  public android.widget.LinearLayout(android.content.Context, android.util.AttributeSet);
  public android.widget.LinearLayout(android.content.Context, android.util.AttributeSet, int);
  public void setShowDividers(int);
  public boolean shouldDelayChildPressedState();
  public int getShowDividers();
  public void setDividerDrawable(android.graphics.drawable.Drawable);
  public void setDividerPadding(int);
  public int getDividerPadding();
  public int getDividerWidth();
  public boolean isBaselineAligned();
  public void setBaselineAligned(boolean);
  public boolean isMeasureWithLargestChildEnabled();
  public void setMeasureWithLargestChildEnabled(boolean);
  public int getBaseline();
  public int getBaselineAlignedChildIndex();
  public void setBaselineAlignedChildIndex(int);
  public float getWeightSum();
  public void setWeightSum(float);
  public void setOrientation(int);
  public int getOrientation();
  public void setGravity(int);
  public void setHorizontalGravity(int);
  public void setVerticalGravity(int);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
public interface android.widget.ListAdapter extends android.widget.Adapter {
  public abstract boolean areAllItemsEnabled();
  public abstract boolean isEnabled(int);
  public void run();
  public void onItemSelected(android.widget.AdapterView<?>, android.view.View, int, long);
  public void onNothingSelected(android.widget.AdapterView<?>);
  public android.widget.ListPopupWindow$DropDownListView(android.content.Context, boolean);
  public boolean isInTouchMode();
  public boolean hasWindowFocus();
  public boolean isFocused();
  public boolean hasFocus();
  public void run();
  public void onChanged();
  public void onInvalidated();
  public void onScroll(android.widget.AbsListView, int, int, int);
  public void onScrollStateChanged(android.widget.AbsListView, int);
  public boolean onTouch(android.view.View, android.view.MotionEvent);
  public void run();
public class android.widget.ListPopupWindow {
  public android.widget.ListPopupWindow(android.content.Context);
  public android.widget.ListPopupWindow(android.content.Context, android.util.AttributeSet);
  public android.widget.ListPopupWindow(android.content.Context, android.util.AttributeSet, int);
  public android.widget.ListPopupWindow(android.content.Context, android.util.AttributeSet, int, int);
  public void setAdapter(android.widget.ListAdapter);
  public void setPromptPosition(int);
  public int getPromptPosition();
  public void setModal(boolean);
  public boolean isModal();
  public void setForceIgnoreOutsideTouch(boolean);
  public void setDropDownAlwaysVisible(boolean);
  public boolean isDropDownAlwaysVisible();
  public void setSoftInputMode(int);
  public int getSoftInputMode();
  public void setListSelector(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getBackground();
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setAnimationStyle(int);
  public int getAnimationStyle();
  public android.view.View getAnchorView();
  public void setAnchorView(android.view.View);
  public int getHorizontalOffset();
  public void setHorizontalOffset(int);
  public int getVerticalOffset();
  public void setVerticalOffset(int);
  public int getWidth();
  public void setWidth(int);
  public void setContentWidth(int);
  public int getHeight();
  public void setHeight(int);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public void setPromptView(android.view.View);
  public void postShow();
  public void show();
  public void dismiss();
  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
  public void setInputMethodMode(int);
  public int getInputMethodMode();
  public void setSelection(int);
  public void clearListSelection();
  public boolean isShowing();
  public boolean isInputMethodNotNeeded();
  public boolean performItemClick(int);
  public java.lang.Object getSelectedItem();
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public android.view.View getSelectedView();
  public android.widget.ListView getListView();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public int getSelectedPosition();
  public int getAmountToScroll();
public class android.widget.ListView$FixedViewInfo {
  public android.widget.ListView$FixedViewInfo(android.widget.ListView);
  public android.widget.ListView$FocusSelector setup(int, int);
  public void run();
public class android.widget.ListView extends android.widget.AbsListView {
  public android.widget.ListView(android.content.Context);
  public android.widget.ListView(android.content.Context, android.util.AttributeSet);
  public android.widget.ListView(android.content.Context, android.util.AttributeSet, int);
  public int getMaxScrollAmount();
  public void addHeaderView(android.view.View, java.lang.Object, boolean);
  public void addHeaderView(android.view.View);
  public int getHeaderViewsCount();
  public boolean removeHeaderView(android.view.View);
  public void addFooterView(android.view.View, java.lang.Object, boolean);
  public void addFooterView(android.view.View);
  public int getFooterViewsCount();
  public boolean removeFooterView(android.view.View);
  public android.widget.ListAdapter getAdapter();
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setAdapter(android.widget.ListAdapter);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public void smoothScrollToPosition(int);
  public void smoothScrollByOffset(int);
  public void setSelection(int);
  public void setSelectionFromTop(int, int);
  public void setSelectionAfterHeaderView();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void setItemsCanFocus(boolean);
  public boolean getItemsCanFocus();
  public boolean isOpaque();
  public void setCacheColorHint(int);
  public android.graphics.drawable.Drawable getDivider();
  public void setDivider(android.graphics.drawable.Drawable);
  public int getDividerHeight();
  public void setDividerHeight(int);
  public void setHeaderDividersEnabled(boolean);
  public void setFooterDividersEnabled(boolean);
  public void setOverscrollHeader(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getOverscrollHeader();
  public void setOverscrollFooter(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getOverscrollFooter();
  public long[] getCheckItemIds();
  public void setAdapter(android.widget.Adapter);
  public android.widget.Adapter getAdapter();
  public void onLayoutChange(android.view.View, int, int, int, int, int, int, int, int);
  public boolean onTouch(android.view.View, android.view.MotionEvent);
  public void handleMessage(android.os.Message);
  public void onClick(android.view.View);
  public void onStartTrackingTouch(android.widget.SeekBar);
  public void onProgressChanged(android.widget.SeekBar, int, boolean);
  public void onStopTrackingTouch(android.widget.SeekBar);
  public void onClick(android.view.View);
  public void onClick(android.view.View);
public interface android.widget.MediaController$MediaPlayerControl {
  public abstract void start();
  public abstract void pause();
  public abstract int getDuration();
  public abstract int getCurrentPosition();
  public abstract void seekTo(int);
  public abstract boolean isPlaying();
  public abstract int getBufferPercentage();
  public abstract boolean canPause();
  public abstract boolean canSeekBackward();
  public abstract boolean canSeekForward();
public class android.widget.MediaController extends android.widget.FrameLayout {
  public android.widget.MediaController(android.content.Context, android.util.AttributeSet);
  public void onFinishInflate();
  public android.widget.MediaController(android.content.Context, boolean);
  public android.widget.MediaController(android.content.Context);
  public void setMediaPlayer(android.widget.MediaController$MediaPlayerControl);
  public void setAnchorView(android.view.View);
  public void show();
  public void show(int);
  public boolean isShowing();
  public void hide();
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public void setEnabled(boolean);
  public void setPrevNextListeners(android.view.View$OnClickListener, android.view.View$OnClickListener);
public class android.widget.MultiAutoCompleteTextView$CommaTokenizer implements android.widget.MultiAutoCompleteTextView$Tokenizer {
  public android.widget.MultiAutoCompleteTextView$CommaTokenizer();
  public int findTokenStart(java.lang.CharSequence, int);
  public int findTokenEnd(java.lang.CharSequence, int);
  public java.lang.CharSequence terminateToken(java.lang.CharSequence);
public interface android.widget.MultiAutoCompleteTextView$Tokenizer {
  public abstract int findTokenStart(java.lang.CharSequence, int);
  public abstract int findTokenEnd(java.lang.CharSequence, int);
  public abstract java.lang.CharSequence terminateToken(java.lang.CharSequence);
public class android.widget.MultiAutoCompleteTextView extends android.widget.AutoCompleteTextView {
  public android.widget.MultiAutoCompleteTextView(android.content.Context);
  public android.widget.MultiAutoCompleteTextView(android.content.Context, android.util.AttributeSet);
  public android.widget.MultiAutoCompleteTextView(android.content.Context, android.util.AttributeSet, int);
  public void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer);
  public boolean enoughToFilter();
  public void performValidation();
  public java.lang.String format(int);
  public void onClick(android.view.View);
  public boolean onLongClick(android.view.View);
  public void onFocusChange(android.view.View, boolean);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void run();
  public void run();
public interface android.widget.NumberPicker$Formatter {
  public abstract java.lang.String format(int);
  public int getInputType();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
public interface android.widget.NumberPicker$OnScrollListener {
  public abstract void onScrollStateChange(android.widget.NumberPicker, int);
public interface android.widget.NumberPicker$OnValueChangeListener {
  public abstract void onValueChange(android.widget.NumberPicker, int, int);
  public void run();
public class android.widget.NumberPicker extends android.widget.LinearLayout {
  public android.widget.NumberPicker(android.content.Context);
  public android.widget.NumberPicker(android.content.Context, android.util.AttributeSet);
  public android.widget.NumberPicker(android.content.Context, android.util.AttributeSet, int);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public void computeScroll();
  public void setEnabled(boolean);
  public void scrollBy(int, int);
  public int getSolidColor();
  public void setOnValueChangedListener(android.widget.NumberPicker$OnValueChangeListener);
  public void setOnScrollListener(android.widget.NumberPicker$OnScrollListener);
  public void setFormatter(android.widget.NumberPicker$Formatter);
  public void setValue(int);
  public boolean getWrapSelectorWheel();
  public void setWrapSelectorWheel(boolean);
  public void setOnLongPressUpdateInterval(long);
  public int getValue();
  public int getMinValue();
  public void setMinValue(int);
  public int getMaxValue();
  public void setMaxValue(int);
  public java.lang.String[] getDisplayedValues();
  public void setDisplayedValues(java.lang.String[]);
  public void draw(android.graphics.Canvas);
  public void sendAccessibilityEvent(int);
public class android.widget.OverScroller {
  public android.widget.OverScroller(android.content.Context);
  public android.widget.OverScroller(android.content.Context, android.view.animation.Interpolator);
  public android.widget.OverScroller(android.content.Context, android.view.animation.Interpolator, boolean);
  public android.widget.OverScroller(android.content.Context, android.view.animation.Interpolator, float, float);
  public android.widget.OverScroller(android.content.Context, android.view.animation.Interpolator, float, float, boolean);
  public final void setFriction(float);
  public final boolean isFinished();
  public final void forceFinished(boolean);
  public final int getCurrX();
  public final int getCurrY();
  public float getCurrVelocity();
  public final int getStartX();
  public final int getStartY();
  public final int getFinalX();
  public final int getFinalY();
  public final int getDuration();
  public void extendDuration(int);
  public void setFinalX(int);
  public void setFinalY(int);
  public boolean computeScrollOffset();
  public void startScroll(int, int, int, int);
  public void startScroll(int, int, int, int, int);
  public boolean springBack(int, int, int, int, int, int);
  public void fling(int, int, int, int, int, int, int, int);
  public void fling(int, int, int, int, int, int, int, int, int, int);
  public void notifyHorizontalEdgeReached(int, int, int);
  public void notifyVerticalEdgeReached(int, int, int);
  public boolean isOverScrolled();
  public void abortAnimation();
  public int timePassed();
  public boolean isScrollingInDirection(float, float);
public interface android.widget.PopupMenu$OnDismissListener {
  public abstract void onDismiss(android.widget.PopupMenu);
public interface android.widget.PopupMenu$OnMenuItemClickListener {
  public abstract boolean onMenuItemClick(android.view.MenuItem);
public class android.widget.PopupMenu implements com.android.internal.view.menu.MenuBuilder$Callback,com.android.internal.view.menu.MenuPresenter$Callback {
  public android.widget.PopupMenu(android.content.Context, android.view.View);
  public android.view.Menu getMenu();
  public android.view.MenuInflater getMenuInflater();
  public void inflate(int);
  public void show();
  public void dismiss();
  public void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener);
  public void setOnDismissListener(android.widget.PopupMenu$OnDismissListener);
  public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder);
  public void onCloseSubMenu(com.android.internal.view.menu.SubMenuBuilder);
  public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder);
  public void onScrollChanged();
public interface android.widget.PopupWindow$OnDismissListener {
  public abstract void onDismiss();
  public android.widget.PopupWindow$PopupViewContainer(android.widget.PopupWindow, android.content.Context);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void sendAccessibilityEvent(int);
public class android.widget.PopupWindow {
  public android.widget.PopupWindow(android.content.Context);
  public android.widget.PopupWindow(android.content.Context, android.util.AttributeSet);
  public android.widget.PopupWindow(android.content.Context, android.util.AttributeSet, int);
  public android.widget.PopupWindow(android.content.Context, android.util.AttributeSet, int, int);
  public android.widget.PopupWindow();
  public android.widget.PopupWindow(android.view.View);
  public android.widget.PopupWindow(int, int);
  public android.widget.PopupWindow(android.view.View, int, int);
  public android.widget.PopupWindow(android.view.View, int, int, boolean);
  public android.graphics.drawable.Drawable getBackground();
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public int getAnimationStyle();
  public void setIgnoreCheekPress();
  public void setAnimationStyle(int);
  public android.view.View getContentView();
  public void setContentView(android.view.View);
  public void setTouchInterceptor(android.view.View$OnTouchListener);
  public boolean isFocusable();
  public void setFocusable(boolean);
  public int getInputMethodMode();
  public void setInputMethodMode(int);
  public void setSoftInputMode(int);
  public int getSoftInputMode();
  public boolean isTouchable();
  public void setTouchable(boolean);
  public boolean isOutsideTouchable();
  public void setOutsideTouchable(boolean);
  public boolean isClippingEnabled();
  public void setClippingEnabled(boolean);
  public void setClipToScreenEnabled(boolean);
  public boolean isSplitTouchEnabled();
  public void setSplitTouchEnabled(boolean);
  public boolean isLayoutInScreenEnabled();
  public void setLayoutInScreenEnabled(boolean);
  public void setLayoutInsetDecor(boolean);
  public void setWindowLayoutType(int);
  public int getWindowLayoutType();
  public void setTouchModal(boolean);
  public void setWindowLayoutMode(int, int);
  public int getHeight();
  public void setHeight(int);
  public int getWidth();
  public void setWidth(int);
  public boolean isShowing();
  public void showAtLocation(android.view.View, int, int, int);
  public void showAtLocation(android.os.IBinder, int, int, int);
  public void showAsDropDown(android.view.View);
  public void showAsDropDown(android.view.View, int, int);
  public boolean isAboveAnchor();
  public int getMaxAvailableHeight(android.view.View);
  public int getMaxAvailableHeight(android.view.View, int);
  public int getMaxAvailableHeight(android.view.View, int, boolean);
  public void dismiss();
  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
  public void update();
  public void update(int, int);
  public void update(int, int, int, int);
  public void update(int, int, int, int, boolean);
  public void update(android.view.View, int, int);
  public void update(android.view.View, int, int, int, int);
  public void run();
  public void run();
  public void setup(int, int, boolean);
  public android.widget.ProgressBar$SavedState createFromParcel(android.os.Parcel);
  public android.widget.ProgressBar$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
public class android.widget.ProgressBar extends android.view.View {
  public android.widget.ProgressBar(android.content.Context);
  public android.widget.ProgressBar(android.content.Context, android.util.AttributeSet);
  public android.widget.ProgressBar(android.content.Context, android.util.AttributeSet, int);
  public android.widget.ProgressBar(android.content.Context, android.util.AttributeSet, int, int);
  public synchronized boolean isIndeterminate();
  public synchronized void setIndeterminate(boolean);
  public android.graphics.drawable.Drawable getIndeterminateDrawable();
  public void setIndeterminateDrawable(android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable getProgressDrawable();
  public void setProgressDrawable(android.graphics.drawable.Drawable);
  public void jumpDrawablesToCurrentState();
  public void postInvalidate();
  public synchronized void setProgress(int);
  public synchronized void setSecondaryProgress(int);
  public synchronized int getProgress();
  public synchronized int getSecondaryProgress();
  public synchronized int getMax();
  public synchronized void setMax(int);
  public final synchronized void incrementProgressBy(int);
  public final synchronized void incrementSecondaryProgressBy(int);
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public android.view.animation.Interpolator getInterpolator();
  public void setVisibility(int);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public int getResolvedLayoutDirection(android.graphics.drawable.Drawable);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.widget.QuickContactBadge$QueryHandler(android.widget.QuickContactBadge, android.content.ContentResolver);
public class android.widget.QuickContactBadge extends android.widget.ImageView implements android.view.View$OnClickListener {
  public android.widget.QuickContactBadge(android.content.Context);
  public android.widget.QuickContactBadge(android.content.Context, android.util.AttributeSet);
  public android.widget.QuickContactBadge(android.content.Context, android.util.AttributeSet, int);
  public void setMode(int);
  public void setImageToDefault();
  public void assignContactUri(android.net.Uri);
  public void assignContactFromEmail(java.lang.String, boolean);
  public void assignContactFromPhone(java.lang.String, boolean);
  public void onClick(android.view.View);
  public void setExcludeMimes(java.lang.String[]);
public class android.widget.RadioButton extends android.widget.CompoundButton {
  public android.widget.RadioButton(android.content.Context);
  public android.widget.RadioButton(android.content.Context, android.util.AttributeSet);
  public android.widget.RadioButton(android.content.Context, android.util.AttributeSet, int);
  public void toggle();
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onCheckedChanged(android.widget.CompoundButton, boolean);
public class android.widget.RadioGroup$LayoutParams extends android.widget.LinearLayout$LayoutParams {
  public android.widget.RadioGroup$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.RadioGroup$LayoutParams(int, int);
  public android.widget.RadioGroup$LayoutParams(int, int, float);
  public android.widget.RadioGroup$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.RadioGroup$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
public interface android.widget.RadioGroup$OnCheckedChangeListener {
  public abstract void onCheckedChanged(android.widget.RadioGroup, int);
  public void onChildViewAdded(android.view.View, android.view.View);
  public void onChildViewRemoved(android.view.View, android.view.View);
public class android.widget.RadioGroup extends android.widget.LinearLayout {
  public android.widget.RadioGroup(android.content.Context);
  public android.widget.RadioGroup(android.content.Context, android.util.AttributeSet);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void check(int);
  public int getCheckedRadioButtonId();
  public void clearCheck();
  public void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener);
  public android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
public interface android.widget.RatingBar$OnRatingBarChangeListener {
  public abstract void onRatingChanged(android.widget.RatingBar, float, boolean);
public class android.widget.RatingBar extends android.widget.AbsSeekBar {
  public android.widget.RatingBar(android.content.Context, android.util.AttributeSet, int);
  public android.widget.RatingBar(android.content.Context, android.util.AttributeSet);
  public android.widget.RatingBar(android.content.Context);
  public void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener);
  public android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener();
  public void setIsIndicator(boolean);
  public boolean isIndicator();
  public void setNumStars(int);
  public int getNumStars();
  public void setRating(float);
  public float getRating();
  public void setStepSize(float);
  public float getStepSize();
  public synchronized void setMax(int);
  public android.widget.RelativeLayout$DependencyGraph$Node newInstance();
  public void onAcquired(android.widget.RelativeLayout$DependencyGraph$Node);
  public void onReleased(android.widget.RelativeLayout$DependencyGraph$Node);
  public void onReleased(android.util.Poolable);
  public void onAcquired(android.util.Poolable);
  public android.util.Poolable newInstance();
  public void setNextPoolable(android.widget.RelativeLayout$DependencyGraph$Node);
  public android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable();
  public boolean isPooled();
  public void setPooled(boolean);
  public java.lang.Object getNextPoolable();
  public void setNextPoolable(java.lang.Object);
public class android.widget.RelativeLayout$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
  public android.widget.RelativeLayout$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.RelativeLayout$LayoutParams(int, int);
  public android.widget.RelativeLayout$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.RelativeLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
  public java.lang.String debug(java.lang.String);
  public void addRule(int);
  public void addRule(int, int);
  public int[] getRules();
  public int compare(android.view.View, android.view.View);
  public int compare(java.lang.Object, java.lang.Object);
public class android.widget.RelativeLayout extends android.view.ViewGroup {
  public android.widget.RelativeLayout(android.content.Context);
  public android.widget.RelativeLayout(android.content.Context, android.util.AttributeSet);
  public android.widget.RelativeLayout(android.content.Context, android.util.AttributeSet, int);
  public boolean shouldDelayChildPressedState();
  public void setIgnoreGravity(int);
  public void setGravity(int);
  public void setHorizontalGravity(int);
  public void setVerticalGravity(int);
  public int getBaseline();
  public void requestLayout();
  public android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.RemoteViews createFromParcel(android.os.Parcel);
  public android.widget.RemoteViews[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int describeContents();
  public void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter);
public class android.widget.RemoteViews$ActionException extends java.lang.RuntimeException {
  public android.widget.RemoteViews$ActionException(java.lang.Exception);
  public android.widget.RemoteViews$ActionException(java.lang.String);
  public void clear();
  public void bitmapIncrement(int);
  public int getBitmapHeapMemoryUsage();
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
public interface android.widget.RemoteViews$RemoteView extends java.lang.annotation.Annotation {
  public android.widget.RemoteViews$SetDrawableParameters(android.widget.RemoteViews, int, boolean, int, int, android.graphics.PorterDuff$Mode, int);
  public android.widget.RemoteViews$SetDrawableParameters(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void onClick(android.view.View);
  public android.widget.RemoteViews$SetOnClickFillInIntent(android.widget.RemoteViews, int, android.content.Intent);
  public android.widget.RemoteViews$SetOnClickFillInIntent(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void onClick(android.view.View);
  public android.widget.RemoteViews$SetOnClickPendingIntent(android.widget.RemoteViews, int, android.app.PendingIntent);
  public android.widget.RemoteViews$SetOnClickPendingIntent(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public android.widget.RemoteViews$SetPendingIntentTemplate(android.widget.RemoteViews, int, android.app.PendingIntent);
  public android.widget.RemoteViews$SetPendingIntentTemplate(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public android.widget.RemoteViews$SetRemoteViewsAdapterIntent(android.widget.RemoteViews, int, android.content.Intent);
  public android.widget.RemoteViews$SetRemoteViewsAdapterIntent(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public android.widget.RemoteViews$ViewGroupAction(android.widget.RemoteViews, int, android.widget.RemoteViews);
  public android.widget.RemoteViews$ViewGroupAction(android.widget.RemoteViews, android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public void apply(android.view.View, android.view.ViewGroup);
  public void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter);
public class android.widget.RemoteViews implements android.os.Parcelable,android.view.LayoutInflater$Filter {
  public android.widget.RemoteViews(java.lang.String, int);
  public android.widget.RemoteViews(android.os.Parcel);
  public android.widget.RemoteViews clone();
  public java.lang.String getPackage();
  public int getLayoutId();
  public void addView(int, android.widget.RemoteViews);
  public void removeAllViews(int);
  public void showNext(int);
  public void showPrevious(int);
  public void setDisplayedChild(int, int);
  public void setViewVisibility(int, int);
  public void setTextViewText(int, java.lang.CharSequence);
  public void setImageViewResource(int, int);
  public void setImageViewUri(int, android.net.Uri);
  public void setImageViewBitmap(int, android.graphics.Bitmap);
  public void setEmptyView(int, int);
  public void setChronometer(int, long, java.lang.String, boolean);
  public void setProgressBar(int, int, int, boolean);
  public void setOnClickPendingIntent(int, android.app.PendingIntent);
  public void setPendingIntentTemplate(int, android.app.PendingIntent);
  public void setOnClickFillInIntent(int, android.content.Intent);
  public void setDrawableParameters(int, boolean, int, int, android.graphics.PorterDuff$Mode, int);
  public void setTextColor(int, int);
  public void setRemoteAdapter(int, int, android.content.Intent);
  public void setRemoteAdapter(int, android.content.Intent);
  public void setScrollPosition(int, int);
  public void setRelativeScrollPosition(int, int);
  public void setBoolean(int, java.lang.String, boolean);
  public void setByte(int, java.lang.String, byte);
  public void setShort(int, java.lang.String, short);
  public void setInt(int, java.lang.String, int);
  public void setLong(int, java.lang.String, long);
  public void setFloat(int, java.lang.String, float);
  public void setDouble(int, java.lang.String, double);
  public void setChar(int, java.lang.String, char);
  public void setString(int, java.lang.String, java.lang.String);
  public void setCharSequence(int, java.lang.String, java.lang.CharSequence);
  public void setUri(int, java.lang.String, android.net.Uri);
  public void setBitmap(int, java.lang.String, android.graphics.Bitmap);
  public void setBundle(int, java.lang.String, android.os.Bundle);
  public void setIntent(int, java.lang.String, android.content.Intent);
  public void setContentDescription(int, java.lang.CharSequence);
  public android.view.View apply(android.content.Context, android.view.ViewGroup);
  public void reapply(android.content.Context, android.view.View);
  public boolean onLoadClass(java.lang.Class);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public void run();
  public void run();
  public void run();
  public void run();
  public void run();
  public android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache(android.widget.RemoteViewsAdapter, int);
  public void insert(int, android.widget.RemoteViews, long, boolean);
  public android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData();
  public android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData();
  public android.widget.RemoteViews getRemoteViewsAt(int);
  public android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int);
  public void commitTemporaryMetaData();
  public void queueRequestedPositionToLoad(int);
  public boolean queuePositionsToBePreloadedFromRequestedPosition(int);
  public int[] getNextIndexToLoad();
  public boolean containsRemoteViewAt(int);
  public boolean containsMetaDataAt(int);
  public void reset();
public interface android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback {
  public abstract boolean onRemoteAdapterConnected();
  public abstract void onRemoteAdapterDisconnected();
  public abstract void deferNotifyDataSetChanged();
  public void run();
  public void run();
  public void run();
  public android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection(android.widget.RemoteViewsAdapter);
  public synchronized void bind(android.content.Context, int, android.content.Intent);
  public synchronized void unbind(android.content.Context, int, android.content.Intent);
  public synchronized void onServiceConnected(android.os.IBinder);
  public synchronized void onServiceDisconnected();
  public synchronized com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory();
  public synchronized boolean isConnected();
  public android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout(android.widget.RemoteViewsAdapter, android.content.Context);
  public void onRemoteViewsLoaded(android.widget.RemoteViews);
  public android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet(android.widget.RemoteViewsAdapter);
  public void add(int, android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout);
  public void notifyOnRemoteViewsLoaded(int, android.widget.RemoteViews, int);
  public void clear();
  public android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData(android.widget.RemoteViewsAdapter, android.widget.RemoteViews, long, boolean);
  public void set(android.widget.RemoteViews, long, boolean);
  public android.widget.RemoteViewsAdapter$RemoteViewsMetaData(android.widget.RemoteViewsAdapter);
  public void set(android.widget.RemoteViewsAdapter$RemoteViewsMetaData);
  public void reset();
  public void setLoadingViewTemplates(android.widget.RemoteViews, android.widget.RemoteViews);
  public int getMappedViewType(int);
public class android.widget.RemoteViewsAdapter extends android.widget.BaseAdapter implements android.os.Handler$Callback {
  public android.widget.RemoteViewsAdapter(android.content.Context, android.content.Intent, android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback);
  public android.content.Intent getRemoteViewsServiceIntent();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public int getItemViewType(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public int getViewTypeCount();
  public boolean hasStableIds();
  public boolean isEmpty();
  public void notifyDataSetChanged();
  public boolean handleMessage(android.os.Message);
public abstract class android.widget.ResourceCursorAdapter extends android.widget.CursorAdapter {
  public android.widget.ResourceCursorAdapter(android.content.Context, int, android.database.Cursor);
  public android.widget.ResourceCursorAdapter(android.content.Context, int, android.database.Cursor, boolean);
  public android.widget.ResourceCursorAdapter(android.content.Context, int, android.database.Cursor, int);
  public android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public android.view.View newDropDownView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public void setViewResource(int);
  public void setDropDownViewResource(int);
public class android.widget.ScrollBarDrawable extends android.graphics.drawable.Drawable {
  public android.widget.ScrollBarDrawable();
  public void setAlwaysDrawHorizontalTrack(boolean);
  public void setAlwaysDrawVerticalTrack(boolean);
  public boolean getAlwaysDrawVerticalTrack();
  public boolean getAlwaysDrawHorizontalTrack();
  public void setParameters(int, int, int, boolean);
  public void draw(android.graphics.Canvas);
  public void setVerticalThumbDrawable(android.graphics.drawable.Drawable);
  public void setVerticalTrackDrawable(android.graphics.drawable.Drawable);
  public void setHorizontalThumbDrawable(android.graphics.drawable.Drawable);
  public void setHorizontalTrackDrawable(android.graphics.drawable.Drawable);
  public int getSize(boolean);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public int getOpacity();
  public java.lang.String toString();
public class android.widget.ScrollView extends android.widget.FrameLayout {
  public android.widget.ScrollView(android.content.Context);
  public android.widget.ScrollView(android.content.Context, android.util.AttributeSet);
  public android.widget.ScrollView(android.content.Context, android.util.AttributeSet, int);
  public boolean shouldDelayChildPressedState();
  public int getMaxScrollAmount();
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public boolean isFillViewport();
  public void setFillViewport(boolean);
  public boolean isSmoothScrollingEnabled();
  public void setSmoothScrollingEnabled(boolean);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean executeKeyEvent(android.view.KeyEvent);
  public void requestDisallowInterceptTouchEvent(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean pageScroll(int);
  public boolean fullScroll(int);
  public boolean arrowScroll(int);
  public final void smoothScrollBy(int, int);
  public final void smoothScrollTo(int, int);
  public void computeScroll();
  public void requestChildFocus(android.view.View, android.view.View);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public void requestLayout();
  public void fling(int);
  public void scrollTo(int, int);
  public void setOverScrollMode(int);
  public void draw(android.graphics.Canvas);
public class android.widget.Scroller {
  public android.widget.Scroller(android.content.Context);
  public android.widget.Scroller(android.content.Context, android.view.animation.Interpolator);
  public android.widget.Scroller(android.content.Context, android.view.animation.Interpolator, boolean);
  public final void setFriction(float);
  public final boolean isFinished();
  public final void forceFinished(boolean);
  public final int getDuration();
  public final int getCurrX();
  public final int getCurrY();
  public float getCurrVelocity();
  public final int getStartX();
  public final int getStartY();
  public final int getFinalX();
  public final int getFinalY();
  public boolean computeScrollOffset();
  public void startScroll(int, int, int, int);
  public void startScroll(int, int, int, int, int);
  public void fling(int, int, int, int, int, int, int, int);
  public void abortAnimation();
  public void extendDuration(int);
  public int timePassed();
  public void setFinalX(int);
  public void setFinalY(int);
  public boolean isScrollingInDirection(float, float);
  public void run();
  public void onItemSelected(android.widget.AdapterView<?>, android.view.View, int, long);
  public void onNothingSelected(android.widget.AdapterView<?>);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public void run();
  public void run();
  public void onFocusChange(android.view.View, boolean);
  public void onLayoutChange(android.view.View, int, int, int, int, int, int, int, int);
  public void onClick(android.view.View);
  public boolean onKey(android.view.View, int, android.view.KeyEvent);
  public boolean onEditorAction(android.widget.TextView, int, android.view.KeyEvent);
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
public interface android.widget.SearchView$OnCloseListener {
  public abstract boolean onClose();
public interface android.widget.SearchView$OnQueryTextListener {
  public abstract boolean onQueryTextSubmit(java.lang.String);
  public abstract boolean onQueryTextChange(java.lang.String);
public interface android.widget.SearchView$OnSuggestionListener {
  public abstract boolean onSuggestionSelect(int);
  public abstract boolean onSuggestionClick(int);
public class android.widget.SearchView$SearchAutoComplete extends android.widget.AutoCompleteTextView {
  public android.widget.SearchView$SearchAutoComplete(android.content.Context);
  public android.widget.SearchView$SearchAutoComplete(android.content.Context, android.util.AttributeSet);
  public android.widget.SearchView$SearchAutoComplete(android.content.Context, android.util.AttributeSet, int);
  public void setThreshold(int);
  public void performCompletion();
  public void onWindowFocusChanged(boolean);
  public boolean enoughToFilter();
  public boolean onKeyPreIme(int, android.view.KeyEvent);
public class android.widget.SearchView extends android.widget.LinearLayout implements android.view.CollapsibleActionView {
  public android.widget.SearchView(android.content.Context);
  public android.widget.SearchView(android.content.Context, android.util.AttributeSet);
  public void setSearchableInfo(android.app.SearchableInfo);
  public void setAppSearchData(android.os.Bundle);
  public void setImeOptions(int);
  public void setInputType(int);
  public boolean requestFocus(int, android.graphics.Rect);
  public void clearFocus();
  public void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener);
  public void setOnCloseListener(android.widget.SearchView$OnCloseListener);
  public void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener);
  public void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener);
  public void setOnSearchClickListener(android.view.View$OnClickListener);
  public java.lang.CharSequence getQuery();
  public void setQuery(java.lang.CharSequence, boolean);
  public void setQueryHint(java.lang.CharSequence);
  public void setIconifiedByDefault(boolean);
  public boolean isIconfiedByDefault();
  public void setIconified(boolean);
  public boolean isIconified();
  public void setSubmitButtonEnabled(boolean);
  public boolean isSubmitButtonEnabled();
  public void setQueryRefinementEnabled(boolean);
  public boolean isQueryRefinementEnabled();
  public void setSuggestionsAdapter(android.widget.CursorAdapter);
  public android.widget.CursorAdapter getSuggestionsAdapter();
  public void setMaxWidth(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public void onWindowFocusChanged(boolean);
  public void onActionViewCollapsed();
  public void onActionViewExpanded();
public interface android.widget.SectionIndexer {
  public abstract java.lang.Object[] getSections();
  public abstract int getPositionForSection(int);
  public abstract int getSectionForPosition(int);
public interface android.widget.SeekBar$OnSeekBarChangeListener {
  public abstract void onProgressChanged(android.widget.SeekBar, int, boolean);
  public abstract void onStartTrackingTouch(android.widget.SeekBar);
  public abstract void onStopTrackingTouch(android.widget.SeekBar);
public class android.widget.SeekBar extends android.widget.AbsSeekBar {
  public android.widget.SeekBar(android.content.Context);
  public android.widget.SeekBar(android.content.Context, android.util.AttributeSet);
  public android.widget.SeekBar(android.content.Context, android.util.AttributeSet, int);
  public void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener);
public interface android.widget.ShareActionProvider$OnShareTargetSelectedListener {
  public abstract boolean onShareTargetSelected(android.widget.ShareActionProvider, android.content.Intent);
  public boolean onChooseActivity(android.widget.ActivityChooserModel, android.content.Intent);
  public boolean onMenuItemClick(android.view.MenuItem);
public class android.widget.ShareActionProvider extends android.view.ActionProvider {
  public android.widget.ShareActionProvider(android.content.Context);
  public void setOnShareTargetSelectedListener(android.widget.ShareActionProvider$OnShareTargetSelectedListener);
  public android.view.View onCreateActionView();
  public boolean hasSubMenu();
  public void onPrepareSubMenu(android.view.SubMenu);
  public void setShareHistoryFileName(java.lang.String);
  public void setShareIntent(android.content.Intent);
public interface android.widget.SimpleAdapter$ViewBinder {
  public abstract boolean setViewValue(android.view.View, java.lang.Object, java.lang.String);
public class android.widget.SimpleAdapter extends android.widget.BaseAdapter implements android.widget.Filterable {
  public android.widget.SimpleAdapter(android.content.Context, java.util.List<? extends java.util.Map<java.lang.String, ?>>, int, java.lang.String[], int[]);
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public void setDropDownViewResource(int);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public android.widget.SimpleAdapter$ViewBinder getViewBinder();
  public void setViewBinder(android.widget.SimpleAdapter$ViewBinder);
  public void setViewImage(android.widget.ImageView, int);
  public void setViewImage(android.widget.ImageView, java.lang.String);
  public void setViewText(android.widget.TextView, java.lang.String);
  public android.widget.Filter getFilter();
public interface android.widget.SimpleCursorAdapter$CursorToStringConverter {
  public abstract java.lang.CharSequence convertToString(android.database.Cursor);
public interface android.widget.SimpleCursorAdapter$ViewBinder {
  public abstract boolean setViewValue(android.view.View, android.database.Cursor, int);
public class android.widget.SimpleCursorAdapter extends android.widget.ResourceCursorAdapter {
  public android.widget.SimpleCursorAdapter(android.content.Context, int, android.database.Cursor, java.lang.String[], int[]);
  public android.widget.SimpleCursorAdapter(android.content.Context, int, android.database.Cursor, java.lang.String[], int[], int);
  public void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public android.widget.SimpleCursorAdapter$ViewBinder getViewBinder();
  public void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder);
  public void setViewImage(android.widget.ImageView, java.lang.String);
  public void setViewText(android.widget.TextView, java.lang.String);
  public int getStringConversionColumn();
  public void setStringConversionColumn(int);
  public android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter();
  public void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter);
  public java.lang.CharSequence convertToString(android.database.Cursor);
  public android.database.Cursor swapCursor(android.database.Cursor);
  public void changeCursorAndColumns(android.database.Cursor, java.lang.String[], int[]);
public class android.widget.SimpleExpandableListAdapter extends android.widget.BaseExpandableListAdapter {
  public android.widget.SimpleExpandableListAdapter(android.content.Context, java.util.List<? extends java.util.Map<java.lang.String, ?>>, int, java.lang.String[], int[], java.util.List<? extends java.util.List<? extends java.util.Map<java.lang.String, ?>>>, int, java.lang.String[], int[]);
  public android.widget.SimpleExpandableListAdapter(android.content.Context, java.util.List<? extends java.util.Map<java.lang.String, ?>>, int, int, java.lang.String[], int[], java.util.List<? extends java.util.List<? extends java.util.Map<java.lang.String, ?>>>, int, java.lang.String[], int[]);
  public android.widget.SimpleExpandableListAdapter(android.content.Context, java.util.List<? extends java.util.Map<java.lang.String, ?>>, int, int, java.lang.String[], int[], java.util.List<? extends java.util.List<? extends java.util.Map<java.lang.String, ?>>>, int, int, java.lang.String[], int[]);
  public java.lang.Object getChild(int, int);
  public long getChildId(int, int);
  public android.view.View getChildView(int, int, boolean, android.view.View, android.view.ViewGroup);
  public android.view.View newChildView(boolean, android.view.ViewGroup);
  public int getChildrenCount(int);
  public java.lang.Object getGroup(int);
  public int getGroupCount();
  public long getGroupId(int);
  public android.view.View getGroupView(int, boolean, android.view.View, android.view.ViewGroup);
  public android.view.View newGroupView(boolean, android.view.ViewGroup);
  public boolean isChildSelectable(int, int);
  public boolean hasStableIds();
  public void onClick(android.view.View);
public interface android.widget.SlidingDrawer$OnDrawerCloseListener {
  public abstract void onDrawerClosed();
public interface android.widget.SlidingDrawer$OnDrawerOpenListener {
  public abstract void onDrawerOpened();
public interface android.widget.SlidingDrawer$OnDrawerScrollListener {
  public abstract void onScrollStarted();
  public abstract void onScrollEnded();
  public void handleMessage(android.os.Message);
public class android.widget.SlidingDrawer extends android.view.ViewGroup {
  public android.widget.SlidingDrawer(android.content.Context, android.util.AttributeSet);
  public android.widget.SlidingDrawer(android.content.Context, android.util.AttributeSet, int);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void toggle();
  public void animateToggle();
  public void open();
  public void close();
  public void animateClose();
  public void animateOpen();
  public void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener);
  public void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener);
  public void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener);
  public android.view.View getHandle();
  public android.view.View getContent();
  public void unlock();
  public void lock();
  public boolean isOpened();
  public boolean isMoving();
  public void run();
  public void init(int, int);
  public void finish();
  public boolean isFinished();
  public void parse();
public class android.widget.SpellChecker implements android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener {
  public android.widget.SpellChecker(android.widget.TextView);
  public void closeSession();
  public void removeSpellCheckSpan(android.text.style.SpellCheckSpan);
  public void onSelectionChanged();
  public void spellCheck(int, int);
  public void onGetSuggestions(android.view.textservice.SuggestionsInfo[]);
  public void dismiss();
  public boolean isShowing();
  public void setAdapter(android.widget.ListAdapter);
  public void setPromptText(java.lang.CharSequence);
  public java.lang.CharSequence getHintText();
  public void show();
  public void onClick(android.content.DialogInterface, int);
  public android.widget.Spinner$DropDownAdapter(android.widget.SpinnerAdapter);
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public boolean hasStableIds();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public boolean areAllItemsEnabled();
  public boolean isEnabled(int);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public boolean isEmpty();
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  public android.widget.Spinner$DropdownPopup(android.widget.Spinner, android.content.Context, android.util.AttributeSet, int);
  public void setAdapter(android.widget.ListAdapter);
  public java.lang.CharSequence getHintText();
  public void setPromptText(java.lang.CharSequence);
  public void show();
  public abstract void setAdapter(android.widget.ListAdapter);
  public abstract void show();
  public abstract void dismiss();
  public abstract boolean isShowing();
  public abstract void setPromptText(java.lang.CharSequence);
  public abstract java.lang.CharSequence getHintText();
public class android.widget.Spinner extends android.widget.AbsSpinner implements android.content.DialogInterface$OnClickListener {
  public android.widget.Spinner(android.content.Context);
  public android.widget.Spinner(android.content.Context, int);
  public android.widget.Spinner(android.content.Context, android.util.AttributeSet);
  public android.widget.Spinner(android.content.Context, android.util.AttributeSet, int);
  public android.widget.Spinner(android.content.Context, android.util.AttributeSet, int, int);
  public void setEnabled(boolean);
  public void setGravity(int);
  public void setAdapter(android.widget.SpinnerAdapter);
  public int getBaseline();
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public boolean performClick();
  public void onClick(android.content.DialogInterface, int);
  public void setPrompt(java.lang.CharSequence);
  public void setPromptId(int);
  public java.lang.CharSequence getPrompt();
  public void setAdapter(android.widget.Adapter);
public interface android.widget.SpinnerAdapter extends android.widget.Adapter {
  public abstract android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public long getPostingDelay(java.lang.CharSequence);
  public android.widget.SuggestionsAdapter$ChildViewCache(android.view.View);
  public android.widget.SuggestionsAdapter(android.content.Context, android.widget.SearchView, android.app.SearchableInfo, java.util.WeakHashMap<java.lang.String, android.graphics.drawable.Drawable$ConstantState>);
  public void setQueryRefinement(int);
  public int getQueryRefinement();
  public boolean hasStableIds();
  public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
  public void close();
  public void notifyDataSetChanged();
  public void notifyDataSetInvalidated();
  public void changeCursor(android.database.Cursor);
  public android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public void onClick(android.view.View);
  public java.lang.CharSequence convertToString(android.database.Cursor);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public static java.lang.String getColumnString(android.database.Cursor, java.lang.String);
public class android.widget.Switch extends android.widget.CompoundButton {
  public android.widget.Switch(android.content.Context);
  public android.widget.Switch(android.content.Context, android.util.AttributeSet);
  public android.widget.Switch(android.content.Context, android.util.AttributeSet, int);
  public void setSwitchTextAppearance(android.content.Context, int);
  public void setSwitchTypeface(android.graphics.Typeface, int);
  public void setSwitchTypeface(android.graphics.Typeface);
  public java.lang.CharSequence getTextOn();
  public void setTextOn(java.lang.CharSequence);
  public java.lang.CharSequence getTextOff();
  public void setTextOff(java.lang.CharSequence);
  public void onMeasure(int, int);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void setChecked(boolean);
  public int getCompoundPaddingRight();
  public void jumpDrawablesToCurrentState();
  public boolean onKey(android.view.View, int, android.view.KeyEvent);
  public void onTabSelectionChanged(int, boolean);
  public abstract android.view.View getContentView();
  public abstract void tabClosed();
  public android.widget.TabHost$FactoryContentStrategy(android.widget.TabHost, java.lang.CharSequence, android.widget.TabHost$TabContentFactory);
  public android.view.View getContentView();
  public void tabClosed();
  public abstract android.view.View createIndicatorView();
  public android.view.View getContentView();
  public void tabClosed();
  public android.view.View createIndicatorView();
  public android.view.View createIndicatorView();
public interface android.widget.TabHost$OnTabChangeListener {
  public abstract void onTabChanged(java.lang.String);
public interface android.widget.TabHost$TabContentFactory {
  public abstract android.view.View createTabContent(java.lang.String);
public class android.widget.TabHost$TabSpec {
  public android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence);
  public android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence, android.graphics.drawable.Drawable);
  public android.widget.TabHost$TabSpec setIndicator(android.view.View);
  public android.widget.TabHost$TabSpec setContent(int);
  public android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory);
  public android.widget.TabHost$TabSpec setContent(android.content.Intent);
  public java.lang.String getTag();
  public android.view.View getContentView();
  public void tabClosed();
  public android.view.View createIndicatorView();
public class android.widget.TabHost extends android.widget.FrameLayout implements android.view.ViewTreeObserver$OnTouchModeChangeListener {
  public android.widget.TabHost(android.content.Context);
  public android.widget.TabHost(android.content.Context, android.util.AttributeSet);
  public android.widget.TabHost$TabSpec newTabSpec(java.lang.String);
  public void setup();
  public void sendAccessibilityEvent(int);
  public void setup(android.app.LocalActivityManager);
  public void onTouchModeChanged(boolean);
  public void addTab(android.widget.TabHost$TabSpec);
  public void clearAllTabs();
  public android.widget.TabWidget getTabWidget();
  public int getCurrentTab();
  public java.lang.String getCurrentTabTag();
  public android.view.View getCurrentTabView();
  public android.view.View getCurrentView();
  public void setCurrentTabByTag(java.lang.String);
  public android.widget.FrameLayout getTabContentView();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public void dispatchWindowFocusChanged(boolean);
  public void setCurrentTab(int);
  public void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener);
  public abstract void onTabSelectionChanged(int, boolean);
  public void onClick(android.view.View);
public class android.widget.TabWidget extends android.widget.LinearLayout implements android.view.View$OnFocusChangeListener {
  public android.widget.TabWidget(android.content.Context);
  public android.widget.TabWidget(android.content.Context, android.util.AttributeSet);
  public android.widget.TabWidget(android.content.Context, android.util.AttributeSet, int);
  public android.view.View getChildTabViewAt(int);
  public int getTabCount();
  public void setDividerDrawable(android.graphics.drawable.Drawable);
  public void setDividerDrawable(int);
  public void setLeftStripDrawable(android.graphics.drawable.Drawable);
  public void setLeftStripDrawable(int);
  public void setRightStripDrawable(android.graphics.drawable.Drawable);
  public void setRightStripDrawable(int);
  public void setStripEnabled(boolean);
  public boolean isStripEnabled();
  public void childDrawableStateChanged(android.view.View);
  public void dispatchDraw(android.graphics.Canvas);
  public void setCurrentTab(int);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void focusCurrentTab(int);
  public void setEnabled(boolean);
  public void addView(android.view.View);
  public void removeAllViews();
  public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
  public void onFocusChange(android.view.View, boolean);
public class android.widget.TableLayout$LayoutParams extends android.widget.LinearLayout$LayoutParams {
  public android.widget.TableLayout$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.TableLayout$LayoutParams(int, int);
  public android.widget.TableLayout$LayoutParams(int, int, float);
  public android.widget.TableLayout$LayoutParams();
  public android.widget.TableLayout$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.TableLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
  public void onChildViewAdded(android.view.View, android.view.View);
  public void onChildViewRemoved(android.view.View, android.view.View);
public class android.widget.TableLayout extends android.widget.LinearLayout {
  public android.widget.TableLayout(android.content.Context);
  public android.widget.TableLayout(android.content.Context, android.util.AttributeSet);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public void requestLayout();
  public boolean isShrinkAllColumns();
  public void setShrinkAllColumns(boolean);
  public boolean isStretchAllColumns();
  public void setStretchAllColumns(boolean);
  public void setColumnCollapsed(int, boolean);
  public boolean isColumnCollapsed(int);
  public void setColumnStretchable(int, boolean);
  public boolean isColumnStretchable(int);
  public void setColumnShrinkable(int, boolean);
  public boolean isColumnShrinkable(int);
  public void addView(android.view.View);
  public void addView(android.view.View, int);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void onChildViewAdded(android.view.View, android.view.View);
  public void onChildViewRemoved(android.view.View, android.view.View);
public class android.widget.TableRow$LayoutParams extends android.widget.LinearLayout$LayoutParams {
  public android.widget.TableRow$LayoutParams(android.content.Context, android.util.AttributeSet);
  public android.widget.TableRow$LayoutParams(int, int);
  public android.widget.TableRow$LayoutParams(int, int, float);
  public android.widget.TableRow$LayoutParams();
  public android.widget.TableRow$LayoutParams(int);
  public android.widget.TableRow$LayoutParams(android.view.ViewGroup$LayoutParams);
  public android.widget.TableRow$LayoutParams(android.view.ViewGroup$MarginLayoutParams);
public class android.widget.TableRow extends android.widget.LinearLayout {
  public android.widget.TableRow(android.content.Context);
  public android.widget.TableRow(android.content.Context, android.util.AttributeSet);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public android.view.View getVirtualChildAt(int);
  public int getVirtualChildCount();
  public android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void run();
  public void run();
  public void show();
  public void onClick(android.view.View);
  public android.widget.TextView$Blink(android.widget.TextView);
  public void run();
public final class android.widget.TextView$BufferType extends java.lang.Enum<android.widget.TextView$BufferType> {
  public static android.widget.TextView$BufferType[] values();
  public static android.widget.TextView$BufferType valueOf(java.lang.String);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void afterTextChanged(android.text.Editable);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
  public android.widget.TextView$CharWrapper(char[], int, int);
  public int length();
  public char charAt(int);
  public java.lang.String toString();
  public java.lang.CharSequence subSequence(int, int);
  public void getChars(int, int, char[], int);
  public void drawText(android.graphics.Canvas, int, int, float, float, android.graphics.Paint);
  public void drawTextRun(android.graphics.Canvas, int, int, int, int, float, float, int, android.graphics.Paint);
  public float measureText(int, int, android.graphics.Paint);
  public int getTextWidths(int, int, float[], android.graphics.Paint);
  public float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint);
  public float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint, int);
  public int getTextRunCursor(int, int, int, int, int, android.graphics.Paint);
  public android.widget.TextView$CorrectionHighlighter(android.widget.TextView);
  public void highlight(android.view.inputmethod.CorrectionInfo);
  public void draw(android.graphics.Canvas, int);
  public abstract void show();
  public abstract void hide();
  public abstract void onDetached();
  public android.widget.TextView$DragLocalState(android.widget.TextView, int, int);
  public void show(android.text.style.EasyEditSpan);
  public void onClick(android.view.View);
  public void run();
  public void onTextChange(java.lang.CharSequence);
  public void update(int, int, int, int, boolean);
  public void run();
  public android.widget.TextView$HandleView(android.widget.TextView, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public boolean offsetHasBeenChanged();
  public void show();
  public void hide();
  public boolean isShowing();
  public abstract int getCurrentCursorOffset();
  public abstract void updatePosition(float, float);
  public void updatePosition(int, int, boolean, boolean);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean isDragging();
  public void onDetached();
  public void run();
  public android.widget.TextView$InsertionHandleView(android.widget.TextView, android.graphics.drawable.Drawable);
  public void show();
  public void showWithActionPopup();
  public boolean onTouchEvent(android.view.MotionEvent);
  public int getCurrentCursorOffset();
  public void updateSelection(int);
  public void updatePosition(float, float);
  public void onDetached();
  public void show();
  public void showWithActionPopup();
  public void hide();
  public void onTouchModeChanged(boolean);
  public void onDetached();
  public void handleMessage(android.os.Message);
public interface android.widget.TextView$OnEditorActionListener {
  public abstract boolean onEditorAction(android.widget.TextView, int, android.view.KeyEvent);
  public android.widget.TextView$PinnedPopupWindow(android.widget.TextView);
  public void show();
  public void hide();
  public void updatePosition(int, int, boolean, boolean);
  public boolean isShowing();
  public void addSubscriber(android.widget.TextView$TextViewPositionListener, boolean);
  public void removeSubscriber(android.widget.TextView$TextViewPositionListener);
  public int getPositionX();
  public int getPositionY();
  public boolean onPreDraw();
  public void onScrollChanged();
  public android.widget.TextView$SavedState createFromParcel(android.os.Parcel);
  public android.widget.TextView$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class android.widget.TextView$SavedState extends android.view.View$BaseSavedState {
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public void onDestroyActionMode(android.view.ActionMode);
  public android.widget.TextView$SelectionEndHandleView(android.widget.TextView, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public int getCurrentCursorOffset();
  public void updateSelection(int);
  public void updatePosition(float, float);
  public void setActionPopupWindow(android.widget.TextView$ActionPopupWindow);
  public void show();
  public void hide();
  public void onTouchEvent(android.view.MotionEvent);
  public int getMinTouchOffset();
  public int getMaxTouchOffset();
  public void resetTouchOffsets();
  public boolean isSelectionStartDragged();
  public void onTouchModeChanged(boolean);
  public void onDetached();
  public android.widget.TextView$SelectionStartHandleView(android.widget.TextView, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public int getCurrentCursorOffset();
  public void updateSelection(int);
  public void updatePosition(float, float);
  public android.widget.TextView$ActionPopupWindow getActionPopupWindow();
  public android.widget.TextView$SuggestionsPopupWindow$CustomPopupWindow(android.widget.TextView$SuggestionsPopupWindow, android.content.Context, int);
  public void dismiss();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public int compare(android.text.style.SuggestionSpan, android.text.style.SuggestionSpan);
  public int compare(java.lang.Object, java.lang.Object);
  public android.widget.TextView$SuggestionsPopupWindow(android.widget.TextView);
  public boolean isShowingUp();
  public void onParentLostFocus();
  public void show();
  public void hide();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public static android.widget.TextView$TextAlign[] values();
  public static android.widget.TextView$TextAlign valueOf(java.lang.String);
  public abstract void updatePosition(int, int, boolean, boolean);
public class android.widget.TextView extends android.view.View implements android.view.ViewTreeObserver$OnPreDrawListener {
  public android.widget.TextView(android.content.Context);
  public android.widget.TextView(android.content.Context, android.util.AttributeSet);
  public android.widget.TextView(android.content.Context, android.util.AttributeSet, int);
  public void setEnabled(boolean);
  public void setTypeface(android.graphics.Typeface, int);
  public java.lang.CharSequence getText();
  public int length();
  public android.text.Editable getEditableText();
  public int getLineHeight();
  public final android.text.Layout getLayout();
  public final android.text.method.KeyListener getKeyListener();
  public void setKeyListener(android.text.method.KeyListener);
  public final android.text.method.MovementMethod getMovementMethod();
  public final void setMovementMethod(android.text.method.MovementMethod);
  public final android.text.method.TransformationMethod getTransformationMethod();
  public final void setTransformationMethod(android.text.method.TransformationMethod);
  public int getCompoundPaddingTop();
  public int getCompoundPaddingBottom();
  public int getCompoundPaddingLeft();
  public int getCompoundPaddingRight();
  public int getCompoundPaddingStart();
  public int getCompoundPaddingEnd();
  public int getExtendedPaddingTop();
  public int getExtendedPaddingBottom();
  public int getTotalPaddingLeft();
  public int getTotalPaddingRight();
  public int getTotalPaddingStart();
  public int getTotalPaddingEnd();
  public int getTotalPaddingTop();
  public int getTotalPaddingBottom();
  public void setCompoundDrawables(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesWithIntrinsicBounds(int, int, int, int);
  public void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesRelative(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(int, int, int, int);
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public android.graphics.drawable.Drawable[] getCompoundDrawables();
  public android.graphics.drawable.Drawable[] getCompoundDrawablesRelative();
  public void setCompoundDrawablePadding(int);
  public int getCompoundDrawablePadding();
  public void setPadding(int, int, int, int);
  public final int getAutoLinkMask();
  public void setTextAppearance(android.content.Context, int);
  public float getTextSize();
  public void setTextSize(float);
  public void setTextSize(int, float);
  public float getTextScaleX();
  public void setTextScaleX(float);
  public void setTypeface(android.graphics.Typeface);
  public android.graphics.Typeface getTypeface();
  public void setTextColor(int);
  public void setTextColor(android.content.res.ColorStateList);
  public final android.content.res.ColorStateList getTextColors();
  public final int getCurrentTextColor();
  public void setHighlightColor(int);
  public void setShadowLayer(float, float, float, int);
  public android.text.TextPaint getPaint();
  public final void setAutoLinkMask(int);
  public final void setLinksClickable(boolean);
  public final boolean getLinksClickable();
  public final void setSoftInputShownOnFocus(boolean);
  public final boolean getSoftInputShownOnFocus();
  public android.text.style.URLSpan[] getUrls();
  public final void setHintTextColor(int);
  public final void setHintTextColor(android.content.res.ColorStateList);
  public final android.content.res.ColorStateList getHintTextColors();
  public final int getCurrentHintTextColor();
  public final void setLinkTextColor(int);
  public final void setLinkTextColor(android.content.res.ColorStateList);
  public final android.content.res.ColorStateList getLinkTextColors();
  public void setGravity(int);
  public int getGravity();
  public int getPaintFlags();
  public void setPaintFlags(int);
  public void setHorizontallyScrolling(boolean);
  public boolean getHorizontallyScrolling();
  public void setMinLines(int);
  public void setMinHeight(int);
  public void setMaxLines(int);
  public void setMaxHeight(int);
  public void setLines(int);
  public void setHeight(int);
  public void setMinEms(int);
  public void setMinWidth(int);
  public void setMaxEms(int);
  public void setMaxWidth(int);
  public void setEms(int);
  public void setWidth(int);
  public void setLineSpacing(float, float);
  public final void append(java.lang.CharSequence);
  public void append(java.lang.CharSequence, int, int);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setFreezesText(boolean);
  public boolean getFreezesText();
  public final void setEditableFactory(android.text.Editable$Factory);
  public final void setSpannableFactory(android.text.Spannable$Factory);
  public final void setText(java.lang.CharSequence);
  public final void setTextKeepState(java.lang.CharSequence);
  public void setText(java.lang.CharSequence, android.widget.TextView$BufferType);
  public final void setText(char[], int, int);
  public final void setTextKeepState(java.lang.CharSequence, android.widget.TextView$BufferType);
  public final void setText(int);
  public final void setText(int, android.widget.TextView$BufferType);
  public final void setHint(java.lang.CharSequence);
  public final void setHint(int);
  public java.lang.CharSequence getHint();
  public void setInputType(int);
  public void setRawInputType(int);
  public int getInputType();
  public void setImeOptions(int);
  public int getImeOptions();
  public void setImeActionLabel(java.lang.CharSequence, int);
  public java.lang.CharSequence getImeActionLabel();
  public int getImeActionId();
  public void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener);
  public void onEditorAction(int);
  public void setPrivateImeOptions(java.lang.String);
  public java.lang.String getPrivateImeOptions();
  public android.os.Bundle getInputExtras(boolean);
  public java.lang.CharSequence getError();
  public void setError(java.lang.CharSequence);
  public void setError(java.lang.CharSequence, android.graphics.drawable.Drawable);
  public void setFilters(android.text.InputFilter[]);
  public android.text.InputFilter[] getFilters();
  public boolean onPreDraw();
  public void jumpDrawablesToCurrentState();
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public int getResolvedLayoutDirection(android.graphics.drawable.Drawable);
  public boolean isTextSelectable();
  public void setTextIsSelectable(boolean);
  public void getFocusedRect(android.graphics.Rect);
  public int getLineCount();
  public int getLineBounds(int, android.graphics.Rect);
  public int getBaseline();
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public void resetErrorChangedFlag();
  public void hideErrorIfUnchanged();
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onCheckIsTextEditor();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public boolean extractText(android.view.inputmethod.ExtractedTextRequest, android.view.inputmethod.ExtractedText);
  public void setExtractedText(android.view.inputmethod.ExtractedText);
  public void setExtracting(android.view.inputmethod.ExtractedTextRequest);
  public void onCommitCompletion(android.view.inputmethod.CompletionInfo);
  public void onCommitCorrection(android.view.inputmethod.CorrectionInfo);
  public void beginBatchEdit();
  public void endBatchEdit();
  public void onBeginBatchEdit();
  public void onEndBatchEdit();
  public boolean onPrivateIMECommand(java.lang.String, android.os.Bundle);
  public void setIncludeFontPadding(boolean);
  public boolean bringPointIntoView(int);
  public boolean moveCursorToVisibleOffset();
  public void computeScroll();
  public void debug(int);
  public int getSelectionStart();
  public int getSelectionEnd();
  public boolean hasSelection();
  public void setSingleLine();
  public void setAllCaps(boolean);
  public void setSingleLine(boolean);
  public void setEllipsize(android.text.TextUtils$TruncateAt);
  public void setMarqueeRepeatLimit(int);
  public android.text.TextUtils$TruncateAt getEllipsize();
  public void setSelectAllOnFocus(boolean);
  public void setCursorVisible(boolean);
  public void addTextChangedListener(android.text.TextWatcher);
  public void removeTextChangedListener(android.text.TextWatcher);
  public void dispatchFinishTemporaryDetach();
  public void onStartTemporaryDetach();
  public void onFinishTemporaryDetach();
  public void onWindowFocusChanged(boolean);
  public void clearComposingText();
  public void setSelected(boolean);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean didTouchFocusSelect();
  public void cancelLongPress();
  public boolean shouldIgnoreActionUpEvent();
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void setScroller(android.widget.Scroller);
  public void findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int);
  public static android.content.res.ColorStateList getTextColors(android.content.Context, android.content.res.TypedArray);
  public static int getTextColor(android.content.Context, android.content.res.TypedArray, int);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public java.util.Locale getTextServicesLocale();
  public android.text.method.WordIterator getWordIterator();
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void sendAccessibilityEvent(int);
  public boolean isInputMethodTarget();
  public boolean onTextContextMenuItem(int);
  public boolean performLongClick();
  public boolean isSuggestionsEnabled();
  public void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback);
  public android.view.ActionMode$Callback getCustomSelectionActionModeCallback();
  public int getOffsetForPosition(float, float);
  public boolean onDragEvent(android.view.DragEvent);
  public void onTimeChanged(android.widget.TimePicker, int, int);
  public void onValueChange(android.widget.NumberPicker, int, int);
  public void onValueChange(android.widget.NumberPicker, int, int);
  public void onClick(android.view.View);
  public void onValueChange(android.widget.NumberPicker, int, int);
public interface android.widget.TimePicker$OnTimeChangedListener {
  public abstract void onTimeChanged(android.widget.TimePicker, int, int);
  public android.widget.TimePicker$SavedState createFromParcel(android.os.Parcel);
  public android.widget.TimePicker$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int getHour();
  public int getMinute();
  public void writeToParcel(android.os.Parcel, int);
public class android.widget.TimePicker extends android.widget.FrameLayout {
  public android.widget.TimePicker(android.content.Context);
  public android.widget.TimePicker(android.content.Context, android.util.AttributeSet);
  public android.widget.TimePicker(android.content.Context, android.util.AttributeSet, int);
  public void setEnabled(boolean);
  public boolean isEnabled();
  public void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener);
  public java.lang.Integer getCurrentHour();
  public void setCurrentHour(java.lang.Integer);
  public void setIs24HourView(java.lang.Boolean);
  public boolean is24HourView();
  public java.lang.Integer getCurrentMinute();
  public void setCurrentMinute(java.lang.Integer);
  public int getBaseline();
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void run();
  public void run();
  public void show();
  public void hide();
  public void handleShow();
  public void handleHide();
public class android.widget.Toast {
  public android.widget.Toast(android.content.Context);
  public void show();
  public void cancel();
  public void setView(android.view.View);
  public android.view.View getView();
  public void setDuration(int);
  public int getDuration();
  public void setMargin(float, float);
  public float getHorizontalMargin();
  public float getVerticalMargin();
  public void setGravity(int, int, int);
  public int getGravity();
  public int getXOffset();
  public int getYOffset();
  public static android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int);
  public void setText(int);
  public void setText(java.lang.CharSequence);
public class android.widget.ToggleButton extends android.widget.CompoundButton {
  public android.widget.ToggleButton(android.content.Context, android.util.AttributeSet, int);
  public android.widget.ToggleButton(android.content.Context, android.util.AttributeSet);
  public android.widget.ToggleButton(android.content.Context);
  public void setChecked(boolean);
  public java.lang.CharSequence getTextOn();
  public void setTextOn(java.lang.CharSequence);
  public java.lang.CharSequence getTextOff();
  public void setTextOff(java.lang.CharSequence);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
public class android.widget.TwoLineListItem extends android.widget.RelativeLayout {
  public android.widget.TwoLineListItem(android.content.Context);
  public android.widget.TwoLineListItem(android.content.Context, android.util.AttributeSet);
  public android.widget.TwoLineListItem(android.content.Context, android.util.AttributeSet, int);
  public android.widget.TextView getText1();
  public android.widget.TextView getText2();
  public void onVideoSizeChanged(android.media.MediaPlayer, int, int);
  public void onPrepared(android.media.MediaPlayer);
  public void onCompletion(android.media.MediaPlayer);
  public void onClick(android.content.DialogInterface, int);
  public boolean onError(android.media.MediaPlayer, int, int);
  public void onBufferingUpdate(android.media.MediaPlayer, int);
  public void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void surfaceCreated(android.view.SurfaceHolder);
  public void surfaceDestroyed(android.view.SurfaceHolder);
public class android.widget.VideoView extends android.view.SurfaceView implements android.widget.MediaController$MediaPlayerControl {
  public android.widget.VideoView(android.content.Context);
  public android.widget.VideoView(android.content.Context, android.util.AttributeSet);
  public android.widget.VideoView(android.content.Context, android.util.AttributeSet, int);
  public int resolveAdjustedSize(int, int);
  public void setVideoPath(java.lang.String);
  public void setVideoURI(android.net.Uri);
  public void setVideoURI(android.net.Uri, java.util.Map<java.lang.String, java.lang.String>);
  public void stopPlayback();
  public void setMediaController(android.widget.MediaController);
  public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener);
  public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener);
  public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public void start();
  public void pause();
  public void suspend();
  public void resume();
  public int getDuration();
  public int getCurrentPosition();
  public void seekTo(int);
  public boolean isPlaying();
  public int getBufferPercentage();
  public boolean canPause();
  public boolean canSeekBackward();
  public boolean canSeekForward();
public class android.widget.ViewAnimator extends android.widget.FrameLayout {
  public android.widget.ViewAnimator(android.content.Context);
  public android.widget.ViewAnimator(android.content.Context, android.util.AttributeSet);
  public void setDisplayedChild(int);
  public int getDisplayedChild();
  public void showNext();
  public void showPrevious();
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void removeAllViews();
  public void removeView(android.view.View);
  public void removeViewAt(int);
  public void removeViewInLayout(android.view.View);
  public void removeViews(int, int);
  public void removeViewsInLayout(int, int);
  public android.view.View getCurrentView();
  public android.view.animation.Animation getInAnimation();
  public void setInAnimation(android.view.animation.Animation);
  public android.view.animation.Animation getOutAnimation();
  public void setOutAnimation(android.view.animation.Animation);
  public void setInAnimation(android.content.Context, int);
  public void setOutAnimation(android.content.Context, int);
  public void setAnimateFirstView(boolean);
  public int getBaseline();
  public void onReceive(android.content.Context, android.content.Intent);
  public void handleMessage(android.os.Message);
public class android.widget.ViewFlipper extends android.widget.ViewAnimator {
  public android.widget.ViewFlipper(android.content.Context);
  public android.widget.ViewFlipper(android.content.Context, android.util.AttributeSet);
  public void setFlipInterval(int);
  public void startFlipping();
  public void stopFlipping();
  public boolean isFlipping();
  public void setAutoStart(boolean);
  public boolean isAutoStart();
public interface android.widget.WrapperListAdapter extends android.widget.ListAdapter {
  public abstract android.widget.ListAdapter getWrappedAdapter();
  public void run();
public class android.widget.ZoomButton extends android.widget.ImageButton implements android.view.View$OnLongClickListener {
  public android.widget.ZoomButton(android.content.Context);
  public android.widget.ZoomButton(android.content.Context, android.util.AttributeSet);
  public android.widget.ZoomButton(android.content.Context, android.util.AttributeSet, int);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void setZoomSpeed(long);
  public boolean onLongClick(android.view.View);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void setEnabled(boolean);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public void onReceive(android.content.Context, android.content.Intent);
  public void handleMessage(android.os.Message);
  public void onClick(android.view.View);
  public void onClick(android.view.View);
  public void run();
  public android.widget.ZoomButtonsController$Container(android.widget.ZoomButtonsController, android.content.Context);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
public interface android.widget.ZoomButtonsController$OnZoomListener {
  public abstract void onVisibilityChanged(boolean);
  public abstract void onZoom(boolean);
public class android.widget.ZoomButtonsController implements android.view.View$OnTouchListener {
  public android.widget.ZoomButtonsController(android.view.View);
  public void setZoomInEnabled(boolean);
  public void setZoomOutEnabled(boolean);
  public void setZoomSpeed(long);
  public void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener);
  public void setFocusable(boolean);
  public boolean isAutoDismissed();
  public void setAutoDismissed(boolean);
  public boolean isVisible();
  public void setVisible(boolean);
  public android.view.ViewGroup getContainer();
  public android.view.View getZoomControls();
  public boolean onTouch(android.view.View, android.view.MotionEvent);
public class android.widget.ZoomControls extends android.widget.LinearLayout {
  public android.widget.ZoomControls(android.content.Context);
  public android.widget.ZoomControls(android.content.Context, android.util.AttributeSet);
  public void setOnZoomInClickListener(android.view.View$OnClickListener);
  public void setOnZoomOutClickListener(android.view.View$OnClickListener);
  public void setZoomSpeed(long);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void show();
  public void hide();
  public void setIsZoomInEnabled(boolean);
  public void setIsZoomOutEnabled(boolean);
  public boolean hasFocus();
public class com.android.i18n.phonenumbers.AsYouTypeFormatter {
  public void clear();
  public java.lang.String inputDigit(char);
  public java.lang.String inputDigitAndRememberPosition(char);
  public int getRememberedPosition();
public class com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap {
  public com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap();
public final class com.android.i18n.phonenumbers.NumberParseException$ErrorType extends java.lang.Enum<com.android.i18n.phonenumbers.NumberParseException$ErrorType> {
  public static com.android.i18n.phonenumbers.NumberParseException$ErrorType[] values();
  public static com.android.i18n.phonenumbers.NumberParseException$ErrorType valueOf(java.lang.String);
public class com.android.i18n.phonenumbers.NumberParseException extends java.lang.Exception {
  public com.android.i18n.phonenumbers.NumberParseException(com.android.i18n.phonenumbers.NumberParseException$ErrorType, java.lang.String);
  public com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType();
  public java.lang.String toString();
public final class com.android.i18n.phonenumbers.PhoneNumberMatch {
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber number();
  public int start();
  public int end();
  public java.lang.String rawString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public static com.android.i18n.phonenumbers.PhoneNumberMatcher$State[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberMatcher$State valueOf(java.lang.String);
  public boolean hasNext();
  public com.android.i18n.phonenumbers.PhoneNumberMatch next();
  public void remove();
  public java.lang.Object next();
  public java.util.Iterator<com.android.i18n.phonenumbers.PhoneNumberMatch> iterator();
public abstract class com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency extends java.lang.Enum<com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency> {
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency valueOf(java.lang.String);
public final class com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType extends java.lang.Enum<com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType> {
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType valueOf(java.lang.String);
public final class com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat extends java.lang.Enum<com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat> {
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat valueOf(java.lang.String);
public final class com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType extends java.lang.Enum<com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType> {
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType valueOf(java.lang.String);
public final class com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult extends java.lang.Enum<com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult> {
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult[] values();
  public static com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult valueOf(java.lang.String);
public class com.android.i18n.phonenumbers.PhoneNumberUtil {
  public static java.lang.String normalizeDigitsOnly(java.lang.String);
  public static java.lang.String convertAlphaCharactersInNumber(java.lang.String);
  public int getLengthOfGeographicalAreaCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public java.util.Set<java.lang.String> getSupportedRegions();
  public static synchronized com.android.i18n.phonenumbers.PhoneNumberUtil getInstance();
  public java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat);
  public void format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder);
  public java.lang.String formatByPattern(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.util.List<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat>);
  public java.lang.String formatNationalNumberWithCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String formatNationalNumberWithPreferredCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String formatOutOfCountryCallingNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String formatInOriginalFormat(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String formatOutOfCountryKeepingAlphaChars(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType);
  public com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public boolean isValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public boolean isValidNumberForRegion(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
  public java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public java.lang.String getRegionCodeForCountryCode(int);
  public int getCountryCodeForRegion(java.lang.String);
  public java.lang.String getNddPrefixForRegion(java.lang.String, boolean);
  public boolean isNANPACountry(java.lang.String);
  public boolean isAlphaNumber(java.lang.String);
  public boolean isPossibleNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public boolean isPossibleNumber(java.lang.String, java.lang.String);
  public boolean truncateTooLongNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String);
  public java.lang.Iterable<com.android.i18n.phonenumbers.PhoneNumberMatch> findNumbers(java.lang.CharSequence, java.lang.String);
  public java.lang.Iterable<com.android.i18n.phonenumbers.PhoneNumberMatch> findNumbers(java.lang.CharSequence, java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency, long);
  public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.String, java.lang.String);
  public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String);
public final class com.android.i18n.phonenumbers.Phonemetadata$NumberFormat$Builder extends com.android.i18n.phonenumbers.Phonemetadata$NumberFormat {
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat$Builder();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat build();
public class com.android.i18n.phonenumbers.Phonemetadata$NumberFormat implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat();
  public static com.android.i18n.phonenumbers.Phonemetadata$NumberFormat$Builder newBuilder();
  public boolean hasPattern();
  public java.lang.String getPattern();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String);
  public boolean hasFormat();
  public java.lang.String getFormat();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String);
  public java.util.List<java.lang.String> leadingDigitPatterns();
  public int leadingDigitsPatternSize();
  public java.lang.String getLeadingDigitsPattern(int);
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat addLeadingDigitsPattern(java.lang.String);
  public boolean hasNationalPrefixFormattingRule();
  public java.lang.String getNationalPrefixFormattingRule();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String);
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat clearNationalPrefixFormattingRule();
  public boolean hasDomesticCarrierCodeFormattingRule();
  public java.lang.String getDomesticCarrierCodeFormattingRule();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setDomesticCarrierCodeFormattingRule(java.lang.String);
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat);
public final class com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata$Builder extends com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata$Builder();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata build();
public class com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata();
  public static com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata$Builder newBuilder();
  public boolean hasGeneralDesc();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setGeneralDesc(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasFixedLine();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setFixedLine(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasMobile();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMobile(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasTollFree();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setTollFree(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasPremiumRate();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPremiumRate(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasSharedCost();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSharedCost(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasPersonalNumber();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPersonalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasVoip();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setVoip(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasPager();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPager(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasUan();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setUan(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasNoInternationalDialling();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNoInternationalDialling(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean hasId();
  public java.lang.String getId();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setId(java.lang.String);
  public boolean hasCountryCode();
  public int getCountryCode();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setCountryCode(int);
  public boolean hasInternationalPrefix();
  public java.lang.String getInternationalPrefix();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setInternationalPrefix(java.lang.String);
  public boolean hasPreferredInternationalPrefix();
  public java.lang.String getPreferredInternationalPrefix();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredInternationalPrefix(java.lang.String);
  public boolean hasNationalPrefix();
  public java.lang.String getNationalPrefix();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefix(java.lang.String);
  public boolean hasPreferredExtnPrefix();
  public java.lang.String getPreferredExtnPrefix();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredExtnPrefix(java.lang.String);
  public boolean hasNationalPrefixForParsing();
  public java.lang.String getNationalPrefixForParsing();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixForParsing(java.lang.String);
  public boolean hasNationalPrefixTransformRule();
  public java.lang.String getNationalPrefixTransformRule();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixTransformRule(java.lang.String);
  public boolean hasSameMobileAndFixedLinePattern();
  public boolean isSameMobileAndFixedLinePattern();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSameMobileAndFixedLinePattern(boolean);
  public java.util.List<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat> numberFormats();
  public int numberFormatSize();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getNumberFormat(int);
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata addNumberFormat(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat);
  public java.util.List<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat> intlNumberFormats();
  public int intlNumberFormatSize();
  public com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getIntlNumberFormat(int);
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata addIntlNumberFormat(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat);
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata clearIntlNumberFormat();
  public boolean hasMainCountryForCode();
  public boolean isMainCountryForCode();
  public boolean getMainCountryForCode();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMainCountryForCode(boolean);
  public boolean hasLeadingDigits();
  public java.lang.String getLeadingDigits();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingDigits(java.lang.String);
  public boolean hasLeadingZeroPossible();
  public boolean isLeadingZeroPossible();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingZeroPossible(boolean);
public final class com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection$Builder extends com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection$Builder();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection build();
public class com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection();
  public static com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection$Builder newBuilder();
  public java.util.List<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata> getMetadataList();
  public int getMetadataCount();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection addMetadata(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata);
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection clear();
public final class com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc$Builder extends com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc$Builder();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc build();
public class com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc();
  public static com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc$Builder newBuilder();
  public boolean hasNationalNumberPattern();
  public java.lang.String getNationalNumberPattern();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setNationalNumberPattern(java.lang.String);
  public boolean hasPossibleNumberPattern();
  public java.lang.String getPossibleNumberPattern();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setPossibleNumberPattern(java.lang.String);
  public boolean hasExampleNumber();
  public java.lang.String getExampleNumber();
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setExampleNumber(java.lang.String);
  public com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
  public boolean exactlySameAs(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc);
public final class com.android.i18n.phonenumbers.Phonemetadata {
public final class com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource extends java.lang.Enum<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource> {
  public static com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource[] values();
  public static com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource valueOf(java.lang.String);
public class com.android.i18n.phonenumbers.Phonenumber$PhoneNumber implements java.io.Serializable {
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber();
  public boolean hasCountryCode();
  public int getCountryCode();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCode();
  public boolean hasNationalNumber();
  public long getNationalNumber();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearNationalNumber();
  public boolean hasExtension();
  public java.lang.String getExtension();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearExtension();
  public boolean hasItalianLeadingZero();
  public boolean isItalianLeadingZero();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearItalianLeadingZero();
  public boolean hasRawInput();
  public java.lang.String getRawInput();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setRawInput(java.lang.String);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearRawInput();
  public boolean hasCountryCodeSource();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource();
  public boolean hasPreferredDomesticCarrierCode();
  public java.lang.String getPreferredDomesticCarrierCode();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setPreferredDomesticCarrierCode(java.lang.String);
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearPreferredDomesticCarrierCode();
  public final com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clear();
  public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public boolean exactlySameAs(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public final class com.android.i18n.phonenumbers.Phonenumber {
  public com.android.i18n.phonenumbers.RegexCache$LRUCache(int);
  public synchronized V get(K);
  public synchronized void put(K, V);
  public synchronized boolean containsKey(K);
public class com.android.i18n.phonenumbers.RegexCache {
  public com.android.i18n.phonenumbers.RegexCache(int);
  public java.util.regex.Pattern getPatternForRegex(java.lang.String);
public class com.android.i18n.phonenumbers.geocoding.AreaCodeMap implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.geocoding.AreaCodeMap();
  public void readAreaCodeMap(java.util.SortedMap<java.lang.Integer, java.lang.String>);
  public java.lang.String toString();
  public com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy();
  public abstract boolean isFlyweight();
  public int getNumOfEntries();
  public java.util.TreeSet<java.lang.Integer> getPossibleLengths();
  public abstract int getPrefix(int);
  public abstract java.lang.String getDescription(int);
  public abstract void readFromSortedMap(java.util.SortedMap<java.lang.Integer, java.lang.String>);
  public java.lang.String toString();
  public com.android.i18n.phonenumbers.geocoding.DefaultMapStorage();
  public boolean isFlyweight();
  public int getPrefix(int);
  public java.lang.String getDescription(int);
  public void readFromSortedMap(java.util.SortedMap<java.lang.Integer, java.lang.String>);
  public int compare(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
  public com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage();
  public boolean isFlyweight();
  public int getPrefix(int);
  public java.lang.String getDescription(int);
  public void readFromSortedMap(java.util.SortedMap<java.lang.Integer, java.lang.String>);
public class com.android.i18n.phonenumbers.geocoding.MappingFileProvider implements java.io.Externalizable {
  public com.android.i18n.phonenumbers.geocoding.MappingFileProvider();
  public void readFileConfigs(java.util.SortedMap<java.lang.Integer, java.util.Set<java.lang.String>>);
  public java.lang.String toString();
public class com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder {
  public static synchronized com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance();
  public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale);
  public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
public class com.android.internal.app.ActionBarImpl$ActionModeImpl extends android.view.ActionMode implements com.android.internal.view.menu.MenuBuilder$Callback {
  public com.android.internal.app.ActionBarImpl$ActionModeImpl(com.android.internal.app.ActionBarImpl, android.view.ActionMode$Callback);
  public android.view.MenuInflater getMenuInflater();
  public android.view.Menu getMenu();
  public void finish();
  public void invalidate();
  public boolean dispatchOnCreate();
  public void setCustomView(android.view.View);
  public void setSubtitle(java.lang.CharSequence);
  public void setTitle(java.lang.CharSequence);
  public void setTitle(int);
  public void setSubtitle(int);
  public java.lang.CharSequence getTitle();
  public java.lang.CharSequence getSubtitle();
  public android.view.View getCustomView();
  public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public void onCloseSubMenu(com.android.internal.view.menu.SubMenuBuilder);
  public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder);
public class com.android.internal.app.ActionBarImpl$TabImpl extends android.app.ActionBar$Tab {
  public com.android.internal.app.ActionBarImpl$TabImpl(com.android.internal.app.ActionBarImpl);
  public java.lang.Object getTag();
  public android.app.ActionBar$Tab setTag(java.lang.Object);
  public android.app.ActionBar$TabListener getCallback();
  public android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener);
  public android.view.View getCustomView();
  public android.app.ActionBar$Tab setCustomView(android.view.View);
  public android.app.ActionBar$Tab setCustomView(int);
  public android.graphics.drawable.Drawable getIcon();
  public int getPosition();
  public void setPosition(int);
  public java.lang.CharSequence getText();
  public android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable);
  public android.app.ActionBar$Tab setIcon(int);
  public android.app.ActionBar$Tab setText(java.lang.CharSequence);
  public android.app.ActionBar$Tab setText(int);
  public void select();
  public android.app.ActionBar$Tab setContentDescription(int);
  public android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence);
  public java.lang.CharSequence getContentDescription();
public class com.android.internal.app.ActionBarImpl extends android.app.ActionBar {
  public com.android.internal.app.ActionBarImpl(android.app.Activity);
  public com.android.internal.app.ActionBarImpl(android.app.Dialog);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void setShowHideAnimationEnabled(boolean);
  public void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public void dispatchMenuVisibilityChanged(boolean);
  public void setCustomView(int);
  public void setDisplayUseLogoEnabled(boolean);
  public void setDisplayShowHomeEnabled(boolean);
  public void setDisplayHomeAsUpEnabled(boolean);
  public void setDisplayShowTitleEnabled(boolean);
  public void setDisplayShowCustomEnabled(boolean);
  public void setHomeButtonEnabled(boolean);
  public void setTitle(int);
  public void setSubtitle(int);
  public void setSelectedNavigationItem(int);
  public void removeAllTabs();
  public void setTitle(java.lang.CharSequence);
  public void setSubtitle(java.lang.CharSequence);
  public void setDisplayOptions(int);
  public void setDisplayOptions(int, int);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable);
  public android.view.View getCustomView();
  public java.lang.CharSequence getTitle();
  public java.lang.CharSequence getSubtitle();
  public int getNavigationMode();
  public int getDisplayOptions();
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public void addTab(android.app.ActionBar$Tab);
  public void addTab(android.app.ActionBar$Tab, int);
  public void addTab(android.app.ActionBar$Tab, boolean);
  public void addTab(android.app.ActionBar$Tab, int, boolean);
  public android.app.ActionBar$Tab newTab();
  public void removeTab(android.app.ActionBar$Tab);
  public void removeTabAt(int);
  public void selectTab(android.app.ActionBar$Tab);
  public android.app.ActionBar$Tab getSelectedTab();
  public int getHeight();
  public void show();
  public void hide();
  public boolean isShowing();
  public android.content.Context getThemedContext();
  public void setCustomView(android.view.View);
  public void setCustomView(android.view.View, android.app.ActionBar$LayoutParams);
  public void setListNavigationCallbacks(android.widget.SpinnerAdapter, android.app.ActionBar$OnNavigationListener);
  public int getSelectedNavigationIndex();
  public int getNavigationItemCount();
  public int getTabCount();
  public void setNavigationMode(int);
  public android.app.ActionBar$Tab getTabAt(int);
  public void setIcon(int);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setLogo(int);
  public void setLogo(android.graphics.drawable.Drawable);
  public void onClick(android.view.View);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
public interface com.android.internal.app.AlertController$AlertParams$OnPrepareListViewListener {
  public abstract void onPrepareListView(android.widget.ListView);
public class com.android.internal.app.AlertController$AlertParams {
  public com.android.internal.app.AlertController$AlertParams(android.content.Context);
  public void apply(com.android.internal.app.AlertController);
  public com.android.internal.app.AlertController$ButtonHandler(android.content.DialogInterface);
  public void handleMessage(android.os.Message);
public class com.android.internal.app.AlertController$RecycleListView extends android.widget.ListView {
  public com.android.internal.app.AlertController$RecycleListView(android.content.Context);
  public com.android.internal.app.AlertController$RecycleListView(android.content.Context, android.util.AttributeSet);
  public com.android.internal.app.AlertController$RecycleListView(android.content.Context, android.util.AttributeSet, int);
public class com.android.internal.app.AlertController {
  public com.android.internal.app.AlertController(android.content.Context, android.content.DialogInterface, android.view.Window);
  public void installContent();
  public void setTitle(java.lang.CharSequence);
  public void setCustomTitle(android.view.View);
  public void setMessage(java.lang.CharSequence);
  public void setView(android.view.View);
  public void setView(android.view.View, int, int, int, int);
  public void setButton(int, java.lang.CharSequence, android.content.DialogInterface$OnClickListener, android.os.Message);
  public void setIcon(int);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setInverseBackgroundForced(boolean);
  public android.widget.ListView getListView();
  public android.widget.Button getButton(int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.app.IUsageStats$Stub extends android.os.Binder implements com.android.internal.app.IUsageStats {
  public com.android.internal.app.IUsageStats$Stub();
  public static com.android.internal.app.IUsageStats asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.app.IUsageStats extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.appwidget.IAppWidgetHost$Stub extends android.os.Binder implements com.android.internal.appwidget.IAppWidgetHost {
  public com.android.internal.appwidget.IAppWidgetHost$Stub();
  public static com.android.internal.appwidget.IAppWidgetHost asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.appwidget.IAppWidgetHost extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.appwidget.IAppWidgetService$Stub extends android.os.Binder implements com.android.internal.appwidget.IAppWidgetService {
  public com.android.internal.appwidget.IAppWidgetService$Stub();
  public static com.android.internal.appwidget.IAppWidgetService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.appwidget.IAppWidgetService extends android.os.IInterface {
public abstract class com.android.internal.content.PackageMonitor extends android.content.BroadcastReceiver {
  public com.android.internal.content.PackageMonitor();
  public void register(android.content.Context, boolean);
  public void unregister();
  public void onBeginPackageChanges();
  public void onPackageAdded(java.lang.String, int);
  public void onPackageRemoved(java.lang.String, int);
  public void onPackageUpdateStarted(java.lang.String, int);
  public void onPackageUpdateFinished(java.lang.String, int);
  public void onPackageChanged(java.lang.String, int, java.lang.String[]);
  public boolean onHandleForceStop(android.content.Intent, java.lang.String[], int, boolean);
  public void onUidRemoved(int);
  public void onPackagesAvailable(java.lang.String[]);
  public void onPackagesUnavailable(java.lang.String[]);
  public void onPackageDisappeared(java.lang.String, int);
  public void onPackageAppeared(java.lang.String, int);
  public void onPackageModified(java.lang.String);
  public boolean didSomePackagesChange();
  public int isPackageAppearing(java.lang.String);
  public boolean anyPackagesAppearing();
  public int isPackageDisappearing(java.lang.String);
  public boolean anyPackagesDisappearing();
  public boolean isPackageModified(java.lang.String);
  public void onSomePackagesChanged();
  public void onFinishPackageChanges();
  public void onReceive(android.content.Context, android.content.Intent);
  public void onChanged();
  public void onInvalidated();
public class com.android.internal.database.SortCursor extends android.database.AbstractCursor {
  public com.android.internal.database.SortCursor(android.database.Cursor[], java.lang.String);
  public int getCount();
  public boolean onMove(int, int);
  public java.lang.String getString(int);
  public short getShort(int);
  public int getInt(int);
  public long getLong(int);
  public float getFloat(int);
  public double getDouble(int);
  public int getType(int);
  public boolean isNull(int);
  public byte[] getBlob(int);
  public java.lang.String[] getColumnNames();
  public void deactivate();
  public void close();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public boolean requery();
public final class com.android.internal.http.HttpDateTime {
  public com.android.internal.http.HttpDateTime();
public class com.android.internal.location.DummyLocationProvider extends android.location.LocationProvider {
  public com.android.internal.location.DummyLocationProvider(java.lang.String, android.location.ILocationManager);
  public void setRequiresNetwork(boolean);
  public void setRequiresSatellite(boolean);
  public void setRequiresCell(boolean);
  public void setHasMonetaryCost(boolean);
  public void setSupportsAltitude(boolean);
  public void setSupportsSpeed(boolean);
  public void setSupportsBearing(boolean);
  public void setPowerRequirement(int);
  public void setAccuracy(int);
  public boolean requiresNetwork();
  public boolean requiresSatellite();
  public boolean requiresCell();
  public boolean hasMonetaryCost();
  public boolean supportsAltitude();
  public boolean supportsSpeed();
  public boolean supportsBearing();
  public int getPowerRequirement();
  public int getAccuracy();
public class com.android.internal.logging.AndroidConfig {
  public com.android.internal.logging.AndroidConfig();
  public java.lang.String format(java.util.logging.LogRecord);
public class com.android.internal.logging.AndroidHandler extends java.util.logging.Handler implements dalvik.system.DalvikLogHandler {
  public com.android.internal.logging.AndroidHandler();
  public void close();
  public void flush();
  public void publish(java.util.logging.LogRecord);
  public void publish(java.util.logging.Logger, java.lang.String, java.util.logging.Level, java.lang.String);
public final class com.android.internal.net.DNParser {
  public com.android.internal.net.DNParser(javax.security.auth.x500.X500Principal);
  public java.lang.String find(java.lang.String);
public class com.android.internal.net.DomainNameValidator {
  public com.android.internal.net.DomainNameValidator();
  public static boolean match(java.security.cert.X509Certificate, java.lang.String);
  public static boolean matchDns(java.lang.String, java.lang.String);
  public com.android.internal.net.LegacyVpnInfo createFromParcel(android.os.Parcel);
  public com.android.internal.net.LegacyVpnInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.net.LegacyVpnInfo implements android.os.Parcelable {
  public com.android.internal.net.LegacyVpnInfo();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public com.android.internal.net.VpnConfig createFromParcel(android.os.Parcel);
  public com.android.internal.net.VpnConfig[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.net.VpnConfig implements android.os.Parcelable {
  public com.android.internal.net.VpnConfig();
  public static android.content.Intent getIntentForConfirmation();
  public static android.app.PendingIntent getIntentForStatusPanel(android.content.Context, com.android.internal.net.VpnConfig);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public com.android.internal.os.AndroidPrintStream(int, java.lang.String);
public class com.android.internal.os.AtomicFile {
  public com.android.internal.os.AtomicFile(java.io.File);
  public java.io.File getBaseFile();
  public void finishWrite(java.io.FileOutputStream);
  public void failWrite(java.io.FileOutputStream);
public class com.android.internal.os.BinderInternal {
  public com.android.internal.os.BinderInternal();
  public static final native void joinThreadPool();
  public static long getLastGcTime();
  public static final native android.os.IBinder getContextObject();
  public static final native void disableBackgroundScheduling(boolean);
  public static void forceGc(java.lang.String);
public interface com.android.internal.os.HandlerCaller$Callback {
  public abstract void executeMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.os.HandlerCaller$SomeArgs {
  public com.android.internal.os.HandlerCaller$SomeArgs();
public class com.android.internal.os.HandlerCaller {
  public com.android.internal.os.HandlerCaller(android.content.Context, com.android.internal.os.HandlerCaller$Callback);
  public com.android.internal.os.HandlerCaller(android.content.Context, android.os.Looper, com.android.internal.os.HandlerCaller$Callback);
  public com.android.internal.os.HandlerCaller$SomeArgs obtainArgs();
  public void recycleArgs(com.android.internal.os.HandlerCaller$SomeArgs);
  public void executeOrSendMessage(android.os.Message);
  public boolean hasMessages(int);
  public void removeMessages(int);
  public void removeMessages(int, java.lang.Object);
  public void sendMessage(android.os.Message);
  public android.os.Message obtainMessage(int);
  public android.os.Message obtainMessageBO(int, boolean, java.lang.Object);
  public android.os.Message obtainMessageBOO(int, boolean, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageO(int, java.lang.Object);
  public android.os.Message obtainMessageI(int, int);
  public android.os.Message obtainMessageII(int, int, int);
  public android.os.Message obtainMessageIO(int, int, java.lang.Object);
  public android.os.Message obtainMessageIIO(int, int, int, java.lang.Object);
  public android.os.Message obtainMessageIIOO(int, int, int, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageIOO(int, int, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageOO(int, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageOOO(int, java.lang.Object, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageOOOO(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
  public android.os.Message obtainMessageIIII(int, int, int, int, int);
  public android.os.Message obtainMessageIIIIII(int, int, int, int, int, int, int);
  public android.os.Message obtainMessageIIIIO(int, int, int, int, int, java.lang.Object);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.os.IDropBoxManagerService$Stub extends android.os.Binder implements com.android.internal.os.IDropBoxManagerService {
  public com.android.internal.os.IDropBoxManagerService$Stub();
  public static com.android.internal.os.IDropBoxManagerService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.os.IDropBoxManagerService extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.os.IResultReceiver$Stub extends android.os.Binder implements com.android.internal.os.IResultReceiver {
  public com.android.internal.os.IResultReceiver$Stub();
  public static com.android.internal.os.IResultReceiver asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.os.IResultReceiver extends android.os.IInterface {
  public synchronized void flush();
  public void write(int);
  public void write(byte[]);
  public synchronized void write(byte[], int, int);
  public boolean checkError();
  public void close();
  public java.io.PrintStream format(java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public synchronized java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object...);
  public synchronized void print(char[]);
  public synchronized void print(char);
  public synchronized void print(double);
  public synchronized void print(float);
  public synchronized void print(int);
  public synchronized void print(long);
  public synchronized void print(java.lang.Object);
  public synchronized void print(java.lang.String);
  public synchronized void print(boolean);
  public synchronized void println();
  public synchronized void println(char[]);
  public synchronized void println(char);
  public synchronized void println(double);
  public synchronized void println(float);
  public synchronized void println(int);
  public synchronized void println(long);
  public synchronized void println(java.lang.Object);
  public synchronized void println(java.lang.String);
  public synchronized void println(boolean);
  public synchronized java.io.PrintStream append(char);
  public synchronized java.io.PrintStream append(java.lang.CharSequence);
  public synchronized java.io.PrintStream append(java.lang.CharSequence, int, int);
  public com.android.internal.os.PkgUsageStats createFromParcel(android.os.Parcel);
  public com.android.internal.os.PkgUsageStats[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.os.PkgUsageStats implements android.os.Parcelable {
  public java.lang.String toString();
  public com.android.internal.os.PkgUsageStats(java.lang.String, int, long, java.util.Map<java.lang.String, java.lang.Long>);
  public com.android.internal.os.PkgUsageStats(android.os.Parcel);
  public com.android.internal.os.PkgUsageStats(com.android.internal.os.PkgUsageStats);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getId();
  public void uncaughtException(java.lang.Thread, java.lang.Throwable);
public class com.android.internal.os.RuntimeInit {
  public com.android.internal.os.RuntimeInit();
  public static final void main(java.lang.String[]);
  public static final native void finishInit();
  public static void redirectLogStreams();
  public static final native void zygoteInitNative();
  public static final native int isComputerOn();
  public static final native void turnComputerOn();
  public static native int getQwertyKeyboard();
  public static void wtf(java.lang.String, java.lang.Throwable);
  public static final void setApplicationObject(android.os.IBinder);
  public static final android.os.IBinder getApplicationObject();
  public java.lang.Thread newThread(java.lang.Runnable);
  public void run();
public class com.android.internal.os.SamplingProfilerIntegration {
  public com.android.internal.os.SamplingProfilerIntegration();
  public static boolean isEnabled();
  public static void start();
  public static void writeSnapshot(java.lang.String, android.content.pm.PackageInfo);
  public static void writeZygoteSnapshot();
public class com.android.internal.os.WrapperInit {
  public static void main(java.lang.String[]);
  public static void execApplication(java.lang.String, java.lang.String, int, java.io.FileDescriptor, java.lang.String[]);
  public static void execStandalone(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);
  public static void applyDebuggerSystemProperty(com.android.internal.os.ZygoteConnection$Arguments);
  public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection$Arguments);
public class com.android.internal.os.ZygoteInit$MethodAndArgsCaller extends java.lang.Exception implements java.lang.Runnable {
  public com.android.internal.os.ZygoteInit$MethodAndArgsCaller(java.lang.reflect.Method, java.lang.String[]);
  public void run();
public class com.android.internal.os.ZygoteInit {
  public static void main(java.lang.String[]);
public interface com.android.internal.policy.IPolicy {
  public abstract android.view.Window makeNewWindow(android.content.Context);
  public abstract android.view.LayoutInflater makeNewLayoutInflater(android.content.Context);
  public abstract android.view.WindowManagerPolicy makeNewWindowManager();
  public abstract android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context);
public final class com.android.internal.policy.PolicyManager {
  public static android.view.Window makeNewWindow(android.content.Context);
  public static android.view.LayoutInflater makeNewLayoutInflater(android.content.Context);
  public static android.view.WindowManagerPolicy makeNewWindowManager();
  public static android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.statusbar.IStatusBar$Stub extends android.os.Binder implements com.android.internal.statusbar.IStatusBar {
  public com.android.internal.statusbar.IStatusBar$Stub();
  public static com.android.internal.statusbar.IStatusBar asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.statusbar.IStatusBar extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.statusbar.IStatusBarService$Stub extends android.os.Binder implements com.android.internal.statusbar.IStatusBarService {
  public com.android.internal.statusbar.IStatusBarService$Stub();
  public static com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.statusbar.IStatusBarService extends android.os.IInterface {
  public com.android.internal.statusbar.StatusBarIcon createFromParcel(android.os.Parcel);
  public com.android.internal.statusbar.StatusBarIcon[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.statusbar.StatusBarIcon implements android.os.Parcelable {
  public com.android.internal.statusbar.StatusBarIcon(java.lang.String, int, int, int, java.lang.CharSequence);
  public java.lang.String toString();
  public com.android.internal.statusbar.StatusBarIcon clone();
  public com.android.internal.statusbar.StatusBarIcon(android.os.Parcel);
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public com.android.internal.statusbar.StatusBarIconList createFromParcel(android.os.Parcel);
  public com.android.internal.statusbar.StatusBarIconList[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.statusbar.StatusBarIconList implements android.os.Parcelable {
  public com.android.internal.statusbar.StatusBarIconList();
  public com.android.internal.statusbar.StatusBarIconList(android.os.Parcel);
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public void defineSlots(java.lang.String[]);
  public int getSlotIndex(java.lang.String);
  public int size();
  public void setIcon(int, com.android.internal.statusbar.StatusBarIcon);
  public void removeIcon(int);
  public java.lang.String getSlot(int);
  public com.android.internal.statusbar.StatusBarIcon getIcon(int);
  public int getViewIndex(int);
  public void copyFrom(com.android.internal.statusbar.StatusBarIconList);
  public void dump(java.io.PrintWriter);
  public com.android.internal.statusbar.StatusBarNotification createFromParcel(android.os.Parcel);
  public com.android.internal.statusbar.StatusBarNotification[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.statusbar.StatusBarNotification implements android.os.Parcelable {
  public com.android.internal.statusbar.StatusBarNotification();
  public com.android.internal.statusbar.StatusBarNotification(java.lang.String, int, java.lang.String, int, int, android.app.Notification);
  public com.android.internal.statusbar.StatusBarNotification(android.os.Parcel);
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public com.android.internal.statusbar.StatusBarNotification clone();
  public java.lang.String toString();
  public boolean isOngoing();
  public boolean isClearable();
public class com.android.internal.telephony.ATParseEx extends java.lang.RuntimeException {
  public com.android.internal.telephony.ATParseEx();
  public com.android.internal.telephony.ATParseEx(java.lang.String);
public class com.android.internal.telephony.ATResponseParser {
  public com.android.internal.telephony.ATResponseParser(java.lang.String);
  public boolean nextBoolean();
  public int nextInt();
  public java.lang.String nextString();
  public boolean hasMore();
  public com.android.internal.telephony.AdnRecord createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.AdnRecord[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.AdnRecord implements android.os.Parcelable {
  public com.android.internal.telephony.AdnRecord(byte[]);
  public com.android.internal.telephony.AdnRecord(int, int, byte[]);
  public com.android.internal.telephony.AdnRecord(java.lang.String, java.lang.String);
  public com.android.internal.telephony.AdnRecord(java.lang.String, java.lang.String, java.lang.String[]);
  public com.android.internal.telephony.AdnRecord(int, int, java.lang.String, java.lang.String, java.lang.String[]);
  public com.android.internal.telephony.AdnRecord(int, int, java.lang.String, java.lang.String);
  public java.lang.String getAlphaTag();
  public java.lang.String getNumber();
  public java.lang.String[] getEmails();
  public void setEmails(java.lang.String[]);
  public java.lang.String toString();
  public boolean isEmpty();
  public boolean hasExtendedRecord();
  public boolean isEqual(com.android.internal.telephony.AdnRecord);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] buildAdnString(int);
  public void appendExtRecord(byte[]);
public final class com.android.internal.telephony.AdnRecordCache extends android.os.Handler implements com.android.internal.telephony.IccConstants {
  public com.android.internal.telephony.AdnRecordCache(com.android.internal.telephony.PhoneBase);
  public void reset();
  public java.util.ArrayList<com.android.internal.telephony.AdnRecord> getRecordsIfLoaded(int);
  public void updateAdnByIndex(int, com.android.internal.telephony.AdnRecord, int, java.lang.String, android.os.Message);
  public void updateAdnBySearch(int, com.android.internal.telephony.AdnRecord, com.android.internal.telephony.AdnRecord, java.lang.String, android.os.Message);
  public void requestLoadAllAdnLike(int, int, android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.AdnRecordLoader extends android.os.Handler {
  public com.android.internal.telephony.AdnRecordLoader(com.android.internal.telephony.PhoneBase);
  public void loadFromEF(int, int, int, android.os.Message);
  public void loadAllFromEF(int, int, android.os.Message);
  public void updateEF(com.android.internal.telephony.AdnRecord, int, int, int, java.lang.String, android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.ApnContext {
  public com.android.internal.telephony.ApnContext(java.lang.String, java.lang.String);
  public java.lang.String getApnType();
  public synchronized com.android.internal.telephony.DataConnection getDataConnection();
  public synchronized void setDataConnection(com.android.internal.telephony.DataConnection);
  public synchronized com.android.internal.telephony.DataConnectionAc getDataConnectionAc();
  public synchronized void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc);
  public synchronized com.android.internal.telephony.ApnSetting getApnSetting();
  public synchronized void setApnSetting(com.android.internal.telephony.ApnSetting);
  public synchronized void setWaitingApns(java.util.ArrayList<com.android.internal.telephony.ApnSetting>);
  public int getWaitingApnsPermFailCount();
  public void decWaitingApnsPermFailCount();
  public synchronized com.android.internal.telephony.ApnSetting getNextWaitingApn();
  public synchronized void removeNextWaitingApn();
  public synchronized java.util.ArrayList<com.android.internal.telephony.ApnSetting> getWaitingApns();
  public synchronized void setState(com.android.internal.telephony.DataConnectionTracker$State);
  public synchronized com.android.internal.telephony.DataConnectionTracker$State getState();
  public boolean isDisconnected();
  public synchronized void setReason(java.lang.String);
  public synchronized java.lang.String getReason();
  public boolean isReady();
  public void setEnabled(boolean);
  public boolean isEnabled();
  public void setDependencyMet(boolean);
  public boolean getDependencyMet();
  public java.lang.String toString();
public class com.android.internal.telephony.ApnSetting {
  public com.android.internal.telephony.ApnSetting(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String[], java.lang.String, java.lang.String, boolean, int);
  public static com.android.internal.telephony.ApnSetting fromString(java.lang.String);
  public java.lang.String toString();
  public boolean canHandleType(java.lang.String);
  public boolean equals(java.lang.Object);
public abstract class com.android.internal.telephony.BaseCommands implements com.android.internal.telephony.CommandsInterface {
  public com.android.internal.telephony.BaseCommands(android.content.Context);
  public com.android.internal.telephony.CommandsInterface$RadioState getRadioState();
  public com.android.internal.telephony.CommandsInterface$RadioState getSimState();
  public com.android.internal.telephony.CommandsInterface$RadioState getRuimState();
  public com.android.internal.telephony.CommandsInterface$RadioState getNvState();
  public void registerForRadioStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForRadioStateChanged(android.os.Handler);
  public void registerForOn(android.os.Handler, int, java.lang.Object);
  public void unregisterForOn(android.os.Handler);
  public void registerForAvailable(android.os.Handler, int, java.lang.Object);
  public void unregisterForAvailable(android.os.Handler);
  public void registerForNotAvailable(android.os.Handler, int, java.lang.Object);
  public void unregisterForNotAvailable(android.os.Handler);
  public void registerForOffOrNotAvailable(android.os.Handler, int, java.lang.Object);
  public void unregisterForOffOrNotAvailable(android.os.Handler);
  public void registerForSIMReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForSIMReady(android.os.Handler);
  public void registerForRUIMReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForRUIMReady(android.os.Handler);
  public void registerForNVReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForNVReady(android.os.Handler);
  public void registerForSIMLockedOrAbsent(android.os.Handler, int, java.lang.Object);
  public void unregisterForSIMLockedOrAbsent(android.os.Handler);
  public void registerForRUIMLockedOrAbsent(android.os.Handler, int, java.lang.Object);
  public void unregisterForRUIMLockedOrAbsent(android.os.Handler);
  public void registerForCallStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallStateChanged(android.os.Handler);
  public void registerForVoiceNetworkStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForVoiceNetworkStateChanged(android.os.Handler);
  public void registerForDataNetworkStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForDataNetworkStateChanged(android.os.Handler);
  public void registerForRadioTechnologyChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForRadioTechnologyChanged(android.os.Handler);
  public void registerForIccStatusChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForIccStatusChanged(android.os.Handler);
  public void setOnNewGsmSms(android.os.Handler, int, java.lang.Object);
  public void unSetOnNewGsmSms(android.os.Handler);
  public void setOnNewCdmaSms(android.os.Handler, int, java.lang.Object);
  public void unSetOnNewCdmaSms(android.os.Handler);
  public void setOnNewGsmBroadcastSms(android.os.Handler, int, java.lang.Object);
  public void unSetOnNewGsmBroadcastSms(android.os.Handler);
  public void setOnSmsOnSim(android.os.Handler, int, java.lang.Object);
  public void unSetOnSmsOnSim(android.os.Handler);
  public void setOnSmsStatus(android.os.Handler, int, java.lang.Object);
  public void unSetOnSmsStatus(android.os.Handler);
  public void setOnSignalStrengthUpdate(android.os.Handler, int, java.lang.Object);
  public void unSetOnSignalStrengthUpdate(android.os.Handler);
  public void setOnNITZTime(android.os.Handler, int, java.lang.Object);
  public void unSetOnNITZTime(android.os.Handler);
  public void setOnUSSD(android.os.Handler, int, java.lang.Object);
  public void unSetOnUSSD(android.os.Handler);
  public void setOnSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public void unSetOnSuppServiceNotification(android.os.Handler);
  public void setOnCatSessionEnd(android.os.Handler, int, java.lang.Object);
  public void unSetOnCatSessionEnd(android.os.Handler);
  public void setOnCatProactiveCmd(android.os.Handler, int, java.lang.Object);
  public void unSetOnCatProactiveCmd(android.os.Handler);
  public void setOnCatEvent(android.os.Handler, int, java.lang.Object);
  public void unSetOnCatEvent(android.os.Handler);
  public void setOnCatCallSetUp(android.os.Handler, int, java.lang.Object);
  public void unSetOnCatCallSetUp(android.os.Handler);
  public void setOnIccSmsFull(android.os.Handler, int, java.lang.Object);
  public void unSetOnIccSmsFull(android.os.Handler);
  public void registerForIccRefresh(android.os.Handler, int, java.lang.Object);
  public void setOnIccRefresh(android.os.Handler, int, java.lang.Object);
  public void setEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);
  public void unregisterForIccRefresh(android.os.Handler);
  public void unsetOnIccRefresh(android.os.Handler);
  public void setOnCallRing(android.os.Handler, int, java.lang.Object);
  public void unSetOnCallRing(android.os.Handler);
  public void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOn(android.os.Handler);
  public void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOff(android.os.Handler);
  public void setOnRestrictedStateChanged(android.os.Handler, int, java.lang.Object);
  public void unSetOnRestrictedStateChanged(android.os.Handler);
  public void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForDisplayInfo(android.os.Handler);
  public void registerForCallWaitingInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallWaitingInfo(android.os.Handler);
  public void registerForSignalInfo(android.os.Handler, int, java.lang.Object);
  public void setOnUnsolOemHookRaw(android.os.Handler, int, java.lang.Object);
  public void unSetOnUnsolOemHookRaw(android.os.Handler);
  public void unregisterForSignalInfo(android.os.Handler);
  public void registerForCdmaOtaProvision(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaOtaProvision(android.os.Handler);
  public void registerForNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForNumberInfo(android.os.Handler);
  public void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForRedirectedNumberInfo(android.os.Handler);
  public void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForLineControlInfo(android.os.Handler);
  public void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53ClirInfo(android.os.Handler);
  public void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53AudioControlInfo(android.os.Handler);
  public void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public void unregisterForRingbackTone(android.os.Handler);
  public void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);
  public void unregisterForResendIncallMute(android.os.Handler);
  public void registerForCdmaSubscriptionChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaSubscriptionChanged(android.os.Handler);
  public void registerForCdmaPrlChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaPrlChanged(android.os.Handler);
  public void registerForExitEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);
  public void unregisterForExitEmergencyCallbackMode(android.os.Handler);
  public void registerForRilConnected(android.os.Handler, int, java.lang.Object);
  public void unregisterForRilConnected(android.os.Handler);
  public void setCurrentPreferredNetworkType();
  public int getLteOnCdmaMode();
  public static int getLteOnCdmaModeStatic();
public final class com.android.internal.telephony.Call$State extends java.lang.Enum<com.android.internal.telephony.Call$State> {
  public static com.android.internal.telephony.Call$State[] values();
  public static com.android.internal.telephony.Call$State valueOf(java.lang.String);
  public boolean isAlive();
  public boolean isRinging();
  public boolean isDialing();
public abstract class com.android.internal.telephony.Call {
  public com.android.internal.telephony.Call();
  public abstract java.util.List<com.android.internal.telephony.Connection> getConnections();
  public abstract com.android.internal.telephony.Phone getPhone();
  public abstract boolean isMultiparty();
  public boolean hasConnection(com.android.internal.telephony.Connection);
  public boolean hasConnections();
  public com.android.internal.telephony.Call$State getState();
  public boolean isIdle();
  public com.android.internal.telephony.Connection getEarliestConnection();
  public long getEarliestCreateTime();
  public long getEarliestConnectTime();
  public boolean isDialingOrAlerting();
  public boolean isRinging();
  public com.android.internal.telephony.Connection getLatestConnection();
  public boolean isGeneric();
  public void setGeneric(boolean);
  public void hangupIfAlive();
public class com.android.internal.telephony.CallForwardInfo {
  public com.android.internal.telephony.CallForwardInfo();
  public java.lang.String toString();
public class com.android.internal.telephony.CallStateException extends java.lang.Exception {
  public com.android.internal.telephony.CallStateException();
  public com.android.internal.telephony.CallStateException(java.lang.String);
public abstract class com.android.internal.telephony.CallTracker extends android.os.Handler {
  public com.android.internal.telephony.CallTracker();
  public abstract void handleMessage(android.os.Message);
  public abstract void registerForVoiceCallStarted(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForVoiceCallStarted(android.os.Handler);
  public abstract void registerForVoiceCallEnded(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForVoiceCallEnded(android.os.Handler);
public class com.android.internal.telephony.CallerInfo {
  public com.android.internal.telephony.CallerInfo();
  public static com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context, android.net.Uri, android.database.Cursor);
  public static com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context, android.net.Uri);
  public static com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context, java.lang.String);
  public static java.lang.String getCallerId(android.content.Context, java.lang.String);
  public boolean isEmergencyNumber();
  public boolean isVoiceMailNumber();
  public void updateGeoDescription(android.content.Context, java.lang.String);
  public java.lang.String toString();
public final class com.android.internal.telephony.CommandException$Error extends java.lang.Enum<com.android.internal.telephony.CommandException$Error> {
  public static com.android.internal.telephony.CommandException$Error[] values();
  public static com.android.internal.telephony.CommandException$Error valueOf(java.lang.String);
public class com.android.internal.telephony.CommandException extends java.lang.RuntimeException {
  public com.android.internal.telephony.CommandException(com.android.internal.telephony.CommandException$Error);
  public static com.android.internal.telephony.CommandException fromRilErrno(int);
  public com.android.internal.telephony.CommandException$Error getCommandError();
public final class com.android.internal.telephony.CommandsInterface$RadioState extends java.lang.Enum<com.android.internal.telephony.CommandsInterface$RadioState> {
  public static com.android.internal.telephony.CommandsInterface$RadioState[] values();
  public static com.android.internal.telephony.CommandsInterface$RadioState valueOf(java.lang.String);
  public boolean isOn();
  public int getType();
  public boolean isAvailable();
  public boolean isSIMReady();
  public boolean isRUIMReady();
  public boolean isNVReady();
  public boolean isGsm();
  public boolean isCdma();
public interface com.android.internal.telephony.CommandsInterface {
  public abstract com.android.internal.telephony.CommandsInterface$RadioState getRadioState();
  public abstract com.android.internal.telephony.CommandsInterface$RadioState getSimState();
  public abstract com.android.internal.telephony.CommandsInterface$RadioState getRuimState();
  public abstract com.android.internal.telephony.CommandsInterface$RadioState getNvState();
  public abstract void registerForRadioStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRadioStateChanged(android.os.Handler);
  public abstract void registerForOn(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForOn(android.os.Handler);
  public abstract void registerForAvailable(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForAvailable(android.os.Handler);
  public abstract void registerForNotAvailable(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForNotAvailable(android.os.Handler);
  public abstract void registerForOffOrNotAvailable(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForOffOrNotAvailable(android.os.Handler);
  public abstract void registerForSIMReady(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSIMReady(android.os.Handler);
  public abstract void registerForSIMLockedOrAbsent(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSIMLockedOrAbsent(android.os.Handler);
  public abstract void registerForIccStatusChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForIccStatusChanged(android.os.Handler);
  public abstract void registerForCallStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCallStateChanged(android.os.Handler);
  public abstract void registerForVoiceNetworkStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForVoiceNetworkStateChanged(android.os.Handler);
  public abstract void registerForDataNetworkStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForDataNetworkStateChanged(android.os.Handler);
  public abstract void registerForRadioTechnologyChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRadioTechnologyChanged(android.os.Handler);
  public abstract void registerForNVReady(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForNVReady(android.os.Handler);
  public abstract void registerForRUIMLockedOrAbsent(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRUIMLockedOrAbsent(android.os.Handler);
  public abstract void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForInCallVoicePrivacyOn(android.os.Handler);
  public abstract void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForInCallVoicePrivacyOff(android.os.Handler);
  public abstract void registerForRUIMReady(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRUIMReady(android.os.Handler);
  public abstract void setOnNewGsmSms(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnNewGsmSms(android.os.Handler);
  public abstract void setOnNewCdmaSms(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnNewCdmaSms(android.os.Handler);
  public abstract void setOnNewGsmBroadcastSms(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnNewGsmBroadcastSms(android.os.Handler);
  public abstract void setOnSmsOnSim(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnSmsOnSim(android.os.Handler);
  public abstract void setOnSmsStatus(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnSmsStatus(android.os.Handler);
  public abstract void setOnNITZTime(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnNITZTime(android.os.Handler);
  public abstract void setOnUSSD(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnUSSD(android.os.Handler);
  public abstract void setOnSignalStrengthUpdate(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnSignalStrengthUpdate(android.os.Handler);
  public abstract void setOnIccSmsFull(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnIccSmsFull(android.os.Handler);
  public abstract void registerForIccRefresh(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForIccRefresh(android.os.Handler);
  public abstract void setOnIccRefresh(android.os.Handler, int, java.lang.Object);
  public abstract void unsetOnIccRefresh(android.os.Handler);
  public abstract void setOnCallRing(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnCallRing(android.os.Handler);
  public abstract void setOnRestrictedStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnRestrictedStateChanged(android.os.Handler);
  public abstract void setOnSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnSuppServiceNotification(android.os.Handler);
  public abstract void setOnCatSessionEnd(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnCatSessionEnd(android.os.Handler);
  public abstract void setOnCatProactiveCmd(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnCatProactiveCmd(android.os.Handler);
  public abstract void setOnCatEvent(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnCatEvent(android.os.Handler);
  public abstract void setOnCatCallSetUp(android.os.Handler, int, java.lang.Object);
  public abstract void unSetOnCatCallSetUp(android.os.Handler);
  public abstract void setSuppServiceNotifications(boolean, android.os.Message);
  public abstract void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForDisplayInfo(android.os.Handler);
  public abstract void registerForCallWaitingInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCallWaitingInfo(android.os.Handler);
  public abstract void registerForSignalInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSignalInfo(android.os.Handler);
  public abstract void registerForNumberInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForNumberInfo(android.os.Handler);
  public abstract void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRedirectedNumberInfo(android.os.Handler);
  public abstract void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForLineControlInfo(android.os.Handler);
  public abstract void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForT53ClirInfo(android.os.Handler);
  public abstract void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForT53AudioControlInfo(android.os.Handler);
  public abstract void setEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);
  public abstract void registerForCdmaOtaProvision(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCdmaOtaProvision(android.os.Handler);
  public abstract void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRingbackTone(android.os.Handler);
  public abstract void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForResendIncallMute(android.os.Handler);
  public abstract void registerForCdmaSubscriptionChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCdmaSubscriptionChanged(android.os.Handler);
  public abstract void registerForCdmaPrlChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCdmaPrlChanged(android.os.Handler);
  public abstract void registerForExitEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForExitEmergencyCallbackMode(android.os.Handler);
  public abstract void registerForRilConnected(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRilConnected(android.os.Handler);
  public abstract void supplyIccPin(java.lang.String, android.os.Message);
  public abstract void supplyIccPinForApp(java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyIccPuk(java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyIccPukForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyIccPin2(java.lang.String, android.os.Message);
  public abstract void supplyIccPin2ForApp(java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyIccPuk2(java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyIccPuk2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void changeIccPin(java.lang.String, java.lang.String, android.os.Message);
  public abstract void changeIccPinForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void changeIccPin2(java.lang.String, java.lang.String, android.os.Message);
  public abstract void changeIccPin2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void changeBarringPassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void supplyNetworkDepersonalization(java.lang.String, android.os.Message);
  public abstract void getCurrentCalls(android.os.Message);
  public abstract void getPDPContextList(android.os.Message);
  public abstract void getDataCallList(android.os.Message);
  public abstract void dial(java.lang.String, int, android.os.Message);
  public abstract void dial(java.lang.String, int, com.android.internal.telephony.UUSInfo, android.os.Message);
  public abstract void getIMSI(android.os.Message);
  public abstract void getIMEI(android.os.Message);
  public abstract void getIMEISV(android.os.Message);
  public abstract void hangupConnection(int, android.os.Message);
  public abstract void hangupWaitingOrBackground(android.os.Message);
  public abstract void hangupForegroundResumeBackground(android.os.Message);
  public abstract void switchWaitingOrHoldingAndActive(android.os.Message);
  public abstract void conference(android.os.Message);
  public abstract void setPreferredVoicePrivacy(boolean, android.os.Message);
  public abstract void getPreferredVoicePrivacy(android.os.Message);
  public abstract void separateConnection(int, android.os.Message);
  public abstract void acceptCall(android.os.Message);
  public abstract void rejectCall(android.os.Message);
  public abstract void explicitCallTransfer(android.os.Message);
  public abstract void getLastCallFailCause(android.os.Message);
  public abstract void getLastPdpFailCause(android.os.Message);
  public abstract void getLastDataCallFailCause(android.os.Message);
  public abstract void setMute(boolean, android.os.Message);
  public abstract void getMute(android.os.Message);
  public abstract void getSignalStrength(android.os.Message);
  public abstract void getVoiceRegistrationState(android.os.Message);
  public abstract void getDataRegistrationState(android.os.Message);
  public abstract void getOperator(android.os.Message);
  public abstract void sendDtmf(char, android.os.Message);
  public abstract void startDtmf(char, android.os.Message);
  public abstract void stopDtmf(android.os.Message);
  public abstract void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public abstract void sendSMS(java.lang.String, java.lang.String, android.os.Message);
  public abstract void sendCdmaSms(byte[], android.os.Message);
  public abstract void deleteSmsOnSim(int, android.os.Message);
  public abstract void deleteSmsOnRuim(int, android.os.Message);
  public abstract void writeSmsToSim(int, java.lang.String, java.lang.String, android.os.Message);
  public abstract void writeSmsToRuim(int, java.lang.String, android.os.Message);
  public abstract void setRadioPower(boolean, android.os.Message);
  public abstract void acknowledgeLastIncomingGsmSms(boolean, int, android.os.Message);
  public abstract void acknowledgeLastIncomingCdmaSms(boolean, int, android.os.Message);
  public abstract void acknowledgeIncomingGsmSmsWithPdu(boolean, java.lang.String, android.os.Message);
  public abstract void iccIO(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, android.os.Message);
  public abstract void queryCLIP(android.os.Message);
  public abstract void getCLIR(android.os.Message);
  public abstract void setCLIR(int, android.os.Message);
  public abstract void queryCallWaiting(int, android.os.Message);
  public abstract void setCallWaiting(boolean, int, android.os.Message);
  public abstract void setCallForward(int, int, int, java.lang.String, int, android.os.Message);
  public abstract void queryCallForwardStatus(int, int, java.lang.String, android.os.Message);
  public abstract void setNetworkSelectionModeAutomatic(android.os.Message);
  public abstract void setNetworkSelectionModeManual(java.lang.String, android.os.Message);
  public abstract void getNetworkSelectionMode(android.os.Message);
  public abstract void getAvailableNetworks(android.os.Message);
  public abstract void getBasebandVersion(android.os.Message);
  public abstract void queryFacilityLock(java.lang.String, java.lang.String, int, android.os.Message);
  public abstract void queryFacilityLockForApp(java.lang.String, java.lang.String, int, java.lang.String, android.os.Message);
  public abstract void setFacilityLock(java.lang.String, boolean, java.lang.String, int, android.os.Message);
  public abstract void setFacilityLockForApp(java.lang.String, boolean, java.lang.String, int, java.lang.String, android.os.Message);
  public abstract void sendUSSD(java.lang.String, android.os.Message);
  public abstract void cancelPendingUssd(android.os.Message);
  public abstract void resetRadio(android.os.Message);
  public abstract void setBandMode(int, android.os.Message);
  public abstract void queryAvailableBandMode(android.os.Message);
  public abstract void setCurrentPreferredNetworkType();
  public abstract void setPreferredNetworkType(int, android.os.Message);
  public abstract void getPreferredNetworkType(android.os.Message);
  public abstract void getNeighboringCids(android.os.Message);
  public abstract void setLocationUpdates(boolean, android.os.Message);
  public abstract void getSmscAddress(android.os.Message);
  public abstract void setSmscAddress(java.lang.String, android.os.Message);
  public abstract void reportSmsMemoryStatus(boolean, android.os.Message);
  public abstract void reportStkServiceIsRunning(android.os.Message);
  public abstract void invokeOemRilRequestRaw(byte[], android.os.Message);
  public abstract void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public abstract void sendTerminalResponse(java.lang.String, android.os.Message);
  public abstract void sendEnvelope(java.lang.String, android.os.Message);
  public abstract void sendEnvelopeWithStatus(java.lang.String, android.os.Message);
  public abstract void handleCallSetupRequestFromSim(boolean, android.os.Message);
  public abstract void setGsmBroadcastActivation(boolean, android.os.Message);
  public abstract void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[], android.os.Message);
  public abstract void getGsmBroadcastConfig(android.os.Message);
  public abstract void getDeviceIdentity(android.os.Message);
  public abstract void getCDMASubscription(android.os.Message);
  public abstract void sendCDMAFeatureCode(java.lang.String, android.os.Message);
  public abstract void setPhoneType(int);
  public abstract void queryCdmaRoamingPreference(android.os.Message);
  public abstract void setCdmaRoamingPreference(int, android.os.Message);
  public abstract void setCdmaSubscriptionSource(int, android.os.Message);
  public abstract void getCdmaSubscriptionSource(android.os.Message);
  public abstract void setTTYMode(int, android.os.Message);
  public abstract void queryTTYMode(android.os.Message);
  public abstract void setupDataCall(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public abstract void deactivateDataCall(int, int, android.os.Message);
  public abstract void setCdmaBroadcastActivation(boolean, android.os.Message);
  public abstract void setCdmaBroadcastConfig(int[], android.os.Message);
  public abstract void getCdmaBroadcastConfig(android.os.Message);
  public abstract void exitEmergencyCallbackMode(android.os.Message);
  public abstract void getIccCardStatus(android.os.Message);
  public abstract int getLteOnCdmaMode();
  public abstract void requestIsimAuthentication(java.lang.String, android.os.Message);
public final class com.android.internal.telephony.Connection$DisconnectCause extends java.lang.Enum<com.android.internal.telephony.Connection$DisconnectCause> {
  public static com.android.internal.telephony.Connection$DisconnectCause[] values();
  public static com.android.internal.telephony.Connection$DisconnectCause valueOf(java.lang.String);
public final class com.android.internal.telephony.Connection$PostDialState extends java.lang.Enum<com.android.internal.telephony.Connection$PostDialState> {
  public static com.android.internal.telephony.Connection$PostDialState[] values();
  public static com.android.internal.telephony.Connection$PostDialState valueOf(java.lang.String);
public abstract class com.android.internal.telephony.Connection {
  public com.android.internal.telephony.Connection();
  public abstract java.lang.String getAddress();
  public java.lang.String getCnapName();
  public java.lang.String getOrigDialString();
  public int getCnapNamePresentation();
  public abstract com.android.internal.telephony.Call getCall();
  public abstract long getCreateTime();
  public abstract long getConnectTime();
  public abstract long getDisconnectTime();
  public abstract long getDurationMillis();
  public abstract long getHoldDurationMillis();
  public abstract com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
  public abstract boolean isIncoming();
  public com.android.internal.telephony.Call$State getState();
  public boolean isAlive();
  public boolean isRinging();
  public java.lang.Object getUserData();
  public void setUserData(java.lang.Object);
  public void clearUserData();
  public abstract com.android.internal.telephony.Connection$PostDialState getPostDialState();
  public abstract java.lang.String getRemainingPostDialString();
  public abstract void proceedAfterWaitChar();
  public abstract void proceedAfterWildChar(java.lang.String);
  public abstract void cancelPostDial();
  public abstract int getNumberPresentation();
  public abstract com.android.internal.telephony.UUSInfo getUUSInfo();
  public java.lang.String toString();
public final class com.android.internal.telephony.DataCallState$SetupResult extends java.lang.Enum<com.android.internal.telephony.DataCallState$SetupResult> {
  public static com.android.internal.telephony.DataCallState$SetupResult[] values();
  public static com.android.internal.telephony.DataCallState$SetupResult valueOf(java.lang.String);
  public java.lang.String toString();
public class com.android.internal.telephony.DataCallState {
  public com.android.internal.telephony.DataCallState();
  public java.lang.String toString();
  public com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties, boolean);
public class com.android.internal.telephony.DataConnection$CallSetupException extends java.lang.Exception {
  public int getRetryOverride();
public class com.android.internal.telephony.DataConnection$ConnectionParams {
  public com.android.internal.telephony.DataConnection$ConnectionParams(com.android.internal.telephony.ApnSetting, android.os.Message);
  public boolean processMessage(android.os.Message);
  public void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams, com.android.internal.telephony.DataConnection$FailCause);
  public void enter();
  public void exit();
  public boolean processMessage(android.os.Message);
  public void enter();
  public void exit();
  public boolean processMessage(android.os.Message);
  public boolean processMessage(android.os.Message);
  public boolean processMessage(android.os.Message);
  public void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams, com.android.internal.telephony.DataConnection$FailCause, int);
  public void setEnterNotificationParams(com.android.internal.telephony.DataConnection$DisconnectParams);
  public void enter();
  public void exit();
  public boolean processMessage(android.os.Message);
public class com.android.internal.telephony.DataConnection$DisconnectParams {
  public com.android.internal.telephony.DataConnection$DisconnectParams(java.lang.String, android.os.Message);
public final class com.android.internal.telephony.DataConnection$FailCause extends java.lang.Enum<com.android.internal.telephony.DataConnection$FailCause> {
  public static com.android.internal.telephony.DataConnection$FailCause[] values();
  public static com.android.internal.telephony.DataConnection$FailCause valueOf(java.lang.String);
  public boolean isPermanentFail();
  public boolean isEventLoggable();
  public static com.android.internal.telephony.DataConnection$FailCause fromInt(int);
public class com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult {
  public com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult(android.net.LinkProperties);
public abstract class com.android.internal.telephony.DataConnection extends com.android.internal.util.StateMachine {
  public abstract java.lang.String toString();
  public int getDataConnectionId();
  public int getRetryCount();
  public int getRetryTimer();
  public void increaseRetryCount();
  public boolean isRetryNeeded();
  public void resetRetryCount();
  public void retryForeverUsingLastTimeout();
  public boolean isRetryForever();
  public boolean configureRetry(int, int, int);
  public boolean configureRetry(java.lang.String);
  public void bringUp(android.os.Message, com.android.internal.telephony.ApnSetting);
  public void tearDown(java.lang.String, android.os.Message);
public final class com.android.internal.telephony.DataConnectionAc$LinkPropertyChangeAction extends java.lang.Enum<com.android.internal.telephony.DataConnectionAc$LinkPropertyChangeAction> {
  public static com.android.internal.telephony.DataConnectionAc$LinkPropertyChangeAction[] values();
  public static com.android.internal.telephony.DataConnectionAc$LinkPropertyChangeAction valueOf(java.lang.String);
  public static com.android.internal.telephony.DataConnectionAc$LinkPropertyChangeAction fromInt(int);
public class com.android.internal.telephony.DataConnectionAc extends com.android.internal.util.AsyncChannel {
  public com.android.internal.telephony.DataConnectionAc(com.android.internal.telephony.DataConnection, java.lang.String);
  public void reqIsInactive();
  public boolean rspIsInactive(android.os.Message);
  public boolean isInactiveSync();
  public void reqCid();
  public int rspCid(android.os.Message);
  public int getCidSync();
  public void reqRefCount();
  public int rspRefCount(android.os.Message);
  public int getRefCountSync();
  public void reqApnSetting();
  public com.android.internal.telephony.ApnSetting rspApnSetting(android.os.Message);
  public com.android.internal.telephony.ApnSetting getApnSettingSync();
  public void reqLinkProperties();
  public android.net.LinkProperties rspLinkProperties(android.os.Message);
  public android.net.LinkProperties getLinkPropertiesSync();
  public void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties);
  public void setLinkPropertiesHttpProxySync(android.net.ProxyProperties);
  public void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState);
  public com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult rspUpdateLinkPropertiesDataCallState(android.os.Message);
  public com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(com.android.internal.telephony.DataCallState);
  public void reqLinkCapabilities();
  public android.net.LinkCapabilities rspLinkCapabilities(android.os.Message);
  public android.net.LinkCapabilities getLinkCapabilitiesSync();
  public void reqReset();
  public void resetSync();
  public void reqAddApnContext(com.android.internal.telephony.ApnContext);
  public void addApnContextSync(com.android.internal.telephony.ApnContext);
  public void reqRemomveApnContext(com.android.internal.telephony.ApnContext);
  public void removeApnContextSync(com.android.internal.telephony.ApnContext);
  public void reqGetApnList(com.android.internal.telephony.ApnContext);
  public java.util.Collection<com.android.internal.telephony.ApnContext> rspApnList(android.os.Message);
  public java.util.Collection<com.android.internal.telephony.ApnContext> getApnListSync();
  public void reqSetReconnectIntent(android.app.PendingIntent);
  public void setReconnectIntentSync(android.app.PendingIntent);
  public void reqGetReconnectIntent();
  public android.app.PendingIntent rspReconnectIntent(android.os.Message);
  public android.app.PendingIntent getReconnectIntentSync();
  public void onReceive(android.content.Context, android.content.Intent);
public final class com.android.internal.telephony.DataConnectionTracker$Activity extends java.lang.Enum<com.android.internal.telephony.DataConnectionTracker$Activity> {
  public static com.android.internal.telephony.DataConnectionTracker$Activity[] values();
  public static com.android.internal.telephony.DataConnectionTracker$Activity valueOf(java.lang.String);
  public com.android.internal.telephony.DataConnectionTracker$DataRoamingSettingObserver(com.android.internal.telephony.DataConnectionTracker, android.os.Handler);
  public void register(android.content.Context);
  public void unregister(android.content.Context);
  public void onChange(boolean);
public final class com.android.internal.telephony.DataConnectionTracker$State extends java.lang.Enum<com.android.internal.telephony.DataConnectionTracker$State> {
  public static com.android.internal.telephony.DataConnectionTracker$State[] values();
  public static com.android.internal.telephony.DataConnectionTracker$State valueOf(java.lang.String);
public class com.android.internal.telephony.DataConnectionTracker$TxRxSum {
  public com.android.internal.telephony.DataConnectionTracker$TxRxSum(com.android.internal.telephony.DataConnectionTracker);
  public com.android.internal.telephony.DataConnectionTracker$TxRxSum(com.android.internal.telephony.DataConnectionTracker, long, long);
  public com.android.internal.telephony.DataConnectionTracker$TxRxSum(com.android.internal.telephony.DataConnectionTracker, com.android.internal.telephony.DataConnectionTracker$TxRxSum);
  public void reset();
  public java.lang.String toString();
  public void updateTxRxSum();
public abstract class com.android.internal.telephony.DataConnectionTracker extends android.os.Handler {
  public void dispose();
  public com.android.internal.telephony.DataConnectionTracker$Activity getActivity();
  public boolean isApnTypeActive(java.lang.String);
  public java.lang.String[] getActiveApnTypes();
  public java.lang.String getActiveApnString(java.lang.String);
  public void setDataOnRoamingEnabled(boolean);
  public boolean getDataOnRoamingEnabled();
  public abstract com.android.internal.telephony.DataConnectionTracker$State getState(java.lang.String);
  public void handleMessage(android.os.Message);
  public boolean getAnyDataEnabled();
  public boolean isApnTypeEnabled(java.lang.String);
  public synchronized int enableApnType(java.lang.String);
  public synchronized int disableApnType(java.lang.String);
  public boolean setInternalDataEnabled(boolean);
  public void cleanUpAllConnections(java.lang.String);
  public abstract boolean isDisconnected();
public class com.android.internal.telephony.DefaultPhoneNotifier implements com.android.internal.telephony.PhoneNotifier {
  public void notifyPhoneState(com.android.internal.telephony.Phone);
  public void notifyServiceState(com.android.internal.telephony.Phone);
  public void notifySignalStrength(com.android.internal.telephony.Phone);
  public void notifyMessageWaitingChanged(com.android.internal.telephony.Phone);
  public void notifyCallForwardingChanged(com.android.internal.telephony.Phone);
  public void notifyDataActivity(com.android.internal.telephony.Phone);
  public void notifyDataConnection(com.android.internal.telephony.Phone, java.lang.String, java.lang.String, com.android.internal.telephony.Phone$DataState);
  public void notifyDataConnectionFailed(com.android.internal.telephony.Phone, java.lang.String, java.lang.String);
  public void notifyCellLocation(com.android.internal.telephony.Phone);
  public void notifyOtaspChanged(com.android.internal.telephony.Phone, int);
  public static int convertCallState(com.android.internal.telephony.Phone$State);
  public static com.android.internal.telephony.Phone$State convertCallState(int);
  public static int convertDataState(com.android.internal.telephony.Phone$DataState);
  public static com.android.internal.telephony.Phone$DataState convertDataState(int);
  public static int convertDataActivityState(com.android.internal.telephony.Phone$DataActivityState);
  public static com.android.internal.telephony.Phone$DataActivityState convertDataActivityState(int);
public final class com.android.internal.telephony.DriverCall$State extends java.lang.Enum<com.android.internal.telephony.DriverCall$State> {
  public static com.android.internal.telephony.DriverCall$State[] values();
  public static com.android.internal.telephony.DriverCall$State valueOf(java.lang.String);
public class com.android.internal.telephony.DriverCall implements java.lang.Comparable {
  public com.android.internal.telephony.DriverCall();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public class com.android.internal.telephony.EncodeException extends java.lang.Exception {
  public com.android.internal.telephony.EncodeException();
  public com.android.internal.telephony.EncodeException(java.lang.String);
  public com.android.internal.telephony.EncodeException(char);
public class com.android.internal.telephony.GsmAlphabet {
  public static int charToGsm(char);
  public static int charToGsmExtended(char);
  public static char gsmToChar(int);
  public static char gsmExtendedToChar(int);
  public static java.lang.String gsm7BitPackedToString(byte[], int, int);
  public static java.lang.String gsm7BitPackedToString(byte[], int, int, int, int, int);
  public static java.lang.String gsm8BitUnpackedToString(byte[], int, int);
  public static java.lang.String gsm8BitUnpackedToString(byte[], int, int, java.lang.String);
  public static byte[] stringToGsm8BitPacked(java.lang.String);
  public static void stringToGsm8BitUnpackedField(java.lang.String, byte[], int, int);
  public static int countGsmSeptets(char);
  public static int countGsmSeptetsUsingTables(java.lang.CharSequence, boolean, int, int);
  public static com.android.internal.telephony.SmsMessageBase$TextEncodingDetails countGsmSeptets(java.lang.CharSequence, boolean);
  public static int findGsmSeptetLimitIndex(java.lang.String, int, int, int, int);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.IIccPhoneBook$Stub extends android.os.Binder implements com.android.internal.telephony.IIccPhoneBook {
  public com.android.internal.telephony.IIccPhoneBook$Stub();
  public static com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.IIccPhoneBook extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.IPhoneStateListener$Stub extends android.os.Binder implements com.android.internal.telephony.IPhoneStateListener {
  public com.android.internal.telephony.IPhoneStateListener$Stub();
  public static com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.IPhoneStateListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.IPhoneSubInfo$Stub extends android.os.Binder implements com.android.internal.telephony.IPhoneSubInfo {
  public com.android.internal.telephony.IPhoneSubInfo$Stub();
  public static com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.IPhoneSubInfo extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.ISms$Stub extends android.os.Binder implements com.android.internal.telephony.ISms {
  public com.android.internal.telephony.ISms$Stub();
  public static com.android.internal.telephony.ISms asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.ISms extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.ITelephony$Stub extends android.os.Binder implements com.android.internal.telephony.ITelephony {
  public com.android.internal.telephony.ITelephony$Stub();
  public static com.android.internal.telephony.ITelephony asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.ITelephony extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.ITelephonyRegistry$Stub extends android.os.Binder implements com.android.internal.telephony.ITelephonyRegistry {
  public com.android.internal.telephony.ITelephonyRegistry$Stub();
  public static com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.ITelephonyRegistry extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.telephony.IWapPushManager$Stub extends android.os.Binder implements com.android.internal.telephony.IWapPushManager {
  public com.android.internal.telephony.IWapPushManager$Stub();
  public static com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.telephony.IWapPushManager extends android.os.IInterface {
  public void onClick(android.content.DialogInterface, int);
  public void handleMessage(android.os.Message);
public final class com.android.internal.telephony.IccCard$State extends java.lang.Enum<com.android.internal.telephony.IccCard$State> {
  public static com.android.internal.telephony.IccCard$State[] values();
  public static com.android.internal.telephony.IccCard$State valueOf(java.lang.String);
  public boolean isPinLocked();
  public boolean iccCardExist();
public abstract class com.android.internal.telephony.IccCard {
  public com.android.internal.telephony.IccCard$State getState();
  public com.android.internal.telephony.IccCard(com.android.internal.telephony.PhoneBase, java.lang.String, java.lang.Boolean);
  public void dispose();
  public void registerForAbsent(android.os.Handler, int, java.lang.Object);
  public void unregisterForAbsent(android.os.Handler);
  public void registerForNetworkLocked(android.os.Handler, int, java.lang.Object);
  public void unregisterForNetworkLocked(android.os.Handler);
  public void registerForLocked(android.os.Handler, int, java.lang.Object);
  public void unregisterForLocked(android.os.Handler);
  public void supplyPin(java.lang.String, android.os.Message);
  public void supplyPuk(java.lang.String, java.lang.String, android.os.Message);
  public void supplyPin2(java.lang.String, android.os.Message);
  public void supplyPuk2(java.lang.String, java.lang.String, android.os.Message);
  public void supplyNetworkDepersonalization(java.lang.String, android.os.Message);
  public boolean getIccLockEnabled();
  public boolean getIccFdnEnabled();
  public void setIccLockEnabled(boolean, java.lang.String, android.os.Message);
  public void setIccFdnEnabled(boolean, java.lang.String, android.os.Message);
  public void changeIccLockPassword(java.lang.String, java.lang.String, android.os.Message);
  public void changeIccFdnPassword(java.lang.String, java.lang.String, android.os.Message);
  public abstract java.lang.String getServiceProviderName();
  public void broadcastIccStateChangedIntent(java.lang.String, java.lang.String);
  public com.android.internal.telephony.IccCard$State getIccCardState();
  public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplication$AppType);
  public boolean hasIccCard();
public final class com.android.internal.telephony.IccCardApplication$AppState extends java.lang.Enum<com.android.internal.telephony.IccCardApplication$AppState> {
  public static com.android.internal.telephony.IccCardApplication$AppState[] values();
  public static com.android.internal.telephony.IccCardApplication$AppState valueOf(java.lang.String);
public final class com.android.internal.telephony.IccCardApplication$AppType extends java.lang.Enum<com.android.internal.telephony.IccCardApplication$AppType> {
  public static com.android.internal.telephony.IccCardApplication$AppType[] values();
  public static com.android.internal.telephony.IccCardApplication$AppType valueOf(java.lang.String);
public final class com.android.internal.telephony.IccCardApplication$PersoSubState extends java.lang.Enum<com.android.internal.telephony.IccCardApplication$PersoSubState> {
  public static com.android.internal.telephony.IccCardApplication$PersoSubState[] values();
  public static com.android.internal.telephony.IccCardApplication$PersoSubState valueOf(java.lang.String);
public class com.android.internal.telephony.IccCardApplication {
  public com.android.internal.telephony.IccCardApplication();
  public java.lang.String toString();
public final class com.android.internal.telephony.IccCardStatus$CardState extends java.lang.Enum<com.android.internal.telephony.IccCardStatus$CardState> {
  public static com.android.internal.telephony.IccCardStatus$CardState[] values();
  public static com.android.internal.telephony.IccCardStatus$CardState valueOf(java.lang.String);
public final class com.android.internal.telephony.IccCardStatus$PinState extends java.lang.Enum<com.android.internal.telephony.IccCardStatus$PinState> {
  public static com.android.internal.telephony.IccCardStatus$PinState[] values();
  public static com.android.internal.telephony.IccCardStatus$PinState valueOf(java.lang.String);
public class com.android.internal.telephony.IccCardStatus {
  public com.android.internal.telephony.IccCardStatus();
  public com.android.internal.telephony.IccCardStatus$CardState getCardState();
  public void setCardState(int);
  public com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState();
  public void setUniversalPinState(int);
  public int getGsmUmtsSubscriptionAppIndex();
  public void setGsmUmtsSubscriptionAppIndex(int);
  public int getCdmaSubscriptionAppIndex();
  public void setCdmaSubscriptionAppIndex(int);
  public int getImsSubscriptionAppIndex();
  public void setImsSubscriptionAppIndex(int);
  public int getNumApplications();
  public void setNumApplications(int);
  public void addApplication(com.android.internal.telephony.IccCardApplication);
  public com.android.internal.telephony.IccCardApplication getApplication(int);
  public java.lang.String toString();
public interface com.android.internal.telephony.IccConstants {
public class com.android.internal.telephony.IccException extends java.lang.Exception {
  public com.android.internal.telephony.IccException();
  public com.android.internal.telephony.IccException(java.lang.String);
public abstract class com.android.internal.telephony.IccFileHandler extends android.os.Handler implements com.android.internal.telephony.IccConstants {
  public void dispose();
  public void loadEFLinearFixed(int, int, android.os.Message);
  public void loadEFImgLinearFixed(int, android.os.Message);
  public void getEFLinearRecordSize(int, android.os.Message);
  public void loadEFLinearFixedAll(int, android.os.Message);
  public void loadEFTransparent(int, android.os.Message);
  public void loadEFImgTransparent(int, int, int, int, android.os.Message);
  public void updateEFLinearFixed(int, int, byte[], java.lang.String, android.os.Message);
  public void updateEFTransparent(int, byte[], android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.IccFileNotFound extends com.android.internal.telephony.IccException {
public class com.android.internal.telephony.IccFileTypeMismatch extends com.android.internal.telephony.IccException {
  public com.android.internal.telephony.IccFileTypeMismatch();
  public com.android.internal.telephony.IccFileTypeMismatch(java.lang.String);
public class com.android.internal.telephony.IccIoResult {
  public com.android.internal.telephony.IccIoResult(int, int, byte[]);
  public com.android.internal.telephony.IccIoResult(int, int, java.lang.String);
  public java.lang.String toString();
  public boolean success();
  public com.android.internal.telephony.IccException getException();
  public void handleMessage(android.os.Message);
public abstract class com.android.internal.telephony.IccPhoneBookInterfaceManager extends com.android.internal.telephony.IIccPhoneBook$Stub {
  public com.android.internal.telephony.IccPhoneBookInterfaceManager(com.android.internal.telephony.PhoneBase);
  public void dispose();
  public boolean updateAdnRecordsInEfBySearch(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public boolean updateAdnRecordsInEfByIndex(int, java.lang.String, java.lang.String, int, java.lang.String);
  public abstract int[] getAdnRecordsSize(int);
  public java.util.List<com.android.internal.telephony.AdnRecord> getAdnRecordsInEf(int);
public class com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy extends com.android.internal.telephony.IIccPhoneBook$Stub {
  public com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy(com.android.internal.telephony.IccPhoneBookInterfaceManager);
  public void setmIccPhoneBookInterfaceManager(com.android.internal.telephony.IccPhoneBookInterfaceManager);
public interface com.android.internal.telephony.IccRecords$IccRecordLoaded {
  public abstract java.lang.String getEfName();
  public abstract void onRecordLoaded(android.os.AsyncResult);
public abstract class com.android.internal.telephony.IccRecords extends android.os.Handler implements com.android.internal.telephony.IccConstants {
  public com.android.internal.telephony.IccRecords(com.android.internal.telephony.PhoneBase);
  public abstract void dispose();
  public com.android.internal.telephony.AdnRecordCache getAdnCache();
  public void registerForRecordsLoaded(android.os.Handler, int, java.lang.Object);
  public void unregisterForRecordsLoaded(android.os.Handler);
  public java.lang.String getIMSI();
  public java.lang.String getMsisdnNumber();
  public void setMsisdnNumber(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getMsisdnAlphaTag();
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getServiceProviderName();
  public abstract void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getVoiceMailAlphaTag();
  public abstract void setVoiceMessageWaiting(int, int);
  public boolean getVoiceMessageWaiting();
  public int getVoiceMessageCount();
  public abstract void onRefresh(boolean, int[]);
  public boolean getRecordsLoaded();
  public void handleMessage(android.os.Message);
  public abstract int getDisplayRule(java.lang.String);
  public boolean isCspPlmnEnabled();
  public java.lang.String getOperatorNumeric();
  public boolean getVoiceCallForwardingFlag();
  public void setVoiceCallForwardingFlag(int, boolean);
  public boolean isProvisioned();
  public com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
public abstract class com.android.internal.telephony.IccServiceTable {
  public java.lang.String toString();
public abstract class com.android.internal.telephony.IccSmsInterfaceManager extends com.android.internal.telephony.ISms$Stub {
  public void sendData(java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent);
  public void sendText(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent);
  public void sendMultipartText(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.util.List<android.app.PendingIntent>, java.util.List<android.app.PendingIntent>);
public class com.android.internal.telephony.IccSmsInterfaceManagerProxy extends com.android.internal.telephony.ISms$Stub {
  public com.android.internal.telephony.IccSmsInterfaceManagerProxy(com.android.internal.telephony.IccSmsInterfaceManager);
  public void setmIccSmsInterfaceManager(com.android.internal.telephony.IccSmsInterfaceManager);
  public void sendData(java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent);
  public void sendText(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent);
public class com.android.internal.telephony.IccUtils {
  public com.android.internal.telephony.IccUtils();
  public static java.lang.String bcdToString(byte[], int, int);
  public static java.lang.String cdmaBcdToString(byte[], int, int);
  public static int gsmBcdByteToInt(byte);
  public static int cdmaBcdByteToInt(byte);
  public static java.lang.String adnStringFieldToString(byte[], int, int);
  public static byte[] hexStringToBytes(java.lang.String);
  public static java.lang.String bytesToHexString(byte[]);
  public static java.lang.String networkNameToString(byte[], int, int);
  public static android.graphics.Bitmap parseToBnW(byte[], int);
  public static android.graphics.Bitmap parseToRGB(byte[], int, boolean);
public final class com.android.internal.telephony.IccVmFixedException extends com.android.internal.telephony.IccException {
  public com.android.internal.telephony.IccVmFixedException(java.lang.String);
public final class com.android.internal.telephony.IccVmNotSupportedException extends com.android.internal.telephony.IccException {
  public com.android.internal.telephony.IccVmNotSupportedException(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
public abstract class com.android.internal.telephony.IntRangeManager {
  public synchronized boolean enableRange(int, int, java.lang.String);
  public synchronized boolean disableRange(int, int, java.lang.String);
  public boolean updateRanges();
  public boolean isEmpty();
  public int compareTo(com.android.internal.telephony.MccTable$MccEntry);
  public int compareTo(java.lang.Object);
public final class com.android.internal.telephony.MccTable {
  public com.android.internal.telephony.MccTable();
  public static java.lang.String defaultTimeZoneForMcc(int);
  public static java.lang.String countryCodeForMcc(int);
  public static java.lang.String defaultLanguageForMcc(int);
  public static int smallestDigitsMccForMnc(int);
  public static void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase, java.lang.String);
public final class com.android.internal.telephony.MmiCode$State extends java.lang.Enum<com.android.internal.telephony.MmiCode$State> {
  public static com.android.internal.telephony.MmiCode$State[] values();
  public static com.android.internal.telephony.MmiCode$State valueOf(java.lang.String);
public interface com.android.internal.telephony.MmiCode {
  public abstract com.android.internal.telephony.MmiCode$State getState();
  public abstract java.lang.CharSequence getMessage();
  public abstract void cancel();
  public abstract boolean isUssdRequest();
  public abstract boolean isCancelable();
  public com.android.internal.telephony.OperatorInfo createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.OperatorInfo[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class com.android.internal.telephony.OperatorInfo$State extends java.lang.Enum<com.android.internal.telephony.OperatorInfo$State> {
  public static com.android.internal.telephony.OperatorInfo$State[] values();
  public static com.android.internal.telephony.OperatorInfo$State valueOf(java.lang.String);
public class com.android.internal.telephony.OperatorInfo implements android.os.Parcelable {
  public java.lang.String getOperatorAlphaLong();
  public java.lang.String getOperatorAlphaShort();
  public java.lang.String getOperatorNumeric();
  public com.android.internal.telephony.OperatorInfo$State getState();
  public com.android.internal.telephony.OperatorInfo(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toString();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class com.android.internal.telephony.Phone$DataActivityState extends java.lang.Enum<com.android.internal.telephony.Phone$DataActivityState> {
  public static com.android.internal.telephony.Phone$DataActivityState[] values();
  public static com.android.internal.telephony.Phone$DataActivityState valueOf(java.lang.String);
public final class com.android.internal.telephony.Phone$DataState extends java.lang.Enum<com.android.internal.telephony.Phone$DataState> {
  public static com.android.internal.telephony.Phone$DataState[] values();
  public static com.android.internal.telephony.Phone$DataState valueOf(java.lang.String);
public final class com.android.internal.telephony.Phone$State extends java.lang.Enum<com.android.internal.telephony.Phone$State> {
  public static com.android.internal.telephony.Phone$State[] values();
  public static com.android.internal.telephony.Phone$State valueOf(java.lang.String);
public final class com.android.internal.telephony.Phone$SuppService extends java.lang.Enum<com.android.internal.telephony.Phone$SuppService> {
  public static com.android.internal.telephony.Phone$SuppService[] values();
  public static com.android.internal.telephony.Phone$SuppService valueOf(java.lang.String);
public interface com.android.internal.telephony.Phone {
  public abstract android.telephony.ServiceState getServiceState();
  public abstract android.telephony.CellLocation getCellLocation();
  public abstract com.android.internal.telephony.Phone$DataState getDataConnectionState();
  public abstract com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public abstract com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public abstract android.content.Context getContext();
  public abstract void disableDnsCheck(boolean);
  public abstract boolean isDnsCheckDisabled();
  public abstract com.android.internal.telephony.Phone$State getState();
  public abstract java.lang.String getPhoneName();
  public abstract int getPhoneType();
  public abstract java.lang.String[] getActiveApnTypes();
  public abstract java.lang.String getActiveApnHost(java.lang.String);
  public abstract android.net.LinkProperties getLinkProperties(java.lang.String);
  public abstract android.net.LinkCapabilities getLinkCapabilities(java.lang.String);
  public abstract android.telephony.SignalStrength getSignalStrength();
  public abstract void registerForUnknownConnection(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForUnknownConnection(android.os.Handler);
  public abstract void registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForPreciseCallStateChanged(android.os.Handler);
  public abstract void registerForNewRingingConnection(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForNewRingingConnection(android.os.Handler);
  public abstract void registerForIncomingRing(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForIncomingRing(android.os.Handler);
  public abstract void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRingbackTone(android.os.Handler);
  public abstract void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForResendIncallMute(android.os.Handler);
  public abstract void registerForDisconnect(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForDisconnect(android.os.Handler);
  public abstract void registerForMmiInitiate(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForMmiInitiate(android.os.Handler);
  public abstract void registerForMmiComplete(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForMmiComplete(android.os.Handler);
  public abstract void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForEcmTimerReset(android.os.Handler);
  public abstract java.util.List<? extends com.android.internal.telephony.MmiCode> getPendingMmiCodes();
  public abstract void sendUssdResponse(java.lang.String);
  public abstract void registerForServiceStateChanged(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForServiceStateChanged(android.os.Handler);
  public abstract void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSuppServiceNotification(android.os.Handler);
  public abstract void registerForSuppServiceFailed(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSuppServiceFailed(android.os.Handler);
  public abstract void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForInCallVoicePrivacyOn(android.os.Handler);
  public abstract void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForInCallVoicePrivacyOff(android.os.Handler);
  public abstract void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCdmaOtaStatusChange(android.os.Handler);
  public abstract void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSubscriptionInfoReady(android.os.Handler);
  public abstract boolean getIccRecordsLoaded();
  public abstract com.android.internal.telephony.IccCard getIccCard();
  public abstract boolean canConference();
  public abstract void enableEnhancedVoicePrivacy(boolean, android.os.Message);
  public abstract void getEnhancedVoicePrivacy(android.os.Message);
  public abstract boolean canTransfer();
  public abstract void clearDisconnected();
  public abstract com.android.internal.telephony.Call getForegroundCall();
  public abstract com.android.internal.telephony.Call getBackgroundCall();
  public abstract com.android.internal.telephony.Call getRingingCall();
  public abstract boolean handlePinMmi(java.lang.String);
  public abstract void sendDtmf(char);
  public abstract void startDtmf(char);
  public abstract void stopDtmf();
  public abstract void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public abstract void setRadioPower(boolean);
  public abstract boolean getMessageWaitingIndicator();
  public abstract boolean getCallForwardingIndicator();
  public abstract java.lang.String getLine1Number();
  public abstract java.lang.String getLine1AlphaTag();
  public abstract void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public abstract java.lang.String getVoiceMailNumber();
  public abstract int getVoiceMessageCount();
  public abstract java.lang.String getVoiceMailAlphaTag();
  public abstract void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public abstract void getCallForwardingOption(int, android.os.Message);
  public abstract void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public abstract void getOutgoingCallerIdDisplay(android.os.Message);
  public abstract void setOutgoingCallerIdDisplay(int, android.os.Message);
  public abstract void getCallWaiting(android.os.Message);
  public abstract void setCallWaiting(boolean, android.os.Message);
  public abstract void getAvailableNetworks(android.os.Message);
  public abstract void setNetworkSelectionModeAutomatic(android.os.Message);
  public abstract void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public abstract void setPreferredNetworkType(int, android.os.Message);
  public abstract void getPreferredNetworkType(android.os.Message);
  public abstract void getSmscAddress(android.os.Message);
  public abstract void setSmscAddress(java.lang.String, android.os.Message);
  public abstract void getNeighboringCids(android.os.Message);
  public abstract void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public abstract void setMute(boolean);
  public abstract boolean getMute();
  public abstract void setEchoSuppressionEnabled(boolean);
  public abstract void invokeOemRilRequestRaw(byte[], android.os.Message);
  public abstract void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public abstract void getDataCallList(android.os.Message);
  public abstract void updateServiceLocation();
  public abstract void enableLocationUpdates();
  public abstract void disableLocationUpdates();
  public abstract void setUnitTestMode(boolean);
  public abstract boolean getUnitTestMode();
  public abstract void setBandMode(int, android.os.Message);
  public abstract void queryAvailableBandMode(android.os.Message);
  public abstract boolean getDataRoamingEnabled();
  public abstract void setDataRoamingEnabled(boolean);
  public abstract void queryCdmaRoamingPreference(android.os.Message);
  public abstract void setCdmaRoamingPreference(int, android.os.Message);
  public abstract void setCdmaSubscription(int, android.os.Message);
  public abstract com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl();
  public abstract int enableApnType(java.lang.String);
  public abstract int disableApnType(java.lang.String);
  public abstract boolean isDataConnectivityPossible();
  public abstract boolean isDataConnectivityPossible(java.lang.String);
  public abstract java.lang.String getDeviceId();
  public abstract java.lang.String getDeviceSvn();
  public abstract java.lang.String getSubscriberId();
  public abstract java.lang.String getIccSerialNumber();
  public abstract java.lang.String getCdmaMin();
  public abstract boolean isMinInfoReady();
  public abstract java.lang.String getCdmaPrlVersion();
  public abstract java.lang.String getEsn();
  public abstract java.lang.String getMeid();
  public abstract java.lang.String getMsisdn();
  public abstract java.lang.String getImei();
  public abstract com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public abstract com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public abstract com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public abstract void setTTYMode(int, android.os.Message);
  public abstract void queryTTYMode(android.os.Message);
  public abstract void activateCellBroadcastSms(int, android.os.Message);
  public abstract void getCellBroadcastSmsConfig(android.os.Message);
  public abstract void setCellBroadcastSmsConfig(int[], android.os.Message);
  public abstract void notifyDataActivity();
  public abstract int getCdmaEriIconIndex();
  public abstract int getCdmaEriIconMode();
  public abstract java.lang.String getCdmaEriText();
  public abstract void exitEmergencyCallbackMode();
  public abstract boolean isOtaSpNumber(java.lang.String);
  public abstract boolean needsOtaServiceProvisioning();
  public abstract void registerForCallWaiting(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForCallWaiting(android.os.Handler);
  public abstract void registerForSignalInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForSignalInfo(android.os.Handler);
  public abstract void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForDisplayInfo(android.os.Handler);
  public abstract void registerForNumberInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForNumberInfo(android.os.Handler);
  public abstract void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForRedirectedNumberInfo(android.os.Handler);
  public abstract void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForLineControlInfo(android.os.Handler);
  public abstract void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForT53ClirInfo(android.os.Handler);
  public abstract void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);
  public abstract void unregisterForT53AudioControlInfo(android.os.Handler);
  public abstract void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object);
  public abstract void unsetOnEcbModeExitResponse(android.os.Handler);
  public abstract int getLteOnCdmaMode();
  public abstract boolean isCspPlmnEnabled();
  public abstract com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public abstract void requestIsimAuthentication(java.lang.String, android.os.Message);
  public abstract void setVoiceMessageWaiting(int, int);
  public abstract com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
public abstract class com.android.internal.telephony.PhoneBase extends android.os.Handler implements com.android.internal.telephony.Phone {
  public void setSystemProperty(java.lang.String, java.lang.String);
  public void dispose();
  public void removeReferences();
  public void handleMessage(android.os.Message);
  public android.content.Context getContext();
  public void disableDnsCheck(boolean);
  public boolean isDnsCheckDisabled();
  public void registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForPreciseCallStateChanged(android.os.Handler);
  public void registerForUnknownConnection(android.os.Handler, int, java.lang.Object);
  public void unregisterForUnknownConnection(android.os.Handler);
  public void registerForNewRingingConnection(android.os.Handler, int, java.lang.Object);
  public void unregisterForNewRingingConnection(android.os.Handler);
  public void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOn(android.os.Handler);
  public void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOff(android.os.Handler);
  public void registerForIncomingRing(android.os.Handler, int, java.lang.Object);
  public void unregisterForIncomingRing(android.os.Handler);
  public void registerForDisconnect(android.os.Handler, int, java.lang.Object);
  public void unregisterForDisconnect(android.os.Handler);
  public void registerForSuppServiceFailed(android.os.Handler, int, java.lang.Object);
  public void unregisterForSuppServiceFailed(android.os.Handler);
  public void registerForMmiInitiate(android.os.Handler, int, java.lang.Object);
  public void unregisterForMmiInitiate(android.os.Handler);
  public void registerForMmiComplete(android.os.Handler, int, java.lang.Object);
  public void unregisterForMmiComplete(android.os.Handler);
  public void restoreSavedNetworkSelection(android.os.Message);
  public void setUnitTestMode(boolean);
  public boolean getUnitTestMode();
  public void registerForServiceStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForServiceStateChanged(android.os.Handler);
  public void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public void unregisterForRingbackTone(android.os.Handler);
  public void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);
  public void unregisterForResendIncallMute(android.os.Handler);
  public void setEchoSuppressionEnabled(boolean);
  public com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl();
  public void setSystemLocale(java.lang.String, java.lang.String, boolean);
  public abstract com.android.internal.telephony.Phone$State getState();
  public abstract com.android.internal.telephony.IccFileHandler getIccFileHandler();
  public android.os.Handler getHandler();
  public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
  public com.android.internal.telephony.CallTracker getCallTracker();
  public com.android.internal.telephony.IccCard getIccCard();
  public java.lang.String getIccSerialNumber();
  public boolean getIccRecordsLoaded();
  public boolean getMessageWaitingIndicator();
  public boolean getCallForwardingIndicator();
  public void queryCdmaRoamingPreference(android.os.Message);
  public void setCdmaRoamingPreference(int, android.os.Message);
  public void setCdmaSubscription(int, android.os.Message);
  public void setPreferredNetworkType(int, android.os.Message);
  public void getPreferredNetworkType(android.os.Message);
  public void getSmscAddress(android.os.Message);
  public void setSmscAddress(java.lang.String, android.os.Message);
  public void setTTYMode(int, android.os.Message);
  public void queryTTYMode(android.os.Message);
  public void enableEnhancedVoicePrivacy(boolean, android.os.Message);
  public void getEnhancedVoicePrivacy(android.os.Message);
  public void setBandMode(int, android.os.Message);
  public void queryAvailableBandMode(android.os.Message);
  public void invokeOemRilRequestRaw(byte[], android.os.Message);
  public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public void notifyDataActivity();
  public void notifyMessageWaitingIndicator();
  public void notifyDataConnection(java.lang.String, java.lang.String, com.android.internal.telephony.Phone$DataState);
  public void notifyDataConnection(java.lang.String, java.lang.String);
  public void notifyDataConnection(java.lang.String);
  public void notifyOtaspChanged(int);
  public boolean isInEmergencyCall();
  public boolean isInEcm();
  public abstract java.lang.String getPhoneName();
  public abstract int getPhoneType();
  public int getVoiceMessageCount();
  public int getCdmaEriIconIndex();
  public int getCdmaEriIconMode();
  public java.lang.String getCdmaEriText();
  public java.lang.String getCdmaMin();
  public boolean isMinInfoReady();
  public java.lang.String getCdmaPrlVersion();
  public void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public void exitEmergencyCallbackMode();
  public void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaOtaStatusChange(android.os.Handler);
  public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForSubscriptionInfoReady(android.os.Handler);
  public boolean needsOtaServiceProvisioning();
  public boolean isOtaSpNumber(java.lang.String);
  public void registerForCallWaiting(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallWaiting(android.os.Handler);
  public void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object);
  public void unregisterForEcmTimerReset(android.os.Handler);
  public void registerForSignalInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForSignalInfo(android.os.Handler);
  public void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForDisplayInfo(android.os.Handler);
  public void registerForNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForNumberInfo(android.os.Handler);
  public void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForRedirectedNumberInfo(android.os.Handler);
  public void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForLineControlInfo(android.os.Handler);
  public void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53ClirInfo(android.os.Handler);
  public void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53AudioControlInfo(android.os.Handler);
  public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object);
  public void unsetOnEcbModeExitResponse(android.os.Handler);
  public java.lang.String[] getActiveApnTypes();
  public java.lang.String getActiveApnHost(java.lang.String);
  public android.net.LinkProperties getLinkProperties(java.lang.String);
  public android.net.LinkCapabilities getLinkCapabilities(java.lang.String);
  public int enableApnType(java.lang.String);
  public int disableApnType(java.lang.String);
  public boolean isDataConnectivityPossible();
  public boolean isDataConnectivityPossible(java.lang.String);
  public boolean isCspPlmnEnabled();
  public com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public void requestIsimAuthentication(java.lang.String, android.os.Message);
  public java.lang.String getMsisdn();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState();
  public void notifyCallForwardingIndicator();
  public void notifyDataConnectionFailed(java.lang.String, java.lang.String);
  public int getLteOnCdmaMode();
  public void setVoiceMessageWaiting(int, int);
  public com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
public class com.android.internal.telephony.PhoneFactory {
  public com.android.internal.telephony.PhoneFactory();
  public static void makeDefaultPhones(android.content.Context);
  public static void makeDefaultPhone(android.content.Context);
  public static int getPhoneType(int);
  public static com.android.internal.telephony.Phone getDefaultPhone();
  public static com.android.internal.telephony.Phone getCdmaPhone();
  public static com.android.internal.telephony.Phone getGsmPhone();
  public static com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String);
public interface com.android.internal.telephony.PhoneNotifier {
  public abstract void notifyPhoneState(com.android.internal.telephony.Phone);
  public abstract void notifyServiceState(com.android.internal.telephony.Phone);
  public abstract void notifyCellLocation(com.android.internal.telephony.Phone);
  public abstract void notifySignalStrength(com.android.internal.telephony.Phone);
  public abstract void notifyMessageWaitingChanged(com.android.internal.telephony.Phone);
  public abstract void notifyCallForwardingChanged(com.android.internal.telephony.Phone);
  public abstract void notifyDataConnection(com.android.internal.telephony.Phone, java.lang.String, java.lang.String, com.android.internal.telephony.Phone$DataState);
  public abstract void notifyDataConnectionFailed(com.android.internal.telephony.Phone, java.lang.String, java.lang.String);
  public abstract void notifyDataActivity(com.android.internal.telephony.Phone);
  public abstract void notifyOtaspChanged(com.android.internal.telephony.Phone, int);
public class com.android.internal.telephony.PhoneProxy extends android.os.Handler implements com.android.internal.telephony.Phone {
  public com.android.internal.telephony.PhoneProxy(com.android.internal.telephony.Phone);
  public void handleMessage(android.os.Message);
  public android.telephony.ServiceState getServiceState();
  public android.telephony.CellLocation getCellLocation();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public android.content.Context getContext();
  public void disableDnsCheck(boolean);
  public boolean isDnsCheckDisabled();
  public com.android.internal.telephony.Phone$State getState();
  public java.lang.String getPhoneName();
  public int getPhoneType();
  public java.lang.String[] getActiveApnTypes();
  public java.lang.String getActiveApnHost(java.lang.String);
  public android.net.LinkProperties getLinkProperties(java.lang.String);
  public android.net.LinkCapabilities getLinkCapabilities(java.lang.String);
  public android.telephony.SignalStrength getSignalStrength();
  public void registerForUnknownConnection(android.os.Handler, int, java.lang.Object);
  public void unregisterForUnknownConnection(android.os.Handler);
  public void registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForPreciseCallStateChanged(android.os.Handler);
  public void registerForNewRingingConnection(android.os.Handler, int, java.lang.Object);
  public void unregisterForNewRingingConnection(android.os.Handler);
  public void registerForIncomingRing(android.os.Handler, int, java.lang.Object);
  public void unregisterForIncomingRing(android.os.Handler);
  public void registerForDisconnect(android.os.Handler, int, java.lang.Object);
  public void unregisterForDisconnect(android.os.Handler);
  public void registerForMmiInitiate(android.os.Handler, int, java.lang.Object);
  public void unregisterForMmiInitiate(android.os.Handler);
  public void registerForMmiComplete(android.os.Handler, int, java.lang.Object);
  public void unregisterForMmiComplete(android.os.Handler);
  public java.util.List<? extends com.android.internal.telephony.MmiCode> getPendingMmiCodes();
  public void sendUssdResponse(java.lang.String);
  public void registerForServiceStateChanged(android.os.Handler, int, java.lang.Object);
  public void unregisterForServiceStateChanged(android.os.Handler);
  public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public void unregisterForSuppServiceNotification(android.os.Handler);
  public void registerForSuppServiceFailed(android.os.Handler, int, java.lang.Object);
  public void unregisterForSuppServiceFailed(android.os.Handler);
  public void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOn(android.os.Handler);
  public void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);
  public void unregisterForInCallVoicePrivacyOff(android.os.Handler);
  public void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaOtaStatusChange(android.os.Handler);
  public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForSubscriptionInfoReady(android.os.Handler);
  public void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object);
  public void unregisterForEcmTimerReset(android.os.Handler);
  public void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public void unregisterForRingbackTone(android.os.Handler);
  public void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);
  public void unregisterForResendIncallMute(android.os.Handler);
  public boolean getIccRecordsLoaded();
  public com.android.internal.telephony.IccCard getIccCard();
  public boolean canConference();
  public void enableEnhancedVoicePrivacy(boolean, android.os.Message);
  public void getEnhancedVoicePrivacy(android.os.Message);
  public boolean canTransfer();
  public void clearDisconnected();
  public com.android.internal.telephony.Call getForegroundCall();
  public com.android.internal.telephony.Call getBackgroundCall();
  public com.android.internal.telephony.Call getRingingCall();
  public boolean handlePinMmi(java.lang.String);
  public void sendDtmf(char);
  public void startDtmf(char);
  public void stopDtmf();
  public void setRadioPower(boolean);
  public boolean getMessageWaitingIndicator();
  public boolean getCallForwardingIndicator();
  public java.lang.String getLine1Number();
  public java.lang.String getCdmaMin();
  public boolean isMinInfoReady();
  public java.lang.String getCdmaPrlVersion();
  public java.lang.String getLine1AlphaTag();
  public void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getVoiceMailNumber();
  public int getVoiceMessageCount();
  public java.lang.String getVoiceMailAlphaTag();
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public void getCallForwardingOption(int, android.os.Message);
  public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public void getOutgoingCallerIdDisplay(android.os.Message);
  public void setOutgoingCallerIdDisplay(int, android.os.Message);
  public void getCallWaiting(android.os.Message);
  public void setCallWaiting(boolean, android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public void setPreferredNetworkType(int, android.os.Message);
  public void getPreferredNetworkType(android.os.Message);
  public void getNeighboringCids(android.os.Message);
  public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public void setMute(boolean);
  public boolean getMute();
  public void setEchoSuppressionEnabled(boolean);
  public void invokeOemRilRequestRaw(byte[], android.os.Message);
  public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public void getDataCallList(android.os.Message);
  public void updateServiceLocation();
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public void setUnitTestMode(boolean);
  public boolean getUnitTestMode();
  public void setBandMode(int, android.os.Message);
  public void queryAvailableBandMode(android.os.Message);
  public boolean getDataRoamingEnabled();
  public void setDataRoamingEnabled(boolean);
  public void queryCdmaRoamingPreference(android.os.Message);
  public void setCdmaRoamingPreference(int, android.os.Message);
  public void setCdmaSubscription(int, android.os.Message);
  public com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl();
  public int enableApnType(java.lang.String);
  public int disableApnType(java.lang.String);
  public boolean isDataConnectivityPossible();
  public boolean isDataConnectivityPossible(java.lang.String);
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getSubscriberId();
  public java.lang.String getIccSerialNumber();
  public java.lang.String getEsn();
  public java.lang.String getMeid();
  public java.lang.String getMsisdn();
  public java.lang.String getImei();
  public com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public void setTTYMode(int, android.os.Message);
  public void queryTTYMode(android.os.Message);
  public void activateCellBroadcastSms(int, android.os.Message);
  public void getCellBroadcastSmsConfig(android.os.Message);
  public void setCellBroadcastSmsConfig(int[], android.os.Message);
  public void notifyDataActivity();
  public void getSmscAddress(android.os.Message);
  public void setSmscAddress(java.lang.String, android.os.Message);
  public int getCdmaEriIconIndex();
  public java.lang.String getCdmaEriText();
  public int getCdmaEriIconMode();
  public com.android.internal.telephony.Phone getActivePhone();
  public void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public void exitEmergencyCallbackMode();
  public boolean needsOtaServiceProvisioning();
  public boolean isOtaSpNumber(java.lang.String);
  public void registerForCallWaiting(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallWaiting(android.os.Handler);
  public void registerForSignalInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForSignalInfo(android.os.Handler);
  public void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForDisplayInfo(android.os.Handler);
  public void registerForNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForNumberInfo(android.os.Handler);
  public void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForRedirectedNumberInfo(android.os.Handler);
  public void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForLineControlInfo(android.os.Handler);
  public void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53ClirInfo(android.os.Handler);
  public void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);
  public void unregisterForT53AudioControlInfo(android.os.Handler);
  public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object);
  public void unsetOnEcbModeExitResponse(android.os.Handler);
  public boolean isCspPlmnEnabled();
  public com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public void requestIsimAuthentication(java.lang.String, android.os.Message);
  public int getLteOnCdmaMode();
  public void setVoiceMessageWaiting(int, int);
  public com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
public class com.android.internal.telephony.PhoneSubInfo extends com.android.internal.telephony.IPhoneSubInfo$Stub {
  public com.android.internal.telephony.PhoneSubInfo(com.android.internal.telephony.Phone);
  public void dispose();
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getSubscriberId();
  public java.lang.String getIccSerialNumber();
  public java.lang.String getLine1Number();
  public java.lang.String getLine1AlphaTag();
  public java.lang.String getMsisdn();
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getCompleteVoiceMailNumber();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getIsimImpi();
  public java.lang.String getIsimDomain();
  public java.lang.String[] getIsimImpu();
public class com.android.internal.telephony.PhoneSubInfoProxy extends com.android.internal.telephony.IPhoneSubInfo$Stub {
  public com.android.internal.telephony.PhoneSubInfoProxy(com.android.internal.telephony.PhoneSubInfo);
  public void setmPhoneSubInfo(com.android.internal.telephony.PhoneSubInfo);
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getSubscriberId();
  public java.lang.String getIccSerialNumber();
  public java.lang.String getLine1Number();
  public java.lang.String getLine1AlphaTag();
  public java.lang.String getMsisdn();
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getCompleteVoiceMailNumber();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getIsimImpi();
  public java.lang.String getIsimDomain();
  public java.lang.String[] getIsimImpu();
  public void onReceive(android.content.Context, android.content.Intent);
  public void run();
  public com.android.internal.telephony.RIL$RILSender(com.android.internal.telephony.RIL, android.os.Looper);
  public void run();
  public void handleMessage(android.os.Message);
public final class com.android.internal.telephony.RIL extends com.android.internal.telephony.BaseCommands implements com.android.internal.telephony.CommandsInterface {
  public com.android.internal.telephony.RIL(android.content.Context, int, int);
  public void setOnNITZTime(android.os.Handler, int, java.lang.Object);
  public void getIccCardStatus(android.os.Message);
  public void supplyIccPin(java.lang.String, android.os.Message);
  public void supplyIccPinForApp(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPuk(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPukForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPin2(java.lang.String, android.os.Message);
  public void supplyIccPin2ForApp(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPuk2(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPuk2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin(java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPinForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin2(java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void changeBarringPassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void supplyNetworkDepersonalization(java.lang.String, android.os.Message);
  public void getCurrentCalls(android.os.Message);
  public void getPDPContextList(android.os.Message);
  public void getDataCallList(android.os.Message);
  public void dial(java.lang.String, int, android.os.Message);
  public void dial(java.lang.String, int, com.android.internal.telephony.UUSInfo, android.os.Message);
  public void getIMSI(android.os.Message);
  public void getIMEI(android.os.Message);
  public void getIMEISV(android.os.Message);
  public void hangupConnection(int, android.os.Message);
  public void hangupWaitingOrBackground(android.os.Message);
  public void hangupForegroundResumeBackground(android.os.Message);
  public void switchWaitingOrHoldingAndActive(android.os.Message);
  public void conference(android.os.Message);
  public void setPreferredVoicePrivacy(boolean, android.os.Message);
  public void getPreferredVoicePrivacy(android.os.Message);
  public void separateConnection(int, android.os.Message);
  public void acceptCall(android.os.Message);
  public void rejectCall(android.os.Message);
  public void explicitCallTransfer(android.os.Message);
  public void getLastCallFailCause(android.os.Message);
  public void getLastPdpFailCause(android.os.Message);
  public void getLastDataCallFailCause(android.os.Message);
  public void setMute(boolean, android.os.Message);
  public void getMute(android.os.Message);
  public void getSignalStrength(android.os.Message);
  public void getVoiceRegistrationState(android.os.Message);
  public void getDataRegistrationState(android.os.Message);
  public void getOperator(android.os.Message);
  public void sendDtmf(char, android.os.Message);
  public void startDtmf(char, android.os.Message);
  public void stopDtmf(android.os.Message);
  public void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public void sendSMS(java.lang.String, java.lang.String, android.os.Message);
  public void sendCdmaSms(byte[], android.os.Message);
  public void deleteSmsOnSim(int, android.os.Message);
  public void deleteSmsOnRuim(int, android.os.Message);
  public void writeSmsToSim(int, java.lang.String, java.lang.String, android.os.Message);
  public void writeSmsToRuim(int, java.lang.String, android.os.Message);
  public void setupDataCall(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void deactivateDataCall(int, int, android.os.Message);
  public void setRadioPower(boolean, android.os.Message);
  public void setSuppServiceNotifications(boolean, android.os.Message);
  public void acknowledgeLastIncomingGsmSms(boolean, int, android.os.Message);
  public void acknowledgeLastIncomingCdmaSms(boolean, int, android.os.Message);
  public void acknowledgeIncomingGsmSmsWithPdu(boolean, java.lang.String, android.os.Message);
  public void iccIO(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, android.os.Message);
  public void getCLIR(android.os.Message);
  public void setCLIR(int, android.os.Message);
  public void queryCallWaiting(int, android.os.Message);
  public void setCallWaiting(boolean, int, android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void setNetworkSelectionModeManual(java.lang.String, android.os.Message);
  public void getNetworkSelectionMode(android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public void setCallForward(int, int, int, java.lang.String, int, android.os.Message);
  public void queryCallForwardStatus(int, int, java.lang.String, android.os.Message);
  public void queryCLIP(android.os.Message);
  public void getBasebandVersion(android.os.Message);
  public void queryFacilityLock(java.lang.String, java.lang.String, int, android.os.Message);
  public void queryFacilityLockForApp(java.lang.String, java.lang.String, int, java.lang.String, android.os.Message);
  public void setFacilityLock(java.lang.String, boolean, java.lang.String, int, android.os.Message);
  public void setFacilityLockForApp(java.lang.String, boolean, java.lang.String, int, java.lang.String, android.os.Message);
  public void sendUSSD(java.lang.String, android.os.Message);
  public void cancelPendingUssd(android.os.Message);
  public void resetRadio(android.os.Message);
  public void invokeOemRilRequestRaw(byte[], android.os.Message);
  public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public void setBandMode(int, android.os.Message);
  public void queryAvailableBandMode(android.os.Message);
  public void sendTerminalResponse(java.lang.String, android.os.Message);
  public void sendEnvelope(java.lang.String, android.os.Message);
  public void sendEnvelopeWithStatus(java.lang.String, android.os.Message);
  public void handleCallSetupRequestFromSim(boolean, android.os.Message);
  public void setCurrentPreferredNetworkType();
  public void setPreferredNetworkType(int, android.os.Message);
  public void getPreferredNetworkType(android.os.Message);
  public void getNeighboringCids(android.os.Message);
  public void setLocationUpdates(boolean, android.os.Message);
  public void getSmscAddress(android.os.Message);
  public void setSmscAddress(java.lang.String, android.os.Message);
  public void reportSmsMemoryStatus(boolean, android.os.Message);
  public void reportStkServiceIsRunning(android.os.Message);
  public void getGsmBroadcastConfig(android.os.Message);
  public void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[], android.os.Message);
  public void setGsmBroadcastActivation(boolean, android.os.Message);
  public void getDeviceIdentity(android.os.Message);
  public void getCDMASubscription(android.os.Message);
  public void setPhoneType(int);
  public void queryCdmaRoamingPreference(android.os.Message);
  public void setCdmaRoamingPreference(int, android.os.Message);
  public void setCdmaSubscriptionSource(int, android.os.Message);
  public void getCdmaSubscriptionSource(android.os.Message);
  public void queryTTYMode(android.os.Message);
  public void setTTYMode(int, android.os.Message);
  public void sendCDMAFeatureCode(java.lang.String, android.os.Message);
  public void getCdmaBroadcastConfig(android.os.Message);
  public void setCdmaBroadcastConfig(int[], android.os.Message);
  public void setCdmaBroadcastActivation(boolean, android.os.Message);
  public void exitEmergencyCallbackMode(android.os.Message);
  public void requestIsimAuthentication(java.lang.String, android.os.Message);
public class com.android.internal.telephony.RestrictedState {
  public com.android.internal.telephony.RestrictedState();
  public void setCsEmergencyRestricted(boolean);
  public boolean isCsEmergencyRestricted();
  public void setCsNormalRestricted(boolean);
  public boolean isCsNormalRestricted();
  public void setPsRestricted(boolean);
  public boolean isPsRestricted();
  public boolean isCsRestricted();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public class com.android.internal.telephony.RetryManager {
  public com.android.internal.telephony.RetryManager();
  public boolean configure(int, int, int);
  public boolean configure(java.lang.String);
  public boolean isRetryNeeded();
  public int getRetryTimer();
  public int getRetryCount();
  public void increaseRetryCount();
  public void setRetryCount(int);
  public void resetRetryCount();
  public void retryForeverUsingLastTimeout();
  public boolean isRetryForever();
  public void onClick(android.content.DialogInterface, int);
  public void onReceive(android.content.Context, android.content.Intent);
public final class com.android.internal.telephony.SMSDispatcher$SmsTracker {
  public com.android.internal.telephony.SMSDispatcher$SmsTracker(java.util.HashMap<java.lang.String, java.lang.Object>, android.app.PendingIntent, android.app.PendingIntent);
public abstract class com.android.internal.telephony.SMSDispatcher extends android.os.Handler {
  public abstract void dispose();
  public void handleMessage(android.os.Message);
  public abstract int dispatchMessage(com.android.internal.telephony.SmsMessageBase);
public abstract class com.android.internal.telephony.ServiceStateTracker extends android.os.Handler {
  public com.android.internal.telephony.ServiceStateTracker();
  public boolean getDesiredPowerState();
  public void registerForRoamingOn(android.os.Handler, int, java.lang.Object);
  public void unregisterForRoamingOn(android.os.Handler);
  public void registerForRoamingOff(android.os.Handler, int, java.lang.Object);
  public void unregisterForRoamingOff(android.os.Handler);
  public void reRegisterNetwork(android.os.Message);
  public void setRadioPower(boolean);
  public void enableSingleLocationUpdate();
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public void handleMessage(android.os.Message);
  public abstract int getCurrentDataConnectionState();
  public abstract boolean isConcurrentVoiceAndDataAllowed();
  public void registerForDataConnectionAttached(android.os.Handler, int, java.lang.Object);
  public void unregisterForDataConnectionAttached(android.os.Handler);
  public void registerForDataConnectionDetached(android.os.Handler, int, java.lang.Object);
  public void unregisterForDataConnectionDetached(android.os.Handler);
  public void registerForNetworkAttached(android.os.Handler, int, java.lang.Object);
  public void unregisterForNetworkAttached(android.os.Handler);
  public void registerForPsRestrictedEnabled(android.os.Handler, int, java.lang.Object);
  public void unregisterForPsRestrictedEnabled(android.os.Handler);
  public void registerForPsRestrictedDisabled(android.os.Handler, int, java.lang.Object);
  public void unregisterForPsRestrictedDisabled(android.os.Handler);
  public void powerOffRadioSafely(com.android.internal.telephony.DataConnectionTracker);
  public boolean processPendingRadioPowerOffAfterDataOff();
public abstract class com.android.internal.telephony.SmsAddress {
  public com.android.internal.telephony.SmsAddress();
  public java.lang.String getAddressString();
  public boolean isAlphanumeric();
  public boolean isNetworkSpecific();
  public boolean couldBeEmailGateway();
public class com.android.internal.telephony.SmsHeader$ConcatRef {
  public com.android.internal.telephony.SmsHeader$ConcatRef();
public class com.android.internal.telephony.SmsHeader$MiscElt {
  public com.android.internal.telephony.SmsHeader$MiscElt();
public class com.android.internal.telephony.SmsHeader$PortAddrs {
  public com.android.internal.telephony.SmsHeader$PortAddrs();
public class com.android.internal.telephony.SmsHeader {
  public com.android.internal.telephony.SmsHeader();
  public static com.android.internal.telephony.SmsHeader fromByteArray(byte[]);
  public static byte[] toByteArray(com.android.internal.telephony.SmsHeader);
  public java.lang.String toString();
public abstract class com.android.internal.telephony.SmsMessageBase$SubmitPduBase {
  public com.android.internal.telephony.SmsMessageBase$SubmitPduBase();
  public java.lang.String toString();
public class com.android.internal.telephony.SmsMessageBase$TextEncodingDetails {
  public com.android.internal.telephony.SmsMessageBase$TextEncodingDetails();
  public java.lang.String toString();
public abstract class com.android.internal.telephony.SmsMessageBase {
  public com.android.internal.telephony.SmsMessageBase();
  public java.lang.String getServiceCenterAddress();
  public java.lang.String getOriginatingAddress();
  public java.lang.String getDisplayOriginatingAddress();
  public java.lang.String getMessageBody();
  public abstract android.telephony.SmsMessage$MessageClass getMessageClass();
  public java.lang.String getDisplayMessageBody();
  public java.lang.String getPseudoSubject();
  public long getTimestampMillis();
  public boolean isEmail();
  public java.lang.String getEmailBody();
  public java.lang.String getEmailFrom();
  public abstract int getProtocolIdentifier();
  public abstract boolean isReplace();
  public abstract boolean isCphsMwiMessage();
  public abstract boolean isMWIClearMessage();
  public abstract boolean isMWISetMessage();
  public abstract boolean isMwiDontStore();
  public byte[] getUserData();
  public com.android.internal.telephony.SmsHeader getUserDataHeader();
  public byte[] getPdu();
  public abstract int getStatus();
  public abstract boolean isStatusReportMessage();
  public abstract boolean isReplyPathPresent();
  public int getStatusOnIcc();
  public int getIndexOnIcc();
  public com.android.internal.telephony.SmsRawData createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.SmsRawData[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.SmsRawData implements android.os.Parcelable {
  public com.android.internal.telephony.SmsRawData(byte[]);
  public byte[] getBytes();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class com.android.internal.telephony.SmsResponse {
  public com.android.internal.telephony.SmsResponse(int, java.lang.String, int);
  public java.lang.String toString();
  public void onReceive(android.content.Context, android.content.Intent);
public final class com.android.internal.telephony.SmsStorageMonitor extends android.os.Handler {
  public com.android.internal.telephony.SmsStorageMonitor(com.android.internal.telephony.PhoneBase);
  public void dispose();
  public void handleMessage(android.os.Message);
  public boolean isStorageAvailable();
public class com.android.internal.telephony.SmsUsageMonitor {
  public com.android.internal.telephony.SmsUsageMonitor(android.content.ContentResolver);
  public boolean check(java.lang.String, int);
public class com.android.internal.telephony.UUSInfo {
  public com.android.internal.telephony.UUSInfo();
  public com.android.internal.telephony.UUSInfo(int, int, byte[]);
  public int getDcs();
  public void setDcs(int);
  public int getType();
  public void setType(int);
  public byte[] getUserData();
  public void setUserData(byte[]);
  public void run();
  public com.android.internal.telephony.WapPushOverSms$WapPushConnection(com.android.internal.telephony.WapPushOverSms, android.content.Context);
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void bindWapPushManager();
  public com.android.internal.telephony.IWapPushManager getWapPushManager();
public class com.android.internal.telephony.WapPushOverSms {
  public com.android.internal.telephony.WapPushOverSms(com.android.internal.telephony.Phone, com.android.internal.telephony.SMSDispatcher);
  public int dispatchWapPdu(byte[]);
public class com.android.internal.telephony.WspTypeDecoder {
  public com.android.internal.telephony.WspTypeDecoder(byte[]);
  public boolean decodeTextString(int);
  public boolean decodeTokenText(int);
  public boolean decodeShortInteger(int);
  public boolean decodeLongInteger(int);
  public boolean decodeIntegerValue(int);
  public boolean decodeUintvarInteger(int);
  public boolean decodeValueLength(int);
  public boolean decodeExtensionMedia(int);
  public boolean decodeConstrainedEncoding(int);
  public boolean decodeContentType(int);
  public boolean decodeContentLength(int);
  public boolean decodeContentLocation(int);
  public boolean decodeXWapApplicationId(int);
  public boolean seekXWapApplicationId(int, int);
  public boolean decodeXWapContentURI(int);
  public boolean decodeXWapInitiatorURI(int);
  public int getDecodedDataLength();
  public long getValue32();
  public java.lang.String getValueString();
  public java.util.HashMap<java.lang.String, java.lang.String> getContentParameters();
public final class com.android.internal.telephony.cat.AppInterface$CommandType extends java.lang.Enum<com.android.internal.telephony.cat.AppInterface$CommandType> {
  public static com.android.internal.telephony.cat.AppInterface$CommandType[] values();
  public static com.android.internal.telephony.cat.AppInterface$CommandType valueOf(java.lang.String);
  public int value();
  public static com.android.internal.telephony.cat.AppInterface$CommandType fromInt(int);
public interface com.android.internal.telephony.cat.AppInterface {
  public abstract void onCmdResponse(com.android.internal.telephony.cat.CatResponseMessage);
  public java.util.List<com.android.internal.telephony.cat.ComprehensionTlv> getComprehensionTlvs();
  public int getTag();
  public com.android.internal.telephony.cat.CatCmdMessage createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.CatCmdMessage[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings {
  public com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings(com.android.internal.telephony.cat.CatCmdMessage);
public class com.android.internal.telephony.cat.CatCmdMessage$CallSettings {
  public com.android.internal.telephony.cat.CatCmdMessage$CallSettings(com.android.internal.telephony.cat.CatCmdMessage);
public class com.android.internal.telephony.cat.CatCmdMessage implements android.os.Parcelable {
  public com.android.internal.telephony.cat.CatCmdMessage(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public com.android.internal.telephony.cat.AppInterface$CommandType getCmdType();
  public com.android.internal.telephony.cat.Menu getMenu();
  public com.android.internal.telephony.cat.Input geInput();
  public com.android.internal.telephony.cat.TextMessage geTextMessage();
  public com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings();
  public com.android.internal.telephony.cat.ToneSettings getToneSettings();
  public com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings();
  public com.android.internal.telephony.cat.CatException();
public abstract class com.android.internal.telephony.cat.CatLog {
  public com.android.internal.telephony.cat.CatLog();
  public static void d(java.lang.Object, java.lang.String);
  public static void d(java.lang.String, java.lang.String);
public class com.android.internal.telephony.cat.CatResponseMessage {
  public com.android.internal.telephony.cat.CatResponseMessage(com.android.internal.telephony.cat.CatCmdMessage);
  public void setResultCode(com.android.internal.telephony.cat.ResultCode);
  public void setMenuSelection(int);
  public void setInput(java.lang.String);
  public void setYesNo(boolean);
  public void setConfirmation(boolean);
public class com.android.internal.telephony.cat.CatService extends android.os.Handler implements com.android.internal.telephony.cat.AppInterface {
  public void dispose();
  public static com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.IccRecords, android.content.Context, com.android.internal.telephony.IccFileHandler, com.android.internal.telephony.IccCard);
  public static com.android.internal.telephony.cat.AppInterface getInstance();
  public void handleMessage(android.os.Message);
  public synchronized void onCmdResponse(com.android.internal.telephony.cat.CatResponseMessage);
  public com.android.internal.telephony.cat.CommandDetails createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.CommandDetails[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.ComprehensionTlvTag getTag();
  public boolean compareTo(com.android.internal.telephony.cat.CommandDetails);
  public com.android.internal.telephony.cat.CommandDetails(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public void handleMessage(android.os.Message);
  public int getTag();
  public boolean isComprehensionRequired();
  public int getLength();
  public int getValueIndex();
  public byte[] getRawValue();
public final class com.android.internal.telephony.cat.ComprehensionTlvTag extends java.lang.Enum<com.android.internal.telephony.cat.ComprehensionTlvTag> {
  public static com.android.internal.telephony.cat.ComprehensionTlvTag[] values();
  public static com.android.internal.telephony.cat.ComprehensionTlvTag valueOf(java.lang.String);
  public int value();
  public static com.android.internal.telephony.cat.ComprehensionTlvTag fromInt(int);
  public com.android.internal.telephony.cat.DTTZResponseData(java.util.Calendar);
  public void format(java.io.ByteArrayOutputStream);
  public com.android.internal.telephony.cat.Duration createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.Duration[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class com.android.internal.telephony.cat.Duration$TimeUnit extends java.lang.Enum<com.android.internal.telephony.cat.Duration$TimeUnit> {
  public static com.android.internal.telephony.cat.Duration$TimeUnit[] values();
  public static com.android.internal.telephony.cat.Duration$TimeUnit valueOf(java.lang.String);
  public int value();
public class com.android.internal.telephony.cat.Duration implements android.os.Parcelable {
  public com.android.internal.telephony.cat.Duration(int, com.android.internal.telephony.cat.Duration$TimeUnit);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
public final class com.android.internal.telephony.cat.FontSize extends java.lang.Enum<com.android.internal.telephony.cat.FontSize> {
  public static com.android.internal.telephony.cat.FontSize[] values();
  public static com.android.internal.telephony.cat.FontSize valueOf(java.lang.String);
  public static com.android.internal.telephony.cat.FontSize fromInt(int);
  public com.android.internal.telephony.cat.GetInkeyInputResponseData(java.lang.String, boolean, boolean);
  public com.android.internal.telephony.cat.GetInkeyInputResponseData(boolean);
  public void format(java.io.ByteArrayOutputStream);
  public void handleMessage(android.os.Message);
  public static android.graphics.Bitmap parseToBnW(byte[], int);
  public static android.graphics.Bitmap parseToRGB(byte[], int, boolean, byte[]);
public class com.android.internal.telephony.cat.ImageDescriptor {
  public com.android.internal.telephony.cat.Input createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.Input[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.Input implements android.os.Parcelable {
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public com.android.internal.telephony.cat.Item createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.Item[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.Item implements android.os.Parcelable {
  public com.android.internal.telephony.cat.Item(int, java.lang.String);
  public com.android.internal.telephony.cat.Item(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public com.android.internal.telephony.cat.LanguageResponseData(java.lang.String);
  public void format(java.io.ByteArrayOutputStream);
public final class com.android.internal.telephony.cat.LaunchBrowserMode extends java.lang.Enum<com.android.internal.telephony.cat.LaunchBrowserMode> {
  public static com.android.internal.telephony.cat.LaunchBrowserMode[] values();
  public static com.android.internal.telephony.cat.LaunchBrowserMode valueOf(java.lang.String);
  public com.android.internal.telephony.cat.Menu createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.Menu[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.Menu implements android.os.Parcelable {
  public com.android.internal.telephony.cat.Menu();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public final class com.android.internal.telephony.cat.PresentationType extends java.lang.Enum<com.android.internal.telephony.cat.PresentationType> {
  public static com.android.internal.telephony.cat.PresentationType[] values();
  public static com.android.internal.telephony.cat.PresentationType valueOf(java.lang.String);
  public abstract void format(java.io.ByteArrayOutputStream);
  public static void writeLength(java.io.ByteArrayOutputStream, int);
public final class com.android.internal.telephony.cat.ResultCode extends java.lang.Enum<com.android.internal.telephony.cat.ResultCode> {
  public static com.android.internal.telephony.cat.ResultCode[] values();
  public static com.android.internal.telephony.cat.ResultCode valueOf(java.lang.String);
  public int value();
  public static com.android.internal.telephony.cat.ResultCode fromInt(int);
public class com.android.internal.telephony.cat.ResultException extends com.android.internal.telephony.cat.CatException {
  public com.android.internal.telephony.cat.ResultException(com.android.internal.telephony.cat.ResultCode);
  public com.android.internal.telephony.cat.ResultException(com.android.internal.telephony.cat.ResultCode, int);
  public com.android.internal.telephony.cat.ResultCode result();
  public boolean hasAdditionalInfo();
  public int additionalInfo();
  public boolean processMessage(android.os.Message);
  public boolean processMessage(android.os.Message);
  public static synchronized com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler, com.android.internal.telephony.IccFileHandler);
  public void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage);
  public void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode, com.android.internal.telephony.cat.CommandParams);
  public com.android.internal.telephony.cat.SelectItemResponseData(int);
  public void format(java.io.ByteArrayOutputStream);
public final class com.android.internal.telephony.cat.TextAlignment extends java.lang.Enum<com.android.internal.telephony.cat.TextAlignment> {
  public static com.android.internal.telephony.cat.TextAlignment[] values();
  public static com.android.internal.telephony.cat.TextAlignment valueOf(java.lang.String);
  public static com.android.internal.telephony.cat.TextAlignment fromInt(int);
public class com.android.internal.telephony.cat.TextAttribute {
  public com.android.internal.telephony.cat.TextAttribute(int, int, com.android.internal.telephony.cat.TextAlignment, com.android.internal.telephony.cat.FontSize, boolean, boolean, boolean, boolean, com.android.internal.telephony.cat.TextColor);
public final class com.android.internal.telephony.cat.TextColor extends java.lang.Enum<com.android.internal.telephony.cat.TextColor> {
  public static com.android.internal.telephony.cat.TextColor[] values();
  public static com.android.internal.telephony.cat.TextColor valueOf(java.lang.String);
  public static com.android.internal.telephony.cat.TextColor fromInt(int);
  public com.android.internal.telephony.cat.TextMessage createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.TextMessage[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.TextMessage implements android.os.Parcelable {
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public com.android.internal.telephony.cat.Tone createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.Tone[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class com.android.internal.telephony.cat.Tone extends java.lang.Enum<com.android.internal.telephony.cat.Tone> implements android.os.Parcelable {
  public static com.android.internal.telephony.cat.Tone[] values();
  public static com.android.internal.telephony.cat.Tone valueOf(java.lang.String);
  public static com.android.internal.telephony.cat.Tone fromInt(int);
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public com.android.internal.telephony.cat.ToneSettings createFromParcel(android.os.Parcel);
  public com.android.internal.telephony.cat.ToneSettings[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public class com.android.internal.telephony.cat.ToneSettings implements android.os.Parcelable {
  public com.android.internal.telephony.cat.ToneSettings(com.android.internal.telephony.cat.Duration, com.android.internal.telephony.cat.Tone, boolean);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class com.android.internal.telephony.cdma.CDMALTEPhone extends com.android.internal.telephony.cdma.CDMAPhone {
  public com.android.internal.telephony.cdma.CDMALTEPhone(android.content.Context, com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.PhoneNotifier);
  public void handleMessage(android.os.Message);
  public void dispose();
  public void removeReferences();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public boolean updateCurrentCarrierInProvider();
  public void setSystemLocale(java.lang.String, java.lang.String, boolean);
  public java.lang.String getSubscriberId();
  public java.lang.String getImei();
  public java.lang.String getDeviceSvn();
  public com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public java.lang.String getMsisdn();
  public void getAvailableNetworks(android.os.Message);
  public void requestIsimAuthentication(java.lang.String, android.os.Message);
  public void run();
public class com.android.internal.telephony.cdma.CDMAPhone extends com.android.internal.telephony.PhoneBase {
  public com.android.internal.telephony.cdma.CDMAPhone(android.content.Context, com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.PhoneNotifier);
  public com.android.internal.telephony.cdma.CDMAPhone(android.content.Context, com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.PhoneNotifier, boolean);
  public void dispose();
  public void removeReferences();
  public android.telephony.ServiceState getServiceState();
  public com.android.internal.telephony.CallTracker getCallTracker();
  public com.android.internal.telephony.Phone$State getState();
  public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
  public java.lang.String getPhoneName();
  public int getPhoneType();
  public boolean canTransfer();
  public com.android.internal.telephony.cdma.CdmaCall getRingingCall();
  public void setMute(boolean);
  public boolean getMute();
  public void enableEnhancedVoicePrivacy(boolean, android.os.Message);
  public void getEnhancedVoicePrivacy(android.os.Message);
  public void clearDisconnected();
  public com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public android.telephony.SignalStrength getSignalStrength();
  public boolean getMessageWaitingIndicator();
  public java.util.List<? extends com.android.internal.telephony.MmiCode> getPendingMmiCodes();
  public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public com.android.internal.telephony.cdma.CdmaCall getBackgroundCall();
  public boolean handleInCallMmiCommands(java.lang.String);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void unregisterForSuppServiceNotification(android.os.Handler);
  public java.lang.String getLine1Number();
  public java.lang.String getCdmaPrlVersion();
  public java.lang.String getCdmaMin();
  public boolean isMinInfoReady();
  public void getCallWaiting(android.os.Message);
  public void setRadioPower(boolean);
  public java.lang.String getEsn();
  public java.lang.String getMeid();
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getSubscriberId();
  public java.lang.String getImei();
  public boolean canConference();
  public android.telephony.CellLocation getCellLocation();
  public com.android.internal.telephony.cdma.CdmaCall getForegroundCall();
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public boolean handlePinMmi(java.lang.String);
  public void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public void setCallWaiting(boolean, android.os.Message);
  public void updateServiceLocation();
  public void setDataRoamingEnabled(boolean);
  public void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object);
  public void unregisterForCdmaOtaStatusChange(android.os.Handler);
  public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForSubscriptionInfoReady(android.os.Handler);
  public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object);
  public void unsetOnEcbModeExitResponse(android.os.Handler);
  public void registerForCallWaiting(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallWaiting(android.os.Handler);
  public void getNeighboringCids(android.os.Message);
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public void sendUssdResponse(java.lang.String);
  public void sendDtmf(char);
  public void startDtmf(char);
  public void stopDtmf();
  public void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public void setOutgoingCallerIdDisplay(int, android.os.Message);
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public void getDataCallList(android.os.Message);
  public boolean getDataRoamingEnabled();
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getVoiceMailNumber();
  public int getVoiceMessageCount();
  public java.lang.String getVoiceMailAlphaTag();
  public void getCallForwardingOption(int, android.os.Message);
  public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public void getOutgoingCallerIdDisplay(android.os.Message);
  public boolean getCallForwardingIndicator();
  public void explicitCallTransfer();
  public java.lang.String getLine1AlphaTag();
  public boolean isInEmergencyCall();
  public boolean isInEcm();
  public void exitEmergencyCallbackMode();
  public void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object);
  public void unregisterForEcmTimerReset(android.os.Handler);
  public void handleMessage(android.os.Message);
  public com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public void registerForNvLoaded(android.os.Handler, int, java.lang.Object);
  public void unregisterForNvLoaded(android.os.Handler);
  public void registerForEriFileLoaded(android.os.Handler, int, java.lang.Object);
  public void unregisterForEriFileLoaded(android.os.Handler);
  public final void setSystemProperty(java.lang.String, java.lang.String);
  public com.android.internal.telephony.IccFileHandler getIccFileHandler();
  public void activateCellBroadcastSms(int, android.os.Message);
  public void getCellBroadcastSmsConfig(android.os.Message);
  public void setCellBroadcastSmsConfig(int[], android.os.Message);
  public boolean needsOtaServiceProvisioning();
  public boolean isOtaSpNumber(java.lang.String);
  public int getCdmaEriIconIndex();
  public int getCdmaEriIconMode();
  public java.lang.String getCdmaEriText();
  public void prepareEri();
  public boolean isEriFileLoaded();
  public com.android.internal.telephony.Call getRingingCall();
  public com.android.internal.telephony.Call getBackgroundCall();
  public com.android.internal.telephony.Call getForegroundCall();
public final class com.android.internal.telephony.cdma.CdmaCall extends com.android.internal.telephony.Call {
  public void dispose();
  public java.util.List<com.android.internal.telephony.Connection> getConnections();
  public com.android.internal.telephony.Call$State getState();
  public com.android.internal.telephony.Phone getPhone();
  public boolean isMultiparty();
  public java.lang.String toString();
public final class com.android.internal.telephony.cdma.CdmaCallTracker extends com.android.internal.telephony.CallTracker {
  public void dispose();
  public void registerForVoiceCallStarted(android.os.Handler, int, java.lang.Object);
  public void unregisterForVoiceCallStarted(android.os.Handler);
  public void registerForVoiceCallEnded(android.os.Handler, int, java.lang.Object);
  public void unregisterForVoiceCallEnded(android.os.Handler);
  public void registerForCallWaiting(android.os.Handler, int, java.lang.Object);
  public void unregisterForCallWaiting(android.os.Handler);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.cdma.CdmaCallWaitingNotification {
  public com.android.internal.telephony.cdma.CdmaCallWaitingNotification();
  public java.lang.String toString();
  public static int presentationFromCLIP(int);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.cdma.CdmaConnection extends com.android.internal.telephony.Connection {
  public void dispose();
  public java.lang.String getOrigDialString();
  public java.lang.String getAddress();
  public java.lang.String getCnapName();
  public int getCnapNamePresentation();
  public com.android.internal.telephony.cdma.CdmaCall getCall();
  public long getCreateTime();
  public long getConnectTime();
  public long getDisconnectTime();
  public long getDurationMillis();
  public long getHoldDurationMillis();
  public com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
  public boolean isIncoming();
  public com.android.internal.telephony.Call$State getState();
  public com.android.internal.telephony.Connection$PostDialState getPostDialState();
  public void proceedAfterWaitChar();
  public void proceedAfterWildChar(java.lang.String);
  public void cancelPostDial();
  public java.lang.String getRemainingPostDialString();
  public void updateParent(com.android.internal.telephony.cdma.CdmaCall, com.android.internal.telephony.cdma.CdmaCall);
  public static java.lang.String formatDialString(java.lang.String);
  public int getNumberPresentation();
  public com.android.internal.telephony.UUSInfo getUUSInfo();
  public com.android.internal.telephony.Call getCall();
public class com.android.internal.telephony.cdma.CdmaDataConnection extends com.android.internal.telephony.DataConnection {
  public java.lang.String toString();
  public void run();
public final class com.android.internal.telephony.cdma.CdmaDataConnectionTracker extends com.android.internal.telephony.DataConnectionTracker {
  public void dispose();
  public synchronized com.android.internal.telephony.DataConnectionTracker$State getState(java.lang.String);
  public void handleMessage(android.os.Message);
  public boolean isDisconnected();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaDisplayInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaDisplayInfoRec(int, java.lang.String);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaLineControlInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaLineControlInfoRec(int, int, int, int);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaNumberInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaNumberInfoRec(int, java.lang.String, int, int, int, int);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaRedirectingNumberInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaRedirectingNumberInfoRec(java.lang.String, int, int, int, int, int);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaSignalInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaSignalInfoRec();
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaSignalInfoRec(int, int, int, int);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53AudioControlInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53AudioControlInfoRec(int, int);
  public java.lang.String toString();
public class com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53ClirInfoRec {
  public com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53ClirInfoRec(int);
  public java.lang.String toString();
public final class com.android.internal.telephony.cdma.CdmaInformationRecords {
  public com.android.internal.telephony.cdma.CdmaInformationRecords(android.os.Parcel);
  public static java.lang.String idToString(int);
public class com.android.internal.telephony.cdma.CdmaLteServiceStateTracker extends com.android.internal.telephony.cdma.CdmaServiceStateTracker {
  public com.android.internal.telephony.cdma.CdmaLteServiceStateTracker(com.android.internal.telephony.cdma.CDMALTEPhone);
  public void dispose();
  public void handleMessage(android.os.Message);
  public boolean isConcurrentVoiceAndDataAllowed();
public final class com.android.internal.telephony.cdma.CdmaLteUiccFileHandler extends com.android.internal.telephony.IccFileHandler {
  public void loadEFTransparent(int, android.os.Message);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
public final class com.android.internal.telephony.cdma.CdmaLteUiccRecords extends com.android.internal.telephony.gsm.SIMRecords {
  public com.android.internal.telephony.cdma.CdmaLteUiccRecords(com.android.internal.telephony.PhoneBase);
  public java.lang.String getMdn();
  public java.lang.String getMin();
  public java.lang.String getSid();
  public java.lang.String getNid();
  public java.lang.String getPrlVersion();
  public boolean getCsimSpnDisplayCondition();
  public com.android.internal.telephony.ims.IsimRecords getIsimRecords();
  public boolean isProvisioned();
public final class com.android.internal.telephony.cdma.CdmaMmiCode extends android.os.Handler implements com.android.internal.telephony.MmiCode {
  public static com.android.internal.telephony.cdma.CdmaMmiCode newFromDialString(java.lang.String, com.android.internal.telephony.cdma.CDMAPhone);
  public com.android.internal.telephony.MmiCode$State getState();
  public java.lang.CharSequence getMessage();
  public void cancel();
  public boolean isCancelable();
  public boolean isUssdRequest();
  public void handleMessage(android.os.Message);
  public void dispose();
  public int dispatchMessage(com.android.internal.telephony.SmsMessageBase);
  public void onChange(boolean);
  public void onChange(boolean);
public class com.android.internal.telephony.cdma.CdmaServiceStateTracker extends com.android.internal.telephony.ServiceStateTracker {
  public com.android.internal.telephony.cdma.CdmaServiceStateTracker(com.android.internal.telephony.cdma.CDMAPhone);
  public void dispose();
  public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object);
  public void unregisterForSubscriptionInfoReady(android.os.Handler);
  public void handleMessage(android.os.Message);
  public int getCurrentDataConnectionState();
  public boolean isConcurrentVoiceAndDataAllowed();
  public java.lang.String getMdnNumber();
  public java.lang.String getCdmaMin();
  public java.lang.String getPrlVersion();
  public boolean isMinInfoReady();
public final class com.android.internal.telephony.cdma.EriInfo {
  public com.android.internal.telephony.cdma.EriInfo(int, int, int, java.lang.String, int, int);
  public com.android.internal.telephony.cdma.EriManager$EriDisplayInformation(com.android.internal.telephony.cdma.EriManager, int, int, java.lang.String);
  public java.lang.String toString();
  public com.android.internal.telephony.cdma.EriManager$EriFile(com.android.internal.telephony.cdma.EriManager);
public final class com.android.internal.telephony.cdma.EriManager {
  public com.android.internal.telephony.cdma.EriManager(com.android.internal.telephony.PhoneBase, android.content.Context, int);
  public void dispose();
  public void loadEriFile();
  public int getEriFileVersion();
  public int getEriNumberOfEntries();
  public int getEriFileType();
  public boolean isEriFileLoaded();
  public int getCdmaEriIconIndex(int, int);
  public int getCdmaEriIconMode(int, int);
  public java.lang.String getCdmaEriText(int, int);
public final class com.android.internal.telephony.cdma.RuimCard extends com.android.internal.telephony.IccCard {
  public void dispose();
  public java.lang.String getServiceProviderName();
public final class com.android.internal.telephony.cdma.RuimFileHandler extends com.android.internal.telephony.IccFileHandler {
  public void dispose();
  public void loadEFImgTransparent(int, int, int, int, android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager extends com.android.internal.telephony.IccPhoneBookInterfaceManager {
  public com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager(com.android.internal.telephony.cdma.CDMAPhone);
  public void dispose();
  public int[] getAdnRecordsSize(int);
public final class com.android.internal.telephony.cdma.RuimRecords extends com.android.internal.telephony.IccRecords {
  public void dispose();
  public java.lang.String getMdnNumber();
  public java.lang.String getCdmaMin();
  public java.lang.String getPrlVersion();
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public void onRefresh(boolean, int[]);
  public java.lang.String getRUIMOperatorNumeric();
  public void handleMessage(android.os.Message);
  public int getDisplayRule(java.lang.String);
  public void setVoiceMessageWaiting(int, int);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.cdma.RuimSmsInterfaceManager extends com.android.internal.telephony.IccSmsInterfaceManager {
  public com.android.internal.telephony.cdma.RuimSmsInterfaceManager(com.android.internal.telephony.cdma.CDMAPhone, com.android.internal.telephony.SMSDispatcher);
  public void dispose();
  public boolean updateMessageOnIccEf(int, int, byte[]);
  public boolean copyMessageToIccEf(int, byte[], byte[]);
  public java.util.List<com.android.internal.telephony.SmsRawData> getAllMessagesFromIccEf();
  public boolean enableCellBroadcast(int);
  public boolean disableCellBroadcast(int);
  public boolean enableCellBroadcastRange(int, int);
  public boolean disableCellBroadcastRange(int, int);
public class com.android.internal.telephony.cdma.SmsMessage$SubmitPdu extends com.android.internal.telephony.SmsMessageBase$SubmitPduBase {
  public com.android.internal.telephony.cdma.SmsMessage$SubmitPdu();
public class com.android.internal.telephony.cdma.SmsMessage extends com.android.internal.telephony.SmsMessageBase {
  public com.android.internal.telephony.cdma.SmsMessage();
  public static com.android.internal.telephony.cdma.SmsMessage createFromPdu(byte[]);
  public static com.android.internal.telephony.cdma.SmsMessage newFromParcel(android.os.Parcel);
  public static com.android.internal.telephony.cdma.SmsMessage createFromEfRecord(int, byte[]);
  public static int getTPLayerLengthForPDU(java.lang.String);
  public static com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, com.android.internal.telephony.SmsHeader);
  public static com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, int, byte[], boolean);
  public static com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, com.android.internal.telephony.cdma.sms.UserData, boolean);
  public int getProtocolIdentifier();
  public boolean isReplace();
  public boolean isCphsMwiMessage();
  public boolean isMWIClearMessage();
  public boolean isMWISetMessage();
  public boolean isMwiDontStore();
  public int getStatus();
  public boolean isStatusReportMessage();
  public boolean isReplyPathPresent();
  public static com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence, boolean);
  public android.telephony.SmsMessage$MessageClass getMessageClass();
  public com.android.internal.telephony.cdma.sms.BearerData$CodingException(java.lang.String);
public class com.android.internal.telephony.cdma.sms.BearerData$TimeStamp extends android.text.format.Time {
  public com.android.internal.telephony.cdma.sms.BearerData$TimeStamp();
  public static com.android.internal.telephony.cdma.sms.BearerData$TimeStamp fromByteArray(byte[]);
  public java.lang.String toString();
public final class com.android.internal.telephony.cdma.sms.BearerData {
  public com.android.internal.telephony.cdma.sms.BearerData();
  public java.lang.String toString();
  public static com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calcTextEncodingDetails(java.lang.CharSequence, boolean);
  public static byte[] encode(com.android.internal.telephony.cdma.sms.BearerData);
  public static com.android.internal.telephony.cdma.sms.BearerData decode(byte[]);
public class com.android.internal.telephony.cdma.sms.CdmaSmsAddress extends com.android.internal.telephony.SmsAddress {
  public com.android.internal.telephony.cdma.sms.CdmaSmsAddress();
  public java.lang.String toString();
  public static com.android.internal.telephony.cdma.sms.CdmaSmsAddress parse(java.lang.String);
public class com.android.internal.telephony.cdma.sms.CdmaSmsSubaddress {
  public com.android.internal.telephony.cdma.sms.CdmaSmsSubaddress();
public final class com.android.internal.telephony.cdma.sms.SmsEnvelope {
  public com.android.internal.telephony.cdma.sms.SmsEnvelope();
public class com.android.internal.telephony.cdma.sms.UserData {
  public com.android.internal.telephony.cdma.sms.UserData();
  public static byte[] stringToAscii(java.lang.String);
  public java.lang.String toString();
public class com.android.internal.telephony.gsm.GSMPhone extends com.android.internal.telephony.PhoneBase {
  public com.android.internal.telephony.gsm.GSMPhone(android.content.Context, com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.PhoneNotifier);
  public com.android.internal.telephony.gsm.GSMPhone(android.content.Context, com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.PhoneNotifier, boolean);
  public void dispose();
  public void removeReferences();
  public android.telephony.ServiceState getServiceState();
  public android.telephony.CellLocation getCellLocation();
  public com.android.internal.telephony.Phone$State getState();
  public java.lang.String getPhoneName();
  public int getPhoneType();
  public android.telephony.SignalStrength getSignalStrength();
  public com.android.internal.telephony.CallTracker getCallTracker();
  public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
  public java.util.List<? extends com.android.internal.telephony.MmiCode> getPendingMmiCodes();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public void notifyCallForwardingIndicator();
  public final void setSystemProperty(java.lang.String, java.lang.String);
  public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public void unregisterForSuppServiceNotification(android.os.Handler);
  public boolean canConference();
  public boolean canDial();
  public void clearDisconnected();
  public boolean canTransfer();
  public com.android.internal.telephony.gsm.GsmCall getForegroundCall();
  public com.android.internal.telephony.gsm.GsmCall getBackgroundCall();
  public com.android.internal.telephony.gsm.GsmCall getRingingCall();
  public boolean handlePinMmi(java.lang.String);
  public void sendUssdResponse(java.lang.String);
  public void sendDtmf(char);
  public void startDtmf(char);
  public void stopDtmf();
  public void sendBurstDtmf(java.lang.String);
  public void setRadioPower(boolean);
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getImei();
  public java.lang.String getEsn();
  public java.lang.String getMeid();
  public java.lang.String getSubscriberId();
  public java.lang.String getLine1Number();
  public java.lang.String getMsisdn();
  public java.lang.String getLine1AlphaTag();
  public void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public void getCallForwardingOption(int, android.os.Message);
  public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public void getOutgoingCallerIdDisplay(android.os.Message);
  public void setOutgoingCallerIdDisplay(int, android.os.Message);
  public void getCallWaiting(android.os.Message);
  public void setCallWaiting(boolean, android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public void getNeighboringCids(android.os.Message);
  public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public void setMute(boolean);
  public boolean getMute();
  public void getDataCallList(android.os.Message);
  public void updateServiceLocation();
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public boolean getDataRoamingEnabled();
  public void setDataRoamingEnabled(boolean);
  public void handleMessage(android.os.Message);
  public void saveClirSetting(int);
  public com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public com.android.internal.telephony.IccFileHandler getIccFileHandler();
  public void activateCellBroadcastSms(int, android.os.Message);
  public void getCellBroadcastSmsConfig(android.os.Message);
  public void setCellBroadcastSmsConfig(int[], android.os.Message);
  public boolean isCspPlmnEnabled();
  public com.android.internal.telephony.Call getRingingCall();
  public com.android.internal.telephony.Call getBackgroundCall();
  public com.android.internal.telephony.Call getForegroundCall();
  public void dispose();
  public java.util.List<com.android.internal.telephony.Connection> getConnections();
  public com.android.internal.telephony.Phone getPhone();
  public boolean isMultiparty();
  public java.lang.String toString();
public final class com.android.internal.telephony.gsm.GsmCallTracker extends com.android.internal.telephony.CallTracker {
  public void dispose();
  public void registerForVoiceCallStarted(android.os.Handler, int, java.lang.Object);
  public void unregisterForVoiceCallStarted(android.os.Handler);
  public void registerForVoiceCallEnded(android.os.Handler, int, java.lang.Object);
  public void unregisterForVoiceCallEnded(android.os.Handler);
  public void handleMessage(android.os.Message);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.gsm.GsmConnection extends com.android.internal.telephony.Connection {
  public void dispose();
  public java.lang.String getAddress();
  public com.android.internal.telephony.gsm.GsmCall getCall();
  public long getCreateTime();
  public long getConnectTime();
  public long getDisconnectTime();
  public long getDurationMillis();
  public long getHoldDurationMillis();
  public com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
  public boolean isIncoming();
  public com.android.internal.telephony.Call$State getState();
  public com.android.internal.telephony.Connection$PostDialState getPostDialState();
  public void proceedAfterWaitChar();
  public void proceedAfterWildChar(java.lang.String);
  public void cancelPostDial();
  public java.lang.String getRemainingPostDialString();
  public int getNumberPresentation();
  public com.android.internal.telephony.UUSInfo getUUSInfo();
  public com.android.internal.telephony.Call getCall();
public class com.android.internal.telephony.gsm.GsmDataConnection extends com.android.internal.telephony.DataConnection {
  public void setProfileId(int);
  public int getProfileId();
  public void setActiveApnType(java.lang.String);
  public java.lang.String toString();
  public void run();
  public com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver(com.android.internal.telephony.gsm.GsmDataConnectionTracker);
  public void onChange(boolean);
public final class com.android.internal.telephony.gsm.GsmDataConnectionTracker extends com.android.internal.telephony.DataConnectionTracker {
  public int getRecoveryAction();
  public void putRecoveryAction(int);
  public com.android.internal.telephony.gsm.GsmDataConnectionTracker(com.android.internal.telephony.PhoneBase);
  public void dispose();
  public boolean isApnTypeActive(java.lang.String);
  public java.lang.String[] getActiveApnTypes();
  public java.lang.String getActiveApnString(java.lang.String);
  public boolean isApnTypeEnabled(java.lang.String);
  public com.android.internal.telephony.DataConnectionTracker$State getState(java.lang.String);
  public com.android.internal.telephony.DataConnectionTracker$State getOverallState();
  public synchronized int enableApnType(java.lang.String);
  public synchronized int disableApnType(java.lang.String);
  public boolean getAnyDataEnabled();
  public boolean isDisconnected();
  public void handleMessage(android.os.Message);
public final class com.android.internal.telephony.gsm.GsmMmiCode extends android.os.Handler implements com.android.internal.telephony.MmiCode {
  public com.android.internal.telephony.MmiCode$State getState();
  public java.lang.CharSequence getMessage();
  public void cancel();
  public boolean isCancelable();
  public boolean isPendingUSSD();
  public boolean isUssdRequest();
  public void handleMessage(android.os.Message);
  public java.lang.String toString();
  public com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo(com.android.internal.telephony.gsm.SmsCbHeader, java.lang.String, int, int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean matchesLocation(java.lang.String, int, int);
public final class com.android.internal.telephony.gsm.GsmSMSDispatcher extends com.android.internal.telephony.SMSDispatcher {
  public com.android.internal.telephony.gsm.GsmSMSDispatcher(com.android.internal.telephony.PhoneBase, com.android.internal.telephony.SmsStorageMonitor, com.android.internal.telephony.SmsUsageMonitor);
  public void dispose();
  public void handleMessage(android.os.Message);
  public int dispatchMessage(com.android.internal.telephony.SmsMessageBase);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onChange(boolean);
  public void onChange(boolean);
  public com.android.internal.telephony.gsm.GsmServiceStateTracker(com.android.internal.telephony.gsm.GSMPhone);
  public void dispose();
  public void handleMessage(android.os.Message);
  public int getCurrentDataConnectionState();
  public boolean isConcurrentVoiceAndDataAllowed();
public class com.android.internal.telephony.gsm.GsmSmsAddress extends com.android.internal.telephony.SmsAddress {
  public com.android.internal.telephony.gsm.GsmSmsAddress(byte[], int, int);
  public java.lang.String getAddressString();
  public boolean isAlphanumeric();
  public boolean isNetworkSpecific();
  public boolean isCphsVoiceMessageIndicatorAddress();
  public boolean isCphsVoiceMessageSet();
  public boolean isCphsVoiceMessageClear();
public final class com.android.internal.telephony.gsm.SIMFileHandler extends com.android.internal.telephony.IccFileHandler implements com.android.internal.telephony.IccConstants {
  public void dispose();
  public void handleMessage(android.os.Message);
  public static com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State[] values();
  public static com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State valueOf(java.lang.String);
public class com.android.internal.telephony.gsm.SIMRecords extends com.android.internal.telephony.IccRecords {
  public com.android.internal.telephony.gsm.SIMRecords(com.android.internal.telephony.PhoneBase);
  public void dispose();
  public java.lang.String getIMSI();
  public java.lang.String getMsisdnNumber();
  public com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
  public void setMsisdnNumber(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getMsisdnAlphaTag();
  public java.lang.String getVoiceMailNumber();
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getVoiceMailAlphaTag();
  public void setVoiceMessageWaiting(int, int);
  public boolean getVoiceCallForwardingFlag();
  public void setVoiceCallForwardingFlag(int, boolean);
  public void onRefresh(boolean, int[]);
  public java.lang.String getOperatorNumeric();
  public void handleMessage(android.os.Message);
  public void onSimReady();
  public int getDisplayRule(java.lang.String);
  public boolean isCspPlmnEnabled();
public final class com.android.internal.telephony.gsm.SimCard extends com.android.internal.telephony.IccCard {
  public com.android.internal.telephony.gsm.SimCard(com.android.internal.telephony.PhoneBase, java.lang.String, java.lang.Boolean);
  public void dispose();
  public java.lang.String getServiceProviderName();
public class com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager extends com.android.internal.telephony.IccPhoneBookInterfaceManager {
  public com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager(com.android.internal.telephony.gsm.GSMPhone);
  public void dispose();
  public int[] getAdnRecordsSize(int);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.gsm.SimSmsInterfaceManager extends com.android.internal.telephony.IccSmsInterfaceManager {
  public com.android.internal.telephony.gsm.SimSmsInterfaceManager(com.android.internal.telephony.gsm.GSMPhone, com.android.internal.telephony.SMSDispatcher);
  public void dispose();
  public boolean updateMessageOnIccEf(int, int, byte[]);
  public boolean copyMessageToIccEf(int, byte[], byte[]);
  public java.util.List<com.android.internal.telephony.SmsRawData> getAllMessagesFromIccEf();
  public boolean enableCellBroadcast(int);
  public boolean disableCellBroadcast(int);
  public boolean enableCellBroadcastRange(int, int);
  public boolean disableCellBroadcastRange(int, int);
public class com.android.internal.telephony.gsm.SimTlv {
  public com.android.internal.telephony.gsm.SimTlv(byte[], int, int);
  public boolean nextObject();
  public boolean isValidObject();
  public int getTag();
  public byte[] getData();
public final class com.android.internal.telephony.gsm.SmsBroadcastConfigInfo {
  public com.android.internal.telephony.gsm.SmsBroadcastConfigInfo(int, int, int, int, boolean);
  public void setFromServiceId(int);
  public int getFromServiceId();
  public void setToServiceId(int);
  public int getToServiceId();
  public void setFromCodeScheme(int);
  public int getFromCodeScheme();
  public void setToCodeScheme(int);
  public int getToCodeScheme();
  public void setSelected(boolean);
  public boolean isSelected();
  public java.lang.String toString();
public class com.android.internal.telephony.gsm.SmsCbHeader implements android.telephony.SmsCbConstants {
  public static boolean isEmergencyMessage(int);
  public static boolean isEtwsMessage(int);
  public static boolean isCmasMessage(int);
  public static boolean isEtwsPopupAlert(int);
  public static boolean isEtwsEmergencyUserAlert(int);
  public java.lang.String toString();
public class com.android.internal.telephony.gsm.SmsMessage$SubmitPdu extends com.android.internal.telephony.SmsMessageBase$SubmitPduBase {
  public com.android.internal.telephony.gsm.SmsMessage$SubmitPdu();
public class com.android.internal.telephony.gsm.SmsMessage extends com.android.internal.telephony.SmsMessageBase {
  public com.android.internal.telephony.gsm.SmsMessage();
  public static com.android.internal.telephony.gsm.SmsMessage createFromPdu(byte[]);
  public boolean isTypeZero();
  public static com.android.internal.telephony.gsm.SmsMessage newFromCMT(java.lang.String[]);
  public static com.android.internal.telephony.gsm.SmsMessage newFromCDS(java.lang.String);
  public static com.android.internal.telephony.gsm.SmsMessage createFromEfRecord(int, byte[]);
  public static int getTPLayerLengthForPDU(java.lang.String);
  public static com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, byte[]);
  public static com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, byte[], int, int, int);
  public static com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean);
  public static com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, int, byte[], boolean);
  public static com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence, boolean);
  public int getProtocolIdentifier();
  public boolean isReplace();
  public boolean isCphsMwiMessage();
  public boolean isMWIClearMessage();
  public boolean isMWISetMessage();
  public boolean isMwiDontStore();
  public int getStatus();
  public boolean isStatusReportMessage();
  public boolean isReplyPathPresent();
  public android.telephony.SmsMessage$MessageClass getMessageClass();
public class com.android.internal.telephony.gsm.SpnOverride {
public class com.android.internal.telephony.gsm.SuppServiceNotification {
  public com.android.internal.telephony.gsm.SuppServiceNotification();
  public java.lang.String toString();
public class com.android.internal.telephony.gsm.UsimDataDownloadHandler extends android.os.Handler {
  public com.android.internal.telephony.gsm.UsimDataDownloadHandler(com.android.internal.telephony.CommandsInterface);
  public int startDataDownload(com.android.internal.telephony.gsm.SmsMessage);
  public void handleMessage(android.os.Message);
public class com.android.internal.telephony.gsm.UsimPhoneBookManager extends android.os.Handler implements com.android.internal.telephony.IccConstants {
  public com.android.internal.telephony.gsm.UsimPhoneBookManager(com.android.internal.telephony.PhoneBase, com.android.internal.telephony.AdnRecordCache);
  public void reset();
  public java.util.ArrayList<com.android.internal.telephony.AdnRecord> loadEfFilesFromUsim();
  public void invalidateCache();
  public void handleMessage(android.os.Message);
public final class com.android.internal.telephony.gsm.UsimServiceTable$UsimService extends java.lang.Enum<com.android.internal.telephony.gsm.UsimServiceTable$UsimService> {
  public static com.android.internal.telephony.gsm.UsimServiceTable$UsimService[] values();
  public static com.android.internal.telephony.gsm.UsimServiceTable$UsimService valueOf(java.lang.String);
public final class com.android.internal.telephony.gsm.UsimServiceTable extends com.android.internal.telephony.IccServiceTable {
  public com.android.internal.telephony.gsm.UsimServiceTable(byte[]);
  public boolean isAvailable(com.android.internal.telephony.gsm.UsimServiceTable$UsimService);
public interface com.android.internal.telephony.ims.IsimRecords {
  public abstract java.lang.String getIsimImpi();
  public abstract java.lang.String getIsimDomain();
  public abstract java.lang.String[] getIsimImpu();
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
  public java.lang.String getEfName();
  public void onRecordLoaded(android.os.AsyncResult);
public final class com.android.internal.telephony.ims.IsimUiccRecords implements com.android.internal.telephony.ims.IsimRecords {
  public com.android.internal.telephony.ims.IsimUiccRecords();
  public int fetchIsimRecords(com.android.internal.telephony.IccFileHandler, android.os.Handler);
  public java.lang.String getIsimImpi();
  public java.lang.String getIsimDomain();
  public java.lang.String[] getIsimImpu();
  public java.util.List<com.android.internal.telephony.Connection> getConnections();
  public boolean isMultiparty();
  public java.lang.String toString();
  public void setOnNITZTime(android.os.Handler, int, java.lang.Object);
  public void getIccCardStatus(android.os.Message);
  public void supplyIccPin(java.lang.String, android.os.Message);
  public void supplyIccPuk(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPin2(java.lang.String, android.os.Message);
  public void supplyIccPuk2(java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin(java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin2(java.lang.String, java.lang.String, android.os.Message);
  public void changeBarringPassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void supplyNetworkDepersonalization(java.lang.String, android.os.Message);
  public void getCurrentCalls(android.os.Message);
  public void getPDPContextList(android.os.Message);
  public void getDataCallList(android.os.Message);
  public void dial(java.lang.String, int, android.os.Message);
  public void dial(java.lang.String, int, com.android.internal.telephony.UUSInfo, android.os.Message);
  public void getIMSI(android.os.Message);
  public void getIMEI(android.os.Message);
  public void getIMEISV(android.os.Message);
  public void hangupConnection(int, android.os.Message);
  public void hangupWaitingOrBackground(android.os.Message);
  public void hangupForegroundResumeBackground(android.os.Message);
  public void switchWaitingOrHoldingAndActive(android.os.Message);
  public void conference(android.os.Message);
  public void setPreferredVoicePrivacy(boolean, android.os.Message);
  public void getPreferredVoicePrivacy(android.os.Message);
  public void separateConnection(int, android.os.Message);
  public void acceptCall(android.os.Message);
  public void rejectCall(android.os.Message);
  public void explicitCallTransfer(android.os.Message);
  public void getLastCallFailCause(android.os.Message);
  public void getLastPdpFailCause(android.os.Message);
  public void getLastDataCallFailCause(android.os.Message);
  public void setMute(boolean, android.os.Message);
  public void getMute(android.os.Message);
  public void getSignalStrength(android.os.Message);
  public void getVoiceRegistrationState(android.os.Message);
  public void getDataRegistrationState(android.os.Message);
  public void getOperator(android.os.Message);
  public void sendDtmf(char, android.os.Message);
  public void startDtmf(char, android.os.Message);
  public void stopDtmf(android.os.Message);
  public void sendBurstDtmf(java.lang.String, int, int, android.os.Message);
  public void sendSMS(java.lang.String, java.lang.String, android.os.Message);
  public void sendCdmaSms(byte[], android.os.Message);
  public void deleteSmsOnSim(int, android.os.Message);
  public void deleteSmsOnRuim(int, android.os.Message);
  public void writeSmsToSim(int, java.lang.String, java.lang.String, android.os.Message);
  public void writeSmsToRuim(int, java.lang.String, android.os.Message);
  public void setupDataCall(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void deactivateDataCall(int, int, android.os.Message);
  public void setRadioPower(boolean, android.os.Message);
  public void setSuppServiceNotifications(boolean, android.os.Message);
  public void acknowledgeLastIncomingGsmSms(boolean, int, android.os.Message);
  public void acknowledgeLastIncomingCdmaSms(boolean, int, android.os.Message);
  public void acknowledgeIncomingGsmSmsWithPdu(boolean, java.lang.String, android.os.Message);
  public void iccIO(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, android.os.Message);
  public void getCLIR(android.os.Message);
  public void setCLIR(int, android.os.Message);
  public void queryCallWaiting(int, android.os.Message);
  public void setCallWaiting(boolean, int, android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void setNetworkSelectionModeManual(java.lang.String, android.os.Message);
  public void getNetworkSelectionMode(android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public void setCallForward(int, int, int, java.lang.String, int, android.os.Message);
  public void queryCallForwardStatus(int, int, java.lang.String, android.os.Message);
  public void queryCLIP(android.os.Message);
  public void getBasebandVersion(android.os.Message);
  public void queryFacilityLock(java.lang.String, java.lang.String, int, android.os.Message);
  public void queryFacilityLockForApp(java.lang.String, java.lang.String, int, java.lang.String, android.os.Message);
  public void setFacilityLock(java.lang.String, boolean, java.lang.String, int, android.os.Message);
  public void setFacilityLockForApp(java.lang.String, boolean, java.lang.String, int, java.lang.String, android.os.Message);
  public void sendUSSD(java.lang.String, android.os.Message);
  public void cancelPendingUssd(android.os.Message);
  public void resetRadio(android.os.Message);
  public void invokeOemRilRequestRaw(byte[], android.os.Message);
  public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);
  public void setBandMode(int, android.os.Message);
  public void queryAvailableBandMode(android.os.Message);
  public void sendTerminalResponse(java.lang.String, android.os.Message);
  public void sendEnvelope(java.lang.String, android.os.Message);
  public void sendEnvelopeWithStatus(java.lang.String, android.os.Message);
  public void handleCallSetupRequestFromSim(boolean, android.os.Message);
  public void setPreferredNetworkType(int, android.os.Message);
  public void getPreferredNetworkType(android.os.Message);
  public void getNeighboringCids(android.os.Message);
  public void setLocationUpdates(boolean, android.os.Message);
  public void getSmscAddress(android.os.Message);
  public void setSmscAddress(java.lang.String, android.os.Message);
  public void reportSmsMemoryStatus(boolean, android.os.Message);
  public void reportStkServiceIsRunning(android.os.Message);
  public void getCdmaSubscriptionSource(android.os.Message);
  public void getGsmBroadcastConfig(android.os.Message);
  public void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[], android.os.Message);
  public void setGsmBroadcastActivation(boolean, android.os.Message);
  public void getDeviceIdentity(android.os.Message);
  public void getCDMASubscription(android.os.Message);
  public void setPhoneType(int);
  public void queryCdmaRoamingPreference(android.os.Message);
  public void setCdmaRoamingPreference(int, android.os.Message);
  public void setCdmaSubscriptionSource(int, android.os.Message);
  public void queryTTYMode(android.os.Message);
  public void setTTYMode(int, android.os.Message);
  public void sendCDMAFeatureCode(java.lang.String, android.os.Message);
  public void getCdmaBroadcastConfig(android.os.Message);
  public void setCdmaBroadcastConfig(int[], android.os.Message);
  public void setCdmaBroadcastActivation(boolean, android.os.Message);
  public void exitEmergencyCallbackMode(android.os.Message);
  public void supplyIccPinForApp(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPukForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPin2ForApp(java.lang.String, java.lang.String, android.os.Message);
  public void supplyIccPuk2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPinForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void changeIccPin2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);
  public void requestIsimAuthentication(java.lang.String, android.os.Message);
  public long getCreateTime();
  public long getConnectTime();
  public long getDisconnectTime();
  public long getDurationMillis();
  public long getHoldDurationMillis();
  public com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
  public com.android.internal.telephony.Connection$PostDialState getPostDialState();
  public void proceedAfterWaitChar();
  public void proceedAfterWildChar(java.lang.String);
  public void cancelPostDial();
  public java.lang.String getRemainingPostDialString();
  public int getNumberPresentation();
  public com.android.internal.telephony.UUSInfo getUUSInfo();
  public void onCallEnded(android.net.sip.SipAudioCall);
  public void onCallBusy(android.net.sip.SipAudioCall);
  public void onError(android.net.sip.SipAudioCall, int, java.lang.String);
  public com.android.internal.telephony.Phone getPhone();
  public java.util.List<com.android.internal.telephony.Connection> getConnections();
  public void onCallEstablished(android.net.sip.SipAudioCall);
  public void onCallHeld(android.net.sip.SipAudioCall);
  public void onChanged(android.net.sip.SipAudioCall);
  public com.android.internal.telephony.sip.SipPhone$SipConnection(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile, java.lang.String);
  public com.android.internal.telephony.sip.SipPhone$SipConnection(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile);
  public java.lang.String getCnapName();
  public int getNumberPresentation();
  public com.android.internal.telephony.Call$State getState();
  public boolean isIncoming();
  public java.lang.String getAddress();
  public com.android.internal.telephony.sip.SipPhone$SipCall getCall();
  public com.android.internal.telephony.Call getCall();
public class com.android.internal.telephony.sip.SipPhone extends com.android.internal.telephony.sip.SipPhoneBase {
  public boolean equals(java.lang.Object);
  public java.lang.String getPhoneName();
  public java.lang.String getSipUri();
  public boolean equals(com.android.internal.telephony.sip.SipPhone);
  public boolean canTake(java.lang.Object);
  public boolean canConference();
  public boolean canTransfer();
  public void clearDisconnected();
  public void sendDtmf(char);
  public void startDtmf(char);
  public void stopDtmf();
  public void sendBurstDtmf(java.lang.String);
  public void getOutgoingCallerIdDisplay(android.os.Message);
  public void setOutgoingCallerIdDisplay(int, android.os.Message);
  public void getCallWaiting(android.os.Message);
  public void setCallWaiting(boolean, android.os.Message);
  public void setEchoSuppressionEnabled(boolean);
  public void setMute(boolean);
  public boolean getMute();
  public com.android.internal.telephony.Call getForegroundCall();
  public com.android.internal.telephony.Call getBackgroundCall();
  public com.android.internal.telephony.Call getRingingCall();
  public android.telephony.ServiceState getServiceState();
  public android.net.LinkProperties getLinkProperties(java.lang.String);
  public boolean needsOtaServiceProvisioning();
  public void setCellBroadcastSmsConfig(int[], android.os.Message);
  public void getCellBroadcastSmsConfig(android.os.Message);
  public void activateCellBroadcastSms(int, android.os.Message);
  public com.android.internal.telephony.IccFileHandler getIccFileHandler();
  public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public void saveClirSetting(int);
  public boolean isDataConnectivityPossible();
  public boolean disableDataConnectivity();
  public boolean enableDataConnectivity();
  public void setDataRoamingEnabled(boolean);
  public boolean getDataRoamingEnabled();
  public void disableLocationUpdates();
  public void enableLocationUpdates();
  public void updateServiceLocation();
  public java.util.List getCurrentDataConnectionList();
  public void getDataCallList(android.os.Message);
  public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public void getNeighboringCids(android.os.Message);
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void getAvailableNetworks(android.os.Message);
  public com.android.internal.telephony.IccCard getIccCard();
  public boolean getIccRecordsLoaded();
  public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public void getCallForwardingOption(int, android.os.Message);
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public java.lang.String getLine1AlphaTag();
  public java.lang.String getLine1Number();
  public java.lang.String getIccSerialNumber();
  public java.lang.String getSubscriberId();
  public java.lang.String getMeid();
  public java.lang.String getEsn();
  public java.lang.String getImei();
  public java.lang.String getDeviceSvn();
  public java.lang.String getDeviceId();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getVoiceMailNumber();
  public void setRadioPower(boolean);
  public void unregisterForSuppServiceNotification(android.os.Handler);
  public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public void sendUssdResponse(java.lang.String);
  public boolean handlePinMmi(java.lang.String);
  public boolean canDial();
  public void notifyCallForwardingIndicator();
  public com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public com.android.internal.telephony.Phone$DataState getDataConnectionState();
  public java.util.List getPendingMmiCodes();
  public boolean getCallForwardingIndicator();
  public boolean getMessageWaitingIndicator();
  public android.telephony.SignalStrength getSignalStrength();
  public int getPhoneType();
  public com.android.internal.telephony.Phone$State getState();
  public android.telephony.CellLocation getCellLocation();
  public void unregisterForRingbackTone(android.os.Handler);
  public void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public com.android.internal.telephony.sip.SipPhoneBase(android.content.Context, com.android.internal.telephony.PhoneNotifier);
  public abstract com.android.internal.telephony.Call getForegroundCall();
  public abstract com.android.internal.telephony.Call getBackgroundCall();
  public abstract com.android.internal.telephony.Call getRingingCall();
  public void registerForRingbackTone(android.os.Handler, int, java.lang.Object);
  public void unregisterForRingbackTone(android.os.Handler);
  public android.telephony.ServiceState getServiceState();
  public android.telephony.CellLocation getCellLocation();
  public com.android.internal.telephony.Phone$State getState();
  public int getPhoneType();
  public android.telephony.SignalStrength getSignalStrength();
  public boolean getMessageWaitingIndicator();
  public boolean getCallForwardingIndicator();
  public java.util.List<? extends com.android.internal.telephony.MmiCode> getPendingMmiCodes();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState();
  public com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String);
  public com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
  public void notifyCallForwardingIndicator();
  public boolean canDial();
  public boolean handlePinMmi(java.lang.String);
  public void sendUssdResponse(java.lang.String);
  public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object);
  public void unregisterForSuppServiceNotification(android.os.Handler);
  public void setRadioPower(boolean);
  public java.lang.String getVoiceMailNumber();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceSvn();
  public java.lang.String getImei();
  public java.lang.String getEsn();
  public java.lang.String getMeid();
  public java.lang.String getSubscriberId();
  public java.lang.String getIccSerialNumber();
  public java.lang.String getLine1Number();
  public java.lang.String getLine1AlphaTag();
  public void setLine1Number(java.lang.String, java.lang.String, android.os.Message);
  public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message);
  public void getCallForwardingOption(int, android.os.Message);
  public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message);
  public void getOutgoingCallerIdDisplay(android.os.Message);
  public void setOutgoingCallerIdDisplay(int, android.os.Message);
  public void getCallWaiting(android.os.Message);
  public void setCallWaiting(boolean, android.os.Message);
  public boolean getIccRecordsLoaded();
  public com.android.internal.telephony.IccCard getIccCard();
  public void getAvailableNetworks(android.os.Message);
  public void setNetworkSelectionModeAutomatic(android.os.Message);
  public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message);
  public void getNeighboringCids(android.os.Message);
  public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object);
  public void getDataCallList(android.os.Message);
  public java.util.List<com.android.internal.telephony.DataConnection> getCurrentDataConnectionList();
  public void updateServiceLocation();
  public void enableLocationUpdates();
  public void disableLocationUpdates();
  public boolean getDataRoamingEnabled();
  public void setDataRoamingEnabled(boolean);
  public boolean enableDataConnectivity();
  public boolean disableDataConnectivity();
  public boolean isDataConnectivityPossible();
  public void saveClirSetting(int);
  public com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
  public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
  public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
  public com.android.internal.telephony.IccFileHandler getIccFileHandler();
  public void activateCellBroadcastSms(int, android.os.Message);
  public void getCellBroadcastSmsConfig(android.os.Message);
  public void setCellBroadcastSmsConfig(int[], android.os.Message);
  public boolean needsOtaServiceProvisioning();
  public android.net.LinkProperties getLinkProperties(java.lang.String);
public class com.android.internal.telephony.sip.SipPhoneFactory {
  public com.android.internal.telephony.sip.SipPhoneFactory();
  public static com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String, android.content.Context, com.android.internal.telephony.PhoneNotifier);
public interface com.android.internal.telephony.test.SimulatedRadioControl {
  public abstract void triggerRing(java.lang.String);
  public abstract void progressConnectingCallState();
  public abstract void progressConnectingToActive();
  public abstract void setAutoProgressConnectingCall(boolean);
  public abstract void setNextDialFailImmediately(boolean);
  public abstract void setNextCallFailCause(int);
  public abstract void triggerHangupForeground();
  public abstract void triggerHangupBackground();
  public abstract void triggerHangupAll();
  public abstract void triggerIncomingSMS(java.lang.String);
  public abstract void shutdown();
  public abstract void pauseResponses();
  public abstract void resumeResponses();
  public abstract void triggerSsn(int, int);
  public abstract void triggerIncomingUssd(java.lang.String, java.lang.String);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.textservice.ISpellCheckerSession$Stub extends android.os.Binder implements com.android.internal.textservice.ISpellCheckerSession {
  public com.android.internal.textservice.ISpellCheckerSession$Stub();
  public static com.android.internal.textservice.ISpellCheckerSession asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.textservice.ISpellCheckerSession extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.textservice.ISpellCheckerSessionListener$Stub extends android.os.Binder implements com.android.internal.textservice.ISpellCheckerSessionListener {
  public com.android.internal.textservice.ISpellCheckerSessionListener$Stub();
  public static com.android.internal.textservice.ISpellCheckerSessionListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.textservice.ISpellCheckerSessionListener extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.textservice.ITextServicesManager$Stub extends android.os.Binder implements com.android.internal.textservice.ITextServicesManager {
  public com.android.internal.textservice.ITextServicesManager$Stub();
  public static com.android.internal.textservice.ITextServicesManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.textservice.ITextServicesManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.textservice.ITextServicesSessionListener$Stub extends android.os.Binder implements com.android.internal.textservice.ITextServicesSessionListener {
  public com.android.internal.textservice.ITextServicesSessionListener$Stub();
  public static com.android.internal.textservice.ITextServicesSessionListener asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.textservice.ITextServicesSessionListener extends android.os.IInterface {
public class com.android.internal.util.ArrayUtils {
  public static int idealByteArraySize(int);
  public static int idealBooleanArraySize(int);
  public static int idealShortArraySize(int);
  public static int idealCharArraySize(int);
  public static int idealIntArraySize(int);
  public static int idealFloatArraySize(int);
  public static int idealObjectArraySize(int);
  public static int idealLongArraySize(int);
  public static boolean equals(byte[], byte[], int);
  public static <T extends java/lang/Object> T[] emptyArray(java.lang.Class<T>);
  public static <T extends java/lang/Object> boolean contains(T[], T);
  public static boolean contains(int[], int);
  public void run();
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void handleMessage(android.os.Message);
public class com.android.internal.util.AsyncChannel {
  public com.android.internal.util.AsyncChannel();
  public int connectSrcHandlerToPackageSync(android.content.Context, android.os.Handler, java.lang.String, java.lang.String);
  public int connectSync(android.content.Context, android.os.Handler, android.os.Messenger);
  public int connectSync(android.content.Context, android.os.Handler, android.os.Handler);
  public int fullyConnectSync(android.content.Context, android.os.Handler, android.os.Handler);
  public void connect(android.content.Context, android.os.Handler, java.lang.String, java.lang.String);
  public void connect(android.content.Context, android.os.Handler, java.lang.Class<?>);
  public void connect(android.content.Context, android.os.Handler, android.os.Messenger);
  public void connected(android.content.Context, android.os.Handler, android.os.Messenger);
  public void connect(android.content.Context, android.os.Handler, android.os.Handler);
  public void connect(com.android.internal.util.AsyncService, android.os.Messenger);
  public void disconnected();
  public void disconnect();
  public void sendMessage(android.os.Message);
  public void sendMessage(int);
  public void sendMessage(int, int);
  public void sendMessage(int, int, int);
  public void sendMessage(int, int, int, java.lang.Object);
  public void sendMessage(int, java.lang.Object);
  public void replyToMessage(android.os.Message, android.os.Message);
  public void replyToMessage(android.os.Message, int);
  public void replyToMessage(android.os.Message, int, int);
  public void replyToMessage(android.os.Message, int, int, int);
  public void replyToMessage(android.os.Message, int, int, int, java.lang.Object);
  public void replyToMessage(android.os.Message, int, java.lang.Object);
  public android.os.Message sendMessageSynchronously(android.os.Message);
  public android.os.Message sendMessageSynchronously(int);
  public android.os.Message sendMessageSynchronously(int, int);
  public android.os.Message sendMessageSynchronously(int, int, int);
  public android.os.Message sendMessageSynchronously(int, int, int, java.lang.Object);
  public android.os.Message sendMessageSynchronously(int, java.lang.Object);
public final class com.android.internal.util.AsyncService$AsyncServiceInfo {
  public com.android.internal.util.AsyncService$AsyncServiceInfo();
public abstract class com.android.internal.util.AsyncService extends android.app.Service {
  public com.android.internal.util.AsyncService();
  public abstract com.android.internal.util.AsyncService$AsyncServiceInfo createHandler();
  public android.os.Handler getHandler();
  public void onCreate();
  public int onStartCommand(android.content.Intent, int, int);
  public void onDestroy();
  public android.os.IBinder onBind(android.content.Intent);
public class com.android.internal.util.BitwiseInputStream$AccessException extends java.lang.Exception {
  public com.android.internal.util.BitwiseInputStream$AccessException(java.lang.String);
public class com.android.internal.util.BitwiseInputStream {
  public com.android.internal.util.BitwiseInputStream(byte[]);
  public int available();
public class com.android.internal.util.BitwiseOutputStream$AccessException extends java.lang.Exception {
  public com.android.internal.util.BitwiseOutputStream$AccessException(java.lang.String);
public class com.android.internal.util.BitwiseOutputStream {
  public com.android.internal.util.BitwiseOutputStream(int);
  public byte[] toByteArray();
  public void skip(int);
  public char charAt(int);
  public int length();
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public char charAt(int);
  public int length();
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
public class com.android.internal.util.CharSequences {
  public com.android.internal.util.CharSequences();
  public static java.lang.CharSequence forAsciiBytes(byte[]);
  public static java.lang.CharSequence forAsciiBytes(byte[], int, int);
  public static boolean equals(java.lang.CharSequence, java.lang.CharSequence);
  public static int compareToIgnoreCase(java.lang.CharSequence, java.lang.CharSequence);
public class com.android.internal.util.FastMath {
  public com.android.internal.util.FastMath();
  public static int round(float);
public class com.android.internal.util.FastXmlSerializer implements org.xmlpull.v1.XmlSerializer {
  public com.android.internal.util.FastXmlSerializer();
  public int getDepth();
  public boolean getFeature(java.lang.String);
  public java.lang.String getName();
  public java.lang.String getNamespace();
  public java.lang.Object getProperty(java.lang.String);
public class com.android.internal.util.HexDump {
  public com.android.internal.util.HexDump();
  public static java.lang.String dumpHexString(byte[]);
  public static java.lang.String dumpHexString(byte[], int, int);
  public static java.lang.String toHexString(byte);
  public static java.lang.String toHexString(byte[]);
  public static java.lang.String toHexString(byte[], int, int);
  public static java.lang.String toHexString(int);
  public static byte[] toByteArray(byte);
  public static byte[] toByteArray(int);
  public static byte[] hexStringToByteArray(java.lang.String);
public interface com.android.internal.util.IState {
  public abstract void enter();
  public abstract void exit();
  public abstract boolean processMessage(android.os.Message);
  public abstract java.lang.String getName();
public class com.android.internal.util.MemInfoReader {
  public com.android.internal.util.MemInfoReader();
  public void readMemInfo();
  public long getTotalSize();
  public long getFreeSize();
  public long getCachedSize();
public class com.android.internal.util.Objects {
  public com.android.internal.util.Objects();
  public static boolean equal(java.lang.Object, java.lang.Object);
  public static int hashCode(java.lang.Object...);
public class com.android.internal.util.Preconditions {
  public com.android.internal.util.Preconditions();
  public static <T extends java/lang/Object> T checkNotNull(T);
  public static <T extends java/lang/Object> T checkNotNull(T, java.lang.Object);
public interface com.android.internal.util.Predicate<T> {
  public abstract boolean apply(T);
  public boolean apply(T);
  public boolean apply(T);
  public boolean apply(T);
public class com.android.internal.util.Predicates {
  public static <T extends java/lang/Object> com.android.internal.util.Predicate<T> and(com.android.internal.util.Predicate<? super T>...);
  public static <T extends java/lang/Object> com.android.internal.util.Predicate<T> and(java.lang.Iterable<? extends com.android.internal.util.Predicate<? super T>>);
  public static <T extends java/lang/Object> com.android.internal.util.Predicate<T> or(com.android.internal.util.Predicate<? super T>...);
  public static <T extends java/lang/Object> com.android.internal.util.Predicate<T> or(java.lang.Iterable<? extends com.android.internal.util.Predicate<? super T>>);
  public static <T extends java/lang/Object> com.android.internal.util.Predicate<T> not(com.android.internal.util.Predicate<? super T>);
public class com.android.internal.util.State implements com.android.internal.util.IState {
  public void enter();
  public void exit();
  public boolean processMessage(android.os.Message);
  public java.lang.String getName();
public class com.android.internal.util.StateMachine$ProcessedMessageInfo {
  public void update(android.os.Message, com.android.internal.util.State, com.android.internal.util.State);
  public int getWhat();
  public com.android.internal.util.State getState();
  public com.android.internal.util.State getOriginalState();
  public java.lang.String toString();
  public boolean processMessage(android.os.Message);
  public boolean processMessage(android.os.Message);
  public java.lang.String toString();
  public final void handleMessage(android.os.Message);
public class com.android.internal.util.StateMachine {
  public final java.lang.String getName();
  public final void setProcessedMessagesSize(int);
  public final int getProcessedMessagesSize();
  public final int getProcessedMessagesCount();
  public final com.android.internal.util.StateMachine$ProcessedMessageInfo getProcessedMessageInfo(int);
  public final android.os.Handler getHandler();
  public final android.os.Message obtainMessage();
  public final android.os.Message obtainMessage(int);
  public final android.os.Message obtainMessage(int, java.lang.Object);
  public final android.os.Message obtainMessage(int, int, int);
  public final android.os.Message obtainMessage(int, int, int, java.lang.Object);
  public final void sendMessage(int);
  public final void sendMessage(int, java.lang.Object);
  public final void sendMessage(android.os.Message);
  public final void sendMessageDelayed(int, long);
  public final void sendMessageDelayed(int, java.lang.Object, long);
  public final void sendMessageDelayed(android.os.Message, long);
  public final void quit();
  public boolean isDbg();
  public void setDbg(boolean);
  public void start();
public class com.android.internal.util.TypedProperties$ParseException extends java.lang.IllegalArgumentException {
public class com.android.internal.util.TypedProperties$TypeException extends java.lang.IllegalArgumentException {
public class com.android.internal.util.TypedProperties extends java.util.HashMap<java.lang.String, java.lang.Object> {
  public com.android.internal.util.TypedProperties();
  public java.lang.Object get(java.lang.Object);
  public boolean getBoolean(java.lang.String, boolean);
  public byte getByte(java.lang.String, byte);
  public short getShort(java.lang.String, short);
  public int getInt(java.lang.String, int);
  public long getLong(java.lang.String, long);
  public float getFloat(java.lang.String, float);
  public double getDouble(java.lang.String, double);
  public java.lang.String getString(java.lang.String, java.lang.String);
  public boolean getBoolean(java.lang.String);
  public byte getByte(java.lang.String);
  public short getShort(java.lang.String);
  public int getInt(java.lang.String);
  public long getLong(java.lang.String);
  public float getFloat(java.lang.String);
  public double getDouble(java.lang.String);
  public java.lang.String getString(java.lang.String);
  public int getStringInfo(java.lang.String);
public class com.android.internal.util.XmlUtils {
  public com.android.internal.util.XmlUtils();
  public static final int convertValueToList(java.lang.CharSequence, java.lang.String[], int);
  public static final boolean convertValueToBoolean(java.lang.CharSequence, boolean);
  public static final int convertValueToInt(java.lang.CharSequence, int);
  public static final int convertValueToUnsignedInt(java.lang.String, int);
  public static final int parseUnsignedIntAttribute(java.lang.CharSequence);
public class com.android.internal.view.BaseIWindow extends android.view.IWindow$Stub {
  public com.android.internal.view.BaseIWindow();
  public void setSession(android.view.IWindowSession);
  public void resized(int, int, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration);
  public void dispatchAppVisibility(boolean);
  public void dispatchGetNewSurface();
  public void windowFocusChanged(boolean, boolean);
  public void executeCommand(java.lang.String, java.lang.String, android.os.ParcelFileDescriptor);
  public void closeSystemDialogs(java.lang.String);
  public void dispatchWallpaperOffsets(float, float, float, float, boolean);
  public void dispatchDragEvent(android.view.DragEvent);
  public void dispatchSystemUiVisibilityChanged(int, int, int, int);
  public void dispatchWallpaperCommand(java.lang.String, int, int, int, android.os.Bundle, boolean);
public abstract class com.android.internal.view.BaseSurfaceHolder implements android.view.SurfaceHolder {
  public com.android.internal.view.BaseSurfaceHolder();
  public abstract void onUpdateSurface();
  public abstract void onRelayoutContainer();
  public abstract boolean onAllowLockCanvas();
  public int getRequestedWidth();
  public int getRequestedHeight();
  public int getRequestedFormat();
  public int getRequestedType();
  public void addCallback(android.view.SurfaceHolder$Callback);
  public void removeCallback(android.view.SurfaceHolder$Callback);
  public android.view.SurfaceHolder$Callback[] getCallbacks();
  public void ungetCallbacks();
  public void setFixedSize(int, int);
  public void setSizeFromLayout();
  public void setFormat(int);
  public void setType(int);
  public android.graphics.Canvas lockCanvas();
  public android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public void unlockCanvasAndPost(android.graphics.Canvas);
  public android.view.Surface getSurface();
  public android.graphics.Rect getSurfaceFrame();
  public void setSurfaceFrameSize(int, int);
  public void handleMessage(android.os.Message);
public class com.android.internal.view.IInputConnectionWrapper extends com.android.internal.view.IInputContext$Stub {
  public com.android.internal.view.IInputConnectionWrapper(android.os.Looper, android.view.inputmethod.InputConnection);
  public boolean isActive();
  public void getTextAfterCursor(int, int, int, com.android.internal.view.IInputContextCallback);
  public void getTextBeforeCursor(int, int, int, com.android.internal.view.IInputContextCallback);
  public void getSelectedText(int, int, com.android.internal.view.IInputContextCallback);
  public void getCursorCapsMode(int, int, com.android.internal.view.IInputContextCallback);
  public void getExtractedText(android.view.inputmethod.ExtractedTextRequest, int, int, com.android.internal.view.IInputContextCallback);
  public void commitText(java.lang.CharSequence, int);
  public void commitCompletion(android.view.inputmethod.CompletionInfo);
  public void commitCorrection(android.view.inputmethod.CorrectionInfo);
  public void setSelection(int, int);
  public void performEditorAction(int);
  public void performContextMenuAction(int);
  public void setComposingRegion(int, int);
  public void setComposingText(java.lang.CharSequence, int);
  public void finishComposingText();
  public void sendKeyEvent(android.view.KeyEvent);
  public void clearMetaKeyStates(int);
  public void deleteSurroundingText(int, int);
  public void beginBatchEdit();
  public void endBatchEdit();
  public void reportFullscreenMode(boolean);
  public void performPrivateCommand(java.lang.String, android.os.Bundle);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputContext$Stub extends android.os.Binder implements com.android.internal.view.IInputContext {
  public com.android.internal.view.IInputContext$Stub();
  public static com.android.internal.view.IInputContext asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputContext extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputContextCallback$Stub extends android.os.Binder implements com.android.internal.view.IInputContextCallback {
  public com.android.internal.view.IInputContextCallback$Stub();
  public static com.android.internal.view.IInputContextCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputContextCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputMethod$Stub extends android.os.Binder implements com.android.internal.view.IInputMethod {
  public com.android.internal.view.IInputMethod$Stub();
  public static com.android.internal.view.IInputMethod asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputMethod extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputMethodCallback$Stub extends android.os.Binder implements com.android.internal.view.IInputMethodCallback {
  public com.android.internal.view.IInputMethodCallback$Stub();
  public static com.android.internal.view.IInputMethodCallback asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputMethodCallback extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputMethodClient$Stub extends android.os.Binder implements com.android.internal.view.IInputMethodClient {
  public com.android.internal.view.IInputMethodClient$Stub();
  public static com.android.internal.view.IInputMethodClient asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputMethodClient extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputMethodManager$Stub extends android.os.Binder implements com.android.internal.view.IInputMethodManager {
  public com.android.internal.view.IInputMethodManager$Stub();
  public static com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputMethodManager extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.view.IInputMethodSession$Stub extends android.os.Binder implements com.android.internal.view.IInputMethodSession {
  public com.android.internal.view.IInputMethodSession$Stub();
  public static com.android.internal.view.IInputMethodSession asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.view.IInputMethodSession extends android.os.IInterface {
  public com.android.internal.view.InputBindResult createFromParcel(android.os.Parcel);
  public com.android.internal.view.InputBindResult[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
public final class com.android.internal.view.InputBindResult implements android.os.Parcelable {
  public com.android.internal.view.InputBindResult(com.android.internal.view.IInputMethodSession, java.lang.String, int);
  public java.lang.String toString();
  public void writeToParcel(android.os.Parcel, int);
  public int describeContents();
  public void setTextBeforeCursor(java.lang.CharSequence, int);
  public void setTextAfterCursor(java.lang.CharSequence, int);
  public void setSelectedText(java.lang.CharSequence, int);
  public void setCursorCapsMode(int, int);
  public void setExtractedText(android.view.inputmethod.ExtractedText, int);
public class com.android.internal.view.InputConnectionWrapper implements android.view.inputmethod.InputConnection {
  public com.android.internal.view.InputConnectionWrapper(com.android.internal.view.IInputContext);
  public java.lang.CharSequence getTextAfterCursor(int, int);
  public java.lang.CharSequence getTextBeforeCursor(int, int);
  public java.lang.CharSequence getSelectedText(int);
  public int getCursorCapsMode(int);
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public boolean commitText(java.lang.CharSequence, int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean setSelection(int, int);
  public boolean performEditorAction(int);
  public boolean performContextMenuAction(int);
  public boolean setComposingRegion(int, int);
  public boolean setComposingText(java.lang.CharSequence, int);
  public boolean finishComposingText();
  public boolean beginBatchEdit();
  public boolean endBatchEdit();
  public boolean sendKeyEvent(android.view.KeyEvent);
  public boolean clearMetaKeyStates(int);
  public boolean deleteSurroundingText(int, int);
  public boolean reportFullscreenMode(boolean);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
public interface com.android.internal.view.RootViewSurfaceTaker {
  public abstract android.view.SurfaceHolder$Callback2 willYouTakeTheSurface();
  public abstract void setSurfaceType(int);
  public abstract void setSurfaceFormat(int);
  public abstract void setSurfaceKeepScreenOn(boolean);
  public abstract android.view.InputQueue$Callback willYouTakeTheInputQueue();
public class com.android.internal.view.menu.ActionMenuItem implements android.view.MenuItem {
  public com.android.internal.view.menu.ActionMenuItem(android.content.Context, int, int, int, int, java.lang.CharSequence);
  public char getAlphabeticShortcut();
  public int getGroupId();
  public android.graphics.drawable.Drawable getIcon();
  public android.content.Intent getIntent();
  public int getItemId();
  public android.view.ContextMenu$ContextMenuInfo getMenuInfo();
  public char getNumericShortcut();
  public int getOrder();
  public android.view.SubMenu getSubMenu();
  public java.lang.CharSequence getTitle();
  public java.lang.CharSequence getTitleCondensed();
  public boolean hasSubMenu();
  public boolean isCheckable();
  public boolean isChecked();
  public boolean isEnabled();
  public boolean isVisible();
  public android.view.MenuItem setAlphabeticShortcut(char);
  public android.view.MenuItem setCheckable(boolean);
  public com.android.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean);
  public android.view.MenuItem setChecked(boolean);
  public android.view.MenuItem setEnabled(boolean);
  public android.view.MenuItem setIcon(android.graphics.drawable.Drawable);
  public android.view.MenuItem setIcon(int);
  public android.view.MenuItem setIntent(android.content.Intent);
  public android.view.MenuItem setNumericShortcut(char);
  public android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener);
  public android.view.MenuItem setShortcut(char, char);
  public android.view.MenuItem setTitle(java.lang.CharSequence);
  public android.view.MenuItem setTitle(int);
  public android.view.MenuItem setTitleCondensed(java.lang.CharSequence);
  public android.view.MenuItem setVisible(boolean);
  public boolean invoke();
  public void setShowAsAction(int);
  public android.view.MenuItem setActionView(android.view.View);
  public android.view.View getActionView();
  public android.view.MenuItem setActionView(int);
  public android.view.ActionProvider getActionProvider();
  public android.view.MenuItem setActionProvider(android.view.ActionProvider);
  public android.view.MenuItem setShowAsActionFlags(int);
  public boolean expandActionView();
  public boolean collapseActionView();
  public boolean isActionViewExpanded();
  public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener);
public class com.android.internal.view.menu.ActionMenuItemView extends android.widget.LinearLayout implements com.android.internal.view.menu.MenuView$ItemView,android.view.View$OnClickListener,android.view.View$OnLongClickListener,com.android.internal.view.menu.ActionMenuView$ActionMenuChildView {
  public com.android.internal.view.menu.ActionMenuItemView(android.content.Context);
  public com.android.internal.view.menu.ActionMenuItemView(android.content.Context, android.util.AttributeSet);
  public com.android.internal.view.menu.ActionMenuItemView(android.content.Context, android.util.AttributeSet, int);
  public void onFinishInflate();
  public com.android.internal.view.menu.MenuItemImpl getItemData();
  public void initialize(com.android.internal.view.menu.MenuItemImpl, int);
  public void setEnabled(boolean);
  public void onClick(android.view.View);
  public void setItemInvoker(com.android.internal.view.menu.MenuBuilder$ItemInvoker);
  public boolean prefersCondensedTitle();
  public void setCheckable(boolean);
  public void setChecked(boolean);
  public void setExpandedFormat(boolean);
  public void setIcon(android.graphics.drawable.Drawable);
  public boolean hasText();
  public void setShortcut(boolean, char);
  public void setTitle(java.lang.CharSequence);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchHoverEvent(android.view.MotionEvent);
  public boolean showsIcon();
  public boolean needsDividerBefore();
  public boolean needsDividerAfter();
  public boolean onLongClick(android.view.View);
  public com.android.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu(com.android.internal.view.menu.ActionMenuPresenter, android.content.Context, com.android.internal.view.menu.SubMenuBuilder);
  public void onDismiss();
  public com.android.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable(com.android.internal.view.menu.ActionMenuPresenter, com.android.internal.view.menu.ActionMenuPresenter$OverflowPopup);
  public void run();
  public com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton(com.android.internal.view.menu.ActionMenuPresenter, android.content.Context);
  public boolean performClick();
  public boolean needsDividerBefore();
  public boolean needsDividerAfter();
  public com.android.internal.view.menu.ActionMenuPresenter$OverflowPopup(com.android.internal.view.menu.ActionMenuPresenter, android.content.Context, com.android.internal.view.menu.MenuBuilder, android.view.View, boolean);
  public void onDismiss();
  public boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public com.android.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel);
  public com.android.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
public class com.android.internal.view.menu.ActionMenuPresenter extends com.android.internal.view.menu.BaseMenuPresenter implements android.view.ActionProvider$SubUiVisibilityListener {
  public com.android.internal.view.menu.ActionMenuPresenter(android.content.Context);
  public void initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void setWidthLimit(int, boolean);
  public void setReserveOverflow(boolean);
  public void setItemLimit(int);
  public void setExpandedActionViewsExclusive(boolean);
  public com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup);
  public android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl, android.view.View, android.view.ViewGroup);
  public void bindItemView(com.android.internal.view.menu.MenuItemImpl, com.android.internal.view.menu.MenuView$ItemView);
  public boolean shouldIncludeItem(int, com.android.internal.view.menu.MenuItemImpl);
  public void updateMenuView(boolean);
  public boolean filterLeftoverView(android.view.ViewGroup, int);
  public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public boolean showOverflowMenu();
  public boolean hideOverflowMenu();
  public boolean dismissPopupMenus();
  public boolean hideSubMenus();
  public boolean isOverflowMenuShowing();
  public boolean isOverflowReserved();
  public boolean flagActionItems();
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onSubUiVisibilityChanged(boolean);
public interface com.android.internal.view.menu.ActionMenuView$ActionMenuChildView {
  public abstract boolean needsDividerBefore();
  public abstract boolean needsDividerAfter();
public class com.android.internal.view.menu.ActionMenuView$LayoutParams extends android.widget.LinearLayout$LayoutParams {
  public com.android.internal.view.menu.ActionMenuView$LayoutParams(android.content.Context, android.util.AttributeSet);
  public com.android.internal.view.menu.ActionMenuView$LayoutParams(com.android.internal.view.menu.ActionMenuView$LayoutParams);
  public com.android.internal.view.menu.ActionMenuView$LayoutParams(int, int);
  public com.android.internal.view.menu.ActionMenuView$LayoutParams(int, int, boolean);
public class com.android.internal.view.menu.ActionMenuView extends android.widget.LinearLayout implements com.android.internal.view.menu.MenuBuilder$ItemInvoker,com.android.internal.view.menu.MenuView {
  public com.android.internal.view.menu.ActionMenuView(android.content.Context);
  public com.android.internal.view.menu.ActionMenuView(android.content.Context, android.util.AttributeSet);
  public void setPresenter(com.android.internal.view.menu.ActionMenuPresenter);
  public boolean isExpandedFormat();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onDetachedFromWindow();
  public boolean isOverflowReserved();
  public void setOverflowReserved(boolean);
  public com.android.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public com.android.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams();
  public boolean invokeItem(com.android.internal.view.menu.MenuItemImpl);
  public int getWindowAnimations();
  public void initialize(com.android.internal.view.menu.MenuBuilder);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
public abstract class com.android.internal.view.menu.BaseMenuPresenter implements com.android.internal.view.menu.MenuPresenter {
  public com.android.internal.view.menu.BaseMenuPresenter(android.content.Context, int, int);
  public void initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup);
  public void updateMenuView(boolean);
  public void setCallback(com.android.internal.view.menu.MenuPresenter$Callback);
  public com.android.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup);
  public android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl, android.view.View, android.view.ViewGroup);
  public abstract void bindItemView(com.android.internal.view.menu.MenuItemImpl, com.android.internal.view.menu.MenuView$ItemView);
  public boolean shouldIncludeItem(int, com.android.internal.view.menu.MenuItemImpl);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public boolean flagActionItems();
  public boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public int getId();
  public void setId(int);
public class com.android.internal.view.menu.ListMenuItemView extends android.widget.LinearLayout implements com.android.internal.view.menu.MenuView$ItemView {
  public com.android.internal.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
  public com.android.internal.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet);
  public void initialize(com.android.internal.view.menu.MenuItemImpl, int);
  public void setForceShowIcon(boolean);
  public void setTitle(java.lang.CharSequence);
  public com.android.internal.view.menu.MenuItemImpl getItemData();
  public void setCheckable(boolean);
  public void setChecked(boolean);
  public void setShortcut(boolean, char);
  public void setIcon(android.graphics.drawable.Drawable);
  public boolean prefersCondensedTitle();
  public boolean showsIcon();
public interface com.android.internal.view.menu.MenuBuilder$Callback {
  public abstract boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem);
  public abstract void onMenuModeChange(com.android.internal.view.menu.MenuBuilder);
public interface com.android.internal.view.menu.MenuBuilder$ItemInvoker {
  public abstract boolean invokeItem(com.android.internal.view.menu.MenuItemImpl);
public class com.android.internal.view.menu.MenuBuilder implements android.view.Menu {
  public com.android.internal.view.menu.MenuBuilder(android.content.Context);
  public com.android.internal.view.menu.MenuBuilder setDefaultShowAsAction(int);
  public void addMenuPresenter(com.android.internal.view.menu.MenuPresenter);
  public void removeMenuPresenter(com.android.internal.view.menu.MenuPresenter);
  public void savePresenterStates(android.os.Bundle);
  public void restorePresenterStates(android.os.Bundle);
  public void saveActionViewStates(android.os.Bundle);
  public void restoreActionViewStates(android.os.Bundle);
  public void setCallback(com.android.internal.view.menu.MenuBuilder$Callback);
  public android.view.MenuItem add(java.lang.CharSequence);
  public android.view.MenuItem add(int);
  public android.view.MenuItem add(int, int, int, java.lang.CharSequence);
  public android.view.MenuItem add(int, int, int, int);
  public android.view.SubMenu addSubMenu(java.lang.CharSequence);
  public android.view.SubMenu addSubMenu(int);
  public android.view.SubMenu addSubMenu(int, int, int, java.lang.CharSequence);
  public android.view.SubMenu addSubMenu(int, int, int, int);
  public int addIntentOptions(int, int, int, android.content.ComponentName, android.content.Intent[], android.content.Intent, int, android.view.MenuItem[]);
  public void removeItem(int);
  public void removeGroup(int);
  public void removeItemAt(int);
  public void clearAll();
  public void clear();
  public void setGroupCheckable(int, boolean, boolean);
  public void setGroupVisible(int, boolean);
  public void setGroupEnabled(int, boolean);
  public boolean hasVisibleItems();
  public android.view.MenuItem findItem(int);
  public int findItemIndex(int);
  public int findGroupIndex(int);
  public int findGroupIndex(int, int);
  public int size();
  public android.view.MenuItem getItem(int);
  public boolean isShortcutKey(int, android.view.KeyEvent);
  public void setQwertyMode(boolean);
  public void setShortcutsVisible(boolean);
  public boolean isShortcutsVisible();
  public android.content.Context getContext();
  public void changeMenuMode();
  public boolean performShortcut(int, android.view.KeyEvent, int);
  public boolean performIdentifierAction(int, int);
  public boolean performItemAction(android.view.MenuItem, int);
  public void close();
  public void stopDispatchingItemsChanged();
  public void startDispatchingItemsChanged();
  public void flagActionItems();
  public void clearHeader();
  public java.lang.CharSequence getHeaderTitle();
  public android.graphics.drawable.Drawable getHeaderIcon();
  public android.view.View getHeaderView();
  public com.android.internal.view.menu.MenuBuilder getRootMenu();
  public void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo);
  public boolean expandItemActionView(com.android.internal.view.menu.MenuItemImpl);
  public boolean collapseItemActionView(com.android.internal.view.menu.MenuItemImpl);
  public com.android.internal.view.menu.MenuItemImpl getExpandedItem();
public final class com.android.internal.view.menu.MenuItemImpl implements android.view.MenuItem {
  public boolean invoke();
  public boolean isEnabled();
  public android.view.MenuItem setEnabled(boolean);
  public int getGroupId();
  public int getItemId();
  public int getOrder();
  public int getOrdering();
  public android.content.Intent getIntent();
  public android.view.MenuItem setIntent(android.content.Intent);
  public android.view.MenuItem setCallback(java.lang.Runnable);
  public char getAlphabeticShortcut();
  public android.view.MenuItem setAlphabeticShortcut(char);
  public char getNumericShortcut();
  public android.view.MenuItem setNumericShortcut(char);
  public android.view.MenuItem setShortcut(char, char);
  public android.view.SubMenu getSubMenu();
  public boolean hasSubMenu();
  public java.lang.CharSequence getTitle();
  public android.view.MenuItem setTitle(java.lang.CharSequence);
  public android.view.MenuItem setTitle(int);
  public java.lang.CharSequence getTitleCondensed();
  public android.view.MenuItem setTitleCondensed(java.lang.CharSequence);
  public android.graphics.drawable.Drawable getIcon();
  public android.view.MenuItem setIcon(android.graphics.drawable.Drawable);
  public android.view.MenuItem setIcon(int);
  public boolean isCheckable();
  public android.view.MenuItem setCheckable(boolean);
  public void setExclusiveCheckable(boolean);
  public boolean isExclusiveCheckable();
  public boolean isChecked();
  public android.view.MenuItem setChecked(boolean);
  public boolean isVisible();
  public android.view.MenuItem setVisible(boolean);
  public android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener);
  public java.lang.String toString();
  public android.view.ContextMenu$ContextMenuInfo getMenuInfo();
  public void actionFormatChanged();
  public boolean shouldShowIcon();
  public boolean isActionButton();
  public boolean requestsActionButton();
  public boolean requiresActionButton();
  public void setIsActionButton(boolean);
  public boolean showsTextAsAction();
  public void setShowAsAction(int);
  public android.view.MenuItem setActionView(android.view.View);
  public android.view.MenuItem setActionView(int);
  public android.view.View getActionView();
  public android.view.ActionProvider getActionProvider();
  public android.view.MenuItem setActionProvider(android.view.ActionProvider);
  public android.view.MenuItem setShowAsActionFlags(int);
  public boolean expandActionView();
  public boolean collapseActionView();
  public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener);
  public boolean hasCollapsibleActionView();
  public void setActionViewExpanded(boolean);
  public boolean isActionViewExpanded();
  public void onChanged();
  public com.android.internal.view.menu.MenuPopupHelper$MenuAdapter(com.android.internal.view.menu.MenuPopupHelper, com.android.internal.view.menu.MenuBuilder);
  public int getCount();
  public com.android.internal.view.menu.MenuItemImpl getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public java.lang.Object getItem(int);
public class com.android.internal.view.menu.MenuPopupHelper implements android.widget.AdapterView$OnItemClickListener,android.view.View$OnKeyListener,android.view.ViewTreeObserver$OnGlobalLayoutListener,android.widget.PopupWindow$OnDismissListener,android.view.View$OnAttachStateChangeListener,com.android.internal.view.menu.MenuPresenter {
  public com.android.internal.view.menu.MenuPopupHelper(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public com.android.internal.view.menu.MenuPopupHelper(android.content.Context, com.android.internal.view.menu.MenuBuilder, android.view.View);
  public com.android.internal.view.menu.MenuPopupHelper(android.content.Context, com.android.internal.view.menu.MenuBuilder, android.view.View, boolean);
  public void setAnchorView(android.view.View);
  public void setForceShowIcon(boolean);
  public void show();
  public boolean tryShow();
  public void dismiss();
  public void onDismiss();
  public boolean isShowing();
  public void onItemClick(android.widget.AdapterView<?>, android.view.View, int, long);
  public boolean onKey(android.view.View, int, android.view.KeyEvent);
  public void onGlobalLayout();
  public void onViewAttachedToWindow(android.view.View);
  public void onViewDetachedFromWindow(android.view.View);
  public void initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup);
  public void updateMenuView(boolean);
  public void setCallback(com.android.internal.view.menu.MenuPresenter$Callback);
  public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public boolean flagActionItems();
  public boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public int getId();
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
public interface com.android.internal.view.menu.MenuPresenter$Callback {
  public abstract void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public abstract boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder);
public interface com.android.internal.view.menu.MenuPresenter {
  public abstract void initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public abstract com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup);
  public abstract void updateMenuView(boolean);
  public abstract void setCallback(com.android.internal.view.menu.MenuPresenter$Callback);
  public abstract boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public abstract void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public abstract boolean flagActionItems();
  public abstract boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public abstract boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public abstract int getId();
  public abstract android.os.Parcelable onSaveInstanceState();
  public abstract void onRestoreInstanceState(android.os.Parcelable);
public interface com.android.internal.view.menu.MenuView$ItemView {
  public abstract void initialize(com.android.internal.view.menu.MenuItemImpl, int);
  public abstract com.android.internal.view.menu.MenuItemImpl getItemData();
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void setEnabled(boolean);
  public abstract void setCheckable(boolean);
  public abstract void setChecked(boolean);
  public abstract void setShortcut(boolean, char);
  public abstract void setIcon(android.graphics.drawable.Drawable);
  public abstract boolean prefersCondensedTitle();
  public abstract boolean showsIcon();
public interface com.android.internal.view.menu.MenuView {
  public abstract void initialize(com.android.internal.view.menu.MenuBuilder);
  public abstract int getWindowAnimations();
public class com.android.internal.view.menu.SubMenuBuilder extends com.android.internal.view.menu.MenuBuilder implements android.view.SubMenu {
  public com.android.internal.view.menu.SubMenuBuilder(android.content.Context, com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public void setQwertyMode(boolean);
  public boolean isQwertyMode();
  public void setShortcutsVisible(boolean);
  public boolean isShortcutsVisible();
  public android.view.Menu getParentMenu();
  public android.view.MenuItem getItem();
  public void setCallback(com.android.internal.view.menu.MenuBuilder$Callback);
  public com.android.internal.view.menu.MenuBuilder getRootMenu();
  public android.view.SubMenu setIcon(android.graphics.drawable.Drawable);
  public android.view.SubMenu setIcon(int);
  public android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable);
  public android.view.SubMenu setHeaderIcon(int);
  public android.view.SubMenu setHeaderTitle(java.lang.CharSequence);
  public android.view.SubMenu setHeaderTitle(int);
  public android.view.SubMenu setHeaderView(android.view.View);
  public boolean expandItemActionView(com.android.internal.view.menu.MenuItemImpl);
  public boolean collapseItemActionView(com.android.internal.view.menu.MenuItemImpl);
  public java.lang.String getActionViewStatesKey();
  public void run();
public class com.android.internal.widget.AbsActionBarView$VisibilityAnimListener implements android.animation.Animator$AnimatorListener {
  public com.android.internal.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(int);
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
public abstract class com.android.internal.widget.AbsActionBarView extends android.view.ViewGroup {
  public com.android.internal.widget.AbsActionBarView(android.content.Context);
  public com.android.internal.widget.AbsActionBarView(android.content.Context, android.util.AttributeSet);
  public com.android.internal.widget.AbsActionBarView(android.content.Context, android.util.AttributeSet, int);
  public void setSplitActionBar(boolean);
  public void setSplitWhenNarrow(boolean);
  public void setContentHeight(int);
  public int getContentHeight();
  public void setSplitView(com.android.internal.widget.ActionBarContainer);
  public int getAnimatedVisibility();
  public void animateToVisibility(int);
  public void setVisibility(int);
  public boolean showOverflowMenu();
  public void postShowOverflowMenu();
  public boolean hideOverflowMenu();
  public boolean isOverflowMenuShowing();
  public boolean isOverflowReserved();
  public void dismissPopupMenus();
public class com.android.internal.widget.ActionBarContainer extends android.widget.FrameLayout {
  public com.android.internal.widget.ActionBarContainer(android.content.Context);
  public com.android.internal.widget.ActionBarContainer(android.content.Context, android.util.AttributeSet);
  public void onFinishInflate();
  public void setPrimaryBackground(android.graphics.drawable.Drawable);
  public void setStackedBackground(android.graphics.drawable.Drawable);
  public void setSplitBackground(android.graphics.drawable.Drawable);
  public void setTransitioning(boolean);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public void setTabContainer(com.android.internal.widget.ScrollingTabContainerView);
  public android.view.View getTabContainer();
  public void onDraw(android.graphics.Canvas);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public void onMeasure(int, int);
  public void onLayout(boolean, int, int, int, int);
  public void onClick(android.view.View);
public class com.android.internal.widget.ActionBarContextView extends com.android.internal.widget.AbsActionBarView implements android.animation.Animator$AnimatorListener {
  public com.android.internal.widget.ActionBarContextView(android.content.Context);
  public com.android.internal.widget.ActionBarContextView(android.content.Context, android.util.AttributeSet);
  public com.android.internal.widget.ActionBarContextView(android.content.Context, android.util.AttributeSet, int);
  public void onDetachedFromWindow();
  public void setSplitActionBar(boolean);
  public void setContentHeight(int);
  public void setCustomView(android.view.View);
  public void setTitle(java.lang.CharSequence);
  public void setSubtitle(java.lang.CharSequence);
  public java.lang.CharSequence getTitle();
  public java.lang.CharSequence getSubtitle();
  public void initForMode(android.view.ActionMode);
  public void closeMode();
  public void killMode();
  public boolean showOverflowMenu();
  public boolean hideOverflowMenu();
  public boolean isOverflowMenuShowing();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public boolean shouldDelayChildPressedState();
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onItemSelected(android.widget.AdapterView, android.view.View, int, long);
  public void onNothingSelected(android.widget.AdapterView);
  public void onClick(android.view.View);
  public void onClick(android.view.View);
  public void initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder);
  public com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup);
  public void updateMenuView(boolean);
  public void setCallback(com.android.internal.view.menu.MenuPresenter$Callback);
  public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder);
  public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean);
  public boolean flagActionItems();
  public boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl);
  public int getId();
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public com.android.internal.widget.ActionBarView$HomeView(android.content.Context);
  public com.android.internal.widget.ActionBarView$HomeView(android.content.Context, android.util.AttributeSet);
  public void setUp(boolean);
  public void setIcon(android.graphics.drawable.Drawable);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchHoverEvent(android.view.MotionEvent);
  public int getLeftOffset();
  public com.android.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel);
  public com.android.internal.widget.ActionBarView$SavedState[] newArray(int);
  public java.lang.Object[] newArray(int);
  public java.lang.Object createFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
public class com.android.internal.widget.ActionBarView extends com.android.internal.widget.AbsActionBarView {
  public com.android.internal.widget.ActionBarView(android.content.Context, android.util.AttributeSet);
  public void setWindowCallback(android.view.Window$Callback);
  public void onDetachedFromWindow();
  public boolean shouldDelayChildPressedState();
  public void initProgress();
  public void initIndeterminateProgress();
  public void setSplitActionBar(boolean);
  public boolean isSplitActionBar();
  public boolean hasEmbeddedTabs();
  public void setEmbeddedTabView(com.android.internal.widget.ScrollingTabContainerView);
  public void setCallback(android.app.ActionBar$OnNavigationListener);
  public void setMenu(android.view.Menu, com.android.internal.view.menu.MenuPresenter$Callback);
  public boolean hasExpandedActionView();
  public void collapseActionView();
  public void setCustomNavigationView(android.view.View);
  public java.lang.CharSequence getTitle();
  public void setTitle(java.lang.CharSequence);
  public void setWindowTitle(java.lang.CharSequence);
  public java.lang.CharSequence getSubtitle();
  public void setSubtitle(java.lang.CharSequence);
  public void setHomeButtonEnabled(boolean);
  public void setDisplayOptions(int);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setIcon(int);
  public void setLogo(android.graphics.drawable.Drawable);
  public void setLogo(int);
  public void setNavigationMode(int);
  public void setDropdownAdapter(android.widget.SpinnerAdapter);
  public android.widget.SpinnerAdapter getDropdownAdapter();
  public void setDropdownSelectedPosition(int);
  public int getDropdownSelectedPosition();
  public android.view.View getCustomNavigationView();
  public int getNavigationMode();
  public int getDisplayOptions();
  public void setContextView(com.android.internal.widget.ActionBarContextView);
  public void setCollapsable(boolean);
  public boolean isCollapsed();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  public android.os.Parcelable onSaveInstanceState();
  public void onRestoreInstanceState(android.os.Parcelable);
public class com.android.internal.widget.EditableInputConnection extends android.view.inputmethod.BaseInputConnection {
  public com.android.internal.widget.EditableInputConnection(android.widget.TextView);
  public android.text.Editable getEditable();
  public boolean beginBatchEdit();
  public boolean endBatchEdit();
  public boolean clearMetaKeyStates(int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean performEditorAction(int);
  public boolean performContextMenuAction(int);
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
  public boolean commitText(java.lang.CharSequence, int);
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.widget.IRemoteViewsAdapterConnection$Stub extends android.os.Binder implements com.android.internal.widget.IRemoteViewsAdapterConnection {
  public com.android.internal.widget.IRemoteViewsAdapterConnection$Stub();
  public static com.android.internal.widget.IRemoteViewsAdapterConnection asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.widget.IRemoteViewsAdapterConnection extends android.os.IInterface {
  public android.os.IBinder asBinder();
  public java.lang.String getInterfaceDescriptor();
public abstract class com.android.internal.widget.IRemoteViewsFactory$Stub extends android.os.Binder implements com.android.internal.widget.IRemoteViewsFactory {
  public com.android.internal.widget.IRemoteViewsFactory$Stub();
  public static com.android.internal.widget.IRemoteViewsFactory asInterface(android.os.IBinder);
  public android.os.IBinder asBinder();
public interface com.android.internal.widget.IRemoteViewsFactory extends android.os.IInterface {
  public void run();
  public int getCount();
  public java.lang.Object getItem(int);
  public long getItemId(int);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public void onClick(android.view.View);
  public com.android.internal.widget.ScrollingTabContainerView$TabView(com.android.internal.widget.ScrollingTabContainerView, android.content.Context, android.app.ActionBar$Tab, boolean);
  public void bindTab(android.app.ActionBar$Tab);
  public void onMeasure(int, int);
  public void update();
  public android.app.ActionBar$Tab getTab();
public class com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener implements android.animation.Animator$AnimatorListener {
  public com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener withFinalVisibility(int);
  public void onAnimationStart(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
public class com.android.internal.widget.ScrollingTabContainerView extends android.widget.HorizontalScrollView implements android.widget.AdapterView$OnItemSelectedListener {
  public com.android.internal.widget.ScrollingTabContainerView(android.content.Context);
  public void onMeasure(int, int);
  public void setAllowCollapse(boolean);
  public void setTabSelected(int);
  public void setContentHeight(int);
  public void animateToVisibility(int);
  public void animateToTab(int);
  public void onAttachedToWindow();
  public void onDetachedFromWindow();
  public void addTab(android.app.ActionBar$Tab, boolean);
  public void addTab(android.app.ActionBar$Tab, int, boolean);
  public void updateTab(int);
  public void removeTabAt(int);
  public void removeAllTabs();
  public void onItemSelected(android.widget.AdapterView<?>, android.view.View, int, long);
  public void onNothingSelected(android.widget.AdapterView<?>);
public class com.android.server.NetworkManagementSocketTagger$SocketTags {
  public com.android.server.NetworkManagementSocketTagger$SocketTags();
public final class com.android.server.NetworkManagementSocketTagger extends dalvik.system.SocketTagger {
  public com.android.server.NetworkManagementSocketTagger();
  public static void install();
  public static void setThreadSocketStatsTag(int);
  public static int getThreadSocketStatsTag();
  public static void setThreadSocketStatsUid(int);
  public static void setKernelCounterSet(int, int);
  public static void resetKernelUidStats(int);
  public static int kernelToTag(java.lang.String);
public class com.google.android.collect.Lists {
  public com.google.android.collect.Lists();
  public static <E extends java/lang/Object> java.util.ArrayList<E> newArrayList();
  public static <E extends java/lang/Object> java.util.ArrayList<E> newArrayList(E...);
public class com.google.android.collect.Maps {
  public com.google.android.collect.Maps();
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.HashMap<K, V> newHashMap();
public class com.google.android.collect.Sets {
  public com.google.android.collect.Sets();
  public static <K extends java/lang/Object> java.util.HashSet<K> newHashSet();
  public static <E extends java/lang/Object> java.util.HashSet<E> newHashSet(E...);
  public static <E extends java/lang/Object> java.util.SortedSet<E> newSortedSet();
  public static <E extends java/lang/Object> java.util.SortedSet<E> newSortedSet(E...);
public class com.google.android.gles_jni.EGLContextImpl extends javax.microedition.khronos.egl.EGLContext {
  public com.google.android.gles_jni.EGLContextImpl(int);
  public javax.microedition.khronos.opengles.GL getGL();
  public boolean equals(java.lang.Object);
  public int hashCode();
public class com.google.android.gles_jni.EGLDisplayImpl extends javax.microedition.khronos.egl.EGLDisplay {
  public com.google.android.gles_jni.EGLDisplayImpl(int);
  public boolean equals(java.lang.Object);
  public int hashCode();
public class com.google.android.gles_jni.EGLImpl implements javax.microedition.khronos.egl.EGL10 {
  public com.google.android.gles_jni.EGLImpl();
  public native boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay, int[]);
  public native boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext, int, int[]);
  public native boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, int, int[]);
  public native boolean eglReleaseThread();
  public native boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay, int[], javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public native boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int[]);
  public native boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public native int eglGetError();
  public native boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public native boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public native boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLContext);
  public native java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay, int);
  public native boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public native boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay);
  public native boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, java.lang.Object);
  public native boolean eglWaitGL();
  public native boolean eglWaitNative(int, java.lang.Object);
  public static native int getInitCount(javax.microedition.khronos.egl.EGLDisplay);
  public javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, javax.microedition.khronos.egl.EGLContext, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public synchronized javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object);
  public synchronized javax.microedition.khronos.egl.EGLContext eglGetCurrentContext();
  public synchronized javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay();
  public synchronized javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int);
public class com.google.android.gles_jni.EGLSurfaceImpl extends javax.microedition.khronos.egl.EGLSurface {
  public com.google.android.gles_jni.EGLSurfaceImpl();
  public com.google.android.gles_jni.EGLSurfaceImpl(int);
  public boolean equals(java.lang.Object);
  public int hashCode();
public class com.google.android.gles_jni.GLImpl implements javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.opengles.GL10Ext,javax.microedition.khronos.opengles.GL11,javax.microedition.khronos.opengles.GL11Ext,javax.microedition.khronos.opengles.GL11ExtensionPack {
  public com.google.android.gles_jni.GLImpl();
  public void glGetPointerv(int, java.nio.Buffer[]);
  public native void glActiveTexture(int);
  public native void glAlphaFunc(int, float);
  public native void glAlphaFuncx(int, int);
  public native void glBindTexture(int, int);
  public native void glBlendFunc(int, int);
  public native void glClear(int);
  public native void glClearColor(float, float, float, float);
  public native void glClearColorx(int, int, int, int);
  public native void glClearDepthf(float);
  public native void glClearDepthx(int);
  public native void glClearStencil(int);
  public native void glClientActiveTexture(int);
  public native void glColor4f(float, float, float, float);
  public native void glColor4x(int, int, int, int);
  public native void glColorMask(boolean, boolean, boolean, boolean);
  public void glColorPointer(int, int, int, java.nio.Buffer);
  public native void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public native void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public native void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public native void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public native void glCullFace(int);
  public native void glDeleteTextures(int, int[], int);
  public native void glDeleteTextures(int, java.nio.IntBuffer);
  public native void glDepthFunc(int);
  public native void glDepthMask(boolean);
  public native void glDepthRangef(float, float);
  public native void glDepthRangex(int, int);
  public native void glDisable(int);
  public native void glDisableClientState(int);
  public native void glDrawArrays(int, int, int);
  public native void glDrawElements(int, int, int, java.nio.Buffer);
  public native void glEnable(int);
  public native void glEnableClientState(int);
  public native void glFinish();
  public native void glFlush();
  public native void glFogf(int, float);
  public native void glFogfv(int, float[], int);
  public native void glFogfv(int, java.nio.FloatBuffer);
  public native void glFogx(int, int);
  public native void glFogxv(int, int[], int);
  public native void glFogxv(int, java.nio.IntBuffer);
  public native void glFrontFace(int);
  public native void glFrustumf(float, float, float, float, float, float);
  public native void glFrustumx(int, int, int, int, int, int);
  public native void glGenTextures(int, int[], int);
  public native void glGenTextures(int, java.nio.IntBuffer);
  public native int glGetError();
  public native void glGetIntegerv(int, int[], int);
  public native void glGetIntegerv(int, java.nio.IntBuffer);
  public native java.lang.String _glGetString(int);
  public java.lang.String glGetString(int);
  public native void glHint(int, int);
  public native void glLightModelf(int, float);
  public native void glLightModelfv(int, float[], int);
  public native void glLightModelfv(int, java.nio.FloatBuffer);
  public native void glLightModelx(int, int);
  public native void glLightModelxv(int, int[], int);
  public native void glLightModelxv(int, java.nio.IntBuffer);
  public native void glLightf(int, int, float);
  public native void glLightfv(int, int, float[], int);
  public native void glLightfv(int, int, java.nio.FloatBuffer);
  public native void glLightx(int, int, int);
  public native void glLightxv(int, int, int[], int);
  public native void glLightxv(int, int, java.nio.IntBuffer);
  public native void glLineWidth(float);
  public native void glLineWidthx(int);
  public native void glLoadIdentity();
  public native void glLoadMatrixf(float[], int);
  public native void glLoadMatrixf(java.nio.FloatBuffer);
  public native void glLoadMatrixx(int[], int);
  public native void glLoadMatrixx(java.nio.IntBuffer);
  public native void glLogicOp(int);
  public native void glMaterialf(int, int, float);
  public native void glMaterialfv(int, int, float[], int);
  public native void glMaterialfv(int, int, java.nio.FloatBuffer);
  public native void glMaterialx(int, int, int);
  public native void glMaterialxv(int, int, int[], int);
  public native void glMaterialxv(int, int, java.nio.IntBuffer);
  public native void glMatrixMode(int);
  public native void glMultMatrixf(float[], int);
  public native void glMultMatrixf(java.nio.FloatBuffer);
  public native void glMultMatrixx(int[], int);
  public native void glMultMatrixx(java.nio.IntBuffer);
  public native void glMultiTexCoord4f(int, float, float, float, float);
  public native void glMultiTexCoord4x(int, int, int, int, int);
  public native void glNormal3f(float, float, float);
  public native void glNormal3x(int, int, int);
  public void glNormalPointer(int, int, java.nio.Buffer);
  public native void glOrthof(float, float, float, float, float, float);
  public native void glOrthox(int, int, int, int, int, int);
  public native void glPixelStorei(int, int);
  public native void glPointSize(float);
  public native void glPointSizex(int);
  public native void glPolygonOffset(float, float);
  public native void glPolygonOffsetx(int, int);
  public native void glPopMatrix();
  public native void glPushMatrix();
  public native void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public native void glRotatef(float, float, float, float);
  public native void glRotatex(int, int, int, int);
  public native void glSampleCoverage(float, boolean);
  public native void glSampleCoveragex(int, boolean);
  public native void glScalef(float, float, float);
  public native void glScalex(int, int, int);
  public native void glScissor(int, int, int, int);
  public native void glShadeModel(int);
  public native void glStencilFunc(int, int, int);
  public native void glStencilMask(int);
  public native void glStencilOp(int, int, int);
  public void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public native void glTexEnvf(int, int, float);
  public native void glTexEnvfv(int, int, float[], int);
  public native void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public native void glTexEnvx(int, int, int);
  public native void glTexEnvxv(int, int, int[], int);
  public native void glTexEnvxv(int, int, java.nio.IntBuffer);
  public native void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public native void glTexParameterf(int, int, float);
  public native void glTexParameterx(int, int, int);
  public native void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public native void glTranslatef(float, float, float);
  public native void glTranslatex(int, int, int);
  public void glVertexPointer(int, int, int, java.nio.Buffer);
  public native void glViewport(int, int, int, int);
  public native int glQueryMatrixxOES(int[], int, int[], int);
  public native int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
  public native void glBindBuffer(int, int);
  public native void glBufferData(int, int, java.nio.Buffer, int);
  public native void glBufferSubData(int, int, int, java.nio.Buffer);
  public native void glClipPlanef(int, float[], int);
  public native void glClipPlanef(int, java.nio.FloatBuffer);
  public native void glClipPlanex(int, int[], int);
  public native void glClipPlanex(int, java.nio.IntBuffer);
  public native void glColor4ub(byte, byte, byte, byte);
  public native void glColorPointer(int, int, int, int);
  public native void glDeleteBuffers(int, int[], int);
  public native void glDeleteBuffers(int, java.nio.IntBuffer);
  public native void glDrawElements(int, int, int, int);
  public native void glGenBuffers(int, int[], int);
  public native void glGenBuffers(int, java.nio.IntBuffer);
  public native void glGetBooleanv(int, boolean[], int);
  public native void glGetBooleanv(int, java.nio.IntBuffer);
  public native void glGetBufferParameteriv(int, int, int[], int);
  public native void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public native void glGetClipPlanef(int, float[], int);
  public native void glGetClipPlanef(int, java.nio.FloatBuffer);
  public native void glGetClipPlanex(int, int[], int);
  public native void glGetClipPlanex(int, java.nio.IntBuffer);
  public native void glGetFixedv(int, int[], int);
  public native void glGetFixedv(int, java.nio.IntBuffer);
  public native void glGetFloatv(int, float[], int);
  public native void glGetFloatv(int, java.nio.FloatBuffer);
  public native void glGetLightfv(int, int, float[], int);
  public native void glGetLightfv(int, int, java.nio.FloatBuffer);
  public native void glGetLightxv(int, int, int[], int);
  public native void glGetLightxv(int, int, java.nio.IntBuffer);
  public native void glGetMaterialfv(int, int, float[], int);
  public native void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public native void glGetMaterialxv(int, int, int[], int);
  public native void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public native void glGetTexEnviv(int, int, int[], int);
  public native void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public native void glGetTexEnvxv(int, int, int[], int);
  public native void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public native void glGetTexParameterfv(int, int, float[], int);
  public native void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public native void glGetTexParameteriv(int, int, int[], int);
  public native void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public native void glGetTexParameterxv(int, int, int[], int);
  public native void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public native boolean glIsBuffer(int);
  public native boolean glIsEnabled(int);
  public native boolean glIsTexture(int);
  public native void glNormalPointer(int, int, int);
  public native void glPointParameterf(int, float);
  public native void glPointParameterfv(int, float[], int);
  public native void glPointParameterfv(int, java.nio.FloatBuffer);
  public native void glPointParameterx(int, int);
  public native void glPointParameterxv(int, int[], int);
  public native void glPointParameterxv(int, java.nio.IntBuffer);
  public void glPointSizePointerOES(int, int, java.nio.Buffer);
  public native void glTexCoordPointer(int, int, int, int);
  public native void glTexEnvi(int, int, int);
  public native void glTexEnviv(int, int, int[], int);
  public native void glTexEnviv(int, int, java.nio.IntBuffer);
  public native void glTexParameterfv(int, int, float[], int);
  public native void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public native void glTexParameteri(int, int, int);
  public native void glTexParameteriv(int, int, int[], int);
  public native void glTexParameteriv(int, int, java.nio.IntBuffer);
  public native void glTexParameterxv(int, int, int[], int);
  public native void glTexParameterxv(int, int, java.nio.IntBuffer);
  public native void glVertexPointer(int, int, int, int);
  public native void glCurrentPaletteMatrixOES(int);
  public native void glDrawTexfOES(float, float, float, float, float);
  public native void glDrawTexfvOES(float[], int);
  public native void glDrawTexfvOES(java.nio.FloatBuffer);
  public native void glDrawTexiOES(int, int, int, int, int);
  public native void glDrawTexivOES(int[], int);
  public native void glDrawTexivOES(java.nio.IntBuffer);
  public native void glDrawTexsOES(short, short, short, short, short);
  public native void glDrawTexsvOES(short[], int);
  public native void glDrawTexsvOES(java.nio.ShortBuffer);
  public native void glDrawTexxOES(int, int, int, int, int);
  public native void glDrawTexxvOES(int[], int);
  public native void glDrawTexxvOES(java.nio.IntBuffer);
  public native void glLoadPaletteFromModelViewMatrixOES();
  public void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public native void glMatrixIndexPointerOES(int, int, int, int);
  public void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public native void glWeightPointerOES(int, int, int, int);
  public native void glBindFramebufferOES(int, int);
  public native void glBindRenderbufferOES(int, int);
  public native void glBlendEquation(int);
  public native void glBlendEquationSeparate(int, int);
  public native void glBlendFuncSeparate(int, int, int, int);
  public native int glCheckFramebufferStatusOES(int);
  public native void glDeleteFramebuffersOES(int, int[], int);
  public native void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public native void glDeleteRenderbuffersOES(int, int[], int);
  public native void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public native void glFramebufferRenderbufferOES(int, int, int, int);
  public native void glFramebufferTexture2DOES(int, int, int, int, int);
  public native void glGenerateMipmapOES(int);
  public native void glGenFramebuffersOES(int, int[], int);
  public native void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public native void glGenRenderbuffersOES(int, int[], int);
  public native void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public native void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public native void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public native void glGetRenderbufferParameterivOES(int, int, int[], int);
  public native void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public native void glGetTexGenfv(int, int, float[], int);
  public native void glGetTexGenfv(int, int, java.nio.FloatBuffer);
  public native void glGetTexGeniv(int, int, int[], int);
  public native void glGetTexGeniv(int, int, java.nio.IntBuffer);
  public native void glGetTexGenxv(int, int, int[], int);
  public native void glGetTexGenxv(int, int, java.nio.IntBuffer);
  public native boolean glIsFramebufferOES(int);
  public native boolean glIsRenderbufferOES(int);
  public native void glRenderbufferStorageOES(int, int, int, int);
  public native void glTexGenf(int, int, float);
  public native void glTexGenfv(int, int, float[], int);
  public native void glTexGenfv(int, int, java.nio.FloatBuffer);
  public native void glTexGeni(int, int, int);
  public native void glTexGeniv(int, int, int[], int);
  public native void glTexGeniv(int, int, java.nio.IntBuffer);
  public native void glTexGenx(int, int, int);
  public native void glTexGenxv(int, int, int[], int);
  public native void glTexGenxv(int, int, java.nio.IntBuffer);
public final class dalvik.bytecode.OpcodeInfo {
  public static native boolean isInvoke(int);
public class dalvik.system.BaseDexClassLoader extends java.lang.ClassLoader {
  public dalvik.system.BaseDexClassLoader(java.lang.String, java.io.File, java.lang.String, java.lang.ClassLoader);
  public java.lang.String findLibrary(java.lang.String);
  public java.lang.String toString();
  public void onWriteToDisk();
  public void onReadFromDisk();
  public void onNetwork();
  public int getPolicyMask();
public class dalvik.system.BlockGuard$BlockGuardPolicyException extends java.lang.RuntimeException {
  public dalvik.system.BlockGuard$BlockGuardPolicyException(int, int);
  public dalvik.system.BlockGuard$BlockGuardPolicyException(int, int, java.lang.String);
  public int getPolicy();
  public int getPolicyViolation();
  public java.lang.String getMessage();
public interface dalvik.system.BlockGuard$Policy {
  public abstract void onWriteToDisk();
  public abstract void onReadFromDisk();
  public abstract void onNetwork();
  public abstract int getPolicyMask();
public final class dalvik.system.BlockGuard {
  public static dalvik.system.BlockGuard$Policy getThreadPolicy();
  public static void setThreadPolicy(dalvik.system.BlockGuard$Policy);
  public void report(java.lang.String, java.lang.Throwable);
public interface dalvik.system.CloseGuard$Reporter {
  public abstract void report(java.lang.String, java.lang.Throwable);
public final class dalvik.system.CloseGuard {
  public static dalvik.system.CloseGuard get();
  public static void setEnabled(boolean);
  public static void setReporter(dalvik.system.CloseGuard$Reporter);
  public static dalvik.system.CloseGuard$Reporter getReporter();
  public void open(java.lang.String);
  public void close();
  public void warnIfOpen();
public interface dalvik.system.DalvikLogHandler {
  public abstract void publish(java.util.logging.Logger, java.lang.String, java.util.logging.Level, java.lang.String);
public final class dalvik.system.DalvikLogging {
  public static java.lang.String loggerNameToTag(java.lang.String);
public class dalvik.system.DexClassLoader extends dalvik.system.BaseDexClassLoader {
  public dalvik.system.DexClassLoader(java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader);
  public boolean hasMoreElements();
  public java.lang.String nextElement();
  public java.lang.Object nextElement();
public final class dalvik.system.DexFile {
  public java.lang.String getName();
  public java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader);
  public java.lang.Class loadClassBinaryName(java.lang.String, java.lang.ClassLoader);
  public java.util.Enumeration<java.lang.String> entries();
  public dalvik.system.DexPathList$Element(java.io.File, java.util.zip.ZipFile, dalvik.system.DexFile);
  public java.net.URL findResource(java.lang.String);
  public dalvik.system.DexPathList(java.lang.ClassLoader, java.lang.String, java.lang.String, java.io.File);
  public java.lang.Class findClass(java.lang.String);
  public java.net.URL findResource(java.lang.String);
  public java.util.Enumeration<java.net.URL> findResources(java.lang.String);
  public java.lang.String findLibrary(java.lang.String);
public class dalvik.system.PathClassLoader extends dalvik.system.BaseDexClassLoader {
  public dalvik.system.PathClassLoader(java.lang.String, java.lang.ClassLoader);
  public dalvik.system.PathClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader);
public abstract class dalvik.system.SocketTagger {
  public dalvik.system.SocketTagger();
  public static synchronized void set(dalvik.system.SocketTagger);
  public static synchronized dalvik.system.SocketTagger get();
public final class dalvik.system.VMDebug {
  public static native long lastDebuggerActivity();
  public static native boolean isDebuggingEnabled();
  public static native boolean isDebuggerConnected();
  public static native java.lang.String[] getVmFeatureList();
  public static void startMethodTracing();
  public static void startMethodTracing(java.lang.String, int, int);
  public static void startMethodTracing(java.lang.String, java.io.FileDescriptor, int, int);
  public static void startMethodTracingDdms(int, int);
  public static native boolean isMethodTracingActive();
  public static native void stopMethodTracing();
  public static native void startEmulatorTracing();
  public static native void stopEmulatorTracing();
  public static native long threadCpuTimeNanos();
  public static native void startAllocCounting();
  public static native void stopAllocCounting();
  public static native int getAllocCount(int);
  public static native void resetAllocCount(int);
  public static int setAllocationLimit(int);
  public static int setGlobalAllocationLimit(int);
  public static native void startInstructionCounting();
  public static native void stopInstructionCounting();
  public static native void getInstructionCount(int[]);
  public static native void resetInstructionCount();
  public static native void printLoadedClasses(int);
  public static native int getLoadedClassCount();
  public static native void dumpHprofDataDdms();
  public static native boolean cacheRegisterMap(java.lang.String);
  public static native void dumpReferenceTables();
  public static native void crash();
  public static native void infopoint(int);
  public static native long countInstancesOfClass(java.lang.Class, boolean);
public final class dalvik.system.VMRuntime {
  public static dalvik.system.VMRuntime getRuntime();
  public native java.lang.String[] properties();
  public native java.lang.String bootClassPath();
  public native java.lang.String classPath();
  public native java.lang.String vmVersion();
  public native float getTargetHeapUtilization();
  public float setTargetHeapUtilization(float);
  public native void setTargetSdkVersion(int);
  public long getMinimumHeapSize();
  public long setMinimumHeapSize(long);
  public void gcSoftReferences();
  public void runFinalizationSync();
  public boolean trackExternalAllocation(long);
  public void trackExternalFree(long);
  public long getExternalBytesAllocated();
  public native void startJitCompilation();
  public native void disableJitCompilation();
  public native java.lang.Object newNonMovableArray(java.lang.Class<?>, int);
  public native long addressOf(java.lang.Object);
  public native void clearGrowthLimit();
  public native boolean isDebuggerActive();
public final class dalvik.system.VMStack {
  public dalvik.system.VMStack();
  public static native java.lang.ClassLoader getCallingClassLoader();
  public static native java.lang.Class<?> getStackClass2();
  public static native java.lang.Class<?>[] getClasses(int);
  public static native java.lang.StackTraceElement[] getThreadStackTrace(java.lang.Thread);
  public static native int fillStackTraceElements(java.lang.Thread, java.lang.StackTraceElement[]);
public class dalvik.system.Zygote {
  public static int fork();
  public static native int nativeFork();
  public static int forkAndSpecialize(int, int, int[], int, int[][]);
  public static native int nativeForkAndSpecialize(int, int, int[], int, int[][]);
  public static int forkAndSpecialize(int, int, int[], boolean, int[][]);
  public static int forkSystemServer(int, int, int[], int, int[][], long, long);
  public static int forkSystemServer(int, int, int[], boolean, int[][]);
  public static native int nativeForkSystemServer(int, int, int[], int, int[][], long, long);
  public static void execShell(java.lang.String);
  public static void appendQuotedShellArgs(java.lang.StringBuilder, java.lang.String[]);
public final class dalvik.system.profiler.BinaryHprof$ControlSettings extends java.lang.Enum<dalvik.system.profiler.BinaryHprof$ControlSettings> {
  public static dalvik.system.profiler.BinaryHprof$ControlSettings[] values();
  public static dalvik.system.profiler.BinaryHprof$ControlSettings valueOf(java.lang.String);
public final class dalvik.system.profiler.BinaryHprof$Tag extends java.lang.Enum<dalvik.system.profiler.BinaryHprof$Tag> {
  public static dalvik.system.profiler.BinaryHprof$Tag[] values();
  public static dalvik.system.profiler.BinaryHprof$Tag valueOf(java.lang.String);
  public static dalvik.system.profiler.BinaryHprof$Tag get(byte);
  public java.lang.String checkSize(int);
public final class dalvik.system.profiler.BinaryHprof {
  public dalvik.system.profiler.BinaryHprof();
  public static final java.lang.String readMagic(java.io.DataInputStream);
public final class dalvik.system.profiler.BinaryHprofWriter {
public final class dalvik.system.profiler.HprofData$Sample {
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public final class dalvik.system.profiler.HprofData$StackTrace {
  public dalvik.system.profiler.HprofData$StackTrace(int, int, java.lang.StackTraceElement[]);
  public int getThreadId();
  public java.lang.StackTraceElement[] getStackFrames();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public final class dalvik.system.profiler.HprofData$ThreadEvent {
  public static dalvik.system.profiler.HprofData$ThreadEvent start(int, int, java.lang.String, java.lang.String, java.lang.String);
  public static dalvik.system.profiler.HprofData$ThreadEvent end(int);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public final class dalvik.system.profiler.HprofData$ThreadEventType extends java.lang.Enum<dalvik.system.profiler.HprofData$ThreadEventType> {
  public static dalvik.system.profiler.HprofData$ThreadEventType[] values();
  public static dalvik.system.profiler.HprofData$ThreadEventType valueOf(java.lang.String);
public final class dalvik.system.profiler.HprofData {
  public dalvik.system.profiler.HprofData(java.util.Map<dalvik.system.profiler.HprofData$StackTrace, int[]>);
  public long getStartMillis();
  public void setStartMillis(long);
  public int getFlags();
  public void setFlags(int);
  public int getDepth();
  public void setDepth(int);
  public java.util.List<dalvik.system.profiler.HprofData$ThreadEvent> getThreadHistory();
  public java.util.Set<dalvik.system.profiler.HprofData$Sample> getSamples();
  public void addThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent);
  public void addStackTrace(dalvik.system.profiler.HprofData$StackTrace, int[]);
  public void setDepth(int);
  public java.lang.StackTraceElement[] getStackTrace(java.lang.Thread);
  public dalvik.system.profiler.SamplingProfiler$ArrayThreadSet(java.lang.Thread...);
  public java.lang.Thread[] threads();
  public void run();
  public dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet(java.lang.ThreadGroup);
  public java.lang.Thread[] threads();
public interface dalvik.system.profiler.SamplingProfiler$ThreadSet {
  public abstract java.lang.Thread[] threads();
public final class dalvik.system.profiler.SamplingProfiler {
  public dalvik.system.profiler.SamplingProfiler(int, dalvik.system.profiler.SamplingProfiler$ThreadSet);
  public static dalvik.system.profiler.SamplingProfiler$ThreadSet newArrayThreadSet(java.lang.Thread...);
  public static dalvik.system.profiler.SamplingProfiler$ThreadSet newThreadGroupTheadSet(java.lang.ThreadGroup);
  public void start(int);
  public void stop();
  public void shutdown();
  public dalvik.system.profiler.HprofData getHprofData();
public interface dalvik.system.profiler.ThreadSampler {
  public abstract void setDepth(int);
  public abstract java.lang.StackTraceElement[] getStackTrace(java.lang.Thread);
public class gov.nist.core.Debug {
  public gov.nist.core.Debug();
  public static void setStackLogger(gov.nist.core.StackLogger);
  public static void println(java.lang.String);
  public static void printStackTrace(java.lang.Exception);
  public static void logError(java.lang.String, java.lang.Exception);
public class gov.nist.core.DuplicateNameValueList implements java.io.Serializable,java.lang.Cloneable {
  public gov.nist.core.DuplicateNameValueList();
  public void setSeparator(java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String toString();
  public void set(gov.nist.core.NameValue);
  public void set(java.lang.String, java.lang.Object);
  public boolean equals(java.lang.Object);
  public java.lang.Object getValue(java.lang.String);
  public java.util.Collection getNameValue(java.lang.String);
  public boolean hasNameValue(java.lang.String);
  public boolean delete(java.lang.String);
  public java.lang.Object clone();
  public java.util.Iterator<gov.nist.core.NameValue> iterator();
  public java.util.Iterator<java.lang.String> getNames();
  public java.lang.String getParameter(java.lang.String);
  public void clear();
  public boolean isEmpty();
  public gov.nist.core.NameValue put(java.lang.String, gov.nist.core.NameValue);
  public gov.nist.core.NameValue remove(java.lang.Object);
  public int size();
  public java.util.Collection<gov.nist.core.NameValue> values();
  public int hashCode();
public abstract class gov.nist.core.GenericObject implements java.io.Serializable,java.lang.Cloneable {
  public void setMatcher(gov.nist.core.Match);
  public gov.nist.core.Match getMatcher();
  public static java.lang.Class<?> getClassFromName(java.lang.String);
  public static boolean isMySubclass(java.lang.Class<?>);
  public static java.lang.Object makeClone(java.lang.Object);
  public java.lang.Object clone();
  public void merge(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean match(java.lang.Object);
  public java.lang.String debugDump();
  public java.lang.String debugDump(int);
  public abstract java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
public abstract class gov.nist.core.GenericObjectList extends java.util.LinkedList<gov.nist.core.GenericObject> implements java.io.Serializable, java.lang.Cloneable {
  public static boolean isMySubclass(java.lang.Class<?>);
  public java.lang.Object clone();
  public void setMyClass(java.lang.Class);
  public java.lang.String debugDump();
  public java.lang.String debugDump(int);
  public void addFirst(gov.nist.core.GenericObject);
  public void mergeObjects(gov.nist.core.GenericObjectList);
  public java.lang.String encode();
  public java.lang.String toString();
  public void setSeparator(java.lang.String);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean match(java.lang.Object);
  public void addFirst(java.lang.Object);
public class gov.nist.core.Host extends gov.nist.core.GenericObject {
  public gov.nist.core.Host();
  public gov.nist.core.Host(java.lang.String, int);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public boolean equals(java.lang.Object);
  public java.lang.String getHostname();
  public java.lang.String getAddress();
  public java.lang.String getIpAddress();
  public void setHostname(java.lang.String);
  public void setHostAddress(java.lang.String);
  public void setAddress(java.lang.String);
  public boolean isHostname();
  public boolean isIPAddress();
  public static boolean isIPv6Reference(java.lang.String);
  public int hashCode();
public class gov.nist.core.HostNameParser extends gov.nist.core.ParserCore {
  public gov.nist.core.HostNameParser(java.lang.String);
  public gov.nist.core.HostNameParser(gov.nist.core.LexerCore);
public final class gov.nist.core.HostPort extends gov.nist.core.GenericObject {
  public gov.nist.core.HostPort();
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public boolean equals(java.lang.Object);
  public gov.nist.core.Host getHost();
  public int getPort();
  public boolean hasPort();
  public void removePort();
  public void setHost(gov.nist.core.Host);
  public void setPort(int);
  public void merge(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.String toString();
  public int hashCode();
public class gov.nist.core.InternalErrorHandler {
  public gov.nist.core.InternalErrorHandler();
  public static void handleException(java.lang.Exception, gov.nist.core.StackLogger);
  public static void handleException(java.lang.String);
  public static void handleException(java.lang.String, gov.nist.core.StackLogger);
public class gov.nist.core.LexerCore extends gov.nist.core.StringTokenizer {
  public java.lang.String lookupToken(int);
  public void selectLexer(java.lang.String);
  public gov.nist.core.LexerCore(java.lang.String, java.lang.String);
  public java.lang.String peekNextId();
  public java.lang.String getNextId();
  public gov.nist.core.Token getNextToken();
  public void SPorHT();
  public static final boolean isTokenChar(char);
  public boolean startsId();
  public boolean startsSafeToken();
  public java.lang.String ttoken();
  public java.lang.String ttokenSafe();
  public void consumeValidChars(char[]);
  public java.lang.String byteStringNoSemicolon();
  public java.lang.String byteStringNoSlash();
  public java.lang.String byteStringNoComma();
  public static java.lang.String charAsString(char);
  public java.lang.String charAsString(int);
  public int markInputPosition();
  public void rewindInputPosition(int);
  public java.lang.String getRest();
  public int getPtr();
  public java.lang.String getBuffer();
  public java.text.ParseException createParseException();
public interface gov.nist.core.LogLevels {
public interface gov.nist.core.Match {
  public abstract boolean match(java.lang.String);
public interface gov.nist.core.MultiValueMap<K, V> extends java.util.Map<K, java.util.List<V>>, java.io.Serializable {
  public abstract java.lang.Object remove(K, V);
public class gov.nist.core.MultiValueMapImpl<V> implements gov.nist.core.MultiValueMap<java.lang.String, V>, java.lang.Cloneable {
  public gov.nist.core.MultiValueMapImpl();
  public java.util.List<V> put(java.lang.String, V);
  public boolean containsValue(java.lang.Object);
  public void clear();
  public java.util.Collection values();
  public java.lang.Object clone();
  public int size();
  public boolean containsKey(java.lang.Object);
  public java.util.Set entrySet();
  public boolean isEmpty();
  public java.util.Set<java.lang.String> keySet();
  public java.lang.Object remove(java.lang.String, V);
  public java.util.List<V> get(java.lang.Object);
  public java.util.List<V> put(java.lang.String, java.util.List<V>);
  public java.util.List<V> remove(java.lang.Object);
  public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<V>>);
  public java.lang.Object remove(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object get(java.lang.Object);
public class gov.nist.core.NameValue extends gov.nist.core.GenericObject implements java.util.Map$Entry<java.lang.String, java.lang.String> {
  public gov.nist.core.NameValue();
  public gov.nist.core.NameValue(java.lang.String, java.lang.Object, boolean);
  public gov.nist.core.NameValue(java.lang.String, java.lang.Object);
  public void setSeparator(java.lang.String);
  public void setQuotedValue();
  public boolean isValueQuoted();
  public java.lang.String getName();
  public java.lang.Object getValueAsObject();
  public void setName(java.lang.String);
  public void setValueAsObject(java.lang.Object);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String getKey();
  public java.lang.String getValue();
  public java.lang.String setValue(java.lang.String);
  public int hashCode();
  public java.lang.Object setValue(java.lang.Object);
  public java.lang.Object getValue();
  public java.lang.Object getKey();
public class gov.nist.core.NameValueList implements java.io.Serializable, java.lang.Cloneable, java.util.Map<java.lang.String, gov.nist.core.NameValue> {
  public gov.nist.core.NameValueList();
  public gov.nist.core.NameValueList(boolean);
  public void setSeparator(java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String toString();
  public void set(gov.nist.core.NameValue);
  public void set(java.lang.String, java.lang.Object);
  public boolean equals(java.lang.Object);
  public java.lang.Object getValue(java.lang.String);
  public gov.nist.core.NameValue getNameValue(java.lang.String);
  public boolean hasNameValue(java.lang.String);
  public boolean delete(java.lang.String);
  public java.lang.Object clone();
  public int size();
  public boolean isEmpty();
  public java.util.Iterator<gov.nist.core.NameValue> iterator();
  public java.util.Iterator<java.lang.String> getNames();
  public java.lang.String getParameter(java.lang.String);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<java.lang.String, gov.nist.core.NameValue>> entrySet();
  public gov.nist.core.NameValue get(java.lang.Object);
  public java.util.Set<java.lang.String> keySet();
  public gov.nist.core.NameValue put(java.lang.String, gov.nist.core.NameValue);
  public void putAll(java.util.Map<? extends java.lang.String, ? extends gov.nist.core.NameValue>);
  public gov.nist.core.NameValue remove(java.lang.Object);
  public java.util.Collection<gov.nist.core.NameValue> values();
  public int hashCode();
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object get(java.lang.Object);
public interface gov.nist.core.PackageNames {
public abstract class gov.nist.core.ParserCore {
  public gov.nist.core.ParserCore();
public interface gov.nist.core.ServerLogger extends gov.nist.core.LogLevels {
  public abstract void closeLogFile();
  public abstract void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, boolean, long);
  public abstract void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, java.lang.String, boolean, long);
  public abstract void logMessage(gov.nist.javax.sip.message.SIPMessage, java.lang.String, java.lang.String, java.lang.String, boolean);
  public abstract void logException(java.lang.Exception);
  public abstract void setStackProperties(java.util.Properties);
  public abstract void setSipStack(javax.sip.SipStack);
public interface gov.nist.core.StackLogger extends gov.nist.core.LogLevels {
  public abstract void logStackTrace();
  public abstract void logStackTrace(int);
  public abstract int getLineCount();
  public abstract void logException(java.lang.Throwable);
  public abstract void logDebug(java.lang.String);
  public abstract void logTrace(java.lang.String);
  public abstract void logFatalError(java.lang.String);
  public abstract void logError(java.lang.String);
  public abstract boolean isLoggingEnabled();
  public abstract boolean isLoggingEnabled(int);
  public abstract void logError(java.lang.String, java.lang.Exception);
  public abstract void logWarning(java.lang.String);
  public abstract void logInfo(java.lang.String);
  public abstract void disableLogging();
  public abstract void enableLogging();
  public abstract void setBuildTimeStamp(java.lang.String);
  public abstract void setStackProperties(java.util.Properties);
  public abstract java.lang.String getLoggerName();
public class gov.nist.core.StringTokenizer {
  public gov.nist.core.StringTokenizer(java.lang.String);
  public java.lang.String nextToken();
  public boolean hasMoreChars();
  public static boolean isHexDigit(char);
  public static boolean isAlpha(char);
  public static boolean isDigit(char);
  public static boolean isAlphaDigit(char);
  public java.lang.String getLine();
  public java.lang.String peekLine();
  public void consume();
  public void consume(int);
  public java.util.Vector<java.lang.String> getLines();
  public static java.lang.String getSDPFieldName(java.lang.String);
public class gov.nist.core.ThreadAuditor$ThreadHandle {
  public gov.nist.core.ThreadAuditor$ThreadHandle(gov.nist.core.ThreadAuditor, gov.nist.core.ThreadAuditor);
  public boolean isThreadActive();
  public java.lang.Thread getThread();
  public void ping();
  public long getPingIntervalInMillisecs();
  public java.lang.String toString();
public class gov.nist.core.ThreadAuditor {
  public gov.nist.core.ThreadAuditor();
  public long getPingIntervalInMillisecs();
  public void setPingIntervalInMillisecs(long);
  public boolean isEnabled();
  public synchronized gov.nist.core.ThreadAuditor$ThreadHandle addCurrentThread();
  public synchronized void removeThread(java.lang.Thread);
  public synchronized void ping(gov.nist.core.ThreadAuditor$ThreadHandle);
  public synchronized void reset();
  public synchronized java.lang.String auditThreads();
  public synchronized java.lang.String toString();
public class gov.nist.core.Token {
  public gov.nist.core.Token();
  public java.lang.String getTokenValue();
  public int getTokenType();
  public java.lang.String toString();
public interface gov.nist.core.net.AddressResolver {
  public abstract javax.sip.address.Hop resolveAddress(javax.sip.address.Hop);
public class gov.nist.core.net.DefaultNetworkLayer implements gov.nist.core.net.NetworkLayer {
public interface gov.nist.core.net.NetworkLayer {
public class gov.nist.core.net.SslNetworkLayer implements gov.nist.core.net.NetworkLayer {
public interface gov.nist.javax.sip.ClientTransactionExt extends javax.sip.ClientTransaction,gov.nist.javax.sip.TransactionExt {
  public abstract void setNotifyOnRetransmit(boolean);
  public abstract void alertIfStillInCallingStateBy(int);
  public abstract javax.sip.address.Hop getNextHop();
  public abstract boolean isSecure();
public class gov.nist.javax.sip.DefaultAddressResolver implements gov.nist.core.net.AddressResolver {
  public gov.nist.javax.sip.DefaultAddressResolver();
  public javax.sip.address.Hop resolveAddress(javax.sip.address.Hop);
public interface gov.nist.javax.sip.DialogExt extends javax.sip.Dialog {
  public abstract javax.sip.SipProvider getSipProvider();
  public abstract void setBackToBackUserAgent();
  public abstract void disableSequenceNumberValidation();
  public gov.nist.javax.sip.DialogFilter(gov.nist.javax.sip.SipStackImpl);
  public void processRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog);
  public java.lang.String getProcessingInfo();
  public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
public final class gov.nist.javax.sip.DialogTimeoutEvent$Reason extends java.lang.Enum<gov.nist.javax.sip.DialogTimeoutEvent$Reason> {
  public static gov.nist.javax.sip.DialogTimeoutEvent$Reason[] values();
  public static gov.nist.javax.sip.DialogTimeoutEvent$Reason valueOf(java.lang.String);
public class gov.nist.javax.sip.DialogTimeoutEvent extends java.util.EventObject {
  public gov.nist.javax.sip.DialogTimeoutEvent(java.lang.Object, javax.sip.Dialog, gov.nist.javax.sip.DialogTimeoutEvent$Reason);
  public javax.sip.Dialog getDialog();
  public gov.nist.javax.sip.DialogTimeoutEvent$Reason getReason();
  public void incrementRefcount();
  public gov.nist.javax.sip.EventScanner(gov.nist.javax.sip.SipStackImpl);
  public void addEvent(gov.nist.javax.sip.EventWrapper);
  public void stop();
  public void forceStop();
  public void deliverEvent(gov.nist.javax.sip.EventWrapper);
  public void run();
public interface gov.nist.javax.sip.ListeningPointExt extends javax.sip.ListeningPoint {
  public abstract javax.sip.header.ContactHeader createContactHeader();
  public abstract javax.sip.header.ViaHeader createViaHeader();
public class gov.nist.javax.sip.ListeningPointImpl implements javax.sip.ListeningPoint,gov.nist.javax.sip.ListeningPointExt {
  public static java.lang.String makeKey(java.lang.String, int, java.lang.String);
  public java.lang.Object clone();
  public int getPort();
  public java.lang.String getTransport();
  public gov.nist.javax.sip.SipProviderImpl getProvider();
  public java.lang.String getIPAddress();
  public java.lang.String getSentBy();
  public boolean isSentBySet();
  public gov.nist.javax.sip.header.Via getViaHeader();
  public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
  public javax.sip.header.ContactHeader createContactHeader();
  public javax.sip.header.ViaHeader createViaHeader();
public interface gov.nist.javax.sip.LogRecord {
  public abstract boolean equals(java.lang.Object);
  public abstract java.lang.String toString();
public interface gov.nist.javax.sip.LogRecordFactory {
  public abstract gov.nist.javax.sip.LogRecord createLogRecord(java.lang.String, java.lang.String, java.lang.String, long, boolean, java.lang.String, java.lang.String, java.lang.String, long);
  public gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.NistSipMessageFactoryImpl(gov.nist.javax.sip.SipStackImpl);
public class gov.nist.javax.sip.ResponseEventExt extends javax.sip.ResponseEvent {
  public gov.nist.javax.sip.ResponseEventExt(java.lang.Object, gov.nist.javax.sip.ClientTransactionExt, javax.sip.Dialog, javax.sip.message.Response);
  public boolean isForkedResponse();
  public void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt);
  public gov.nist.javax.sip.ClientTransactionExt getOriginalTransaction();
public interface gov.nist.javax.sip.ServerTransactionExt extends javax.sip.ServerTransaction,gov.nist.javax.sip.TransactionExt {
  public abstract javax.sip.ServerTransaction getCanceledInviteTransaction();
public interface gov.nist.javax.sip.SipListenerExt extends javax.sip.SipListener {
  public abstract void processDialogTimeout(gov.nist.javax.sip.DialogTimeoutEvent);
public interface gov.nist.javax.sip.SipProviderExt extends javax.sip.SipProvider {
  public abstract void setDialogErrorsAutomaticallyHandled();
public class gov.nist.javax.sip.SipProviderImpl implements javax.sip.SipProvider,gov.nist.javax.sip.SipProviderExt,gov.nist.javax.sip.stack.SIPTransactionEventListener,gov.nist.javax.sip.stack.SIPDialogEventListener {
  public javax.sip.ListeningPoint getListeningPoint(java.lang.String);
  public void handleEvent(java.util.EventObject, gov.nist.javax.sip.stack.SIPTransaction);
  public javax.sip.ListeningPoint getListeningPoint();
  public javax.sip.header.CallIdHeader getNewCallId();
  public javax.sip.SipStack getSipStack();
  public void removeSipListener(javax.sip.SipListener);
  public synchronized void setListeningPoint(javax.sip.ListeningPoint);
  public void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent);
  public synchronized void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent);
  public synchronized javax.sip.ListeningPoint[] getListeningPoints();
  public synchronized void removeListeningPoints();
  public void setAutomaticDialogSupportEnabled(boolean);
  public boolean isAutomaticDialogSupportEnabled();
  public void setDialogErrorsAutomaticallyHandled();
  public boolean isDialogErrorsAutomaticallyHandled();
  public javax.sip.SipListener getSipListener();
public interface gov.nist.javax.sip.SipStackExt extends javax.sip.SipStack {
  public abstract java.util.Collection<javax.sip.Dialog> getDialogs();
  public abstract javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader);
  public abstract gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory);
  public abstract gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager, javax.sip.header.HeaderFactory);
  public abstract void setAddressResolver(gov.nist.core.net.AddressResolver);
  public abstract javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader);
  public abstract void setEnabledCipherSuites(java.lang.String[]);
public class gov.nist.javax.sip.SipStackImpl extends gov.nist.javax.sip.stack.SIPTransactionStack implements javax.sip.SipStack,gov.nist.javax.sip.SipStackExt {
  public java.lang.String getIPAddress();
  public java.util.Iterator getListeningPoints();
  public boolean isRetransmissionFilterActive();
  public java.util.Iterator<gov.nist.javax.sip.SipProviderImpl> getSipProviders();
  public java.lang.String getStackName();
  public void stop();
  public javax.sip.SipListener getSipListener();
  public gov.nist.javax.sip.LogRecordFactory getLogRecordFactory();
  public gov.nist.javax.sip.EventScanner getEventScanner();
  public gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory);
  public gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager, javax.sip.header.HeaderFactory);
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledProtocols(java.lang.String[]);
  public java.lang.String[] getEnabledProtocols();
  public void setIsBackToBackUserAgent(boolean);
  public boolean isBackToBackUserAgent();
  public boolean isAutomaticDialogErrorHandlingEnabled();
  public boolean acquireSem();
  public void releaseSem();
public interface gov.nist.javax.sip.TransactionExt extends javax.sip.Transaction {
  public abstract javax.sip.SipProvider getSipProvider();
  public abstract java.lang.String getPeerAddress();
  public abstract int getPeerPort();
  public abstract java.lang.String getTransport();
  public abstract java.lang.String getHost();
  public abstract int getPort();
public class gov.nist.javax.sip.Utils implements gov.nist.javax.sip.UtilsExt {
  public gov.nist.javax.sip.Utils();
  public static gov.nist.javax.sip.Utils getInstance();
  public static java.lang.String toHexString(byte[]);
  public static java.lang.String getQuotedString(java.lang.String);
  public synchronized java.lang.String generateCallIdentifier(java.lang.String);
  public synchronized java.lang.String generateTag();
  public synchronized java.lang.String generateBranchId();
  public boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse);
  public static java.lang.String getSignature();
  public static void main(java.lang.String[]);
public interface gov.nist.javax.sip.UtilsExt {
  public abstract java.lang.String generateCallIdentifier(java.lang.String);
  public abstract java.lang.String generateTag();
  public abstract java.lang.String generateBranchId();
public class gov.nist.javax.sip.address.AddressFactoryImpl implements javax.sip.address.AddressFactory {
  public gov.nist.javax.sip.address.AddressFactoryImpl();
  public javax.sip.address.Address createAddress();
  public javax.sip.address.Address createAddress(java.lang.String, javax.sip.address.URI);
  public javax.sip.address.Address createAddress(javax.sip.address.URI);
public final class gov.nist.javax.sip.address.AddressImpl extends gov.nist.javax.sip.address.NetObject implements javax.sip.address.Address {
  public boolean match(java.lang.Object);
  public gov.nist.core.HostPort getHostPort();
  public int getPort();
  public java.lang.String getUserAtHostPort();
  public java.lang.String getHost();
  public void removeParameter(java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public gov.nist.javax.sip.address.AddressImpl();
  public int getAddressType();
  public void setAddressType(int);
  public java.lang.String getDisplayName();
  public void setDisplayName(java.lang.String);
  public void setAddess(javax.sip.address.URI);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean hasDisplayName();
  public void removeDisplayName();
  public boolean isSIPAddress();
  public javax.sip.address.URI getURI();
  public boolean isWildcard();
  public void setURI(javax.sip.address.URI);
  public void setUser(java.lang.String);
  public void setWildCardFlag();
  public java.lang.Object clone();
public class gov.nist.javax.sip.address.Authority extends gov.nist.javax.sip.address.NetObject {
  public gov.nist.javax.sip.address.Authority();
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public boolean equals(java.lang.Object);
  public gov.nist.core.HostPort getHostPort();
  public gov.nist.javax.sip.address.UserInfo getUserInfo();
  public java.lang.String getPassword();
  public java.lang.String getUser();
  public gov.nist.core.Host getHost();
  public int getPort();
  public void removePort();
  public void setPassword(java.lang.String);
  public void setUser(java.lang.String);
  public void setHost(gov.nist.core.Host);
  public void setPort(int);
  public void setHostPort(gov.nist.core.HostPort);
  public void setUserInfo(gov.nist.javax.sip.address.UserInfo);
  public void removeUserInfo();
  public java.lang.Object clone();
  public int hashCode();
public class gov.nist.javax.sip.address.GenericURI extends gov.nist.javax.sip.address.NetObject implements javax.sip.address.URI {
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String toString();
  public java.lang.String getScheme();
  public boolean isSipURI();
  public boolean equals(java.lang.Object);
  public int hashCode();
public abstract class gov.nist.javax.sip.address.NetObject extends gov.nist.core.GenericObject {
  public gov.nist.javax.sip.address.NetObject();
  public boolean equals(java.lang.Object);
  public boolean match(java.lang.Object);
  public java.lang.String debugDump();
  public java.lang.String debugDump(int);
  public java.lang.String toString();
public class gov.nist.javax.sip.address.RFC2396UrlDecoder {
  public gov.nist.javax.sip.address.RFC2396UrlDecoder();
  public static java.lang.String decode(java.lang.String);
public interface gov.nist.javax.sip.address.RouterExt extends javax.sip.address.Router {
  public abstract void transactionTimeout(javax.sip.address.Hop);
public interface gov.nist.javax.sip.address.SipURIExt extends javax.sip.address.SipURI {
  public abstract void removeHeaders();
  public abstract void removeHeader(java.lang.String);
  public abstract boolean hasGrParam();
  public abstract void setGrParam(java.lang.String);
public class gov.nist.javax.sip.address.SipUri extends gov.nist.javax.sip.address.GenericURI implements javax.sip.address.SipURI,gov.nist.javax.sip.address.SipURIExt {
  public gov.nist.javax.sip.address.SipUri();
  public void setScheme(java.lang.String);
  public java.lang.String getScheme();
  public void clearUriParms();
  public void clearPassword();
  public gov.nist.javax.sip.address.Authority getAuthority();
  public void clearQheaders();
  public boolean equals(java.lang.Object);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String toString();
  public java.lang.String getUserAtHost();
  public java.lang.String getUserAtHostPort();
  public java.lang.Object getParm(java.lang.String);
  public java.lang.String getMethod();
  public gov.nist.core.NameValueList getParameters();
  public void removeParameters();
  public gov.nist.core.NameValueList getQheaders();
  public java.lang.String getUserType();
  public java.lang.String getUserPassword();
  public void setUserPassword(java.lang.String);
  public gov.nist.javax.sip.address.TelephoneNumber getTelephoneSubscriber();
  public gov.nist.core.HostPort getHostPort();
  public int getPort();
  public java.lang.String getHost();
  public boolean isUserTelephoneSubscriber();
  public void removeTTL();
  public void removeMAddr();
  public void removeTransport();
  public void removeHeader(java.lang.String);
  public void removeHeaders();
  public void removeUserType();
  public void removePort();
  public void removeMethod();
  public void setUser(java.lang.String);
  public void removeUser();
  public void setDefaultParm(java.lang.String, java.lang.Object);
  public void setAuthority(gov.nist.javax.sip.address.Authority);
  public void setHost(gov.nist.core.Host);
  public void setUriParms(gov.nist.core.NameValueList);
  public void setUriParm(java.lang.String, java.lang.Object);
  public void setQheaders(gov.nist.core.NameValueList);
  public void setMAddr(java.lang.String);
  public void setUserParam(java.lang.String);
  public void setMethod(java.lang.String);
  public void setIsdnSubAddress(java.lang.String);
  public void setTelephoneSubscriber(gov.nist.javax.sip.address.TelephoneNumber);
  public void setPort(int);
  public boolean hasParameter(java.lang.String);
  public void setQHeader(gov.nist.core.NameValue);
  public void setUriParameter(gov.nist.core.NameValue);
  public boolean hasTransport();
  public void removeParameter(java.lang.String);
  public void setHostPort(gov.nist.core.HostPort);
  public java.lang.Object clone();
  public java.lang.String getHeader(java.lang.String);
  public java.util.Iterator<java.lang.String> getHeaderNames();
  public java.lang.String getLrParam();
  public java.lang.String getMAddrParam();
  public java.lang.String getMethodParam();
  public java.lang.String getParameter(java.lang.String);
  public java.util.Iterator<java.lang.String> getParameterNames();
  public int getTTLParam();
  public java.lang.String getTransportParam();
  public java.lang.String getUser();
  public boolean isSecure();
  public boolean isSipURI();
  public void setHeader(java.lang.String, java.lang.String);
  public void setLrParam();
  public void setSecure(boolean);
  public void setTTLParam(int);
  public java.lang.String getUserParam();
  public boolean hasLrParam();
  public boolean hasGrParam();
  public void setGrParam(java.lang.String);
  public java.lang.String getGrParam();
public class gov.nist.javax.sip.address.TelURLImpl extends gov.nist.javax.sip.address.GenericURI implements javax.sip.address.TelURL {
  public gov.nist.javax.sip.address.TelURLImpl();
  public void setTelephoneNumber(gov.nist.javax.sip.address.TelephoneNumber);
  public java.lang.String getIsdnSubAddress();
  public java.lang.String getPostDial();
  public java.lang.String getScheme();
  public boolean isGlobal();
  public boolean isSipURI();
  public void setGlobal(boolean);
  public void setIsdnSubAddress(java.lang.String);
  public void setPostDial(java.lang.String);
  public void setPhoneNumber(java.lang.String);
  public java.lang.String getPhoneNumber();
  public java.lang.String toString();
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.Object clone();
  public java.lang.String getParameter(java.lang.String);
  public void setParameter(java.lang.String, java.lang.String);
  public java.util.Iterator<java.lang.String> getParameterNames();
  public gov.nist.core.NameValueList getParameters();
  public void removeParameter(java.lang.String);
  public java.lang.String getPhoneContext();
public class gov.nist.javax.sip.address.TelephoneNumber extends gov.nist.javax.sip.address.NetObject {
  public gov.nist.javax.sip.address.TelephoneNumber();
  public void deleteParm(java.lang.String);
  public java.lang.String getPhoneNumber();
  public java.lang.String getPostDial();
  public java.lang.String getIsdnSubaddress();
  public boolean hasPostDial();
  public boolean hasParm(java.lang.String);
  public boolean hasIsdnSubaddress();
  public boolean isGlobal();
  public void removePostDial();
  public void removeIsdnSubaddress();
  public void setParameters(gov.nist.core.NameValueList);
  public void setGlobal(boolean);
  public void setPostDial(java.lang.String);
  public void setParm(java.lang.String, java.lang.Object);
  public void setIsdnSubaddress(java.lang.String);
  public void setPhoneNumber(java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String getParameter(java.lang.String);
  public java.util.Iterator<java.lang.String> getParameterNames();
  public void removeParameter(java.lang.String);
  public void setParameter(java.lang.String, java.lang.String);
  public java.lang.Object clone();
  public gov.nist.core.NameValueList getParameters();
public final class gov.nist.javax.sip.address.UserInfo extends gov.nist.javax.sip.address.NetObject {
  public gov.nist.javax.sip.address.UserInfo();
  public boolean equals(java.lang.Object);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public void clearPassword();
  public int getUserType();
  public java.lang.String getUser();
  public java.lang.String getPassword();
  public void setUser(java.lang.String);
  public void setPassword(java.lang.String);
public interface gov.nist.javax.sip.clientauthutils.AccountManager {
  public abstract gov.nist.javax.sip.clientauthutils.UserCredentials getCredentials(javax.sip.ClientTransaction, java.lang.String);
public interface gov.nist.javax.sip.clientauthutils.AuthenticationHelper {
  public abstract void setAuthenticationHeaders(javax.sip.message.Request);
  public abstract void removeCachedAuthenticationHeaders(java.lang.String);
public class gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl implements gov.nist.javax.sip.clientauthutils.AuthenticationHelper {
  public gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl(gov.nist.javax.sip.SipStackImpl, gov.nist.javax.sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory);
  public gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl(gov.nist.javax.sip.SipStackImpl, gov.nist.javax.sip.clientauthutils.SecureAccountManager, javax.sip.header.HeaderFactory);
  public void setAuthenticationHeaders(javax.sip.message.Request);
  public void removeCachedAuthenticationHeaders(java.lang.String);
  public gov.nist.javax.sip.clientauthutils.CredentialsCache$TimeoutTask(gov.nist.javax.sip.clientauthutils.CredentialsCache, java.lang.String, java.lang.String);
  public void run();
  public void removeAuthenticationHeader(java.lang.String);
public class gov.nist.javax.sip.clientauthutils.MessageDigestAlgorithm {
  public gov.nist.javax.sip.clientauthutils.MessageDigestAlgorithm();
public interface gov.nist.javax.sip.clientauthutils.SecureAccountManager {
  public abstract gov.nist.javax.sip.clientauthutils.UserCredentialHash getCredentialHash(javax.sip.ClientTransaction, java.lang.String);
public interface gov.nist.javax.sip.clientauthutils.UserCredentialHash {
  public abstract java.lang.String getUserName();
  public abstract java.lang.String getSipDomain();
  public abstract java.lang.String getHashUserDomainPassword();
public interface gov.nist.javax.sip.clientauthutils.UserCredentials {
  public abstract java.lang.String getUserName();
  public abstract java.lang.String getPassword();
  public abstract java.lang.String getSipDomain();
public final class gov.nist.javax.sip.header.Accept extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.AcceptHeader {
  public gov.nist.javax.sip.header.Accept();
  public boolean allowsAllContentTypes();
  public boolean allowsAllContentSubTypes();
  public gov.nist.javax.sip.header.MediaRange getMediaRange();
  public java.lang.String getContentType();
  public java.lang.String getContentSubType();
  public float getQValue();
  public boolean hasQValue();
  public void removeQValue();
  public void setContentSubType(java.lang.String);
  public void setContentType(java.lang.String);
  public void setMediaRange(gov.nist.javax.sip.header.MediaRange);
  public java.lang.Object clone();
public final class gov.nist.javax.sip.header.AcceptEncoding extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.AcceptEncodingHeader {
  public gov.nist.javax.sip.header.AcceptEncoding();
  public float getQValue();
  public java.lang.String getEncoding();
public class gov.nist.javax.sip.header.AcceptEncodingList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.AcceptEncoding> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AcceptEncodingList();
public final class gov.nist.javax.sip.header.AcceptLanguage extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.AcceptLanguageHeader {
  public gov.nist.javax.sip.header.AcceptLanguage();
  public java.lang.String getLanguageRange();
  public float getQValue();
  public boolean hasQValue();
  public void removeQValue();
  public void setLanguageRange(java.lang.String);
  public java.util.Locale getAcceptLanguage();
  public void setAcceptLanguage(java.util.Locale);
public class gov.nist.javax.sip.header.AcceptLanguageList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.AcceptLanguage> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AcceptLanguageList();
  public gov.nist.javax.sip.header.AcceptLanguage getFirst();
  public gov.nist.javax.sip.header.AcceptLanguage getLast();
  public javax.sip.header.Header getLast();
  public javax.sip.header.Header getFirst();
public class gov.nist.javax.sip.header.AcceptList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Accept> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AcceptList();
public abstract class gov.nist.javax.sip.header.AddressParametersHeader extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.Parameters {
  public javax.sip.address.Address getAddress();
  public void setAddress(javax.sip.address.Address);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
public final class gov.nist.javax.sip.header.AlertInfo extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.AlertInfoHeader {
  public gov.nist.javax.sip.header.AlertInfo();
  public void setAlertInfo(javax.sip.address.URI);
  public void setAlertInfo(java.lang.String);
  public javax.sip.address.URI getAlertInfo();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.AlertInfoList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.AlertInfo> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AlertInfoList();
public final class gov.nist.javax.sip.header.Allow extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.AllowHeader {
  public gov.nist.javax.sip.header.Allow();
  public gov.nist.javax.sip.header.Allow(java.lang.String);
  public java.lang.String getMethod();
public final class gov.nist.javax.sip.header.AllowEvents extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.AllowEventsHeader {
  public gov.nist.javax.sip.header.AllowEvents();
  public gov.nist.javax.sip.header.AllowEvents(java.lang.String);
  public java.lang.String getEventType();
public class gov.nist.javax.sip.header.AllowEventsList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.AllowEvents> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AllowEventsList();
  public java.util.ListIterator<java.lang.String> getMethods();
public class gov.nist.javax.sip.header.AllowList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Allow> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AllowList();
  public java.util.ListIterator<java.lang.String> getMethods();
public abstract class gov.nist.javax.sip.header.AuthenticationHeader extends gov.nist.javax.sip.header.ParametersHeader {
  public gov.nist.javax.sip.header.AuthenticationHeader(java.lang.String);
  public gov.nist.javax.sip.header.AuthenticationHeader();
  public void setChallenge(gov.nist.javax.sip.header.Challenge);
  public java.lang.String encodeBody();
  public void setScheme(java.lang.String);
  public java.lang.String getScheme();
  public java.lang.String getRealm();
  public java.lang.String getNonce();
  public void setURI(javax.sip.address.URI);
  public javax.sip.address.URI getURI();
  public java.lang.String getAlgorithm();
  public java.lang.String getQop();
  public java.lang.String getOpaque();
  public java.lang.String getDomain();
  public void setStale(boolean);
  public boolean isStale();
  public java.lang.String getCNonce();
  public int getNonceCount();
  public java.lang.String getResponse();
  public java.lang.String getUsername();
  public java.lang.String getIK();
  public java.lang.String getCK();
  public java.lang.String getIntegrityProtected();
public final class gov.nist.javax.sip.header.AuthenticationInfo extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.AuthenticationInfoHeader {
  public gov.nist.javax.sip.header.AuthenticationInfo();
  public void add(gov.nist.core.NameValue);
  public gov.nist.core.NameValue getAuthInfo(java.lang.String);
  public java.lang.String getAuthenticationInfo();
  public java.lang.String getCNonce();
  public java.lang.String getNextNonce();
  public int getNonceCount();
  public java.lang.String getQop();
  public java.lang.String getResponse();
public class gov.nist.javax.sip.header.Authorization extends gov.nist.javax.sip.header.AuthenticationHeader implements javax.sip.header.AuthorizationHeader,gov.nist.javax.sip.header.ims.AuthorizationHeaderIms {
  public gov.nist.javax.sip.header.Authorization();
public class gov.nist.javax.sip.header.AuthorizationList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Authorization> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.AuthorizationList();
public class gov.nist.javax.sip.header.CSeq extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.CSeqHeader {
  public gov.nist.javax.sip.header.CSeq();
  public gov.nist.javax.sip.header.CSeq(long, java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.String encode();
  public java.lang.String encodeBody();
  public java.lang.String getMethod();
  public int getSequenceNumber();
  public long getSeqNumber();
public class gov.nist.javax.sip.header.CallID extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.CallIdHeader {
  public gov.nist.javax.sip.header.CallID();
  public boolean equals(java.lang.Object);
  public java.lang.String encodeBody();
  public java.lang.String getCallId();
  public gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
  public void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier);
  public java.lang.Object clone();
public final class gov.nist.javax.sip.header.CallIdentifier extends gov.nist.javax.sip.header.SIPObject {
  public gov.nist.javax.sip.header.CallIdentifier();
  public gov.nist.javax.sip.header.CallIdentifier(java.lang.String, java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String getLocalId();
  public java.lang.String getHost();
  public void setLocalId(java.lang.String);
  public void setHost(java.lang.String);
public final class gov.nist.javax.sip.header.CallInfo extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.CallInfoHeader {
  public gov.nist.javax.sip.header.CallInfo();
  public java.lang.String encodeBody();
  public java.lang.String getPurpose();
  public javax.sip.address.URI getInfo();
  public void setPurpose(java.lang.String);
  public void setInfo(javax.sip.address.URI);
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.CallInfoList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.CallInfo> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.CallInfoList();
public class gov.nist.javax.sip.header.Challenge extends gov.nist.javax.sip.header.SIPObject {
  public gov.nist.javax.sip.header.Challenge();
  public java.lang.String encode();
  public java.lang.String getScheme();
  public gov.nist.core.NameValueList getAuthParams();
  public java.lang.String getDomain();
  public java.lang.String getURI();
  public java.lang.String getOpaque();
  public java.lang.String getQOP();
  public java.lang.String getAlgorithm();
  public java.lang.String getStale();
  public java.lang.String getSignature();
  public java.lang.String getSignedBy();
  public java.lang.String getResponse();
  public java.lang.String getRealm();
  public java.lang.String getParameter(java.lang.String);
  public boolean hasParameter(java.lang.String);
  public boolean hasParameters();
  public boolean removeParameter(java.lang.String);
  public void removeParameters();
  public void setParameter(gov.nist.core.NameValue);
  public void setScheme(java.lang.String);
  public void setAuthParams(gov.nist.core.NameValueList);
  public java.lang.Object clone();
public final class gov.nist.javax.sip.header.Contact extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.ContactHeader {
  public gov.nist.javax.sip.header.Contact();
  public gov.nist.javax.sip.header.ContactList getContactList();
  public boolean getWildCardFlag();
  public javax.sip.address.Address getAddress();
  public gov.nist.core.NameValueList getContactParms();
  public int getExpires();
  public void setExpires(int);
  public float getQValue();
  public void setContactList(gov.nist.javax.sip.header.ContactList);
  public void setWildCardFlag(boolean);
  public void setAddress(javax.sip.address.Address);
  public java.lang.Object clone();
  public void setWildCard();
  public boolean isWildCard();
  public boolean equals(java.lang.Object);
  public void removeSipInstanceParam();
  public java.lang.String getSipInstanceParam();
  public void setSipInstanceParam(java.lang.String);
  public void removePubGruuParam();
  public java.lang.String getPubGruuParam();
  public void setPubGruuParam(java.lang.String);
  public void removeTempGruuParam();
  public java.lang.String getTempGruuParam();
  public void setTempGruuParam(java.lang.String);
public class gov.nist.javax.sip.header.ContactList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Contact> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ContactList();
public final class gov.nist.javax.sip.header.ContentDisposition extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ContentDispositionHeader {
  public gov.nist.javax.sip.header.ContentDisposition();
  public java.lang.String encodeBody();
  public java.lang.String getDispositionType();
  public java.lang.String getHandling();
  public java.lang.String getContentDisposition();
public class gov.nist.javax.sip.header.ContentEncoding extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ContentEncodingHeader {
  public gov.nist.javax.sip.header.ContentEncoding();
  public gov.nist.javax.sip.header.ContentEncoding(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getEncoding();
public final class gov.nist.javax.sip.header.ContentEncodingList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ContentEncoding> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ContentEncodingList();
public class gov.nist.javax.sip.header.ContentLanguage extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ContentLanguageHeader {
  public gov.nist.javax.sip.header.ContentLanguage();
  public gov.nist.javax.sip.header.ContentLanguage(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getLanguageTag();
  public void setLanguageTag(java.lang.String);
  public java.util.Locale getContentLanguage();
  public void setContentLanguage(java.util.Locale);
  public java.lang.Object clone();
public final class gov.nist.javax.sip.header.ContentLanguageList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ContentLanguage> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ContentLanguageList();
public class gov.nist.javax.sip.header.ContentLength extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ContentLengthHeader {
  public gov.nist.javax.sip.header.ContentLength();
  public gov.nist.javax.sip.header.ContentLength(int);
  public int getContentLength();
  public java.lang.String encodeBody();
  public boolean match(java.lang.Object);
  public boolean equals(java.lang.Object);
public class gov.nist.javax.sip.header.ContentType extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ContentTypeHeader {
  public gov.nist.javax.sip.header.ContentType();
  public gov.nist.javax.sip.header.ContentType(java.lang.String, java.lang.String);
  public int compareMediaRange(java.lang.String);
  public java.lang.String encodeBody();
  public gov.nist.javax.sip.header.MediaRange getMediaRange();
  public java.lang.String getMediaType();
  public java.lang.String getMediaSubType();
  public java.lang.String getContentSubType();
  public java.lang.String getContentType();
  public java.lang.String getCharset();
  public void setMediaRange(gov.nist.javax.sip.header.MediaRange);
  public void setContentType(java.lang.String, java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
public final class gov.nist.javax.sip.header.ErrorInfo extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ErrorInfoHeader {
  public gov.nist.javax.sip.header.ErrorInfo();
  public gov.nist.javax.sip.header.ErrorInfo(gov.nist.javax.sip.address.GenericURI);
  public java.lang.String encodeBody();
  public void setErrorInfo(javax.sip.address.URI);
  public javax.sip.address.URI getErrorInfo();
  public java.lang.String getErrorMessage();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ErrorInfoList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ErrorInfo> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ErrorInfoList();
public class gov.nist.javax.sip.header.Event extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.EventHeader {
  public gov.nist.javax.sip.header.Event();
  public java.lang.String getEventType();
  public java.lang.String getEventId();
  public java.lang.String encodeBody();
  public boolean match(gov.nist.javax.sip.header.Event);
public class gov.nist.javax.sip.header.Expires extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ExpiresHeader {
  public gov.nist.javax.sip.header.Expires();
  public java.lang.String encodeBody();
  public int getExpires();
public class gov.nist.javax.sip.header.ExtensionHeaderImpl extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ExtensionHeaderImpl();
  public gov.nist.javax.sip.header.ExtensionHeaderImpl(java.lang.String);
  public void setName(java.lang.String);
  public void setValue(java.lang.String);
  public java.lang.String getHeaderValue();
  public java.lang.String encode();
  public java.lang.String encodeBody();
public class gov.nist.javax.sip.header.ExtensionHeaderList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ExtensionHeaderImpl> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ExtensionHeaderList(java.lang.String);
  public gov.nist.javax.sip.header.ExtensionHeaderList();
  public java.lang.String encode();
public final class gov.nist.javax.sip.header.From extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.FromHeader {
  public gov.nist.javax.sip.header.From();
  public gov.nist.javax.sip.header.From(gov.nist.javax.sip.header.To);
  public gov.nist.core.HostPort getHostPort();
  public java.lang.String getDisplayName();
  public java.lang.String getTag();
  public boolean hasTag();
  public void removeTag();
  public void setAddress(javax.sip.address.Address);
  public java.lang.String getUserAtHostPort();
  public boolean equals(java.lang.Object);
public interface gov.nist.javax.sip.header.HeaderExt extends javax.sip.header.Header {
  public abstract java.lang.String getValue();
public interface gov.nist.javax.sip.header.HeaderFactoryExt extends javax.sip.header.HeaderFactory {
  public abstract gov.nist.javax.sip.header.extensions.ReferredByHeader createReferredByHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PAccessNetworkInfoHeader createPAccessNetworkInfoHeader();
  public abstract gov.nist.javax.sip.header.ims.PAssociatedURIHeader createPAssociatedURIHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PCalledPartyIDHeader createPCalledPartyIDHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PChargingFunctionAddressesHeader createPChargingFunctionAddressesHeader();
  public abstract gov.nist.javax.sip.header.ims.PPreferredIdentityHeader createPPreferredIdentityHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PVisitedNetworkIDHeader createPVisitedNetworkIDHeader();
  public abstract gov.nist.javax.sip.header.ims.PathHeader createPathHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PrivacyHeader createPrivacyHeader(java.lang.String);
  public abstract gov.nist.javax.sip.header.ims.ServiceRouteHeader createServiceRouteHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.SecurityServerHeader createSecurityServerHeader();
  public abstract gov.nist.javax.sip.header.ims.SecurityClientHeader createSecurityClientHeader();
  public abstract gov.nist.javax.sip.header.ims.SecurityVerifyHeader createSecurityVerifyHeader();
  public abstract gov.nist.javax.sip.header.ims.PUserDatabaseHeader createPUserDatabaseHeader(java.lang.String);
  public abstract gov.nist.javax.sip.header.ims.PProfileKeyHeader createPProfileKeyHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PServedUserHeader createPServedUserHeader(javax.sip.address.Address);
  public abstract gov.nist.javax.sip.header.ims.PPreferredServiceHeader createPPreferredServiceHeader();
  public abstract gov.nist.javax.sip.header.ims.PAssertedServiceHeader createPAssertedServiceHeader();
public class gov.nist.javax.sip.header.HeaderFactoryImpl implements javax.sip.header.HeaderFactory,gov.nist.javax.sip.header.HeaderFactoryExt {
  public void setPrettyEncoding(boolean);
  public javax.sip.header.AcceptLanguageHeader createAcceptLanguageHeader(java.util.Locale);
  public javax.sip.header.AlertInfoHeader createAlertInfoHeader(javax.sip.address.URI);
  public javax.sip.header.CallInfoHeader createCallInfoHeader(javax.sip.address.URI);
  public javax.sip.header.ContactHeader createContactHeader(javax.sip.address.Address);
  public javax.sip.header.ContactHeader createContactHeader();
  public javax.sip.header.ContentLanguageHeader createContentLanguageHeader(java.util.Locale);
  public javax.sip.header.DateHeader createDateHeader(java.util.Calendar);
  public javax.sip.header.RecordRouteHeader createRecordRouteHeader(javax.sip.address.Address);
  public javax.sip.header.ReplyToHeader createReplyToHeader(javax.sip.address.Address);
  public javax.sip.header.RouteHeader createRouteHeader(javax.sip.address.Address);
  public javax.sip.header.ErrorInfoHeader createErrorInfoHeader(javax.sip.address.URI);
  public javax.sip.header.ReferToHeader createReferToHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.extensions.ReferredByHeader createReferredByHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PAccessNetworkInfoHeader createPAccessNetworkInfoHeader();
  public gov.nist.javax.sip.header.ims.PAssociatedURIHeader createPAssociatedURIHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PCalledPartyIDHeader createPCalledPartyIDHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PChargingFunctionAddressesHeader createPChargingFunctionAddressesHeader();
  public gov.nist.javax.sip.header.ims.PPreferredIdentityHeader createPPreferredIdentityHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PVisitedNetworkIDHeader createPVisitedNetworkIDHeader();
  public gov.nist.javax.sip.header.ims.PathHeader createPathHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PrivacyHeader createPrivacyHeader(java.lang.String);
  public gov.nist.javax.sip.header.ims.ServiceRouteHeader createServiceRouteHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.SecurityServerHeader createSecurityServerHeader();
  public gov.nist.javax.sip.header.ims.SecurityClientHeader createSecurityClientHeader();
  public gov.nist.javax.sip.header.ims.SecurityVerifyHeader createSecurityVerifyHeader();
  public gov.nist.javax.sip.header.ims.PUserDatabaseHeader createPUserDatabaseHeader(java.lang.String);
  public gov.nist.javax.sip.header.ims.PProfileKeyHeader createPProfileKeyHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PServedUserHeader createPServedUserHeader(javax.sip.address.Address);
  public gov.nist.javax.sip.header.ims.PPreferredServiceHeader createPPreferredServiceHeader();
  public gov.nist.javax.sip.header.ims.PAssertedServiceHeader createPAssertedServiceHeader();
  public gov.nist.javax.sip.header.HeaderFactoryImpl();
public class gov.nist.javax.sip.header.InReplyTo extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.InReplyToHeader {
  public gov.nist.javax.sip.header.InReplyTo();
  public gov.nist.javax.sip.header.InReplyTo(gov.nist.javax.sip.header.CallIdentifier);
  public java.lang.String getCallId();
  public java.lang.String encodeBody();
  public java.lang.Object clone();
public final class gov.nist.javax.sip.header.InReplyToList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.InReplyTo> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.InReplyToList();
public class gov.nist.javax.sip.header.MaxForwards extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.MaxForwardsHeader {
  public gov.nist.javax.sip.header.MaxForwards();
  public int getMaxForwards();
  public java.lang.String encodeBody();
  public boolean hasReachedZero();
  public boolean equals(java.lang.Object);
public class gov.nist.javax.sip.header.MediaRange extends gov.nist.javax.sip.header.SIPObject {
  public gov.nist.javax.sip.header.MediaRange();
  public java.lang.String getType();
  public java.lang.String getSubtype();
  public void setType(java.lang.String);
  public void setSubtype(java.lang.String);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
public class gov.nist.javax.sip.header.MimeVersion extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.MimeVersionHeader {
  public gov.nist.javax.sip.header.MimeVersion();
  public int getMinorVersion();
  public int getMajorVersion();
  public java.lang.String encodeBody();
public class gov.nist.javax.sip.header.MinExpires extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.MinExpiresHeader {
  public gov.nist.javax.sip.header.MinExpires();
  public java.lang.String encodeBody();
  public int getExpires();
public class gov.nist.javax.sip.header.NameMap implements gov.nist.javax.sip.header.SIPHeaderNames,gov.nist.core.PackageNames {
  public gov.nist.javax.sip.header.NameMap();
  public static java.lang.Class getClassFromName(java.lang.String);
  public static void addExtensionHeader(java.lang.String, java.lang.String);
public class gov.nist.javax.sip.header.Organization extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.OrganizationHeader {
  public java.lang.String encodeBody();
  public gov.nist.javax.sip.header.Organization();
  public java.lang.String getOrganization();
public abstract class gov.nist.javax.sip.header.ParametersHeader extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.Parameters,java.io.Serializable {
  public java.lang.String getParameter(java.lang.String);
  public java.lang.Object getParameterValue(java.lang.String);
  public java.util.Iterator<java.lang.String> getParameterNames();
  public boolean hasParameters();
  public void removeParameter(java.lang.String);
  public boolean hasParameter(java.lang.String);
  public void removeParameters();
  public gov.nist.core.NameValueList getParameters();
  public void setParameter(gov.nist.core.NameValue);
  public void setParameters(gov.nist.core.NameValueList);
  public gov.nist.core.NameValue getNameValue(java.lang.String);
  public java.lang.Object clone();
  public void setMultiParameter(java.lang.String, java.lang.String);
  public void setMultiParameter(gov.nist.core.NameValue);
  public java.lang.String getMultiParameter(java.lang.String);
  public gov.nist.core.DuplicateNameValueList getMultiParameters();
  public java.lang.Object getMultiParameterValue(java.lang.String);
  public java.util.Iterator<java.lang.String> getMultiParameterNames();
  public boolean hasMultiParameters();
  public void removeMultiParameter(java.lang.String);
  public boolean hasMultiParameter(java.lang.String);
  public void removeMultiParameters();
public class gov.nist.javax.sip.header.Priority extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.PriorityHeader {
  public gov.nist.javax.sip.header.Priority();
  public java.lang.String encodeBody();
  public java.lang.String getPriority();
public class gov.nist.javax.sip.header.Protocol extends gov.nist.javax.sip.header.SIPObject {
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String getProtocolName();
  public java.lang.String getProtocolVersion();
  public java.lang.String getProtocol();
  public java.lang.String getTransport();
  public void setProtocolName(java.lang.String);
  public void setProtocolVersion(java.lang.String);
  public void setTransport(java.lang.String);
  public gov.nist.javax.sip.header.Protocol();
public class gov.nist.javax.sip.header.ProxyAuthenticate extends gov.nist.javax.sip.header.AuthenticationHeader implements javax.sip.header.ProxyAuthenticateHeader {
  public gov.nist.javax.sip.header.ProxyAuthenticate();
  public javax.sip.address.URI getURI();
  public void setURI(javax.sip.address.URI);
public class gov.nist.javax.sip.header.ProxyAuthenticateList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ProxyAuthenticate> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ProxyAuthenticateList();
public class gov.nist.javax.sip.header.ProxyAuthorization extends gov.nist.javax.sip.header.AuthenticationHeader implements javax.sip.header.ProxyAuthorizationHeader {
  public gov.nist.javax.sip.header.ProxyAuthorization();
public class gov.nist.javax.sip.header.ProxyAuthorizationList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ProxyAuthorization> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ProxyAuthorizationList();
public class gov.nist.javax.sip.header.ProxyRequire extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ProxyRequireHeader {
  public gov.nist.javax.sip.header.ProxyRequire();
  public gov.nist.javax.sip.header.ProxyRequire(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getOptionTag();
public class gov.nist.javax.sip.header.ProxyRequireList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ProxyRequire> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ProxyRequireList();
public class gov.nist.javax.sip.header.RAck extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.RAckHeader {
  public gov.nist.javax.sip.header.RAck();
  public int getCSeqNumber();
  public long getCSeqNumberLong();
  public java.lang.String getMethod();
  public int getRSeqNumber();
  public long getCSequenceNumber();
  public long getRSequenceNumber();
public class gov.nist.javax.sip.header.RSeq extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.RSeqHeader {
  public gov.nist.javax.sip.header.RSeq();
  public int getSequenceNumber();
  public long getSeqNumber();
public class gov.nist.javax.sip.header.Reason extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ReasonHeader {
  public int getCause();
  public java.lang.String getProtocol();
  public java.lang.String getText();
  public gov.nist.javax.sip.header.Reason();
  public java.lang.String getName();
public final class gov.nist.javax.sip.header.ReasonList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Reason> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ReasonList();
public class gov.nist.javax.sip.header.RecordRoute extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.RecordRouteHeader {
  public gov.nist.javax.sip.header.RecordRoute(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.RecordRoute();
  public java.lang.String encodeBody();
public class gov.nist.javax.sip.header.RecordRouteList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.RecordRoute> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.RecordRouteList();
public final class gov.nist.javax.sip.header.ReferTo extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.ReferToHeader {
  public gov.nist.javax.sip.header.ReferTo();
public final class gov.nist.javax.sip.header.ReplyTo extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.ReplyToHeader {
  public gov.nist.javax.sip.header.ReplyTo();
  public gov.nist.javax.sip.header.ReplyTo(gov.nist.javax.sip.address.AddressImpl);
  public java.lang.String encode();
  public java.lang.String encodeBody();
  public gov.nist.core.HostPort getHostPort();
  public java.lang.String getDisplayName();
public class gov.nist.javax.sip.header.RequestLine extends gov.nist.javax.sip.header.SIPObject implements gov.nist.javax.sip.header.SipRequestLine {
  public gov.nist.javax.sip.header.RequestLine();
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public gov.nist.javax.sip.address.GenericURI getUri();
  public gov.nist.javax.sip.header.RequestLine(gov.nist.javax.sip.address.GenericURI, java.lang.String);
  public java.lang.String getMethod();
  public java.lang.String getSipVersion();
  public void setUri(javax.sip.address.URI);
  public void setMethod(java.lang.String);
  public void setSipVersion(java.lang.String);
  public java.lang.String getVersionMajor();
  public java.lang.String getVersionMinor();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
  public javax.sip.address.URI getUri();
public class gov.nist.javax.sip.header.Require extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.RequireHeader {
  public gov.nist.javax.sip.header.Require();
  public gov.nist.javax.sip.header.Require(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getOptionTag();
public final class gov.nist.javax.sip.header.RequireList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Require> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.RequireList();
public class gov.nist.javax.sip.header.RetryAfter extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.RetryAfterHeader {
  public gov.nist.javax.sip.header.RetryAfter();
  public java.lang.String encodeBody();
  public boolean hasComment();
  public void removeComment();
  public void removeDuration();
  public int getRetryAfter();
  public java.lang.String getComment();
  public int getDuration();
public class gov.nist.javax.sip.header.Route extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.RouteHeader {
  public gov.nist.javax.sip.header.Route();
  public gov.nist.javax.sip.header.Route(gov.nist.javax.sip.address.AddressImpl);
  public int hashCode();
  public java.lang.String encodeBody();
  public boolean equals(java.lang.Object);
public class gov.nist.javax.sip.header.RouteList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Route> {
  public gov.nist.javax.sip.header.RouteList();
  public java.lang.Object clone();
  public java.lang.String encode();
  public boolean equals(java.lang.Object);
public class gov.nist.javax.sip.header.SIPDate implements java.lang.Cloneable,java.io.Serializable {
  public boolean equals(java.lang.Object);
  public gov.nist.javax.sip.header.SIPDate();
  public gov.nist.javax.sip.header.SIPDate(long);
  public java.lang.String encode();
  public java.util.Calendar getJavaCal();
  public java.lang.String getWkday();
  public java.lang.String getMonth();
  public int getHour();
  public int getMinute();
  public int getSecond();
  public int getYear();
  public int getDeltaSeconds();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.SIPDateHeader extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.DateHeader {
  public gov.nist.javax.sip.header.SIPDateHeader();
  public java.lang.String encodeBody();
  public void setDate(gov.nist.javax.sip.header.SIPDate);
  public void setDate(java.util.Calendar);
  public java.util.Calendar getDate();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.SIPETag extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.SIPETagHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.SIPETag();
  public java.lang.String encodeBody();
  public java.lang.String getETag();
public abstract class gov.nist.javax.sip.header.SIPHeader extends gov.nist.javax.sip.header.SIPObject implements gov.nist.javax.sip.header.SIPHeaderNames,javax.sip.header.Header,gov.nist.javax.sip.header.HeaderExt {
  public gov.nist.javax.sip.header.SIPHeader();
  public java.lang.String getHeaderName();
  public java.lang.String getName();
  public void setHeaderName(java.lang.String);
  public java.lang.String getHeaderValue();
  public boolean isHeaderList();
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.lang.String getValue();
  public int hashCode();
  public final java.lang.String toString();
public abstract class gov.nist.javax.sip.header.SIPHeaderList<HDR extends gov.nist.javax.sip.header.SIPHeader> extends gov.nist.javax.sip.header.SIPHeader implements java.util.List<HDR>, javax.sip.header.Header {
  public java.lang.String getName();
  public boolean add(HDR);
  public void addFirst(HDR);
  public void add(HDR, boolean);
  public java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public java.util.List<java.lang.String> getHeadersAsEncodedStrings();
  public javax.sip.header.Header getFirst();
  public javax.sip.header.Header getLast();
  public java.lang.Class<HDR> getMyClass();
  public boolean isEmpty();
  public java.util.ListIterator<HDR> listIterator();
  public java.util.List<HDR> getHeaderList();
  public java.util.ListIterator<HDR> listIterator(int);
  public void removeFirst();
  public void removeLast();
  public boolean remove(HDR);
  public java.lang.String debugDump(int);
  public java.lang.String debugDump();
  public java.lang.Object[] toArray();
  public int indexOf(gov.nist.core.GenericObject);
  public boolean equals(java.lang.Object);
  public boolean match(gov.nist.javax.sip.header.SIPHeaderList<?>);
  public java.lang.Object clone();
  public int size();
  public boolean isHeaderList();
  public boolean addAll(java.util.Collection<? extends HDR>);
  public boolean addAll(int, java.util.Collection<? extends HDR>);
  public boolean containsAll(java.util.Collection<?>);
  public void clear();
  public boolean contains(java.lang.Object);
  public HDR get(int);
  public int indexOf(java.lang.Object);
  public java.util.Iterator<HDR> iterator();
  public int lastIndexOf(java.lang.Object);
  public boolean remove(java.lang.Object);
  public HDR remove(int);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.util.List<HDR> subList(int, int);
  public int hashCode();
  public HDR set(int, HDR);
  public static void setPrettyEncode(boolean);
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object remove(int);
  public java.lang.Object get(int);
  public boolean add(java.lang.Object);
  public void add(int, java.lang.Object);
public interface gov.nist.javax.sip.header.SIPHeaderNames {
public abstract class gov.nist.javax.sip.header.SIPHeaderNamesCache {
  public gov.nist.javax.sip.header.SIPHeaderNamesCache();
  public static java.lang.String toLowerCase(java.lang.String);
public class gov.nist.javax.sip.header.SIPIfMatch extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.SIPIfMatchHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.SIPIfMatch();
  public java.lang.String encodeBody();
  public java.lang.String getETag();
public abstract class gov.nist.javax.sip.header.SIPObject extends gov.nist.core.GenericObject {
  public void dbgPrint();
  public abstract java.lang.String encode();
  public java.lang.StringBuffer encode(java.lang.StringBuffer);
  public boolean equals(java.lang.Object);
  public boolean match(java.lang.Object);
  public java.lang.String debugDump();
  public java.lang.String debugDump(int);
  public java.lang.String toString();
public class gov.nist.javax.sip.header.Server extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.ServerHeader {
  public void addProductToken(java.lang.String);
  public gov.nist.javax.sip.header.Server();
  public java.lang.String encodeBody();
  public java.util.ListIterator getProduct();
public interface gov.nist.javax.sip.header.SipRequestLine {
  public abstract javax.sip.address.URI getUri();
  public abstract java.lang.String getMethod();
  public abstract java.lang.String getSipVersion();
  public abstract void setUri(javax.sip.address.URI);
  public abstract void setMethod(java.lang.String);
  public abstract void setSipVersion(java.lang.String);
  public abstract java.lang.String getVersionMajor();
  public abstract java.lang.String getVersionMinor();
public interface gov.nist.javax.sip.header.SipStatusLine {
  public abstract java.lang.String getSipVersion();
  public abstract int getStatusCode();
  public abstract java.lang.String getReasonPhrase();
  public abstract void setSipVersion(java.lang.String);
  public abstract void setStatusCode(int);
  public abstract void setReasonPhrase(java.lang.String);
  public abstract java.lang.String getVersionMajor();
  public abstract java.lang.String getVersionMinor();
public final class gov.nist.javax.sip.header.StatusLine extends gov.nist.javax.sip.header.SIPObject implements gov.nist.javax.sip.header.SipStatusLine {
  public boolean match(java.lang.Object);
  public void setMatchStatusClass(boolean);
  public gov.nist.javax.sip.header.StatusLine();
  public java.lang.String encode();
  public java.lang.String getSipVersion();
  public int getStatusCode();
  public java.lang.String getReasonPhrase();
  public void setSipVersion(java.lang.String);
  public void setStatusCode(int);
  public void setReasonPhrase(java.lang.String);
  public java.lang.String getVersionMajor();
  public java.lang.String getVersionMinor();
public class gov.nist.javax.sip.header.Subject extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.SubjectHeader {
  public gov.nist.javax.sip.header.Subject();
  public java.lang.String encodeBody();
  public java.lang.String getSubject();
public class gov.nist.javax.sip.header.SubscriptionState extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.SubscriptionStateHeader {
  public gov.nist.javax.sip.header.SubscriptionState();
  public int getExpires();
  public int getRetryAfter();
  public java.lang.String getReasonCode();
  public java.lang.String getState();
  public java.lang.String encodeBody();
public class gov.nist.javax.sip.header.Supported extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.SupportedHeader {
  public gov.nist.javax.sip.header.Supported();
  public gov.nist.javax.sip.header.Supported(java.lang.String);
  public java.lang.String encode();
  public java.lang.String encodeBody();
  public java.lang.String getOptionTag();
public class gov.nist.javax.sip.header.SupportedList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Supported> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.SupportedList();
public class gov.nist.javax.sip.header.TimeStamp extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.TimeStampHeader {
  public gov.nist.javax.sip.header.TimeStamp();
  public java.lang.String encodeBody();
  public boolean hasDelay();
  public void removeDelay();
  public float getTimeStamp();
  public float getDelay();
  public long getTime();
  public int getTimeDelay();
public final class gov.nist.javax.sip.header.To extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.ToHeader {
  public gov.nist.javax.sip.header.To();
  public gov.nist.javax.sip.header.To(gov.nist.javax.sip.header.From);
  public java.lang.String encode();
  public gov.nist.core.HostPort getHostPort();
  public java.lang.String getDisplayName();
  public java.lang.String getTag();
  public boolean hasTag();
  public void removeTag();
  public java.lang.String getUserAtHostPort();
  public boolean equals(java.lang.Object);
public class gov.nist.javax.sip.header.Unsupported extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.UnsupportedHeader {
  public gov.nist.javax.sip.header.Unsupported();
  public gov.nist.javax.sip.header.Unsupported(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getOptionTag();
public class gov.nist.javax.sip.header.UnsupportedList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Unsupported> {
  public gov.nist.javax.sip.header.UnsupportedList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.UserAgent extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.UserAgentHeader {
  public void addProductToken(java.lang.String);
  public gov.nist.javax.sip.header.UserAgent();
  public java.lang.String encodeBody();
  public java.util.ListIterator getProduct();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.Via extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ViaHeader,gov.nist.javax.sip.header.ViaHeaderExt {
  public gov.nist.javax.sip.header.Via();
  public boolean equals(java.lang.Object);
  public java.lang.String getProtocolVersion();
  public gov.nist.javax.sip.header.Protocol getSentProtocol();
  public gov.nist.core.HostPort getSentBy();
  public javax.sip.address.Hop getHop();
  public gov.nist.core.NameValueList getViaParms();
  public java.lang.String getComment();
  public boolean hasPort();
  public boolean hasComment();
  public void removePort();
  public void removeComment();
  public void setProtocolVersion(java.lang.String);
  public void setHost(gov.nist.core.Host);
  public void setSentProtocol(gov.nist.javax.sip.header.Protocol);
  public void setSentBy(gov.nist.core.HostPort);
  public void setComment(java.lang.String);
  public java.lang.String getHost();
  public void setRPort();
  public int getPort();
  public int getRPort();
  public java.lang.String getTransport();
  public java.lang.String getProtocol();
  public int getTTL();
  public java.lang.String getMAddr();
  public java.lang.String getReceived();
  public java.lang.String getBranch();
  public java.lang.Object clone();
  public java.lang.String getSentByField();
  public java.lang.String getSentProtocolField();
public interface gov.nist.javax.sip.header.ViaHeaderExt extends javax.sip.header.ViaHeader {
  public abstract java.lang.String getSentByField();
  public abstract java.lang.String getSentProtocolField();
public final class gov.nist.javax.sip.header.ViaList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Via> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.ViaList();
public class gov.nist.javax.sip.header.WWWAuthenticate extends gov.nist.javax.sip.header.AuthenticationHeader implements javax.sip.header.WWWAuthenticateHeader,gov.nist.javax.sip.header.ims.WWWAuthenticateHeaderIms {
  public gov.nist.javax.sip.header.WWWAuthenticate();
  public javax.sip.address.URI getURI();
  public void setURI(javax.sip.address.URI);
public class gov.nist.javax.sip.header.WWWAuthenticateList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.WWWAuthenticate> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.WWWAuthenticateList();
public class gov.nist.javax.sip.header.Warning extends gov.nist.javax.sip.header.SIPHeader implements javax.sip.header.WarningHeader {
  public gov.nist.javax.sip.header.Warning();
  public java.lang.String encodeBody();
  public int getCode();
  public java.lang.String getAgent();
  public java.lang.String getText();
public class gov.nist.javax.sip.header.WarningList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Warning> {
  public java.lang.Object clone();
  public gov.nist.javax.sip.header.WarningList();
public class gov.nist.javax.sip.header.extensions.Join extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ExtensionHeader,gov.nist.javax.sip.header.extensions.JoinHeader {
  public gov.nist.javax.sip.header.extensions.Join();
  public java.lang.String encodeBody();
  public java.lang.String getCallId();
  public gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
  public void setCallId(java.lang.String);
  public void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier);
  public java.lang.String getToTag();
  public boolean hasToTag();
  public void removeToTag();
  public java.lang.String getFromTag();
  public boolean hasFromTag();
  public void removeFromTag();
public interface gov.nist.javax.sip.header.extensions.JoinHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.lang.String getToTag();
  public abstract java.lang.String getFromTag();
  public abstract java.lang.String getCallId();
public class gov.nist.javax.sip.header.extensions.MinSE extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ExtensionHeader,gov.nist.javax.sip.header.extensions.MinSEHeader {
  public gov.nist.javax.sip.header.extensions.MinSE();
  public java.lang.String encodeBody();
  public int getExpires();
public interface gov.nist.javax.sip.header.extensions.MinSEHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
public class gov.nist.javax.sip.header.extensions.References extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.extensions.ReferencesHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.extensions.References();
  public java.lang.String getCallId();
  public java.lang.String getRel();
  public void setCallId(java.lang.String);
  public java.lang.String getParameter(java.lang.String);
  public java.util.Iterator getParameterNames();
  public void removeParameter(java.lang.String);
  public java.lang.String getName();
public interface gov.nist.javax.sip.header.extensions.ReferencesHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.lang.String getCallId();
  public abstract java.lang.String getRel();
public final class gov.nist.javax.sip.header.extensions.ReferredBy extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.ExtensionHeader,gov.nist.javax.sip.header.extensions.ReferredByHeader {
  public gov.nist.javax.sip.header.extensions.ReferredBy();
public interface gov.nist.javax.sip.header.extensions.ReferredByHeader extends javax.sip.header.Header,javax.sip.header.HeaderAddress,javax.sip.header.Parameters {
public class gov.nist.javax.sip.header.extensions.Replaces extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ExtensionHeader,gov.nist.javax.sip.header.extensions.ReplacesHeader {
  public gov.nist.javax.sip.header.extensions.Replaces();
  public java.lang.String encodeBody();
  public java.lang.String getCallId();
  public gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
  public void setCallId(java.lang.String);
  public void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier);
  public java.lang.String getToTag();
  public boolean hasToTag();
  public void removeToTag();
  public java.lang.String getFromTag();
  public boolean hasFromTag();
  public void removeFromTag();
public interface gov.nist.javax.sip.header.extensions.ReplacesHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getToTag();
  public abstract java.lang.String getFromTag();
  public abstract java.lang.String getCallId();
public final class gov.nist.javax.sip.header.extensions.SessionExpires extends gov.nist.javax.sip.header.ParametersHeader implements javax.sip.header.ExtensionHeader,gov.nist.javax.sip.header.extensions.SessionExpiresHeader {
  public gov.nist.javax.sip.header.extensions.SessionExpires();
  public int getExpires();
  public java.lang.String getRefresher();
  public void setRefresher(java.lang.String);
public interface gov.nist.javax.sip.header.extensions.SessionExpiresHeader extends javax.sip.header.Parameters,javax.sip.header.Header,javax.sip.header.ExtensionHeader {
  public abstract int getExpires();
  public abstract java.lang.String getRefresher();
  public abstract void setRefresher(java.lang.String);
public interface gov.nist.javax.sip.header.ims.AuthorizationHeaderIms extends javax.sip.header.AuthorizationHeader {
  public abstract java.lang.String getIntegrityProtected();
public class gov.nist.javax.sip.header.ims.PAccessNetworkInfo extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.ims.PAccessNetworkInfoHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PAccessNetworkInfo();
  public gov.nist.javax.sip.header.ims.PAccessNetworkInfo(java.lang.String);
  public void setAccessType(java.lang.String);
  public java.lang.String getAccessType();
  public java.lang.String getCGI3GPP();
  public java.lang.String getUtranCellID3GPP();
  public java.lang.String getDSLLocation();
  public java.lang.String getCI3GPP2();
  public void setParameter(java.lang.String, java.lang.Object);
  public java.lang.Object getExtensionAccessInfo();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PAccessNetworkInfoHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.lang.String getAccessType();
  public abstract java.lang.String getCGI3GPP();
  public abstract java.lang.String getUtranCellID3GPP();
  public abstract java.lang.String getDSLLocation();
  public abstract java.lang.String getCI3GPP2();
  public abstract java.lang.Object getExtensionAccessInfo();
public class gov.nist.javax.sip.header.ims.PAssertedIdentity extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PAssertedIdentityHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PAssertedIdentity(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.PAssertedIdentity();
  public java.lang.String encodeBody();
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PAssertedIdentityHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.PAssertedIdentityList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.PAssertedIdentity> {
  public gov.nist.javax.sip.header.ims.PAssertedIdentityList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.PAssertedService extends gov.nist.javax.sip.header.SIPHeader implements gov.nist.javax.sip.header.ims.PAssertedServiceHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PAssertedService();
  public java.lang.String getApplicationIdentifiers();
  public java.lang.String getSubserviceIdentifiers();
  public void setApplicationIdentifiers(java.lang.String);
  public void setSubserviceIdentifiers(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PAssertedServiceHeader extends javax.sip.header.Header {
  public abstract void setSubserviceIdentifiers(java.lang.String);
  public abstract java.lang.String getSubserviceIdentifiers();
  public abstract void setApplicationIdentifiers(java.lang.String);
  public abstract java.lang.String getApplicationIdentifiers();
public class gov.nist.javax.sip.header.ims.PAssociatedURI extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PAssociatedURIHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PAssociatedURI();
  public gov.nist.javax.sip.header.ims.PAssociatedURI(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.PAssociatedURI(gov.nist.javax.sip.address.GenericURI);
  public java.lang.String encodeBody();
  public javax.sip.address.URI getAssociatedURI();
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PAssociatedURIHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract javax.sip.address.URI getAssociatedURI();
public class gov.nist.javax.sip.header.ims.PAssociatedURIList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.PAssociatedURI> {
  public gov.nist.javax.sip.header.ims.PAssociatedURIList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.PCalledPartyID extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PCalledPartyIDHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PCalledPartyID(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.PCalledPartyID();
  public java.lang.String encodeBody();
public interface gov.nist.javax.sip.header.ims.PCalledPartyIDHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Parameters,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.PChargingFunctionAddresses extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.ims.PChargingFunctionAddressesHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PChargingFunctionAddresses();
  public java.util.ListIterator getChargingCollectionFunctionAddresses();
  public java.util.ListIterator<gov.nist.core.NameValue> getEventChargingFunctionAddresses();
  public boolean delete(java.lang.String, java.lang.String);
public interface gov.nist.javax.sip.header.ims.PChargingFunctionAddressesHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.util.ListIterator getChargingCollectionFunctionAddresses();
  public abstract java.util.ListIterator getEventChargingFunctionAddresses();
public class gov.nist.javax.sip.header.ims.PChargingVector extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.ims.PChargingVectorHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PChargingVector();
  public java.lang.String getICID();
  public java.lang.String getICIDGeneratedAt();
  public java.lang.String getOriginatingIOI();
  public java.lang.String getTerminatingIOI();
public interface gov.nist.javax.sip.header.ims.PChargingVectorHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getICID();
  public abstract java.lang.String getICIDGeneratedAt();
  public abstract java.lang.String getOriginatingIOI();
  public abstract java.lang.String getTerminatingIOI();
public class gov.nist.javax.sip.header.ims.PMediaAuthorization extends gov.nist.javax.sip.header.SIPHeader implements gov.nist.javax.sip.header.ims.PMediaAuthorizationHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PMediaAuthorization();
  public java.lang.String getToken();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PMediaAuthorizationHeader extends javax.sip.header.Header {
  public abstract java.lang.String getToken();
public class gov.nist.javax.sip.header.ims.PMediaAuthorizationList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.PMediaAuthorization> {
  public gov.nist.javax.sip.header.ims.PMediaAuthorizationList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.PPreferredIdentity extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PPreferredIdentityHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PPreferredIdentity(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.PPreferredIdentity();
  public java.lang.String encodeBody();
public interface gov.nist.javax.sip.header.ims.PPreferredIdentityHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.PPreferredService extends gov.nist.javax.sip.header.SIPHeader implements gov.nist.javax.sip.header.ims.PPreferredServiceHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PPreferredService();
  public java.lang.String getApplicationIdentifiers();
  public java.lang.String getSubserviceIdentifiers();
  public void setApplicationIdentifiers(java.lang.String);
  public void setSubserviceIdentifiers(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PPreferredServiceHeader extends javax.sip.header.Header {
  public abstract void setSubserviceIdentifiers(java.lang.String);
  public abstract java.lang.String getSubserviceIdentifiers();
  public abstract void setApplicationIdentifiers(java.lang.String);
  public abstract java.lang.String getApplicationIdentifiers();
public class gov.nist.javax.sip.header.ims.PProfileKey extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PProfileKeyHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PProfileKey();
  public gov.nist.javax.sip.header.ims.PProfileKey(gov.nist.javax.sip.address.AddressImpl);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PProfileKeyHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.PServedUser extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PServedUserHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PServedUser(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.PServedUser();
  public java.lang.String getRegistrationState();
  public java.lang.String getSessionCase();
  public void setRegistrationState(java.lang.String);
  public void setSessionCase(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PServedUserHeader {
  public abstract void setSessionCase(java.lang.String);
  public abstract java.lang.String getSessionCase();
  public abstract void setRegistrationState(java.lang.String);
  public abstract java.lang.String getRegistrationState();
public class gov.nist.javax.sip.header.ims.PUserDatabase extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.ims.PUserDatabaseHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PUserDatabase(java.lang.String);
  public gov.nist.javax.sip.header.ims.PUserDatabase();
  public java.lang.String getDatabaseName();
  public void setDatabaseName(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PUserDatabaseHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.lang.String getDatabaseName();
  public abstract void setDatabaseName(java.lang.String);
public class gov.nist.javax.sip.header.ims.PVisitedNetworkID extends gov.nist.javax.sip.header.ParametersHeader implements gov.nist.javax.sip.header.ims.PVisitedNetworkIDHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.PVisitedNetworkID();
  public gov.nist.javax.sip.header.ims.PVisitedNetworkID(java.lang.String);
  public gov.nist.javax.sip.header.ims.PVisitedNetworkID(gov.nist.core.Token);
  public void setVisitedNetworkID(java.lang.String);
  public void setVisitedNetworkID(gov.nist.core.Token);
  public java.lang.String getVisitedNetworkID();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PVisitedNetworkIDHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract void setVisitedNetworkID(java.lang.String);
  public abstract void setVisitedNetworkID(gov.nist.core.Token);
  public abstract java.lang.String getVisitedNetworkID();
public class gov.nist.javax.sip.header.ims.PVisitedNetworkIDList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.PVisitedNetworkID> {
  public gov.nist.javax.sip.header.ims.PVisitedNetworkIDList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.Path extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.PathHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.Path(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.Path();
  public java.lang.String encodeBody();
public interface gov.nist.javax.sip.header.ims.PathHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Parameters,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.PathList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.Path> {
  public gov.nist.javax.sip.header.ims.PathList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.Privacy extends gov.nist.javax.sip.header.SIPHeader implements gov.nist.javax.sip.header.ims.PrivacyHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.Privacy();
  public gov.nist.javax.sip.header.ims.Privacy(java.lang.String);
  public java.lang.String encodeBody();
  public java.lang.String getPrivacy();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.PrivacyHeader extends javax.sip.header.Header {
  public abstract java.lang.String getPrivacy();
public class gov.nist.javax.sip.header.ims.PrivacyList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.Privacy> {
  public gov.nist.javax.sip.header.ims.PrivacyList();
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.SIPHeaderNamesIms extends gov.nist.javax.sip.header.SIPHeaderNames {
public abstract class gov.nist.javax.sip.header.ims.SecurityAgree extends gov.nist.javax.sip.header.ParametersHeader {
  public gov.nist.javax.sip.header.ims.SecurityAgree(java.lang.String);
  public gov.nist.javax.sip.header.ims.SecurityAgree();
  public java.lang.String encodeBody();
  public java.lang.String getSecurityMechanism();
  public java.lang.String getEncryptionAlgorithm();
  public java.lang.String getAlgorithm();
  public java.lang.String getProtocol();
  public java.lang.String getMode();
  public int getSPIClient();
  public int getSPIServer();
  public int getPortClient();
  public int getPortServer();
  public float getPreference();
  public boolean equals(java.lang.Object);
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.SecurityAgreeHeader extends javax.sip.header.Parameters,javax.sip.header.Header {
  public abstract java.lang.String getSecurityMechanism();
  public abstract java.lang.String getEncryptionAlgorithm();
  public abstract java.lang.String getAlgorithm();
  public abstract java.lang.String getProtocol();
  public abstract java.lang.String getMode();
  public abstract int getSPIClient();
  public abstract int getSPIServer();
  public abstract int getPortClient();
  public abstract int getPortServer();
  public abstract float getPreference();
public class gov.nist.javax.sip.header.ims.SecurityClient extends gov.nist.javax.sip.header.ims.SecurityAgree implements gov.nist.javax.sip.header.ims.SecurityClientHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.SecurityClient();
public interface gov.nist.javax.sip.header.ims.SecurityClientHeader extends gov.nist.javax.sip.header.ims.SecurityServerHeader {
public class gov.nist.javax.sip.header.ims.SecurityClientList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.SecurityClient> {
  public gov.nist.javax.sip.header.ims.SecurityClientList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.SecurityServer extends gov.nist.javax.sip.header.ims.SecurityAgree implements gov.nist.javax.sip.header.ims.SecurityServerHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.SecurityServer();
public interface gov.nist.javax.sip.header.ims.SecurityServerHeader extends gov.nist.javax.sip.header.ims.SecurityAgreeHeader {
public class gov.nist.javax.sip.header.ims.SecurityServerList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.SecurityServer> {
  public gov.nist.javax.sip.header.ims.SecurityServerList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.SecurityVerify extends gov.nist.javax.sip.header.ims.SecurityAgree implements gov.nist.javax.sip.header.ims.SecurityVerifyHeader,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.SecurityVerify();
public interface gov.nist.javax.sip.header.ims.SecurityVerifyHeader extends gov.nist.javax.sip.header.ims.SecurityAgreeHeader {
public class gov.nist.javax.sip.header.ims.SecurityVerifyList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.SecurityVerify> {
  public gov.nist.javax.sip.header.ims.SecurityVerifyList();
  public java.lang.Object clone();
public class gov.nist.javax.sip.header.ims.ServiceRoute extends gov.nist.javax.sip.header.AddressParametersHeader implements gov.nist.javax.sip.header.ims.ServiceRouteHeader,gov.nist.javax.sip.header.ims.SIPHeaderNamesIms,javax.sip.header.ExtensionHeader {
  public gov.nist.javax.sip.header.ims.ServiceRoute(gov.nist.javax.sip.address.AddressImpl);
  public gov.nist.javax.sip.header.ims.ServiceRoute();
  public java.lang.String encodeBody();
public interface gov.nist.javax.sip.header.ims.ServiceRouteHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Parameters,javax.sip.header.Header {
public class gov.nist.javax.sip.header.ims.ServiceRouteList extends gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.ims.ServiceRoute> {
  public gov.nist.javax.sip.header.ims.ServiceRouteList();
  public java.lang.Object clone();
public interface gov.nist.javax.sip.header.ims.WWWAuthenticateHeaderIms extends javax.sip.header.WWWAuthenticateHeader {
  public abstract java.lang.String getIK();
  public abstract java.lang.String getCK();
public interface gov.nist.javax.sip.message.Content {
  public abstract void setContent(java.lang.Object);
  public abstract java.lang.Object getContent();
  public abstract javax.sip.header.ContentTypeHeader getContentTypeHeader();
  public abstract javax.sip.header.ContentDispositionHeader getContentDispositionHeader();
  public abstract java.lang.String toString();
public class gov.nist.javax.sip.message.ContentImpl implements gov.nist.javax.sip.message.Content {
  public gov.nist.javax.sip.message.ContentImpl(java.lang.String, java.lang.String);
  public void setContent(java.lang.Object);
  public javax.sip.header.ContentTypeHeader getContentTypeHeader();
  public java.lang.Object getContent();
  public java.lang.String toString();
  public void setContentDispositionHeader(javax.sip.header.ContentDispositionHeader);
  public javax.sip.header.ContentDispositionHeader getContentDispositionHeader();
  public void setContentTypeHeader(javax.sip.header.ContentTypeHeader);
public class gov.nist.javax.sip.message.HeaderIterator implements java.util.ListIterator {
  public int nextIndex();
  public int previousIndex();
  public void set(java.lang.Object);
  public void add(java.lang.Object);
  public boolean hasNext();
  public boolean hasPrevious();
public interface gov.nist.javax.sip.message.MessageExt extends javax.sip.message.Message {
  public abstract void setApplicationData(java.lang.Object);
  public abstract java.lang.Object getApplicationData();
  public abstract javax.sip.header.ViaHeader getTopmostViaHeader();
  public abstract javax.sip.header.FromHeader getFromHeader();
  public abstract javax.sip.header.ToHeader getToHeader();
  public abstract javax.sip.header.CallIdHeader getCallIdHeader();
  public abstract javax.sip.header.CSeqHeader getCSeqHeader();
  public abstract javax.sip.header.ContentTypeHeader getContentTypeHeader();
  public abstract javax.sip.header.ContentLengthHeader getContentLengthHeader();
  public abstract java.lang.String getFirstLine();
public interface gov.nist.javax.sip.message.MessageFactoryExt extends javax.sip.message.MessageFactory {
  public abstract void setDefaultUserAgentHeader(javax.sip.header.UserAgentHeader);
  public abstract void setDefaultServerHeader(javax.sip.header.ServerHeader);
  public abstract gov.nist.javax.sip.message.MultipartMimeContent createMultipartMimeContent(javax.sip.header.ContentTypeHeader, java.lang.String[], java.lang.String[], java.lang.String[]);
public class gov.nist.javax.sip.message.MessageFactoryImpl implements javax.sip.message.MessageFactory,gov.nist.javax.sip.message.MessageFactoryExt {
  public void setStrict(boolean);
  public void setTest(boolean);
  public gov.nist.javax.sip.message.MessageFactoryImpl();
  public void setDefaultUserAgentHeader(javax.sip.header.UserAgentHeader);
  public void setDefaultServerHeader(javax.sip.header.ServerHeader);
  public static javax.sip.header.UserAgentHeader getDefaultUserAgentHeader();
  public static javax.sip.header.ServerHeader getDefaultServerHeader();
  public static java.lang.String getDefaultContentEncodingCharset();
  public gov.nist.javax.sip.message.MultipartMimeContent createMultipartMimeContent(javax.sip.header.ContentTypeHeader, java.lang.String[], java.lang.String[], java.lang.String[]);
public abstract class gov.nist.javax.sip.message.MessageObject extends gov.nist.core.GenericObject {
  public abstract java.lang.String encode();
  public void dbgPrint();
  public java.lang.String debugDump();
  public java.lang.String dbgPrint(int);
public interface gov.nist.javax.sip.message.MultipartMimeContent {
  public abstract boolean add(gov.nist.javax.sip.message.Content);
  public abstract javax.sip.header.ContentTypeHeader getContentTypeHeader();
  public abstract java.lang.String toString();
  public abstract void addContent(gov.nist.javax.sip.message.Content);
  public abstract java.util.Iterator<gov.nist.javax.sip.message.Content> getContents();
  public abstract int getContentCount();
public class gov.nist.javax.sip.message.MultipartMimeContentImpl implements gov.nist.javax.sip.message.MultipartMimeContent {
  public gov.nist.javax.sip.message.MultipartMimeContentImpl(javax.sip.header.ContentTypeHeader);
  public boolean add(gov.nist.javax.sip.message.Content);
  public javax.sip.header.ContentTypeHeader getContentTypeHeader();
  public java.lang.String toString();
  public gov.nist.javax.sip.message.Content getContentByType(java.lang.String, java.lang.String);
  public void addContent(gov.nist.javax.sip.message.Content);
  public java.util.Iterator<gov.nist.javax.sip.message.Content> getContents();
  public int getContentCount();
public interface gov.nist.javax.sip.message.RequestExt extends javax.sip.message.Request,gov.nist.javax.sip.message.MessageExt {
public interface gov.nist.javax.sip.message.ResponseExt extends javax.sip.message.Response,gov.nist.javax.sip.message.MessageExt {
public class gov.nist.javax.sip.message.SIPDuplicateHeaderException extends java.text.ParseException {
  public gov.nist.javax.sip.message.SIPDuplicateHeaderException(java.lang.String);
  public gov.nist.javax.sip.message.SIPMessage getSIPMessage();
  public gov.nist.javax.sip.header.SIPHeader getSIPHeader();
  public void setSIPHeader(gov.nist.javax.sip.header.SIPHeader);
  public void setSIPMessage(gov.nist.javax.sip.message.SIPMessage);
public abstract class gov.nist.javax.sip.message.SIPMessage extends gov.nist.javax.sip.message.MessageObject implements javax.sip.message.Message,gov.nist.javax.sip.message.MessageExt {
  public static boolean isRequestHeader(gov.nist.javax.sip.header.SIPHeader);
  public static boolean isResponseHeader(gov.nist.javax.sip.header.SIPHeader);
  public java.util.LinkedList<java.lang.String> getMessageAsEncodedStrings();
  public abstract java.lang.String encodeMessage();
  public abstract java.lang.String getDialogId(boolean);
  public boolean match(java.lang.Object);
  public void merge(java.lang.Object);
  public java.lang.String encode();
  public byte[] encodeAsBytes(java.lang.String);
  public java.lang.Object clone();
  public java.lang.String debugDump();
  public gov.nist.javax.sip.message.SIPMessage();
  public void setHeader(javax.sip.header.Header);
  public void setHeaders(java.util.List<gov.nist.javax.sip.header.SIPHeader>);
  public void removeHeader(java.lang.String, boolean);
  public void removeHeader(java.lang.String);
  public java.lang.String getTransactionId();
  public int hashCode();
  public boolean hasContent();
  public java.util.Iterator<gov.nist.javax.sip.header.SIPHeader> getHeaders();
  public javax.sip.header.Header getHeader(java.lang.String);
  public gov.nist.javax.sip.header.ContentType getContentTypeHeader();
  public javax.sip.header.ContentLengthHeader getContentLengthHeader();
  public javax.sip.header.FromHeader getFrom();
  public gov.nist.javax.sip.header.ErrorInfoList getErrorInfoHeaders();
  public gov.nist.javax.sip.header.ContactList getContactHeaders();
  public gov.nist.javax.sip.header.Contact getContactHeader();
  public gov.nist.javax.sip.header.ViaList getViaHeaders();
  public void setVia(java.util.List);
  public void setHeader(gov.nist.javax.sip.header.SIPHeaderList<gov.nist.javax.sip.header.Via>);
  public gov.nist.javax.sip.header.Via getTopmostVia();
  public javax.sip.header.CSeqHeader getCSeq();
  public gov.nist.javax.sip.header.Authorization getAuthorization();
  public javax.sip.header.MaxForwardsHeader getMaxForwards();
  public void setMaxForwards(javax.sip.header.MaxForwardsHeader);
  public gov.nist.javax.sip.header.RouteList getRouteHeaders();
  public javax.sip.header.CallIdHeader getCallId();
  public void setCallId(javax.sip.header.CallIdHeader);
  public gov.nist.javax.sip.header.RecordRouteList getRecordRouteHeaders();
  public javax.sip.header.ToHeader getTo();
  public void setTo(javax.sip.header.ToHeader);
  public void setFrom(javax.sip.header.FromHeader);
  public javax.sip.header.ContentLengthHeader getContentLength();
  public byte[] getRawContent();
  public void setMessageContent(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.Object getContent();
  public void setMessageContent(java.lang.String, java.lang.String, byte[]);
  public void setMessageContent(byte[]);
  public void removeContent();
  public java.util.ListIterator<gov.nist.javax.sip.header.SIPHeader> getHeaders(java.lang.String);
  public java.lang.String getHeaderAsFormattedString(java.lang.String);
  public boolean hasHeader(java.lang.String);
  public boolean hasFromTag();
  public boolean hasToTag();
  public java.lang.String getFromTag();
  public void setFromTag(java.lang.String);
  public void setToTag(java.lang.String);
  public java.lang.String getToTag();
  public abstract java.lang.String getFirstLine();
  public void addHeader(javax.sip.header.Header);
  public void addUnparsed(java.lang.String);
  public void addHeader(java.lang.String);
  public java.util.ListIterator<java.lang.String> getUnrecognizedHeaders();
  public java.util.ListIterator<java.lang.String> getHeaderNames();
  public boolean equals(java.lang.Object);
  public javax.sip.header.ContentDispositionHeader getContentDisposition();
  public javax.sip.header.ContentEncodingHeader getContentEncoding();
  public javax.sip.header.ContentLanguageHeader getContentLanguage();
  public javax.sip.header.ExpiresHeader getExpires();
  public void setExpires(javax.sip.header.ExpiresHeader);
  public void setContentDisposition(javax.sip.header.ContentDispositionHeader);
  public void setContentEncoding(javax.sip.header.ContentEncodingHeader);
  public void setContentLanguage(javax.sip.header.ContentLanguageHeader);
  public void setContentLength(javax.sip.header.ContentLengthHeader);
  public void setSize(int);
  public int getSize();
  public void removeLast(java.lang.String);
  public void setCSeq(javax.sip.header.CSeqHeader);
  public void setApplicationData(java.lang.Object);
  public java.lang.Object getApplicationData();
  public javax.sip.header.CallIdHeader getCallIdHeader();
  public javax.sip.header.FromHeader getFromHeader();
  public javax.sip.header.ToHeader getToHeader();
  public javax.sip.header.ViaHeader getTopmostViaHeader();
  public javax.sip.header.CSeqHeader getCSeqHeader();
  public boolean isNullRequest();
  public void setNullRequest();
  public abstract java.lang.String getSIPVersion();
  public abstract java.lang.String toString();
  public javax.sip.header.ContentTypeHeader getContentTypeHeader();
public final class gov.nist.javax.sip.message.SIPRequest extends gov.nist.javax.sip.message.SIPMessage implements javax.sip.message.Request,gov.nist.javax.sip.message.RequestExt {
  public static boolean isTargetRefresh(java.lang.String);
  public static boolean isDialogCreating(java.lang.String);
  public static java.lang.String getCannonicalName(java.lang.String);
  public gov.nist.javax.sip.header.RequestLine getRequestLine();
  public void setRequestLine(gov.nist.javax.sip.header.RequestLine);
  public gov.nist.javax.sip.message.SIPRequest();
  public java.lang.String debugDump();
  public javax.sip.address.URI getRequestURI();
  public void setRequestURI(javax.sip.address.URI);
  public void setMethod(java.lang.String);
  public java.lang.String getMethod();
  public java.lang.String encode();
  public java.lang.String encodeMessage();
  public java.lang.String toString();
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.util.LinkedList getMessageAsEncodedStrings();
  public boolean match(java.lang.Object);
  public java.lang.String getDialogId(boolean);
  public java.lang.String getDialogId(boolean, java.lang.String);
  public byte[] encodeAsBytes(java.lang.String);
  public gov.nist.javax.sip.message.SIPResponse createResponse(int);
  public gov.nist.javax.sip.message.SIPResponse createResponse(int, java.lang.String);
  public gov.nist.javax.sip.message.SIPRequest createAckRequest(gov.nist.javax.sip.header.To);
  public gov.nist.javax.sip.message.SIPRequest createSIPRequest(gov.nist.javax.sip.header.RequestLine, boolean);
  public gov.nist.javax.sip.message.SIPRequest createBYERequest(boolean);
  public gov.nist.javax.sip.message.SIPRequest createACKRequest();
  public java.lang.String getViaHost();
  public int getViaPort();
  public java.lang.String getFirstLine();
  public java.lang.String getSIPVersion();
  public java.lang.Object getTransaction();
  public void setTransaction(java.lang.Object);
  public java.lang.Object getMessageChannel();
  public void setMessageChannel(java.lang.Object);
  public java.lang.String getMergeId();
  public void setInviteTransaction(java.lang.Object);
  public java.lang.Object getInviteTransaction();
public final class gov.nist.javax.sip.message.SIPResponse extends gov.nist.javax.sip.message.SIPMessage implements javax.sip.message.Response,gov.nist.javax.sip.message.ResponseExt {
  public static java.lang.String getReasonPhrase(int);
  public gov.nist.javax.sip.header.StatusLine getStatusLine();
  public int getStatusCode();
  public void setReasonPhrase(java.lang.String);
  public java.lang.String getReasonPhrase();
  public static boolean isFinalResponse(int);
  public boolean isFinalResponse();
  public void setStatusLine(gov.nist.javax.sip.header.StatusLine);
  public gov.nist.javax.sip.message.SIPResponse();
  public java.lang.String debugDump();
  public java.lang.String encode();
  public java.lang.String encodeMessage();
  public java.util.LinkedList getMessageAsEncodedStrings();
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public boolean match(java.lang.Object);
  public byte[] encodeAsBytes(java.lang.String);
  public java.lang.String getDialogId(boolean);
  public java.lang.String getDialogId(boolean, java.lang.String);
  public java.lang.String getFirstLine();
  public void setSIPVersion(java.lang.String);
  public java.lang.String getSIPVersion();
  public java.lang.String toString();
  public gov.nist.javax.sip.message.SIPRequest createRequest(gov.nist.javax.sip.address.SipUri, gov.nist.javax.sip.header.Via, gov.nist.javax.sip.header.CSeq, gov.nist.javax.sip.header.From, gov.nist.javax.sip.header.To);
public class gov.nist.javax.sip.parser.AcceptEncodingParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.AcceptEncodingParser(java.lang.String);
public class gov.nist.javax.sip.parser.AcceptLanguageParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.AcceptLanguageParser(java.lang.String);
public class gov.nist.javax.sip.parser.AcceptParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.AcceptParser(java.lang.String);
public class gov.nist.javax.sip.parser.AddressParametersParser extends gov.nist.javax.sip.parser.ParametersParser {
public class gov.nist.javax.sip.parser.AddressParser extends gov.nist.javax.sip.parser.Parser {
  public gov.nist.javax.sip.parser.AddressParser(gov.nist.javax.sip.parser.Lexer);
  public gov.nist.javax.sip.parser.AddressParser(java.lang.String);
public class gov.nist.javax.sip.parser.AlertInfoParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.AlertInfoParser(java.lang.String);
public class gov.nist.javax.sip.parser.AllowEventsParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.AllowEventsParser(java.lang.String);
public class gov.nist.javax.sip.parser.AllowParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.AllowParser(java.lang.String);
public class gov.nist.javax.sip.parser.AuthenticationInfoParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.AuthenticationInfoParser(java.lang.String);
public class gov.nist.javax.sip.parser.AuthorizationParser extends gov.nist.javax.sip.parser.ChallengeParser {
  public gov.nist.javax.sip.parser.AuthorizationParser(java.lang.String);
public class gov.nist.javax.sip.parser.CSeqParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.CSeqParser(java.lang.String);
public class gov.nist.javax.sip.parser.CallIDParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.CallIDParser(java.lang.String);
public class gov.nist.javax.sip.parser.CallInfoParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.CallInfoParser(java.lang.String);
public abstract class gov.nist.javax.sip.parser.ChallengeParser extends gov.nist.javax.sip.parser.HeaderParser {
public class gov.nist.javax.sip.parser.ContactParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ContactParser(java.lang.String);
public class gov.nist.javax.sip.parser.ContentDispositionParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.ContentDispositionParser(java.lang.String);
public class gov.nist.javax.sip.parser.ContentEncodingParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ContentEncodingParser(java.lang.String);
public class gov.nist.javax.sip.parser.ContentLanguageParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ContentLanguageParser(java.lang.String);
public class gov.nist.javax.sip.parser.ContentLengthParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ContentLengthParser(java.lang.String);
public class gov.nist.javax.sip.parser.ContentTypeParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.ContentTypeParser(java.lang.String);
public class gov.nist.javax.sip.parser.DateParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.DateParser(java.lang.String);
public class gov.nist.javax.sip.parser.ErrorInfoParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.ErrorInfoParser(java.lang.String);
public class gov.nist.javax.sip.parser.EventParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.EventParser(java.lang.String);
public class gov.nist.javax.sip.parser.ExpiresParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ExpiresParser(java.lang.String);
public class gov.nist.javax.sip.parser.FromParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.FromParser(java.lang.String);
public class gov.nist.javax.sip.parser.HeaderParser extends gov.nist.javax.sip.parser.Parser {
public class gov.nist.javax.sip.parser.InReplyToParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.InReplyToParser(java.lang.String);
public class gov.nist.javax.sip.parser.Lexer extends gov.nist.core.LexerCore {
  public static java.lang.String getHeaderName(java.lang.String);
  public gov.nist.javax.sip.parser.Lexer(java.lang.String, java.lang.String);
  public static java.lang.String getHeaderValue(java.lang.String);
  public void selectLexer(java.lang.String);
public class gov.nist.javax.sip.parser.MaxForwardsParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.MaxForwardsParser(java.lang.String);
public class gov.nist.javax.sip.parser.MimeVersionParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.MimeVersionParser(java.lang.String);
public class gov.nist.javax.sip.parser.MinExpiresParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.MinExpiresParser(java.lang.String);
public class gov.nist.javax.sip.parser.OrganizationParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.OrganizationParser(java.lang.String);
public abstract class gov.nist.javax.sip.parser.ParametersParser extends gov.nist.javax.sip.parser.HeaderParser {
public interface gov.nist.javax.sip.parser.ParseExceptionListener {
public abstract class gov.nist.javax.sip.parser.Parser extends gov.nist.core.ParserCore implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.Parser();
public class gov.nist.javax.sip.parser.ParserFactory {
  public gov.nist.javax.sip.parser.ParserFactory();
  public gov.nist.javax.sip.parser.Pipeline$Buffer(gov.nist.javax.sip.parser.Pipeline, byte[], int);
  public int getNextByte();
  public boolean cancel();
public class gov.nist.javax.sip.parser.Pipeline extends java.io.InputStream {
  public void startTimer();
  public void stopTimer();
  public gov.nist.javax.sip.parser.Pipeline(java.io.InputStream, int, java.util.Timer);
public final class gov.nist.javax.sip.parser.PipelinedMsgParser implements java.lang.Runnable {
  public gov.nist.javax.sip.parser.PipelinedMsgParser(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, boolean, int);
  public gov.nist.javax.sip.parser.PipelinedMsgParser(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, int);
  public gov.nist.javax.sip.parser.PipelinedMsgParser(gov.nist.javax.sip.parser.Pipeline);
  public void processInput();
  public void setMessageListener(gov.nist.javax.sip.parser.SIPMessageListener);
  public void run();
  public void close();
public class gov.nist.javax.sip.parser.PriorityParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.PriorityParser(java.lang.String);
public class gov.nist.javax.sip.parser.ProxyAuthenticateParser extends gov.nist.javax.sip.parser.ChallengeParser {
  public gov.nist.javax.sip.parser.ProxyAuthenticateParser(java.lang.String);
public class gov.nist.javax.sip.parser.ProxyAuthorizationParser extends gov.nist.javax.sip.parser.ChallengeParser {
  public gov.nist.javax.sip.parser.ProxyAuthorizationParser(java.lang.String);
public class gov.nist.javax.sip.parser.ProxyRequireParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ProxyRequireParser(java.lang.String);
public class gov.nist.javax.sip.parser.RAckParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.RAckParser(java.lang.String);
public class gov.nist.javax.sip.parser.RSeqParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.RSeqParser(java.lang.String);
public class gov.nist.javax.sip.parser.ReasonParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.ReasonParser(java.lang.String);
public class gov.nist.javax.sip.parser.RecordRouteParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.RecordRouteParser(java.lang.String);
public class gov.nist.javax.sip.parser.ReferToParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ReferToParser(java.lang.String);
public class gov.nist.javax.sip.parser.ReplyToParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ReplyToParser(java.lang.String);
public class gov.nist.javax.sip.parser.RequestLineParser extends gov.nist.javax.sip.parser.Parser {
  public gov.nist.javax.sip.parser.RequestLineParser(java.lang.String);
  public gov.nist.javax.sip.parser.RequestLineParser(gov.nist.javax.sip.parser.Lexer);
public class gov.nist.javax.sip.parser.RequireParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.RequireParser(java.lang.String);
public class gov.nist.javax.sip.parser.RetryAfterParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.RetryAfterParser(java.lang.String);
public class gov.nist.javax.sip.parser.RouteParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.RouteParser(java.lang.String);
public class gov.nist.javax.sip.parser.SIPETagParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.SIPETagParser(java.lang.String);
public class gov.nist.javax.sip.parser.SIPIfMatchParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.SIPIfMatchParser(java.lang.String);
public interface gov.nist.javax.sip.parser.SIPMessageListener extends gov.nist.javax.sip.parser.ParseExceptionListener {
public class gov.nist.javax.sip.parser.ServerParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ServerParser(java.lang.String);
public class gov.nist.javax.sip.parser.StatusLineParser extends gov.nist.javax.sip.parser.Parser {
  public gov.nist.javax.sip.parser.StatusLineParser(java.lang.String);
  public gov.nist.javax.sip.parser.StatusLineParser(gov.nist.javax.sip.parser.Lexer);
  public gov.nist.javax.sip.parser.StringMsgParser$1ParserThread(java.lang.String[]);
  public void run();
public class gov.nist.javax.sip.parser.StringMsgParser {
  public gov.nist.javax.sip.parser.StringMsgParser();
  public gov.nist.javax.sip.parser.StringMsgParser(gov.nist.javax.sip.parser.ParseExceptionListener);
  public void setParseExceptionListener(gov.nist.javax.sip.parser.ParseExceptionListener);
  public static void setComputeContentLengthFromMessage(boolean);
  public void setStrict(boolean);
public class gov.nist.javax.sip.parser.SubjectParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.SubjectParser(java.lang.String);
public class gov.nist.javax.sip.parser.SubscriptionStateParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.SubscriptionStateParser(java.lang.String);
public class gov.nist.javax.sip.parser.SupportedParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.SupportedParser(java.lang.String);
public class gov.nist.javax.sip.parser.TimeStampParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.TimeStampParser(java.lang.String);
public class gov.nist.javax.sip.parser.ToParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ToParser(java.lang.String);
public interface gov.nist.javax.sip.parser.TokenTypes {
public class gov.nist.javax.sip.parser.URLParser extends gov.nist.javax.sip.parser.Parser {
  public gov.nist.javax.sip.parser.URLParser(java.lang.String);
  public gov.nist.javax.sip.parser.URLParser(gov.nist.javax.sip.parser.Lexer);
public class gov.nist.javax.sip.parser.UnsupportedParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.UnsupportedParser(java.lang.String);
public class gov.nist.javax.sip.parser.UserAgentParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.UserAgentParser(java.lang.String);
public class gov.nist.javax.sip.parser.ViaParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ViaParser(java.lang.String);
  public gov.nist.javax.sip.parser.ViaParser(gov.nist.javax.sip.parser.Lexer);
public class gov.nist.javax.sip.parser.WWWAuthenticateParser extends gov.nist.javax.sip.parser.ChallengeParser {
  public gov.nist.javax.sip.parser.WWWAuthenticateParser(java.lang.String);
public class gov.nist.javax.sip.parser.WarningParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.WarningParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.JoinParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.extensions.JoinParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.MinSEParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.extensions.MinSEParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.ReferencesParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.extensions.ReferencesParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.ReferredByParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.extensions.ReferredByParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.ReplacesParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.extensions.ReplacesParser(java.lang.String);
public class gov.nist.javax.sip.parser.extensions.SessionExpiresParser extends gov.nist.javax.sip.parser.ParametersParser {
  public gov.nist.javax.sip.parser.extensions.SessionExpiresParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PAssertedIdentityParser extends gov.nist.javax.sip.parser.AddressParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PAssertedIdentityParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PAssociatedURIParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ims.PAssociatedURIParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PCalledPartyIDParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ims.PCalledPartyIDParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PChargingVectorParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PChargingVectorParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser(java.lang.String);
  public gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser(gov.nist.javax.sip.parser.Lexer);
public class gov.nist.javax.sip.parser.ims.PPreferredIdentityParser extends gov.nist.javax.sip.parser.AddressParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PPreferredIdentityParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PathParser extends gov.nist.javax.sip.parser.AddressParametersParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PathParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.PrivacyParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes {
  public gov.nist.javax.sip.parser.ims.PrivacyParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.SecurityAgreeParser extends gov.nist.javax.sip.parser.HeaderParser {
  public gov.nist.javax.sip.parser.ims.SecurityAgreeParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.SecurityClientParser extends gov.nist.javax.sip.parser.ims.SecurityAgreeParser {
  public gov.nist.javax.sip.parser.ims.SecurityClientParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.SecurityServerParser extends gov.nist.javax.sip.parser.ims.SecurityAgreeParser {
  public gov.nist.javax.sip.parser.ims.SecurityServerParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.SecurityVerifyParser extends gov.nist.javax.sip.parser.ims.SecurityAgreeParser {
  public gov.nist.javax.sip.parser.ims.SecurityVerifyParser(java.lang.String);
public class gov.nist.javax.sip.parser.ims.ServiceRouteParser extends gov.nist.javax.sip.parser.AddressParametersParser {
  public gov.nist.javax.sip.parser.ims.ServiceRouteParser(java.lang.String);
public class gov.nist.javax.sip.stack.DefaultMessageLogFactory implements gov.nist.javax.sip.LogRecordFactory {
  public gov.nist.javax.sip.stack.DefaultMessageLogFactory();
  public gov.nist.javax.sip.LogRecord createLogRecord(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, long);
  public gov.nist.javax.sip.LogRecord createLogRecord(java.lang.String, java.lang.String, java.lang.String, long, boolean, java.lang.String, java.lang.String, java.lang.String, long);
public class gov.nist.javax.sip.stack.DefaultRouter implements javax.sip.address.Router {
  public gov.nist.javax.sip.stack.DefaultRouter(javax.sip.SipStack, java.lang.String);
  public void fixStrictRouting(gov.nist.javax.sip.message.SIPRequest);
  public javax.sip.address.Hop getOutboundProxy();
  public java.util.ListIterator getNextHops(javax.sip.message.Request);
public class gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl implements javax.net.ssl.HandshakeCompletedListener {
  public gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl(gov.nist.javax.sip.stack.TLSMessageChannel);
  public void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent);
  public javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent();
public final class gov.nist.javax.sip.stack.HopImpl implements javax.sip.address.Hop,java.io.Serializable {
  public java.lang.String toString();
  public gov.nist.javax.sip.stack.HopImpl(java.lang.String, int, java.lang.String);
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getTransport();
  public boolean isURIRoute();
  public void setURIRouteFlag();
  public void closeAll();
public abstract class gov.nist.javax.sip.stack.MessageChannel {
  public gov.nist.javax.sip.stack.MessageChannel();
  public abstract void close();
  public abstract gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public abstract java.lang.String getTransport();
  public abstract boolean isReliable();
  public abstract boolean isSecure();
  public abstract java.lang.String getPeerAddress();
  public abstract int getPeerPort();
  public abstract int getPeerPacketSourcePort();
  public abstract java.net.InetAddress getPeerPacketSourceAddress();
  public abstract java.lang.String getKey();
  public abstract java.lang.String getViaHost();
  public abstract int getViaPort();
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getRawIpSourceAddress();
  public static java.lang.String getKey(java.net.InetAddress, int, java.lang.String);
  public static java.lang.String getKey(gov.nist.core.HostPort, java.lang.String);
  public gov.nist.core.HostPort getHostPort();
  public gov.nist.core.HostPort getPeerHostPort();
  public gov.nist.javax.sip.header.Via getViaHeader();
  public gov.nist.core.HostPort getViaHostPort();
  public void logResponse(gov.nist.javax.sip.message.SIPResponse, long, java.lang.String);
  public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
  public boolean equals(java.lang.Object);
  public gov.nist.javax.sip.stack.MessageLog(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, long);
  public gov.nist.javax.sip.stack.MessageLog(java.lang.String, java.lang.String, java.lang.String, long, boolean, java.lang.String, java.lang.String, java.lang.String, long);
  public java.lang.String toString();
public abstract class gov.nist.javax.sip.stack.MessageProcessor implements java.lang.Runnable {
  public final void initialize(java.net.InetAddress, int, gov.nist.javax.sip.stack.SIPTransactionStack);
  public java.lang.String getTransport();
  public int getPort();
  public gov.nist.javax.sip.header.Via getViaHeader();
  public gov.nist.javax.sip.ListeningPointImpl getListeningPoint();
  public void setListeningPoint(gov.nist.javax.sip.ListeningPointImpl);
  public java.lang.String getSavedIpAddress();
  public java.net.InetAddress getIpAddress();
  public java.lang.String getSentBy();
  public abstract gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public abstract void stop();
  public abstract int getDefaultTargetPort();
  public abstract boolean isSecure();
  public abstract int getMaximumMessageSize();
  public abstract boolean inUse();
  public abstract void run();
  public boolean isSentBySet();
  public static int getDefaultPort(java.lang.String);
public interface gov.nist.javax.sip.stack.RawMessageChannel {
public class gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer extends gov.nist.javax.sip.stack.SIPStackTimerTask {
  public gov.nist.javax.sip.stack.SIPClientTransaction$TransactionTimer(gov.nist.javax.sip.stack.SIPClientTransaction);
public class gov.nist.javax.sip.stack.SIPClientTransaction extends gov.nist.javax.sip.stack.SIPTransaction implements gov.nist.javax.sip.stack.ServerResponseInterface,javax.sip.ClientTransaction,gov.nist.javax.sip.ClientTransactionExt {
  public void setResponseInterface(gov.nist.javax.sip.stack.ServerResponseInterface);
  public gov.nist.javax.sip.stack.MessageChannel getRequestChannel();
  public boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage);
  public synchronized void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog);
  public int getViaPort();
  public java.lang.String getViaHost();
  public gov.nist.javax.sip.header.Via getOutgoingViaHeader();
  public void clearState();
  public void setState(javax.sip.TransactionState);
  public boolean checkFromTag(gov.nist.javax.sip.message.SIPResponse);
  public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
  public javax.sip.Dialog getDialog();
  public gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String);
  public void setDialog(gov.nist.javax.sip.stack.SIPDialog, java.lang.String);
  public gov.nist.javax.sip.stack.SIPDialog getDefaultDialog();
  public void setNextHop(javax.sip.address.Hop);
  public javax.sip.address.Hop getNextHop();
  public void setNotifyOnRetransmit(boolean);
  public boolean isNotifyOnRetransmit();
  public void alertIfStillInCallingStateBy(int);
  public gov.nist.javax.sip.stack.SIPDialog$DialogDeleteIfNoAckSentTask(gov.nist.javax.sip.stack.SIPDialog, long);
  public gov.nist.javax.sip.stack.SIPDialog$DialogTimerTask(gov.nist.javax.sip.stack.SIPDialog, gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.SIPDialog$LingerTimer(gov.nist.javax.sip.stack.SIPDialog);
public class gov.nist.javax.sip.stack.SIPDialog$ReInviteSender implements java.lang.Runnable,java.io.Serializable {
  public void terminate();
  public gov.nist.javax.sip.stack.SIPDialog$ReInviteSender(gov.nist.javax.sip.stack.SIPDialog, javax.sip.ClientTransaction);
  public void run();
public class gov.nist.javax.sip.stack.SIPDialog implements javax.sip.Dialog,gov.nist.javax.sip.DialogExt {
  public gov.nist.javax.sip.stack.SIPDialog(gov.nist.javax.sip.stack.SIPTransaction);
  public gov.nist.javax.sip.stack.SIPDialog(gov.nist.javax.sip.stack.SIPClientTransaction, gov.nist.javax.sip.message.SIPResponse);
  public gov.nist.javax.sip.stack.SIPDialog(gov.nist.javax.sip.SipProviderImpl, gov.nist.javax.sip.message.SIPResponse);
  public void addEventListener(gov.nist.javax.sip.stack.SIPDialogEventListener);
  public void removeEventListener(gov.nist.javax.sip.stack.SIPDialogEventListener);
  public void setApplicationData(java.lang.Object);
  public java.lang.Object getApplicationData();
  public synchronized void requestConsumed();
  public synchronized boolean isRequestConsumable(gov.nist.javax.sip.message.SIPRequest);
  public void doDeferredDelete();
  public void setState(int);
  public void printDebugInfo();
  public boolean isAckSeen();
  public gov.nist.javax.sip.message.SIPRequest getLastAckSent();
  public boolean isAckSent(long);
  public javax.sip.Transaction getFirstTransaction();
  public java.util.Iterator getRouteSet();
  public synchronized void addRoute(gov.nist.javax.sip.message.SIPRequest);
  public void setDialogId(java.lang.String);
  public static gov.nist.javax.sip.stack.SIPDialog createFromNOTIFY(gov.nist.javax.sip.stack.SIPClientTransaction, gov.nist.javax.sip.stack.SIPTransaction);
  public boolean isServer();
  public java.lang.String getDialogId();
  public void addTransaction(gov.nist.javax.sip.stack.SIPTransaction);
  public gov.nist.javax.sip.stack.SIPTransaction getLastTransaction();
  public gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction();
  public void setRemoteSequenceNumber(long);
  public void incrementLocalSequenceNumber();
  public int getRemoteSequenceNumber();
  public int getLocalSequenceNumber();
  public long getOriginalLocalSequenceNumber();
  public long getLocalSeqNumber();
  public long getRemoteSeqNumber();
  public java.lang.String getLocalTag();
  public java.lang.String getRemoteTag();
  public void delete();
  public javax.sip.header.CallIdHeader getCallId();
  public javax.sip.address.Address getLocalParty();
  public javax.sip.address.Address getRemoteParty();
  public javax.sip.address.Address getRemoteTarget();
  public javax.sip.DialogState getState();
  public boolean isSecure();
  public java.lang.String getMethod();
  public gov.nist.javax.sip.SipProviderImpl getSipProvider();
  public void setSipProvider(gov.nist.javax.sip.SipProviderImpl);
  public void setResponseTags(gov.nist.javax.sip.message.SIPResponse);
  public void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction, gov.nist.javax.sip.message.SIPResponse);
  public void startRetransmitTimer(gov.nist.javax.sip.stack.SIPServerTransaction, javax.sip.message.Response);
  public gov.nist.javax.sip.message.SIPResponse getLastResponse();
  public boolean handlePrack(gov.nist.javax.sip.message.SIPRequest);
  public void setAssigned();
  public boolean isAssigned();
  public gov.nist.javax.sip.header.Contact getMyContactHeader();
  public boolean handleAck(gov.nist.javax.sip.stack.SIPServerTransaction);
  public boolean isAtleastOneAckSent();
  public boolean isBackToBackUserAgent();
  public synchronized void doDeferredDeleteIfNoAckSent(long);
  public void setBackToBackUserAgent();
  public boolean isSequnceNumberValidation();
  public void disableSequenceNumberValidation();
  public void acquireTimerTaskSem();
  public void releaseTimerTaskSem();
  public javax.sip.SipProvider getSipProvider();
public class gov.nist.javax.sip.stack.SIPDialogErrorEvent extends java.util.EventObject {
  public int getErrorID();
public interface gov.nist.javax.sip.stack.SIPDialogEventListener extends java.util.EventListener {
  public abstract void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent);
  public gov.nist.javax.sip.stack.SIPServerTransaction$ProvisionalResponseTask(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.SIPServerTransaction$RetransmissionAlertTimerTask(gov.nist.javax.sip.stack.SIPServerTransaction, java.lang.String);
  public gov.nist.javax.sip.stack.SIPServerTransaction$TransactionTimer(gov.nist.javax.sip.stack.SIPServerTransaction);
public class gov.nist.javax.sip.stack.SIPServerTransaction extends gov.nist.javax.sip.stack.SIPTransaction implements gov.nist.javax.sip.stack.ServerRequestInterface,javax.sip.ServerTransaction,gov.nist.javax.sip.ServerTransactionExt {
  public void setRequestInterface(gov.nist.javax.sip.stack.ServerRequestInterface);
  public gov.nist.javax.sip.stack.MessageChannel getResponseChannel();
  public boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage);
  public boolean isTransactionMapped();
  public void processRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public java.lang.String getViaHost();
  public int getViaPort();
  public gov.nist.javax.sip.message.SIPResponse getLastResponse();
  public void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest);
  public javax.sip.TransactionState getState();
  public void setState(javax.sip.TransactionState);
  public boolean equals(java.lang.Object);
  public javax.sip.Dialog getDialog();
  public void setDialog(gov.nist.javax.sip.stack.SIPDialog, java.lang.String);
  public gov.nist.javax.sip.message.SIPResponse getReliableProvisionalResponse();
  public boolean prackRecieved();
  public boolean isRetransmissionAlertEnabled();
  public void disableRetransmissionAlerts();
  public void setAckSeen();
  public boolean ackSeen();
  public void setMapped(boolean);
  public void setPendingSubscribe(gov.nist.javax.sip.stack.SIPClientTransaction);
  public void releaseSem();
  public void setInviteTransaction(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.SIPServerTransaction getCanceledInviteTransaction();
  public javax.sip.ServerTransaction getCanceledInviteTransaction();
public abstract class gov.nist.javax.sip.stack.SIPStackTimerTask extends java.util.TimerTask {
  public gov.nist.javax.sip.stack.SIPStackTimerTask();
  public final void run();
  public gov.nist.javax.sip.stack.SIPTransaction$LingerTimer(gov.nist.javax.sip.stack.SIPTransaction);
public abstract class gov.nist.javax.sip.stack.SIPTransaction extends gov.nist.javax.sip.stack.MessageChannel implements javax.sip.Transaction,gov.nist.javax.sip.TransactionExt {
  public java.lang.String getBranchId();
  public void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest);
  public gov.nist.javax.sip.message.SIPRequest getOriginalRequest();
  public javax.sip.message.Request getRequest();
  public final boolean isInviteTransaction();
  public final boolean isCancelTransaction();
  public final boolean isByeTransaction();
  public gov.nist.javax.sip.stack.MessageChannel getMessageChannel();
  public final void setBranch(java.lang.String);
  public final java.lang.String getBranch();
  public final java.lang.String getMethod();
  public final long getCSeq();
  public void setState(javax.sip.TransactionState);
  public javax.sip.TransactionState getState();
  public final boolean isTerminated();
  public java.lang.String getHost();
  public java.lang.String getKey();
  public int getPort();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public java.lang.String getPeerAddress();
  public int getPeerPort();
  public int getPeerPacketSourcePort();
  public java.net.InetAddress getPeerPacketSourceAddress();
  public java.lang.String getTransport();
  public boolean isReliable();
  public gov.nist.javax.sip.header.Via getViaHeader();
  public void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener);
  public void removeEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener);
  public abstract javax.sip.Dialog getDialog();
  public abstract void setDialog(gov.nist.javax.sip.stack.SIPDialog, java.lang.String);
  public int getRetransmitTimer();
  public java.lang.String getViaHost();
  public gov.nist.javax.sip.message.SIPResponse getLastResponse();
  public javax.sip.message.Response getResponse();
  public java.lang.String getTransactionId();
  public int hashCode();
  public int getViaPort();
  public boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest);
  public void setRetransmitTimer(int);
  public void close();
  public boolean isSecure();
  public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
  public void setApplicationData(java.lang.Object);
  public java.lang.Object getApplicationData();
  public void setEncapsulatedChannel(gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.SipProviderImpl getSipProvider();
  public void raiseIOExceptionEvent();
  public boolean acquireSem();
  public void releaseSem();
  public boolean passToListener();
  public void setPassToListener();
  public abstract boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage);
  public javax.sip.SipProvider getSipProvider();
public class gov.nist.javax.sip.stack.SIPTransactionErrorEvent extends java.util.EventObject {
  public int getErrorID();
public interface gov.nist.javax.sip.stack.SIPTransactionEventListener extends java.util.EventListener {
  public abstract void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent);
  public gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer(gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.core.ThreadAuditor$ThreadHandle);
  public gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask(gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.SIPClientTransaction);
public abstract class gov.nist.javax.sip.stack.SIPTransactionStack implements gov.nist.javax.sip.stack.SIPTransactionEventListener,gov.nist.javax.sip.stack.SIPDialogEventListener {
  public void disableLogging();
  public void enableLogging();
  public void printDialogTable();
  public gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String);
  public static boolean isDialogCreated(java.lang.String);
  public void addExtensionMethod(java.lang.String);
  public void putDialog(gov.nist.javax.sip.stack.SIPDialog);
  public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction);
  public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction, gov.nist.javax.sip.message.SIPResponse);
  public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.SipProviderImpl, gov.nist.javax.sip.message.SIPResponse);
  public void removeDialog(gov.nist.javax.sip.stack.SIPDialog);
  public gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String);
  public void removeDialog(java.lang.String);
  public gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.ListeningPointImpl);
  public void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest);
  public boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction);
  public boolean isTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage, boolean);
  public gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest, boolean);
  public gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest);
  public gov.nist.javax.sip.stack.SIPServerTransaction findMergedTransaction(gov.nist.javax.sip.message.SIPRequest);
  public void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction);
  public void removeFromMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction);
  public void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction, gov.nist.javax.sip.message.SIPRequest);
  public void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel);
  public int getClientTransactionTableSize();
  public int getServerTransactionTableSize();
  public void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction);
  public void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction);
  public synchronized void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent);
  public synchronized void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent);
  public void stopStack();
  public void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction);
  public gov.nist.core.net.NetworkLayer getNetworkLayer();
  public boolean isLoggingEnabled();
  public gov.nist.core.StackLogger getStackLogger();
  public gov.nist.core.ServerLogger getServerLogger();
  public int getMaxMessageSize();
  public void setSingleThreaded();
  public void setThreadPoolSize(int);
  public void setMaxConnections(int);
  public void setStackName(java.lang.String);
  public java.lang.String getHostAddress();
  public javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest);
  public javax.sip.address.Router getRouter();
  public boolean isAlive();
  public boolean isEventForked(java.lang.String);
  public gov.nist.core.net.AddressResolver getAddressResolver();
  public void setAddressResolver(gov.nist.core.net.AddressResolver);
  public void setLogRecordFactory(gov.nist.javax.sip.LogRecordFactory);
  public gov.nist.core.ThreadAuditor getThreadAuditor();
  public java.lang.String auditStack(java.util.Set, long, long);
  public void setNon2XXAckPassedToListener(boolean);
  public boolean isNon2XXAckPassedToListener();
  public int getActiveClientTransactionCount();
  public boolean isRfc2543Supported();
  public boolean isCancelClientTransactionChecked();
  public boolean isRemoteTagReassignmentAllowed();
  public java.util.Collection<javax.sip.Dialog> getDialogs();
  public java.util.Collection<javax.sip.Dialog> getDialogs(javax.sip.DialogState);
  public javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader);
  public javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader);
  public void setTimer(java.util.Timer);
  public java.util.Timer getTimer();
  public int getReceiveUdpBufferSize();
  public void setReceiveUdpBufferSize(int);
  public int getSendUdpBufferSize();
  public void setSendUdpBufferSize(int);
  public void setStackLogger(gov.nist.core.StackLogger);
  public boolean checkBranchId();
  public void setLogStackTraceOnMessageSend(boolean);
  public boolean isLogStackTraceOnMessageSend();
  public void setDeliverDialogTerminatedEventForNullDialog();
  public void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction);
  public gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String);
public interface gov.nist.javax.sip.stack.ServerRequestInterface {
  public abstract void processRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
public interface gov.nist.javax.sip.stack.ServerResponseInterface {
  public abstract void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog);
  public abstract void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
public interface gov.nist.javax.sip.stack.StackMessageFactory {
  public abstract gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel);
  public abstract gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel);
  public boolean cancel();
  public void run();
public class gov.nist.javax.sip.stack.TCPMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.SIPMessageListener,java.lang.Runnable,gov.nist.javax.sip.stack.RawMessageChannel {
  public boolean isReliable();
  public void close();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public java.lang.String getTransport();
  public java.lang.String getPeerAddress();
  public java.lang.String getPeerProtocol();
  public void run();
  public boolean equals(java.lang.Object);
  public java.lang.String getKey();
  public java.lang.String getViaHost();
  public int getViaPort();
  public int getPeerPort();
  public int getPeerPacketSourcePort();
  public java.net.InetAddress getPeerPacketSourceAddress();
  public boolean isSecure();
public class gov.nist.javax.sip.stack.TCPMessageProcessor extends gov.nist.javax.sip.stack.MessageProcessor {
  public void run();
  public java.lang.String getTransport();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public synchronized void stop();
  public int getMaximumMessageSize();
  public boolean inUse();
  public int getDefaultTargetPort();
  public boolean isSecure();
public final class gov.nist.javax.sip.stack.TLSMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.SIPMessageListener,java.lang.Runnable,gov.nist.javax.sip.stack.RawMessageChannel {
  public boolean isReliable();
  public void close();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public java.lang.String getTransport();
  public java.lang.String getPeerAddress();
  public java.lang.String getPeerProtocol();
  public void run();
  public boolean equals(java.lang.Object);
  public java.lang.String getKey();
  public java.lang.String getViaHost();
  public int getViaPort();
  public int getPeerPort();
  public int getPeerPacketSourcePort();
  public java.net.InetAddress getPeerPacketSourceAddress();
  public boolean isSecure();
  public void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener();
public class gov.nist.javax.sip.stack.TLSMessageProcessor extends gov.nist.javax.sip.stack.MessageProcessor {
  public void run();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public synchronized void stop();
  public int getMaximumMessageSize();
  public boolean inUse();
  public int getDefaultTargetPort();
  public boolean isSecure();
  public gov.nist.javax.sip.stack.UDPMessageChannel$PingBackTimerTask(gov.nist.javax.sip.stack.UDPMessageChannel, java.lang.String, int);
  public void run();
  public int hashCode();
public class gov.nist.javax.sip.stack.UDPMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.ParseExceptionListener,java.lang.Runnable,gov.nist.javax.sip.stack.RawMessageChannel {
  public void run();
  public void processMessage(gov.nist.javax.sip.message.SIPMessage);
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public java.lang.String getTransport();
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getPeerName();
  public java.lang.String getPeerAddress();
  public boolean equals(java.lang.Object);
  public java.lang.String getKey();
  public int getPeerPacketSourcePort();
  public java.net.InetAddress getPeerPacketSourceAddress();
  public java.lang.String getViaHost();
  public int getViaPort();
  public boolean isReliable();
  public boolean isSecure();
  public int getPeerPort();
  public java.lang.String getPeerProtocol();
  public void close();
public class gov.nist.javax.sip.stack.UDPMessageProcessor extends gov.nist.javax.sip.stack.MessageProcessor {
  public int getPort();
  public void run();
  public void stop();
  public java.lang.String getTransport();
  public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
  public int getDefaultTargetPort();
  public boolean isSecure();
  public int getMaximumMessageSize();
  public boolean inUse();
public class java.beans.IndexedPropertyChangeEvent extends java.beans.PropertyChangeEvent {
  public java.beans.IndexedPropertyChangeEvent(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object, int);
  public int getIndex();
public class java.beans.PropertyChangeEvent extends java.util.EventObject {
  public java.beans.PropertyChangeEvent(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object);
  public java.lang.String getPropertyName();
  public void setPropagationId(java.lang.Object);
  public java.lang.Object getPropagationId();
  public java.lang.Object getOldValue();
  public java.lang.Object getNewValue();
public interface java.beans.PropertyChangeListener extends java.util.EventListener {
  public abstract void propertyChange(java.beans.PropertyChangeEvent);
public class java.beans.PropertyChangeListenerProxy extends java.util.EventListenerProxy implements java.beans.PropertyChangeListener {
  public java.beans.PropertyChangeListenerProxy(java.lang.String, java.beans.PropertyChangeListener);
  public java.lang.String getPropertyName();
  public void propertyChange(java.beans.PropertyChangeEvent);
public class java.beans.PropertyChangeSupport implements java.io.Serializable {
  public java.beans.PropertyChangeSupport(java.lang.Object);
  public void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void fireIndexedPropertyChange(java.lang.String, int, java.lang.Object, java.lang.Object);
  public void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String);
  public void firePropertyChange(java.lang.String, boolean, boolean);
  public void fireIndexedPropertyChange(java.lang.String, int, boolean, boolean);
  public void firePropertyChange(java.lang.String, int, int);
  public void fireIndexedPropertyChange(java.lang.String, int, int, int);
  public boolean hasListeners(java.lang.String);
  public void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners();
  public void firePropertyChange(java.beans.PropertyChangeEvent);
public class java.io.BufferedInputStream extends java.io.FilterInputStream {
  public java.io.BufferedInputStream(java.io.InputStream);
  public java.io.BufferedInputStream(java.io.InputStream, int);
  public synchronized void mark(int);
  public boolean markSupported();
public class java.io.BufferedOutputStream extends java.io.FilterOutputStream {
  public java.io.BufferedOutputStream(java.io.OutputStream);
  public java.io.BufferedOutputStream(java.io.OutputStream, int);
public class java.io.BufferedReader extends java.io.Reader {
  public java.io.BufferedReader(java.io.Reader);
  public java.io.BufferedReader(java.io.Reader, int);
  public boolean markSupported();
public class java.io.BufferedWriter extends java.io.Writer {
  public java.io.BufferedWriter(java.io.Writer);
  public java.io.BufferedWriter(java.io.Writer, int);
public class java.io.ByteArrayInputStream extends java.io.InputStream {
  public java.io.ByteArrayInputStream(byte[]);
  public java.io.ByteArrayInputStream(byte[], int, int);
  public synchronized int available();
  public synchronized void mark(int);
  public boolean markSupported();
  public synchronized int read();
  public synchronized int read(byte[], int, int);
  public synchronized void reset();
  public synchronized long skip(long);
public class java.io.ByteArrayOutputStream extends java.io.OutputStream {
  public java.io.ByteArrayOutputStream();
  public java.io.ByteArrayOutputStream(int);
  public synchronized void reset();
  public int size();
  public synchronized byte[] toByteArray();
  public java.lang.String toString();
  public java.lang.String toString(int);
  public synchronized void write(byte[], int, int);
  public synchronized void write(int);
public class java.io.CharArrayReader extends java.io.Reader {
  public java.io.CharArrayReader(char[]);
  public java.io.CharArrayReader(char[], int, int);
  public void close();
  public boolean markSupported();
public class java.io.CharArrayWriter extends java.io.Writer {
  public java.io.CharArrayWriter();
  public java.io.CharArrayWriter(int);
  public void close();
  public void flush();
  public void reset();
  public int size();
  public char[] toCharArray();
  public java.lang.String toString();
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String, int, int);
  public java.io.CharArrayWriter append(char);
  public java.io.CharArrayWriter append(java.lang.CharSequence);
  public java.io.CharArrayWriter append(java.lang.CharSequence, int, int);
public interface java.io.Closeable extends java.lang.AutoCloseable {
  public void close();
  public java.io.Console$ConsoleWriter(java.io.OutputStream);
  public void close();
public final class java.io.Console implements java.io.Flushable {
  public static java.io.Console getConsole();
  public void flush();
  public java.io.Console format(java.lang.String, java.lang.Object...);
  public java.io.Console printf(java.lang.String, java.lang.Object...);
  public java.io.Reader reader();
  public java.lang.String readLine();
  public java.lang.String readLine(java.lang.String, java.lang.Object...);
  public char[] readPassword();
  public char[] readPassword(java.lang.String, java.lang.Object...);
  public java.io.PrintWriter writer();
public interface java.io.DataInput {
public class java.io.DataInputStream extends java.io.FilterInputStream implements java.io.DataInput {
  public java.io.DataInputStream(java.io.InputStream);
public interface java.io.DataOutput {
public class java.io.DataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput {
  public java.io.DataOutputStream(java.io.OutputStream);
  public final int size();
public class java.io.EOFException extends java.io.IOException {
  public java.io.EOFException();
  public java.io.EOFException(java.lang.String);
  public java.io.ObjectStreamField getField();
  public java.lang.Object getFieldValue();
  public java.io.EmulatedFields(java.io.ObjectStreamField[], java.io.ObjectStreamField[]);
  public java.io.EmulatedFields$ObjectSlot[] slots();
  public void put(java.lang.String, byte);
  public void put(java.lang.String, char);
  public void put(java.lang.String, double);
  public void put(java.lang.String, float);
  public void put(java.lang.String, int);
  public void put(java.lang.String, long);
  public void put(java.lang.String, java.lang.Object);
  public void put(java.lang.String, short);
  public void put(java.lang.String, boolean);
  public java.io.ObjectStreamClass getObjectStreamClass();
public interface java.io.Externalizable extends java.io.Serializable {
public class java.io.File implements java.io.Serializable, java.lang.Comparable<java.io.File> {
  public java.io.File(java.io.File, java.lang.String);
  public java.io.File(java.lang.String);
  public java.io.File(java.lang.String, java.lang.String);
  public java.io.File(java.net.URI);
  public static java.io.File[] listRoots();
  public boolean canExecute();
  public boolean canRead();
  public boolean canWrite();
  public int compareTo(java.io.File);
  public boolean delete();
  public void deleteOnExit();
  public boolean equals(java.lang.Object);
  public boolean exists();
  public java.lang.String getAbsolutePath();
  public java.io.File getAbsoluteFile();
  public java.lang.String getName();
  public java.lang.String getParent();
  public java.io.File getParentFile();
  public java.lang.String getPath();
  public int hashCode();
  public boolean isAbsolute();
  public boolean isDirectory();
  public boolean isFile();
  public boolean isHidden();
  public long lastModified();
  public boolean setLastModified(long);
  public boolean setReadOnly();
  public boolean setExecutable(boolean, boolean);
  public boolean setExecutable(boolean);
  public boolean setReadable(boolean, boolean);
  public boolean setReadable(boolean);
  public boolean setWritable(boolean, boolean);
  public boolean setWritable(boolean);
  public long length();
  public java.lang.String[] list();
  public java.lang.String[] list(java.io.FilenameFilter);
  public java.io.File[] listFiles();
  public java.io.File[] listFiles(java.io.FilenameFilter);
  public java.io.File[] listFiles(java.io.FileFilter);
  public boolean mkdir();
  public boolean mkdirs();
  public boolean renameTo(java.io.File);
  public java.lang.String toString();
  public java.net.URI toURI();
  public long getTotalSpace();
  public long getUsableSpace();
  public long getFreeSpace();
  public int compareTo(java.lang.Object);
public final class java.io.FileDescriptor {
  public java.io.FileDescriptor();
  public boolean valid();
  public final int getInt$();
  public final void setInt$(int);
  public java.lang.String toString();
public interface java.io.FileFilter {
  public abstract boolean accept(java.io.File);
public class java.io.FileInputStream extends java.io.InputStream implements java.io.Closeable {
  public java.io.FileInputStream(java.io.FileDescriptor);
  public java.nio.channels.FileChannel getChannel();
public class java.io.FileNotFoundException extends java.io.IOException {
  public java.io.FileNotFoundException();
  public java.io.FileNotFoundException(java.lang.String);
public class java.io.FileOutputStream extends java.io.OutputStream implements java.io.Closeable {
  public java.io.FileOutputStream(java.io.FileDescriptor);
  public java.nio.channels.FileChannel getChannel();
public final class java.io.FilePermission extends java.security.Permission implements java.io.Serializable {
  public java.io.FilePermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public class java.io.FileReader extends java.io.InputStreamReader {
  public java.io.FileReader(java.io.FileDescriptor);
public class java.io.FileWriter extends java.io.OutputStreamWriter {
  public java.io.FileWriter(java.io.FileDescriptor);
public interface java.io.FilenameFilter {
  public abstract boolean accept(java.io.File, java.lang.String);
public class java.io.FilterInputStream extends java.io.InputStream {
  public synchronized void mark(int);
  public boolean markSupported();
public class java.io.FilterOutputStream extends java.io.OutputStream {
  public java.io.FilterOutputStream(java.io.OutputStream);
public abstract class java.io.FilterReader extends java.io.Reader {
  public boolean markSupported();
public abstract class java.io.FilterWriter extends java.io.Writer {
public interface java.io.Flushable {
  public static java.lang.String get(java.nio.charset.Charset);
public class java.io.IOError extends java.lang.Error {
  public java.io.IOError(java.lang.Throwable);
public class java.io.IOException extends java.lang.Exception {
  public java.io.IOException();
  public java.io.IOException(java.lang.String);
  public java.io.IOException(java.lang.String, java.lang.Throwable);
  public java.io.IOException(java.lang.Throwable);
public abstract class java.io.InputStream implements java.io.Closeable {
  public java.io.InputStream();
  public void mark(int);
  public boolean markSupported();
public class java.io.InputStreamReader extends java.io.Reader {
  public java.io.InputStreamReader(java.io.InputStream);
  public java.io.InputStreamReader(java.io.InputStream, java.nio.charset.CharsetDecoder);
  public java.io.InputStreamReader(java.io.InputStream, java.nio.charset.Charset);
  public java.lang.String getEncoding();
public class java.io.InterruptedIOException extends java.io.IOException {
  public java.io.InterruptedIOException();
  public java.io.InterruptedIOException(java.lang.String);
  public java.io.InterruptedIOException(java.lang.String, java.lang.Throwable);
public class java.io.InvalidClassException extends java.io.ObjectStreamException {
  public java.io.InvalidClassException(java.lang.String);
  public java.io.InvalidClassException(java.lang.String, java.lang.String);
  public java.lang.String getMessage();
public class java.io.InvalidObjectException extends java.io.ObjectStreamException {
  public java.io.InvalidObjectException(java.lang.String);
public class java.io.NotActiveException extends java.io.ObjectStreamException {
  public java.io.NotActiveException();
  public java.io.NotActiveException(java.lang.String);
public class java.io.NotSerializableException extends java.io.ObjectStreamException {
  public java.io.NotSerializableException();
  public java.io.NotSerializableException(java.lang.String);
public interface java.io.ObjectInput extends java.io.DataInput,java.lang.AutoCloseable {
public abstract class java.io.ObjectInputStream$GetField {
  public java.io.ObjectInputStream$GetField();
  public abstract java.io.ObjectStreamClass getObjectStreamClass();
public class java.io.ObjectInputStream extends java.io.InputStream implements java.io.ObjectInput,java.io.ObjectStreamConstants {
public interface java.io.ObjectInputValidation {
public interface java.io.ObjectOutput extends java.io.DataOutput,java.lang.AutoCloseable {
public abstract class java.io.ObjectOutputStream$PutField {
  public java.io.ObjectOutputStream$PutField();
  public abstract void put(java.lang.String, boolean);
  public abstract void put(java.lang.String, char);
  public abstract void put(java.lang.String, byte);
  public abstract void put(java.lang.String, short);
  public abstract void put(java.lang.String, int);
  public abstract void put(java.lang.String, long);
  public abstract void put(java.lang.String, float);
  public abstract void put(java.lang.String, double);
  public abstract void put(java.lang.String, java.lang.Object);
public class java.io.ObjectOutputStream extends java.io.OutputStream implements java.io.ObjectOutput,java.io.ObjectStreamConstants {
  public int compare(java.lang.Class<?>, java.lang.Class<?>);
  public int compare(java.lang.Object, java.lang.Object);
  public int compare(java.lang.reflect.Field, java.lang.reflect.Field);
  public int compare(java.lang.Object, java.lang.Object);
  public int compare(java.lang.reflect.Constructor<?>, java.lang.reflect.Constructor<?>);
  public int compare(java.lang.Object, java.lang.Object);
  public int compare(java.lang.reflect.Method, java.lang.reflect.Method);
  public int compare(java.lang.Object, java.lang.Object);
  public java.util.WeakHashMap<java.lang.Class<?>, java.io.ObjectStreamClass> initialValue();
  public java.lang.Object initialValue();
public class java.io.ObjectStreamClass implements java.io.Serializable {
  public java.lang.Class<?> forClass();
  public java.io.ObjectStreamField getField(java.lang.String);
  public java.io.ObjectStreamField[] getFields();
  public java.lang.String getName();
  public long getSerialVersionUID();
  public static java.io.ObjectStreamClass lookup(java.lang.Class<?>);
  public static java.io.ObjectStreamClass lookupAny(java.lang.Class<?>);
  public java.lang.String toString();
public interface java.io.ObjectStreamConstants {
public abstract class java.io.ObjectStreamException extends java.io.IOException {
public class java.io.ObjectStreamField implements java.lang.Comparable<java.lang.Object> {
  public java.io.ObjectStreamField(java.lang.String, java.lang.Class<?>);
  public java.io.ObjectStreamField(java.lang.String, java.lang.Class<?>, boolean);
  public int compareTo(java.lang.Object);
  public java.lang.String getName();
  public int getOffset();
  public java.lang.Class<?> getType();
  public char getTypeCode();
  public java.lang.String getTypeString();
  public boolean isPrimitive();
  public java.lang.String toString();
  public boolean isUnshared();
public class java.io.OptionalDataException extends java.io.ObjectStreamException {
public abstract class java.io.OutputStream implements java.io.Closeable,java.io.Flushable {
  public java.io.OutputStream();
public class java.io.OutputStreamWriter extends java.io.Writer {
  public java.io.OutputStreamWriter(java.io.OutputStream);
  public java.io.OutputStreamWriter(java.io.OutputStream, java.nio.charset.Charset);
  public java.io.OutputStreamWriter(java.io.OutputStream, java.nio.charset.CharsetEncoder);
  public java.lang.String getEncoding();
public class java.io.PipedInputStream extends java.io.InputStream {
  public java.io.PipedInputStream();
  public java.io.PipedInputStream(int);
public class java.io.PipedOutputStream extends java.io.OutputStream {
  public java.io.PipedOutputStream();
public class java.io.PrintStream extends java.io.FilterOutputStream implements java.lang.Appendable,java.io.Closeable {
  public java.io.PrintStream(java.io.OutputStream);
  public java.io.PrintStream(java.io.OutputStream, boolean);
  public boolean checkError();
  public synchronized void close();
  public synchronized void flush();
  public java.io.PrintStream format(java.lang.String, java.lang.Object...);
  public java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public void print(char[]);
  public void print(char);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(long);
  public void print(java.lang.Object);
  public synchronized void print(java.lang.String);
  public void print(boolean);
  public void println();
  public void println(char[]);
  public void println(char);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(long);
  public void println(java.lang.Object);
  public synchronized void println(java.lang.String);
  public void println(boolean);
  public void write(byte[], int, int);
  public synchronized void write(int);
  public java.io.PrintStream append(char);
  public java.io.PrintStream append(java.lang.CharSequence);
  public java.io.PrintStream append(java.lang.CharSequence, int, int);
public class java.io.PrintWriter extends java.io.Writer {
  public java.io.PrintWriter(java.io.OutputStream);
  public java.io.PrintWriter(java.io.OutputStream, boolean);
  public java.io.PrintWriter(java.io.Writer);
  public java.io.PrintWriter(java.io.Writer, boolean);
  public boolean checkError();
  public void close();
  public void flush();
  public java.io.PrintWriter format(java.lang.String, java.lang.Object...);
  public java.io.PrintWriter format(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintWriter printf(java.lang.String, java.lang.Object...);
  public java.io.PrintWriter printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public void print(char[]);
  public void print(char);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(long);
  public void print(java.lang.Object);
  public void print(java.lang.String);
  public void print(boolean);
  public void println();
  public void println(char[]);
  public void println(char);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(long);
  public void println(java.lang.Object);
  public void println(java.lang.String);
  public void println(boolean);
  public void write(char[]);
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String);
  public void write(java.lang.String, int, int);
  public java.io.PrintWriter append(char);
  public java.io.PrintWriter append(java.lang.CharSequence);
  public java.io.PrintWriter append(java.lang.CharSequence, int, int);
public class java.io.PushbackInputStream extends java.io.FilterInputStream {
  public java.io.PushbackInputStream(java.io.InputStream);
  public java.io.PushbackInputStream(java.io.InputStream, int);
  public boolean markSupported();
  public void mark(int);
public class java.io.PushbackReader extends java.io.FilterReader {
  public java.io.PushbackReader(java.io.Reader);
  public java.io.PushbackReader(java.io.Reader, int);
  public boolean markSupported();
public class java.io.RandomAccessFile implements java.io.DataInput,java.io.DataOutput,java.io.Closeable {
  public final synchronized java.nio.channels.FileChannel getChannel();
public abstract class java.io.Reader implements java.lang.Readable,java.io.Closeable {
  public boolean markSupported();
public class java.io.SequenceInputStream extends java.io.InputStream {
  public java.io.SequenceInputStream(java.io.InputStream, java.io.InputStream);
  public java.io.SequenceInputStream(java.util.Enumeration<? extends java.io.InputStream>);
public interface java.io.Serializable {
public final class java.io.SerializablePermission extends java.security.BasicPermission {
  public java.io.SerializablePermission(java.lang.String);
  public java.io.SerializablePermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
  public java.io.SerializationHandleMap();
  public int get(java.lang.Object);
  public int put(java.lang.Object, int);
  public int remove(java.lang.Object);
  public boolean isEmpty();
public class java.io.StreamCorruptedException extends java.io.ObjectStreamException {
  public java.io.StreamCorruptedException();
  public java.io.StreamCorruptedException(java.lang.String);
public class java.io.StreamTokenizer {
  public java.io.StreamTokenizer(java.io.InputStream);
  public java.io.StreamTokenizer(java.io.Reader);
  public void commentChar(int);
  public void eolIsSignificant(boolean);
  public int lineno();
  public void lowerCaseMode(boolean);
  public void ordinaryChar(int);
  public void ordinaryChars(int, int);
  public void parseNumbers();
  public void pushBack();
  public void quoteChar(int);
  public void resetSyntax();
  public void slashSlashComments(boolean);
  public void slashStarComments(boolean);
  public java.lang.String toString();
  public void whitespaceChars(int, int);
  public void wordChars(int, int);
public class java.io.StringBufferInputStream extends java.io.InputStream {
  public java.io.StringBufferInputStream(java.lang.String);
  public synchronized int available();
  public synchronized int read();
  public synchronized int read(byte[], int, int);
  public synchronized void reset();
  public synchronized long skip(long);
public class java.io.StringReader extends java.io.Reader {
  public java.io.StringReader(java.lang.String);
  public void close();
  public boolean markSupported();
public class java.io.StringWriter extends java.io.Writer {
  public java.io.StringWriter();
  public java.io.StringWriter(int);
  public void flush();
  public java.lang.StringBuffer getBuffer();
  public java.lang.String toString();
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String);
  public void write(java.lang.String, int, int);
  public java.io.StringWriter append(char);
  public java.io.StringWriter append(java.lang.CharSequence);
  public java.io.StringWriter append(java.lang.CharSequence, int, int);
public class java.io.SyncFailedException extends java.io.IOException {
  public java.io.SyncFailedException(java.lang.String);
public class java.io.UTFDataFormatException extends java.io.IOException {
  public java.io.UTFDataFormatException();
  public java.io.UTFDataFormatException(java.lang.String);
public class java.io.UnsupportedEncodingException extends java.io.IOException {
  public java.io.UnsupportedEncodingException();
  public java.io.UnsupportedEncodingException(java.lang.String);
public class java.io.WriteAbortedException extends java.io.ObjectStreamException {
  public java.io.WriteAbortedException(java.lang.String, java.lang.Exception);
  public java.lang.String getMessage();
  public java.lang.Throwable getCause();
public abstract class java.io.Writer implements java.lang.Appendable,java.io.Closeable,java.io.Flushable {
public class java.lang.AbstractMethodError extends java.lang.IncompatibleClassChangeError {
  public java.lang.AbstractMethodError();
  public java.lang.AbstractMethodError(java.lang.String);
  public int capacity();
  public char charAt(int);
  public void ensureCapacity(int);
  public void getChars(int, int, char[], int);
  public int length();
  public void setCharAt(int, char);
  public void setLength(int);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public java.lang.String toString();
  public java.lang.CharSequence subSequence(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public void trimToSize();
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int offsetByCodePoints(int, int);
public interface java.lang.Appendable {
public class java.lang.ArithmeticException extends java.lang.RuntimeException {
  public java.lang.ArithmeticException();
  public java.lang.ArithmeticException(java.lang.String);
public class java.lang.ArrayIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
  public java.lang.ArrayIndexOutOfBoundsException();
  public java.lang.ArrayIndexOutOfBoundsException(int);
  public java.lang.ArrayIndexOutOfBoundsException(java.lang.String);
  public java.lang.ArrayIndexOutOfBoundsException(int, int);
  public java.lang.ArrayIndexOutOfBoundsException(int, int, int);
public class java.lang.ArrayStoreException extends java.lang.RuntimeException {
  public java.lang.ArrayStoreException();
  public java.lang.ArrayStoreException(java.lang.String);
public class java.lang.AssertionError extends java.lang.Error {
  public java.lang.AssertionError();
  public java.lang.AssertionError(java.lang.String, java.lang.Throwable);
  public java.lang.AssertionError(java.lang.Object);
  public java.lang.AssertionError(boolean);
  public java.lang.AssertionError(char);
  public java.lang.AssertionError(int);
  public java.lang.AssertionError(long);
  public java.lang.AssertionError(float);
  public java.lang.AssertionError(double);
public interface java.lang.AutoCloseable {
public final class java.lang.Boolean implements java.io.Serializable, java.lang.Comparable<java.lang.Boolean> {
  public java.lang.Boolean(java.lang.String);
  public java.lang.Boolean(boolean);
  public boolean booleanValue();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Boolean);
  public static int compare(boolean, boolean);
  public int hashCode();
  public java.lang.String toString();
  public static boolean getBoolean(java.lang.String);
  public static boolean parseBoolean(java.lang.String);
  public static java.lang.String toString(boolean);
  public static java.lang.Boolean valueOf(java.lang.String);
  public static java.lang.Boolean valueOf(boolean);
  public int compareTo(java.lang.Object);
  public static synchronized java.lang.BootClassLoader getInstance();
  public java.lang.BootClassLoader();
  public java.net.URL getResource(java.lang.String);
public final class java.lang.Byte extends java.lang.Number implements java.lang.Comparable<java.lang.Byte> {
  public java.lang.Byte(byte);
  public byte byteValue();
  public int compareTo(java.lang.Byte);
  public static int compare(byte, byte);
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public float floatValue();
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static java.lang.String toHexString(byte, boolean);
  public static java.lang.String toString(byte);
  public static java.lang.Byte valueOf(byte);
  public int compareTo(java.lang.Object);
  public static java.lang.String toLowerCase(java.util.Locale, java.lang.String, char[], int, int);
  public static java.lang.String toUpperCase(java.util.Locale, java.lang.String, char[], int, int);
public interface java.lang.CharSequence {
  public abstract int length();
  public abstract char charAt(int);
  public abstract java.lang.CharSequence subSequence(int, int);
  public abstract java.lang.String toString();
public class java.lang.Character$Subset {
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
public final class java.lang.Character$UnicodeBlock extends java.lang.Character$Subset {
  public static java.lang.Character$UnicodeBlock forName(java.lang.String);
  public static java.lang.Character$UnicodeBlock of(char);
  public static java.lang.Character$UnicodeBlock of(int);
public final class java.lang.Character implements java.io.Serializable, java.lang.Comparable<java.lang.Character> {
  public java.lang.Character(char);
  public char charValue();
  public int compareTo(java.lang.Character);
  public static int compare(char, char);
  public static java.lang.Character valueOf(char);
  public static boolean isValidCodePoint(int);
  public static boolean isSupplementaryCodePoint(int);
  public static boolean isHighSurrogate(char);
  public static boolean isLowSurrogate(char);
  public static boolean isSurrogate(char);
  public static boolean isSurrogatePair(char, char);
  public static int charCount(int);
  public static int toCodePoint(char, char);
  public static int codePointAt(java.lang.CharSequence, int);
  public static int codePointAt(char[], int);
  public static int codePointAt(char[], int, int);
  public static int codePointBefore(java.lang.CharSequence, int);
  public static int codePointBefore(char[], int);
  public static int codePointBefore(char[], int, int);
  public static int toChars(int, char[], int);
  public static char[] toChars(int);
  public static int codePointCount(java.lang.CharSequence, int, int);
  public static int codePointCount(char[], int, int);
  public static int offsetByCodePoints(java.lang.CharSequence, int, int);
  public static int offsetByCodePoints(char[], int, int, int, int);
  public static int digit(char, int);
  public static int digit(int, int);
  public boolean equals(java.lang.Object);
  public static char forDigit(int, int);
  public static java.lang.String getName(int);
  public static int getNumericValue(char);
  public static int getNumericValue(int);
  public static int getType(char);
  public static int getType(int);
  public static byte getDirectionality(char);
  public static byte getDirectionality(int);
  public static boolean isMirrored(char);
  public static boolean isMirrored(int);
  public int hashCode();
  public static char highSurrogate(int);
  public static char lowSurrogate(int);
  public static boolean isBmpCodePoint(int);
  public static boolean isDefined(char);
  public static boolean isDefined(int);
  public static boolean isDigit(char);
  public static boolean isDigit(int);
  public static boolean isIdentifierIgnorable(char);
  public static boolean isIdentifierIgnorable(int);
  public static boolean isISOControl(char);
  public static boolean isISOControl(int);
  public static boolean isJavaIdentifierPart(char);
  public static boolean isJavaIdentifierPart(int);
  public static boolean isJavaIdentifierStart(char);
  public static boolean isJavaIdentifierStart(int);
  public static boolean isJavaLetter(char);
  public static boolean isJavaLetterOrDigit(char);
  public static boolean isLetter(char);
  public static boolean isLetter(int);
  public static boolean isLetterOrDigit(char);
  public static boolean isLetterOrDigit(int);
  public static boolean isLowerCase(char);
  public static boolean isLowerCase(int);
  public static boolean isSpace(char);
  public static boolean isSpaceChar(char);
  public static boolean isSpaceChar(int);
  public static boolean isTitleCase(char);
  public static boolean isTitleCase(int);
  public static boolean isUnicodeIdentifierPart(char);
  public static boolean isUnicodeIdentifierPart(int);
  public static boolean isUnicodeIdentifierStart(char);
  public static boolean isUnicodeIdentifierStart(int);
  public static boolean isUpperCase(char);
  public static boolean isUpperCase(int);
  public static boolean isWhitespace(char);
  public static boolean isWhitespace(int);
  public static char reverseBytes(char);
  public static char toLowerCase(char);
  public static int toLowerCase(int);
  public java.lang.String toString();
  public static java.lang.String toString(char);
  public static char toTitleCase(char);
  public static int toTitleCase(int);
  public static char toUpperCase(char);
  public static int toUpperCase(int);
  public int compareTo(java.lang.Object);
public final class java.lang.Class<T> implements java.io.Serializable, java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type {
  public java.lang.Class<?>[] getClasses();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.String getCanonicalName();
  public java.lang.ClassLoader getClassLoader();
  public native java.lang.Class<?> getComponentType();
  public java.lang.reflect.Constructor<?>[] getConstructors();
  public native java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public java.lang.Class<?>[] getDeclaredClasses();
  public java.lang.reflect.Constructor<?>[] getDeclaredConstructors();
  public java.lang.reflect.Field[] getDeclaredFields();
  public java.lang.reflect.Method[] getDeclaredMethods();
  public native java.lang.Class<?> getDeclaringClass();
  public native java.lang.Class<?> getEnclosingClass();
  public native java.lang.reflect.Constructor<?> getEnclosingConstructor();
  public native java.lang.reflect.Method getEnclosingMethod();
  public T[] getEnumConstants();
  public java.lang.reflect.Field[] getFields();
  public java.lang.reflect.Type[] getGenericInterfaces();
  public java.lang.reflect.Type getGenericSuperclass();
  public native java.lang.Class<?>[] getInterfaces();
  public java.lang.reflect.Method[] getMethods();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.String getSimpleName();
  public java.security.ProtectionDomain getProtectionDomain();
  public java.net.URL getResource(java.lang.String);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public java.lang.Object[] getSigners();
  public native java.lang.Class<? super T> getSuperclass();
  public synchronized java.lang.reflect.TypeVariable<java.lang.Class<T>>[] getTypeParameters();
  public boolean isAnnotation();
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public native boolean isAnonymousClass();
  public boolean isArray();
  public native boolean isAssignableFrom(java.lang.Class<?>);
  public boolean isEnum();
  public native boolean isInstance(java.lang.Object);
  public native boolean isInterface();
  public boolean isLocalClass();
  public boolean isMemberClass();
  public native boolean isPrimitive();
  public boolean isSynthetic();
  public java.lang.String toString();
  public java.lang.Package getPackage();
  public native boolean desiredAssertionStatus();
  public <U extends java/lang/Object> java.lang.Class<? extends U> asSubclass(java.lang.Class<U>);
  public T cast(java.lang.Object);
public class java.lang.ClassCastException extends java.lang.RuntimeException {
  public java.lang.ClassCastException();
  public java.lang.ClassCastException(java.lang.String);
public class java.lang.ClassFormatError extends java.lang.LinkageError {
  public java.lang.ClassFormatError();
  public java.lang.ClassFormatError(java.lang.String);
public abstract class java.lang.ClassLoader {
  public static java.lang.ClassLoader getSystemClassLoader();
  public static java.net.URL getSystemResource(java.lang.String);
  public static java.io.InputStream getSystemResourceAsStream(java.lang.String);
  public final java.lang.ClassLoader getParent();
  public java.net.URL getResource(java.lang.String);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public void setClassAssertionStatus(java.lang.String, boolean);
  public void setPackageAssertionStatus(java.lang.String, boolean);
  public void setDefaultAssertionStatus(boolean);
  public void clearAssertionStatus();
public class java.lang.ClassNotFoundException extends java.lang.Exception {
  public java.lang.ClassNotFoundException();
  public java.lang.ClassNotFoundException(java.lang.String);
  public java.lang.ClassNotFoundException(java.lang.String, java.lang.Throwable);
  public java.lang.Throwable getException();
  public java.lang.Throwable getCause();
public class java.lang.CloneNotSupportedException extends java.lang.Exception {
  public java.lang.CloneNotSupportedException();
  public java.lang.CloneNotSupportedException(java.lang.String);
public interface java.lang.Cloneable {
public interface java.lang.Comparable<T> {
  public abstract int compareTo(T);
  public synchronized void start();
  public abstract void run();
  public synchronized void interrupt();
  public void stop();
  public synchronized java.lang.StackTraceElement[] getStackTrace();
  public void run();
  public void run();
  public void run();
public final class java.lang.Daemons {
  public java.lang.Daemons();
  public static void start();
  public static void stop();
public final class java.lang.Double extends java.lang.Number implements java.lang.Comparable<java.lang.Double> {
  public java.lang.Double(double);
  public int compareTo(java.lang.Double);
  public byte byteValue();
  public static native long doubleToLongBits(double);
  public static native long doubleToRawLongBits(double);
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public float floatValue();
  public int hashCode();
  public int intValue();
  public boolean isInfinite();
  public static boolean isInfinite(double);
  public boolean isNaN();
  public static boolean isNaN(double);
  public static native double longBitsToDouble(long);
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static java.lang.String toString(double);
  public static int compare(double, double);
  public static java.lang.Double valueOf(double);
  public static java.lang.String toHexString(double);
  public int compareTo(java.lang.Object);
public abstract class java.lang.Enum<E extends java.lang.Enum<E>> implements java.io.Serializable, java.lang.Comparable<E> {
  public final java.lang.String name();
  public final int ordinal();
  public java.lang.String toString();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final int compareTo(E);
  public final java.lang.Class<E> getDeclaringClass();
  public static <T extends java/lang/Enum<T>> T valueOf(java.lang.Class<T>, java.lang.String);
  public static <T extends java/lang/Enum<T>> T[] getSharedConstants(java.lang.Class<T>);
  public int compareTo(java.lang.Object);
public class java.lang.Error extends java.lang.Throwable {
  public java.lang.Error();
  public java.lang.Error(java.lang.String);
  public java.lang.Error(java.lang.String, java.lang.Throwable);
  public java.lang.Error(java.lang.Throwable);
public class java.lang.Exception extends java.lang.Throwable {
  public java.lang.Exception();
  public java.lang.Exception(java.lang.String);
  public java.lang.Exception(java.lang.String, java.lang.Throwable);
  public java.lang.Exception(java.lang.Throwable);
public class java.lang.ExceptionInInitializerError extends java.lang.LinkageError {
  public java.lang.ExceptionInInitializerError();
  public java.lang.ExceptionInInitializerError(java.lang.String);
  public java.lang.ExceptionInInitializerError(java.lang.Throwable);
  public java.lang.Throwable getException();
  public java.lang.Throwable getCause();
public final class java.lang.Float extends java.lang.Number implements java.lang.Comparable<java.lang.Float> {
  public java.lang.Float(float);
  public java.lang.Float(double);
  public int compareTo(java.lang.Float);
  public byte byteValue();
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public static native int floatToIntBits(float);
  public static native int floatToRawIntBits(float);
  public float floatValue();
  public int hashCode();
  public static native float intBitsToFloat(int);
  public int intValue();
  public boolean isInfinite();
  public static boolean isInfinite(float);
  public boolean isNaN();
  public static boolean isNaN(float);
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static java.lang.String toString(float);
  public static int compare(float, float);
  public static java.lang.Float valueOf(float);
  public static java.lang.String toHexString(float);
  public int compareTo(java.lang.Object);
  public java.lang.HexStringParser(int, int);
  public static double parseDouble(java.lang.String);
  public static float parseFloat(java.lang.String);
public class java.lang.IllegalAccessError extends java.lang.IncompatibleClassChangeError {
  public java.lang.IllegalAccessError();
  public java.lang.IllegalAccessError(java.lang.String);
public class java.lang.IllegalAccessException extends java.lang.Exception {
  public java.lang.IllegalAccessException();
  public java.lang.IllegalAccessException(java.lang.String);
public class java.lang.IllegalArgumentException extends java.lang.RuntimeException {
  public java.lang.IllegalArgumentException();
  public java.lang.IllegalArgumentException(java.lang.String);
  public java.lang.IllegalArgumentException(java.lang.String, java.lang.Throwable);
  public java.lang.IllegalArgumentException(java.lang.Throwable);
public class java.lang.IllegalMonitorStateException extends java.lang.RuntimeException {
  public java.lang.IllegalMonitorStateException();
  public java.lang.IllegalMonitorStateException(java.lang.String);
public class java.lang.IllegalStateException extends java.lang.RuntimeException {
  public java.lang.IllegalStateException();
  public java.lang.IllegalStateException(java.lang.String);
  public java.lang.IllegalStateException(java.lang.String, java.lang.Throwable);
  public java.lang.IllegalStateException(java.lang.Throwable);
public class java.lang.IllegalThreadStateException extends java.lang.IllegalArgumentException {
  public java.lang.IllegalThreadStateException();
  public java.lang.IllegalThreadStateException(java.lang.String);
public class java.lang.IncompatibleClassChangeError extends java.lang.LinkageError {
  public java.lang.IncompatibleClassChangeError();
  public java.lang.IncompatibleClassChangeError(java.lang.String);
public class java.lang.IndexOutOfBoundsException extends java.lang.RuntimeException {
  public java.lang.IndexOutOfBoundsException();
  public java.lang.IndexOutOfBoundsException(java.lang.String);
public class java.lang.InheritableThreadLocal<T> extends java.lang.ThreadLocal<T> {
  public java.lang.InheritableThreadLocal();
public class java.lang.InstantiationError extends java.lang.IncompatibleClassChangeError {
  public java.lang.InstantiationError();
  public java.lang.InstantiationError(java.lang.String);
public class java.lang.InstantiationException extends java.lang.Exception {
  public java.lang.InstantiationException();
  public java.lang.InstantiationException(java.lang.String);
public final class java.lang.Integer extends java.lang.Number implements java.lang.Comparable<java.lang.Integer> {
  public java.lang.Integer(int);
  public byte byteValue();
  public int compareTo(java.lang.Integer);
  public static int compare(int, int);
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public float floatValue();
  public static java.lang.Integer getInteger(java.lang.String);
  public static java.lang.Integer getInteger(java.lang.String, int);
  public static java.lang.Integer getInteger(java.lang.String, java.lang.Integer);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public static java.lang.String toBinaryString(int);
  public static java.lang.String toHexString(int);
  public static java.lang.String toOctalString(int);
  public java.lang.String toString();
  public static java.lang.String toString(int);
  public static java.lang.String toString(int, int);
  public static int highestOneBit(int);
  public static int lowestOneBit(int);
  public static int numberOfLeadingZeros(int);
  public static int numberOfTrailingZeros(int);
  public static int bitCount(int);
  public static int rotateLeft(int, int);
  public static int rotateRight(int, int);
  public static int reverseBytes(int);
  public static int reverse(int);
  public static int signum(int);
  public static java.lang.Integer valueOf(int);
  public int compareTo(java.lang.Object);
public final class java.lang.IntegralToString {
  public static java.lang.String intToString(int, int);
  public static java.lang.String intToString(int);
  public static void appendInt(java.lang.AbstractStringBuilder, int);
  public static java.lang.String longToString(long, int);
  public static java.lang.String longToString(long);
  public static void appendLong(java.lang.AbstractStringBuilder, long);
  public static java.lang.String intToBinaryString(int);
  public static java.lang.String longToBinaryString(long);
  public static java.lang.StringBuilder appendByteAsHex(java.lang.StringBuilder, byte, boolean);
  public static java.lang.String byteToHexString(byte, boolean);
  public static java.lang.String bytesToHexString(byte[], boolean);
  public static java.lang.String intToHexString(int, boolean, int);
  public static java.lang.String longToHexString(long);
  public static java.lang.String intToOctalString(int);
  public static java.lang.String longToOctalString(long);
public class java.lang.InternalError extends java.lang.VirtualMachineError {
  public java.lang.InternalError();
  public java.lang.InternalError(java.lang.String);
public class java.lang.InterruptedException extends java.lang.Exception {
  public java.lang.InterruptedException();
  public java.lang.InterruptedException(java.lang.String);
public interface java.lang.Iterable<T> {
  public abstract java.util.Iterator<T> iterator();
public class java.lang.LinkageError extends java.lang.Error {
  public java.lang.LinkageError();
  public java.lang.LinkageError(java.lang.String);
  public java.lang.LinkageError(java.lang.String, java.lang.Throwable);
public final class java.lang.Long extends java.lang.Number implements java.lang.Comparable<java.lang.Long> {
  public java.lang.Long(long);
  public byte byteValue();
  public int compareTo(java.lang.Long);
  public static int compare(long, long);
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public float floatValue();
  public static java.lang.Long getLong(java.lang.String);
  public static java.lang.Long getLong(java.lang.String, long);
  public static java.lang.Long getLong(java.lang.String, java.lang.Long);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public static java.lang.String toBinaryString(long);
  public static java.lang.String toHexString(long);
  public static java.lang.String toOctalString(long);
  public java.lang.String toString();
  public static java.lang.String toString(long);
  public static java.lang.String toString(long, int);
  public static long highestOneBit(long);
  public static long lowestOneBit(long);
  public static int numberOfLeadingZeros(long);
  public static int numberOfTrailingZeros(long);
  public static int bitCount(long);
  public static long rotateLeft(long, int);
  public static long rotateRight(long, int);
  public static long reverseBytes(long);
  public static long reverse(long);
  public static int signum(long);
  public static java.lang.Long valueOf(long);
  public int compareTo(java.lang.Object);
public final class java.lang.Math {
  public static native double abs(double);
  public static native float abs(float);
  public static native int abs(int);
  public static native long abs(long);
  public static native double acos(double);
  public static native double asin(double);
  public static native double atan(double);
  public static native double atan2(double, double);
  public static native double cbrt(double);
  public static native double ceil(double);
  public static native double cos(double);
  public static native double cosh(double);
  public static native double exp(double);
  public static native double expm1(double);
  public static native double floor(double);
  public static native double hypot(double, double);
  public static native double IEEEremainder(double, double);
  public static native double log(double);
  public static native double log10(double);
  public static native double log1p(double);
  public static double max(double, double);
  public static float max(float, float);
  public static native int max(int, int);
  public static long max(long, long);
  public static double min(double, double);
  public static float min(float, float);
  public static native int min(int, int);
  public static long min(long, long);
  public static native double pow(double, double);
  public static native double rint(double);
  public static long round(double);
  public static int round(float);
  public static double signum(double);
  public static float signum(float);
  public static native double sin(double);
  public static native double sinh(double);
  public static native double sqrt(double);
  public static native double tan(double);
  public static native double tanh(double);
  public static synchronized double random();
  public static double toRadians(double);
  public static double toDegrees(double);
  public static double ulp(double);
  public static float ulp(float);
  public static double copySign(double, double);
  public static float copySign(float, float);
  public static int getExponent(float);
  public static int getExponent(double);
  public static double nextAfter(double, double);
  public static float nextAfter(float, double);
  public static double nextUp(double);
  public static float nextUp(float);
  public static double scalb(double, int);
  public static float scalb(float, int);
public class java.lang.NegativeArraySizeException extends java.lang.RuntimeException {
  public java.lang.NegativeArraySizeException();
  public java.lang.NegativeArraySizeException(java.lang.String);
public class java.lang.NoClassDefFoundError extends java.lang.LinkageError {
  public java.lang.NoClassDefFoundError();
  public java.lang.NoClassDefFoundError(java.lang.String);
public class java.lang.NoSuchFieldError extends java.lang.IncompatibleClassChangeError {
  public java.lang.NoSuchFieldError();
  public java.lang.NoSuchFieldError(java.lang.String);
public class java.lang.NoSuchFieldException extends java.lang.Exception {
  public java.lang.NoSuchFieldException();
  public java.lang.NoSuchFieldException(java.lang.String);
public class java.lang.NoSuchMethodError extends java.lang.IncompatibleClassChangeError {
  public java.lang.NoSuchMethodError();
  public java.lang.NoSuchMethodError(java.lang.String);
public class java.lang.NoSuchMethodException extends java.lang.Exception {
  public java.lang.NoSuchMethodException();
  public java.lang.NoSuchMethodException(java.lang.String);
public class java.lang.NullPointerException extends java.lang.RuntimeException {
  public java.lang.NullPointerException();
  public java.lang.NullPointerException(java.lang.String);
public abstract class java.lang.Number implements java.io.Serializable {
  public java.lang.Number();
  public byte byteValue();
  public abstract double doubleValue();
  public abstract float floatValue();
  public abstract int intValue();
  public abstract long longValue();
  public short shortValue();
public class java.lang.NumberFormatException extends java.lang.IllegalArgumentException {
  public java.lang.NumberFormatException();
  public java.lang.NumberFormatException(java.lang.String);
public class java.lang.Object {
  public java.lang.Object();
  public boolean equals(java.lang.Object);
  public final native java.lang.Class<?> getClass();
  public native int hashCode();
  public final native void notify();
  public final native void notifyAll();
  public java.lang.String toString();
public class java.lang.OutOfMemoryError extends java.lang.VirtualMachineError {
  public java.lang.OutOfMemoryError();
  public java.lang.OutOfMemoryError(java.lang.String);
public class java.lang.Package implements java.lang.reflect.AnnotatedElement {
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public java.lang.String getImplementationTitle();
  public java.lang.String getImplementationVendor();
  public java.lang.String getImplementationVersion();
  public java.lang.String getName();
  public static java.lang.Package getPackage(java.lang.String);
  public static java.lang.Package[] getPackages();
  public java.lang.String getSpecificationTitle();
  public java.lang.String getSpecificationVendor();
  public java.lang.String getSpecificationVersion();
  public int hashCode();
  public boolean isSealed();
  public boolean isSealed(java.net.URL);
  public java.lang.String toString();
public abstract class java.lang.Process {
  public java.lang.Process();
  public abstract void destroy();
  public abstract int exitValue();
  public abstract java.io.InputStream getErrorStream();
  public abstract java.io.InputStream getInputStream();
  public abstract java.io.OutputStream getOutputStream();
public final class java.lang.ProcessBuilder {
  public java.lang.ProcessBuilder(java.lang.String...);
  public java.lang.ProcessBuilder(java.util.List<java.lang.String>);
  public java.util.List<java.lang.String> command();
  public java.lang.ProcessBuilder command(java.lang.String...);
  public java.lang.ProcessBuilder command(java.util.List<java.lang.String>);
  public java.io.File directory();
  public java.lang.ProcessBuilder directory(java.io.File);
  public java.util.Map<java.lang.String, java.lang.String> environment();
  public boolean redirectErrorStream();
  public java.lang.ProcessBuilder redirectErrorStream(boolean);
  public void run();
  public void destroy();
  public int exitValue();
  public java.io.InputStream getErrorStream();
  public java.io.InputStream getInputStream();
  public java.io.OutputStream getOutputStream();
  public java.lang.String toString();
  public java.lang.ProcessManager$ProcessReference(java.lang.ProcessManager$ProcessImpl, java.lang.ProcessManager$ProcessReferenceQueue);
  public java.lang.ProcessManager$ProcessReference poll();
  public java.lang.ref.Reference poll();
  public static java.lang.ProcessManager getInstance();
public interface java.lang.Readable {
  public static java.lang.RealToString getInstance();
  public java.lang.String doubleToString(double);
  public void appendDouble(java.lang.AbstractStringBuilder, double);
  public java.lang.String floatToString(float);
  public void appendFloat(java.lang.AbstractStringBuilder, float);
  public java.lang.String convertFloat(java.lang.AbstractStringBuilder, float);
public interface java.lang.Runnable {
  public abstract void run();
public class java.lang.Runtime {
  public void exit(int);
  public native long freeMemory();
  public native void gc();
  public static java.lang.Runtime getRuntime();
  public void load(java.lang.String);
  public void loadLibrary(java.lang.String);
  public void runFinalization();
  public static void runFinalizersOnExit(boolean);
  public native long totalMemory();
  public void traceInstructions(boolean);
  public void traceMethodCalls(boolean);
  public java.io.InputStream getLocalizedInputStream(java.io.InputStream);
  public java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream);
  public void addShutdownHook(java.lang.Thread);
  public boolean removeShutdownHook(java.lang.Thread);
  public void halt(int);
  public int availableProcessors();
  public native long maxMemory();
public class java.lang.RuntimeException extends java.lang.Exception {
  public java.lang.RuntimeException();
  public java.lang.RuntimeException(java.lang.String);
  public java.lang.RuntimeException(java.lang.String, java.lang.Throwable);
  public java.lang.RuntimeException(java.lang.Throwable);
public final class java.lang.RuntimePermission extends java.security.BasicPermission {
  public java.lang.RuntimePermission(java.lang.String);
  public java.lang.RuntimePermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public class java.lang.SecurityException extends java.lang.RuntimeException {
  public java.lang.SecurityException();
  public java.lang.SecurityException(java.lang.String);
  public java.lang.SecurityException(java.lang.String, java.lang.Throwable);
  public java.lang.SecurityException(java.lang.Throwable);
public class java.lang.SecurityManager {
  public java.lang.SecurityManager();
  public void checkAccept(java.lang.String, int);
  public void checkAccess(java.lang.Thread);
  public void checkAccess(java.lang.ThreadGroup);
  public void checkConnect(java.lang.String, int);
  public void checkConnect(java.lang.String, int, java.lang.Object);
  public void checkCreateClassLoader();
  public void checkDelete(java.lang.String);
  public void checkExec(java.lang.String);
  public void checkExit(int);
  public void checkLink(java.lang.String);
  public void checkListen(int);
  public void checkMemberAccess(java.lang.Class<?>, int);
  public void checkMulticast(java.net.InetAddress);
  public void checkMulticast(java.net.InetAddress, byte);
  public void checkPackageAccess(java.lang.String);
  public void checkPackageDefinition(java.lang.String);
  public void checkPropertiesAccess();
  public void checkPropertyAccess(java.lang.String);
  public void checkRead(java.io.FileDescriptor);
  public void checkRead(java.lang.String);
  public void checkRead(java.lang.String, java.lang.Object);
  public void checkSecurityAccess(java.lang.String);
  public void checkSetFactory();
  public boolean checkTopLevelWindow(java.lang.Object);
  public void checkSystemClipboardAccess();
  public void checkAwtEventQueueAccess();
  public void checkPrintJobAccess();
  public void checkWrite(java.io.FileDescriptor);
  public void checkWrite(java.lang.String);
  public boolean getInCheck();
  public java.lang.ThreadGroup getThreadGroup();
  public java.lang.Object getSecurityContext();
  public void checkPermission(java.security.Permission);
  public void checkPermission(java.security.Permission, java.lang.Object);
public final class java.lang.Short extends java.lang.Number implements java.lang.Comparable<java.lang.Short> {
  public java.lang.Short(short);
  public byte byteValue();
  public int compareTo(java.lang.Short);
  public static int compare(long, long);
  public double doubleValue();
  public boolean equals(java.lang.Object);
  public float floatValue();
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static java.lang.String toString(short);
  public static short reverseBytes(short);
  public static java.lang.Short valueOf(short);
  public int compareTo(java.lang.Object);
public final class java.lang.StackTraceElement implements java.io.Serializable {
  public java.lang.StackTraceElement(java.lang.String, java.lang.String, java.lang.String, int);
  public boolean equals(java.lang.Object);
  public java.lang.String getClassName();
  public java.lang.String getFileName();
  public int getLineNumber();
  public java.lang.String getMethodName();
  public int hashCode();
  public boolean isNativeMethod();
  public java.lang.String toString();
  public int compare(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
public final class java.lang.String implements java.io.Serializable, java.lang.Comparable<java.lang.String>, java.lang.CharSequence {
  public java.lang.String();
  public java.lang.String(byte[]);
  public java.lang.String(byte[], int);
  public java.lang.String(byte[], int, int);
  public java.lang.String(byte[], int, int, int);
  public java.lang.String(byte[], int, int, java.nio.charset.Charset);
  public java.lang.String(byte[], java.nio.charset.Charset);
  public java.lang.String(char[]);
  public java.lang.String(char[], int, int);
  public java.lang.String(java.lang.String);
  public java.lang.String(java.lang.StringBuffer);
  public java.lang.String(int[], int, int);
  public java.lang.String(java.lang.StringBuilder);
  public native char charAt(int);
  public native int compareTo(java.lang.String);
  public int compareToIgnoreCase(java.lang.String);
  public java.lang.String concat(java.lang.String);
  public static java.lang.String copyValueOf(char[]);
  public static java.lang.String copyValueOf(char[], int, int);
  public boolean endsWith(java.lang.String);
  public native boolean equals(java.lang.Object);
  public boolean equalsIgnoreCase(java.lang.String);
  public void getBytes(int, int, byte[], int);
  public byte[] getBytes();
  public byte[] getBytes(java.nio.charset.Charset);
  public void getChars(int, int, char[], int);
  public int hashCode();
  public int indexOf(int);
  public int indexOf(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public native java.lang.String intern();
  public native boolean isEmpty();
  public int lastIndexOf(int);
  public int lastIndexOf(int, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public native int length();
  public boolean regionMatches(int, java.lang.String, int, int);
  public boolean regionMatches(boolean, int, java.lang.String, int, int);
  public java.lang.String replace(char, char);
  public java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence);
  public boolean startsWith(java.lang.String);
  public boolean startsWith(java.lang.String, int);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public char[] toCharArray();
  public java.lang.String toLowerCase();
  public java.lang.String toLowerCase(java.util.Locale);
  public java.lang.String toString();
  public java.lang.String toUpperCase();
  public java.lang.String toUpperCase(java.util.Locale);
  public java.lang.String trim();
  public static java.lang.String valueOf(char[]);
  public static java.lang.String valueOf(char[], int, int);
  public static java.lang.String valueOf(char);
  public static java.lang.String valueOf(double);
  public static java.lang.String valueOf(float);
  public static java.lang.String valueOf(int);
  public static java.lang.String valueOf(long);
  public static java.lang.String valueOf(java.lang.Object);
  public static java.lang.String valueOf(boolean);
  public boolean contentEquals(java.lang.StringBuffer);
  public boolean contentEquals(java.lang.CharSequence);
  public boolean matches(java.lang.String);
  public java.lang.String replaceAll(java.lang.String, java.lang.String);
  public java.lang.String replaceFirst(java.lang.String, java.lang.String);
  public java.lang.String[] split(java.lang.String);
  public java.lang.String[] split(java.lang.String, int);
  public java.lang.CharSequence subSequence(int, int);
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public boolean contains(java.lang.CharSequence);
  public int offsetByCodePoints(int, int);
  public static java.lang.String format(java.lang.String, java.lang.Object...);
  public static java.lang.String format(java.util.Locale, java.lang.String, java.lang.Object...);
  public int compareTo(java.lang.Object);
public final class java.lang.StringBuffer extends java.lang.AbstractStringBuilder implements java.lang.Appendable,java.io.Serializable,java.lang.CharSequence {
  public java.lang.StringBuffer();
  public java.lang.StringBuffer(int);
  public java.lang.StringBuffer(java.lang.String);
  public java.lang.StringBuffer(java.lang.CharSequence);
  public java.lang.StringBuffer append(boolean);
  public synchronized java.lang.StringBuffer append(char);
  public java.lang.StringBuffer append(double);
  public java.lang.StringBuffer append(float);
  public java.lang.StringBuffer append(int);
  public java.lang.StringBuffer append(long);
  public synchronized java.lang.StringBuffer append(java.lang.Object);
  public synchronized java.lang.StringBuffer append(java.lang.String);
  public synchronized java.lang.StringBuffer append(java.lang.StringBuffer);
  public synchronized java.lang.StringBuffer append(char[]);
  public synchronized java.lang.StringBuffer append(char[], int, int);
  public synchronized java.lang.StringBuffer append(java.lang.CharSequence);
  public synchronized java.lang.StringBuffer append(java.lang.CharSequence, int, int);
  public java.lang.StringBuffer appendCodePoint(int);
  public synchronized char charAt(int);
  public synchronized int codePointAt(int);
  public synchronized int codePointBefore(int);
  public synchronized int codePointCount(int, int);
  public synchronized java.lang.StringBuffer delete(int, int);
  public synchronized java.lang.StringBuffer deleteCharAt(int);
  public synchronized void ensureCapacity(int);
  public synchronized void getChars(int, int, char[], int);
  public synchronized int indexOf(java.lang.String, int);
  public synchronized java.lang.StringBuffer insert(int, char);
  public java.lang.StringBuffer insert(int, boolean);
  public java.lang.StringBuffer insert(int, int);
  public java.lang.StringBuffer insert(int, long);
  public java.lang.StringBuffer insert(int, double);
  public java.lang.StringBuffer insert(int, float);
  public java.lang.StringBuffer insert(int, java.lang.Object);
  public synchronized java.lang.StringBuffer insert(int, java.lang.String);
  public synchronized java.lang.StringBuffer insert(int, char[]);
  public synchronized java.lang.StringBuffer insert(int, char[], int, int);
  public synchronized java.lang.StringBuffer insert(int, java.lang.CharSequence);
  public synchronized java.lang.StringBuffer insert(int, java.lang.CharSequence, int, int);
  public synchronized int lastIndexOf(java.lang.String, int);
  public synchronized int offsetByCodePoints(int, int);
  public synchronized java.lang.StringBuffer replace(int, int, java.lang.String);
  public synchronized java.lang.StringBuffer reverse();
  public synchronized void setCharAt(int, char);
  public synchronized void setLength(int);
  public synchronized java.lang.CharSequence subSequence(int, int);
  public synchronized java.lang.String substring(int);
  public synchronized java.lang.String substring(int, int);
  public synchronized java.lang.String toString();
  public synchronized void trimToSize();
  public int lastIndexOf(java.lang.String);
  public int indexOf(java.lang.String);
  public int length();
  public int capacity();
public final class java.lang.StringBuilder extends java.lang.AbstractStringBuilder implements java.lang.Appendable,java.lang.CharSequence,java.io.Serializable {
  public java.lang.StringBuilder();
  public java.lang.StringBuilder(int);
  public java.lang.StringBuilder(java.lang.CharSequence);
  public java.lang.StringBuilder(java.lang.String);
  public java.lang.StringBuilder append(boolean);
  public java.lang.StringBuilder append(char);
  public java.lang.StringBuilder append(int);
  public java.lang.StringBuilder append(long);
  public java.lang.StringBuilder append(float);
  public java.lang.StringBuilder append(double);
  public java.lang.StringBuilder append(java.lang.Object);
  public java.lang.StringBuilder append(java.lang.String);
  public java.lang.StringBuilder append(java.lang.StringBuffer);
  public java.lang.StringBuilder append(char[]);
  public java.lang.StringBuilder append(char[], int, int);
  public java.lang.StringBuilder append(java.lang.CharSequence);
  public java.lang.StringBuilder append(java.lang.CharSequence, int, int);
  public java.lang.StringBuilder appendCodePoint(int);
  public java.lang.StringBuilder delete(int, int);
  public java.lang.StringBuilder deleteCharAt(int);
  public java.lang.StringBuilder insert(int, boolean);
  public java.lang.StringBuilder insert(int, char);
  public java.lang.StringBuilder insert(int, int);
  public java.lang.StringBuilder insert(int, long);
  public java.lang.StringBuilder insert(int, float);
  public java.lang.StringBuilder insert(int, double);
  public java.lang.StringBuilder insert(int, java.lang.Object);
  public java.lang.StringBuilder insert(int, java.lang.String);
  public java.lang.StringBuilder insert(int, char[]);
  public java.lang.StringBuilder insert(int, char[], int, int);
  public java.lang.StringBuilder insert(int, java.lang.CharSequence);
  public java.lang.StringBuilder insert(int, java.lang.CharSequence, int, int);
  public java.lang.StringBuilder replace(int, int, java.lang.String);
  public java.lang.StringBuilder reverse();
  public java.lang.String toString();
  public int offsetByCodePoints(int, int);
  public int codePointCount(int, int);
  public int codePointBefore(int);
  public int codePointAt(int);
  public void trimToSize();
  public int lastIndexOf(java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int indexOf(java.lang.String);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String substring(int, int);
  public java.lang.String substring(int);
  public void setLength(int);
  public void setCharAt(int, char);
  public int length();
  public void getChars(int, int, char[], int);
  public void ensureCapacity(int);
  public char charAt(int);
  public int capacity();
public class java.lang.StringIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
  public java.lang.StringIndexOutOfBoundsException();
  public java.lang.StringIndexOutOfBoundsException(int);
  public java.lang.StringIndexOutOfBoundsException(java.lang.String);
  public java.lang.StringIndexOutOfBoundsException(java.lang.String, int);
  public java.lang.StringIndexOutOfBoundsException(int, int);
  public java.lang.StringIndexOutOfBoundsException(java.lang.String, int, int);
  public java.lang.StringIndexOutOfBoundsException(int, int, int);
  public float specialValue();
  public static double parseDouble(java.lang.String);
  public static float parseFloat(java.lang.String);
  public java.lang.System$SystemEnvironment(java.util.Map<java.lang.String, java.lang.String>);
  public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.String>> entrySet();
  public java.lang.String get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.lang.Object get(java.lang.Object);
public final class java.lang.System {
  public static void setIn(java.io.InputStream);
  public static void setOut(java.io.PrintStream);
  public static void setErr(java.io.PrintStream);
  public static native void arraycopy(java.lang.Object, int, java.lang.Object, int, int);
  public static native long currentTimeMillis();
  public static native long nanoTime();
  public static void exit(int);
  public static void gc();
  public static java.lang.String getenv(java.lang.String);
  public static java.util.Map<java.lang.String, java.lang.String> getenv();
  public static java.util.Properties getProperties();
  public static java.lang.String getProperty(java.lang.String);
  public static java.lang.String getProperty(java.lang.String, java.lang.String);
  public static java.lang.String setProperty(java.lang.String, java.lang.String);
  public static java.lang.String clearProperty(java.lang.String);
  public static java.io.Console console();
  public static java.lang.SecurityManager getSecurityManager();
  public static native int identityHashCode(java.lang.Object);
  public static java.lang.String lineSeparator();
  public static void load(java.lang.String);
  public static void loadLibrary(java.lang.String);
  public static void logE(java.lang.String);
  public static void logE(java.lang.String, java.lang.Throwable);
  public static void logI(java.lang.String);
  public static void logI(java.lang.String, java.lang.Throwable);
  public static void logW(java.lang.String);
  public static void logW(java.lang.String, java.lang.Throwable);
  public static void runFinalization();
  public static void runFinalizersOnExit(boolean);
  public static void setProperties(java.util.Properties);
  public static void setSecurityManager(java.lang.SecurityManager);
  public static native java.lang.String mapLibraryName(java.lang.String);
public final class java.lang.Thread$State extends java.lang.Enum<java.lang.Thread$State> {
  public static java.lang.Thread$State[] values();
  public static java.lang.Thread$State valueOf(java.lang.String);
public interface java.lang.Thread$UncaughtExceptionHandler {
  public abstract void uncaughtException(java.lang.Thread, java.lang.Throwable);
public class java.lang.Thread implements java.lang.Runnable {
  public java.lang.Thread();
  public java.lang.Thread(java.lang.Runnable);
  public java.lang.Thread(java.lang.Runnable, java.lang.String);
  public java.lang.Thread(java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.String);
  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long);
  public static int activeCount();
  public final void checkAccess();
  public int countStackFrames();
  public static java.lang.Thread currentThread();
  public void destroy();
  public static void dumpStack();
  public static int enumerate(java.lang.Thread[]);
  public static java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]> getAllStackTraces();
  public java.lang.ClassLoader getContextClassLoader();
  public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
  public long getId();
  public final java.lang.String getName();
  public final int getPriority();
  public java.lang.StackTraceElement[] getStackTrace();
  public java.lang.Thread$State getState();
  public final java.lang.ThreadGroup getThreadGroup();
  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  public void interrupt();
  public static boolean interrupted();
  public final boolean isAlive();
  public final boolean isDaemon();
  public boolean isInterrupted();
  public final void resume();
  public void run();
  public void setContextClassLoader(java.lang.ClassLoader);
  public final void setDaemon(boolean);
  public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public final void pushInterruptAction$(java.lang.Runnable);
  public final void popInterruptAction$(java.lang.Runnable);
  public final void setName(java.lang.String);
  public final void setPriority(int);
  public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public synchronized void start();
  public final void stop();
  public final synchronized void stop(java.lang.Throwable);
  public final void suspend();
  public java.lang.String toString();
  public static void yield();
  public static boolean holdsLock(java.lang.Object);
  public void unpark();
  public void parkFor(long);
  public void parkUntil(long);
public class java.lang.ThreadDeath extends java.lang.Error {
  public java.lang.ThreadDeath();
public class java.lang.ThreadGroup implements java.lang.Thread$UncaughtExceptionHandler {
  public java.lang.ThreadGroup(java.lang.String);
  public java.lang.ThreadGroup(java.lang.ThreadGroup, java.lang.String);
  public int activeCount();
  public int activeGroupCount();
  public boolean allowThreadSuspension(boolean);
  public final void checkAccess();
  public final void destroy();
  public int enumerate(java.lang.Thread[]);
  public int enumerate(java.lang.Thread[], boolean);
  public int enumerate(java.lang.ThreadGroup[]);
  public int enumerate(java.lang.ThreadGroup[], boolean);
  public final int getMaxPriority();
  public final java.lang.String getName();
  public final java.lang.ThreadGroup getParent();
  public final void interrupt();
  public final boolean isDaemon();
  public synchronized boolean isDestroyed();
  public void list();
  public final boolean parentOf(java.lang.ThreadGroup);
  public final void resume();
  public final void setDaemon(boolean);
  public final void setMaxPriority(int);
  public final void stop();
  public final void suspend();
  public java.lang.String toString();
  public void uncaughtException(java.lang.Thread, java.lang.Throwable);
public class java.lang.ThreadLocal<T> {
  public java.lang.ThreadLocal();
  public T get();
  public void set(T);
  public void remove();
public class java.lang.Throwable implements java.io.Serializable {
  public java.lang.Throwable();
  public java.lang.Throwable(java.lang.String);
  public java.lang.Throwable(java.lang.String, java.lang.Throwable);
  public java.lang.Throwable(java.lang.Throwable);
  public java.lang.Throwable fillInStackTrace();
  public java.lang.String getMessage();
  public java.lang.String getLocalizedMessage();
  public java.lang.StackTraceElement[] getStackTrace();
  public void setStackTrace(java.lang.StackTraceElement[]);
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
  public java.lang.String toString();
  public java.lang.Throwable initCause(java.lang.Throwable);
  public java.lang.Throwable getCause();
  public final void addSuppressed(java.lang.Throwable);
  public final java.lang.Throwable[] getSuppressed();
  public java.lang.TwoEnumerationsInOne(java.util.Enumeration<java.net.URL>, java.util.Enumeration<java.net.URL>);
  public boolean hasMoreElements();
  public java.net.URL nextElement();
  public java.lang.Object nextElement();
public class java.lang.TypeNotPresentException extends java.lang.RuntimeException {
  public java.lang.TypeNotPresentException(java.lang.String, java.lang.Throwable);
  public java.lang.String typeName();
public class java.lang.UnknownError extends java.lang.VirtualMachineError {
  public java.lang.UnknownError();
  public java.lang.UnknownError(java.lang.String);
public class java.lang.UnsafeByteSequence {
  public java.lang.UnsafeByteSequence(int);
  public int size();
  public void rewind();
  public void write(byte[], int, int);
  public void write(int);
  public byte[] toByteArray();
  public java.lang.String toString(java.nio.charset.Charset);
public class java.lang.UnsatisfiedLinkError extends java.lang.LinkageError {
  public java.lang.UnsatisfiedLinkError();
  public java.lang.UnsatisfiedLinkError(java.lang.String);
public class java.lang.UnsupportedOperationException extends java.lang.RuntimeException {
  public java.lang.UnsupportedOperationException();
  public java.lang.UnsupportedOperationException(java.lang.String);
  public java.lang.UnsupportedOperationException(java.lang.String, java.lang.Throwable);
  public java.lang.UnsupportedOperationException(java.lang.Throwable);
public abstract class java.lang.VirtualMachineError extends java.lang.Error {
  public java.lang.VirtualMachineError();
  public java.lang.VirtualMachineError(java.lang.String);
public final class java.lang.Void {
public interface java.lang.annotation.Annotation {
  public abstract java.lang.Class<? extends java.lang.annotation.Annotation> annotationType();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.String toString();
public interface java.lang.annotation.Documented extends java.lang.annotation.Annotation {
public final class java.lang.annotation.ElementType extends java.lang.Enum<java.lang.annotation.ElementType> {
  public static java.lang.annotation.ElementType[] values();
  public static java.lang.annotation.ElementType valueOf(java.lang.String);
public interface java.lang.annotation.Inherited extends java.lang.annotation.Annotation {
public interface java.lang.annotation.Retention extends java.lang.annotation.Annotation {
  public abstract java.lang.annotation.RetentionPolicy value();
public final class java.lang.annotation.RetentionPolicy extends java.lang.Enum<java.lang.annotation.RetentionPolicy> {
  public static java.lang.annotation.RetentionPolicy[] values();
  public static java.lang.annotation.RetentionPolicy valueOf(java.lang.String);
public interface java.lang.annotation.Target extends java.lang.annotation.Annotation {
  public abstract java.lang.annotation.ElementType[] value();
public final class java.lang.ref.FinalizerReference<T> extends java.lang.ref.Reference<T> {
  public java.lang.ref.FinalizerReference(T, java.lang.ref.ReferenceQueue<? super T>);
  public T get();
  public void clear();
  public static void remove(java.lang.ref.FinalizerReference);
public class java.lang.ref.PhantomReference<T> extends java.lang.ref.Reference<T> {
  public java.lang.ref.PhantomReference(T, java.lang.ref.ReferenceQueue<? super T>);
  public T get();
public abstract class java.lang.ref.Reference<T> {
  public void clear();
  public final synchronized boolean enqueueInternal();
  public boolean enqueue();
  public T get();
  public boolean isEnqueued();
public class java.lang.ref.ReferenceQueue<T> {
  public java.lang.ref.ReferenceQueue();
  public synchronized java.lang.ref.Reference<? extends T> poll();
public class java.lang.ref.SoftReference<T> extends java.lang.ref.Reference<T> {
  public java.lang.ref.SoftReference(T);
  public java.lang.ref.SoftReference(T, java.lang.ref.ReferenceQueue<? super T>);
public class java.lang.ref.WeakReference<T> extends java.lang.ref.Reference<T> {
  public java.lang.ref.WeakReference(T);
  public java.lang.ref.WeakReference(T, java.lang.ref.ReferenceQueue<? super T>);
public class java.lang.reflect.AccessibleObject implements java.lang.reflect.AnnotatedElement {
  public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean);
  public boolean isAccessible();
  public void setAccessible(boolean);
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public java.lang.annotation.Annotation[] getAnnotations();
  public <T extends java/lang/annotation/Annotation> T getAnnotation(java.lang.Class<T>);
public interface java.lang.reflect.AnnotatedElement {
  public abstract <T extends java/lang/annotation/Annotation> T getAnnotation(java.lang.Class<T>);
  public abstract java.lang.annotation.Annotation[] getAnnotations();
  public abstract java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public abstract boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
public final class java.lang.reflect.Array {
  public static int getLength(java.lang.Object);
  public static void setBoolean(java.lang.Object, int, boolean);
public final class java.lang.reflect.Constructor<T> extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member {
  public java.lang.reflect.TypeVariable<java.lang.reflect.Constructor<T>>[] getTypeParameters();
  public java.lang.String toGenericString();
  public java.lang.reflect.Type[] getGenericParameterTypes();
  public java.lang.reflect.Type[] getGenericExceptionTypes();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public java.lang.annotation.Annotation[][] getParameterAnnotations();
  public boolean isVarArgs();
  public boolean isSynthetic();
  public boolean equals(java.lang.Object);
  public java.lang.Class<T> getDeclaringClass();
  public java.lang.Class<?>[] getExceptionTypes();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.Class<?>[] getParameterTypes();
  public int hashCode();
  public java.lang.String toString();
  public int compare(java.lang.reflect.Field, java.lang.reflect.Field);
  public int compare(java.lang.Object, java.lang.Object);
public final class java.lang.reflect.Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member {
  public boolean isSynthetic();
  public java.lang.String toGenericString();
  public boolean isEnumConstant();
  public java.lang.reflect.Type getGenericType();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public boolean equals(java.lang.Object);
  public java.lang.Class<?> getDeclaringClass();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.Class<?> getType();
  public int hashCode();
  public java.lang.String toString();
public interface java.lang.reflect.GenericArrayType extends java.lang.reflect.Type {
  public abstract java.lang.reflect.Type getGenericComponentType();
public interface java.lang.reflect.GenericDeclaration {
  public abstract java.lang.reflect.TypeVariable<?>[] getTypeParameters();
public class java.lang.reflect.GenericSignatureFormatError extends java.lang.ClassFormatError {
  public java.lang.reflect.GenericSignatureFormatError();
public interface java.lang.reflect.InvocationHandler {
public class java.lang.reflect.InvocationTargetException extends java.lang.Exception {
  public java.lang.reflect.InvocationTargetException(java.lang.Throwable);
  public java.lang.reflect.InvocationTargetException(java.lang.Throwable, java.lang.String);
  public java.lang.Throwable getTargetException();
  public java.lang.Throwable getCause();
public class java.lang.reflect.MalformedParameterizedTypeException extends java.lang.RuntimeException {
  public java.lang.reflect.MalformedParameterizedTypeException();
public interface java.lang.reflect.Member {
  public abstract java.lang.Class<?> getDeclaringClass();
  public abstract int getModifiers();
  public abstract java.lang.String getName();
  public abstract boolean isSynthetic();
  public int compare(java.lang.reflect.Method, java.lang.reflect.Method);
  public int compare(java.lang.Object, java.lang.Object);
public final class java.lang.reflect.Method extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration,java.lang.reflect.Member {
  public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] getTypeParameters();
  public java.lang.String toGenericString();
  public java.lang.reflect.Type[] getGenericParameterTypes();
  public java.lang.reflect.Type[] getGenericExceptionTypes();
  public java.lang.reflect.Type getGenericReturnType();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public <A extends java/lang/annotation/Annotation> A getAnnotation(java.lang.Class<A>);
  public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
  public java.lang.annotation.Annotation[][] getParameterAnnotations();
  public boolean isVarArgs();
  public boolean isBridge();
  public boolean isSynthetic();
  public java.lang.Object getDefaultValue();
  public boolean equals(java.lang.Object);
  public java.lang.Class<?> getDeclaringClass();
  public java.lang.Class<?>[] getExceptionTypes();
  public int getModifiers();
  public java.lang.String getName();
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.Class<?> getReturnType();
  public int hashCode();
  public java.lang.String toString();
public class java.lang.reflect.Modifier {
  public java.lang.reflect.Modifier();
  public static int classModifiers();
  public static int constructorModifiers();
  public static int fieldModifiers();
  public static int interfaceModifiers();
  public static int methodModifiers();
  public static boolean isAbstract(int);
  public static boolean isFinal(int);
  public static boolean isInterface(int);
  public static boolean isNative(int);
  public static boolean isPrivate(int);
  public static boolean isProtected(int);
  public static boolean isPublic(int);
  public static boolean isStatic(int);
  public static boolean isStrict(int);
  public static boolean isSynchronized(int);
  public static boolean isTransient(int);
  public static boolean isVolatile(int);
  public static java.lang.String toString(int);
public interface java.lang.reflect.ParameterizedType extends java.lang.reflect.Type {
  public abstract java.lang.reflect.Type[] getActualTypeArguments();
  public abstract java.lang.reflect.Type getOwnerType();
  public abstract java.lang.reflect.Type getRawType();
public class java.lang.reflect.Proxy implements java.io.Serializable {
  public static boolean isProxyClass(java.lang.Class<?>);
public interface java.lang.reflect.Type {
public interface java.lang.reflect.TypeVariable<D extends java.lang.reflect.GenericDeclaration> extends java.lang.reflect.Type {
  public abstract java.lang.reflect.Type[] getBounds();
  public abstract D getGenericDeclaration();
  public abstract java.lang.String getName();
public class java.lang.reflect.UndeclaredThrowableException extends java.lang.RuntimeException {
  public java.lang.reflect.UndeclaredThrowableException(java.lang.Throwable);
  public java.lang.reflect.UndeclaredThrowableException(java.lang.Throwable, java.lang.String);
  public java.lang.Throwable getUndeclaredThrowable();
  public java.lang.Throwable getCause();
public interface java.lang.reflect.WildcardType extends java.lang.reflect.Type {
  public abstract java.lang.reflect.Type[] getUpperBounds();
  public abstract java.lang.reflect.Type[] getLowerBounds();
public class java.math.BigDecimal extends java.lang.Number implements java.lang.Comparable<java.math.BigDecimal>, java.io.Serializable {
  public java.math.BigDecimal(char[], int, int);
  public java.math.BigDecimal(char[], int, int, java.math.MathContext);
  public java.math.BigDecimal(char[]);
  public java.math.BigDecimal(char[], java.math.MathContext);
  public java.math.BigDecimal(java.lang.String);
  public java.math.BigDecimal(java.lang.String, java.math.MathContext);
  public java.math.BigDecimal(double);
  public java.math.BigDecimal(double, java.math.MathContext);
  public java.math.BigDecimal(java.math.BigInteger);
  public java.math.BigDecimal(java.math.BigInteger, java.math.MathContext);
  public java.math.BigDecimal(java.math.BigInteger, int);
  public java.math.BigDecimal(java.math.BigInteger, int, java.math.MathContext);
  public java.math.BigDecimal(int);
  public java.math.BigDecimal(int, java.math.MathContext);
  public java.math.BigDecimal(long);
  public java.math.BigDecimal(long, java.math.MathContext);
  public static java.math.BigDecimal valueOf(long, int);
  public static java.math.BigDecimal valueOf(long);
  public static java.math.BigDecimal valueOf(double);
  public java.math.BigDecimal add(java.math.BigDecimal);
  public java.math.BigDecimal add(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal subtract(java.math.BigDecimal);
  public java.math.BigDecimal subtract(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal multiply(java.math.BigDecimal);
  public java.math.BigDecimal multiply(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal divide(java.math.BigDecimal, int, int);
  public java.math.BigDecimal divide(java.math.BigDecimal, int, java.math.RoundingMode);
  public java.math.BigDecimal divide(java.math.BigDecimal, int);
  public java.math.BigDecimal divide(java.math.BigDecimal, java.math.RoundingMode);
  public java.math.BigDecimal divide(java.math.BigDecimal);
  public java.math.BigDecimal divide(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal);
  public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal remainder(java.math.BigDecimal);
  public java.math.BigDecimal remainder(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal);
  public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal pow(int);
  public java.math.BigDecimal pow(int, java.math.MathContext);
  public java.math.BigDecimal abs();
  public java.math.BigDecimal abs(java.math.MathContext);
  public java.math.BigDecimal negate();
  public java.math.BigDecimal negate(java.math.MathContext);
  public java.math.BigDecimal plus();
  public java.math.BigDecimal plus(java.math.MathContext);
  public int signum();
  public int scale();
  public int precision();
  public java.math.BigInteger unscaledValue();
  public java.math.BigDecimal round(java.math.MathContext);
  public java.math.BigDecimal setScale(int, java.math.RoundingMode);
  public java.math.BigDecimal setScale(int, int);
  public java.math.BigDecimal setScale(int);
  public java.math.BigDecimal movePointLeft(int);
  public java.math.BigDecimal movePointRight(int);
  public java.math.BigDecimal scaleByPowerOfTen(int);
  public java.math.BigDecimal stripTrailingZeros();
  public int compareTo(java.math.BigDecimal);
  public boolean equals(java.lang.Object);
  public java.math.BigDecimal min(java.math.BigDecimal);
  public java.math.BigDecimal max(java.math.BigDecimal);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.String toEngineeringString();
  public java.lang.String toPlainString();
  public java.math.BigInteger toBigInteger();
  public java.math.BigInteger toBigIntegerExact();
  public long longValue();
  public long longValueExact();
  public int intValue();
  public int intValueExact();
  public short shortValueExact();
  public byte byteValueExact();
  public float floatValue();
  public double doubleValue();
  public java.math.BigDecimal ulp();
  public int compareTo(java.lang.Object);
  public java.lang.String toString();
public class java.math.BigInteger extends java.lang.Number implements java.lang.Comparable<java.math.BigInteger>, java.io.Serializable {
  public java.math.BigInteger(int, java.util.Random);
  public java.math.BigInteger(int, int, java.util.Random);
  public java.math.BigInteger(java.lang.String);
  public java.math.BigInteger(java.lang.String, int);
  public java.math.BigInteger(int, byte[]);
  public java.math.BigInteger(byte[]);
  public static java.math.BigInteger valueOf(long);
  public byte[] toByteArray();
  public java.math.BigInteger abs();
  public java.math.BigInteger negate();
  public java.math.BigInteger add(java.math.BigInteger);
  public java.math.BigInteger subtract(java.math.BigInteger);
  public int signum();
  public java.math.BigInteger shiftRight(int);
  public java.math.BigInteger shiftLeft(int);
  public int bitLength();
  public boolean testBit(int);
  public java.math.BigInteger setBit(int);
  public java.math.BigInteger clearBit(int);
  public java.math.BigInteger flipBit(int);
  public int getLowestSetBit();
  public int bitCount();
  public java.math.BigInteger not();
  public java.math.BigInteger and(java.math.BigInteger);
  public java.math.BigInteger or(java.math.BigInteger);
  public java.math.BigInteger xor(java.math.BigInteger);
  public java.math.BigInteger andNot(java.math.BigInteger);
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
  public int compareTo(java.math.BigInteger);
  public java.math.BigInteger min(java.math.BigInteger);
  public java.math.BigInteger max(java.math.BigInteger);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.String toString(int);
  public java.math.BigInteger gcd(java.math.BigInteger);
  public java.math.BigInteger multiply(java.math.BigInteger);
  public java.math.BigInteger pow(int);
  public java.math.BigInteger[] divideAndRemainder(java.math.BigInteger);
  public java.math.BigInteger divide(java.math.BigInteger);
  public java.math.BigInteger remainder(java.math.BigInteger);
  public java.math.BigInteger modInverse(java.math.BigInteger);
  public java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger mod(java.math.BigInteger);
  public boolean isProbablePrime(int);
  public java.math.BigInteger nextProbablePrime();
  public static java.math.BigInteger probablePrime(int, java.util.Random);
  public int compareTo(java.lang.Object);
public final class java.math.MathContext implements java.io.Serializable {
  public java.math.MathContext(int);
  public java.math.MathContext(int, java.math.RoundingMode);
  public java.math.MathContext(java.lang.String);
  public int getPrecision();
  public java.math.RoundingMode getRoundingMode();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public static native int ERR_get_error();
  public static native java.lang.String ERR_error_string(int);
  public static native int BN_new();
  public static native void BN_free(int);
  public static native int BN_cmp(int, int);
  public static native boolean BN_copy(int, int);
  public static native boolean putLongInt(int, long);
  public static native boolean putULongInt(int, long, boolean);
  public static native int BN_dec2bn(int, java.lang.String);
  public static native int BN_hex2bn(int, java.lang.String);
  public static native boolean BN_bin2bn(byte[], int, boolean, int);
  public static native boolean litEndInts2bn(int[], int, boolean, int);
  public static native boolean twosComp2bn(byte[], int, int);
  public static native long longInt(int);
  public static native java.lang.String BN_bn2dec(int);
  public static native java.lang.String BN_bn2hex(int);
  public static native byte[] BN_bn2bin(int);
  public static native int[] bn2litEndInts(int);
  public static native int sign(int);
  public static native void BN_set_negative(int, int);
  public static native int bitLength(int);
  public static native boolean BN_is_bit_set(int, int);
  public static native boolean modifyBit(int, int, int);
  public static native boolean BN_shift(int, int, int);
  public static native boolean BN_add_word(int, int);
  public static native boolean BN_sub_word(int, int);
  public static native boolean BN_mul_word(int, int);
  public static native int BN_div_word(int, int);
  public static native int BN_mod_word(int, int);
  public static native boolean BN_add(int, int, int);
  public static native boolean BN_sub(int, int, int);
  public static native boolean BN_gcd(int, int, int);
  public static native boolean BN_mul(int, int, int);
  public static native boolean BN_exp(int, int, int);
  public static native boolean BN_div(int, int, int, int);
  public static native boolean BN_nnmod(int, int, int);
  public static native boolean BN_mod_exp(int, int, int, int);
  public static native boolean BN_mod_inverse(int, int, int);
  public static native boolean BN_generate_prime_ex(int, int, boolean, int, int, int);
  public static native boolean BN_is_prime_ex(int, int, int);
public final class java.math.RoundingMode extends java.lang.Enum<java.math.RoundingMode> {
  public static java.math.RoundingMode[] values();
  public static java.math.RoundingMode valueOf(java.lang.String);
  public static java.math.RoundingMode valueOf(int);
  public void clear();
  public java.lang.Object get(java.lang.String);
  public void put(java.lang.String, java.net.InetAddress[]);
  public void put(java.lang.String, java.lang.String);
  public void put(java.lang.String, java.lang.Object, boolean);
  public void putUnknownHost(java.lang.String, java.lang.String);
public final class java.net.Authenticator$RequestorType extends java.lang.Enum<java.net.Authenticator$RequestorType> {
  public static java.net.Authenticator$RequestorType[] values();
  public static java.net.Authenticator$RequestorType valueOf(java.lang.String);
public abstract class java.net.Authenticator {
  public java.net.Authenticator();
  public static synchronized java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String);
  public static void setDefault(java.net.Authenticator);
  public static synchronized java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String);
  public static java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.net.Authenticator$RequestorType);
public class java.net.BindException extends java.net.SocketException {
  public java.net.BindException();
  public java.net.BindException(java.lang.String);
  public java.net.BindException(java.lang.String, java.lang.Throwable);
public abstract class java.net.CacheRequest {
  public java.net.CacheRequest();
  public abstract void abort();
public abstract class java.net.CacheResponse {
  public java.net.CacheResponse();
public class java.net.ConnectException extends java.net.SocketException {
  public java.net.ConnectException();
  public java.net.ConnectException(java.lang.String);
  public java.net.ConnectException(java.lang.String, java.lang.Throwable);
public abstract class java.net.ContentHandler {
  public java.net.ContentHandler();
public interface java.net.ContentHandlerFactory {
  public abstract java.net.ContentHandler createContentHandler(java.lang.String);
public abstract class java.net.CookieHandler {
  public java.net.CookieHandler();
  public static java.net.CookieHandler getDefault();
  public static void setDefault(java.net.CookieHandler);
public final class java.net.DatagramPacket {
  public java.net.DatagramPacket(byte[], int);
  public java.net.DatagramPacket(byte[], int, int);
  public java.net.DatagramPacket(byte[], int, int, java.net.InetAddress, int);
  public java.net.DatagramPacket(byte[], int, java.net.InetAddress, int);
  public synchronized java.net.InetAddress getAddress();
  public synchronized byte[] getData();
  public synchronized int getLength();
  public synchronized int getOffset();
  public synchronized int getPort();
  public synchronized void setAddress(java.net.InetAddress);
  public synchronized void setData(byte[], int, int);
  public synchronized void setData(byte[]);
  public synchronized void setLength(int);
  public synchronized void setPort(int);
  public synchronized java.net.SocketAddress getSocketAddress();
  public synchronized void setSocketAddress(java.net.SocketAddress);
public class java.net.DatagramSocket {
  public void close();
  public void disconnect();
  public java.net.InetAddress getInetAddress();
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public int getPort();
  public void connect(java.net.InetAddress, int);
  public boolean isBound();
  public boolean isConnected();
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public boolean isClosed();
  public java.nio.channels.DatagramChannel getChannel();
  public final java.io.FileDescriptor getFileDescriptor$();
public abstract class java.net.DatagramSocketImpl implements java.net.SocketOptions {
  public java.net.DatagramSocketImpl();
public interface java.net.DatagramSocketImplFactory {
  public abstract java.net.DatagramSocketImpl createDatagramSocketImpl();
  public java.lang.String getContentTypeFor(java.lang.String);
public interface java.net.FileNameMap {
  public abstract java.lang.String getContentTypeFor(java.lang.String);
public class java.net.HttpRetryException extends java.io.IOException {
  public java.net.HttpRetryException(java.lang.String, int);
  public java.net.HttpRetryException(java.lang.String, int, java.lang.String);
  public java.lang.String getLocation();
  public java.lang.String getReason();
  public int responseCode();
public abstract class java.net.HttpURLConnection extends java.net.URLConnection {
  public abstract void disconnect();
  public java.io.InputStream getErrorStream();
  public static boolean getFollowRedirects();
  public java.lang.String getRequestMethod();
  public static void setFollowRedirects(boolean);
  public abstract boolean usingProxy();
  public java.lang.String getContentEncoding();
  public boolean getInstanceFollowRedirects();
  public void setInstanceFollowRedirects(boolean);
  public long getHeaderFieldDate(java.lang.String, long);
  public void setFixedLengthStreamingMode(int);
  public void setChunkedStreamingMode(int);
public final class java.net.Inet4Address extends java.net.InetAddress {
  public boolean isAnyLocalAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isSiteLocalAddress();
public final class java.net.Inet6Address extends java.net.InetAddress {
  public boolean isAnyLocalAddress();
  public boolean isIPv4CompatibleAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isSiteLocalAddress();
  public int getScopeId();
  public java.net.NetworkInterface getScopedInterface();
  public java.lang.String toString();
  public void run();
public class java.net.InetAddress implements java.io.Serializable {
  public boolean equals(java.lang.Object);
  public byte[] getAddress();
  public java.lang.String getHostAddress();
  public java.lang.String getHostName();
  public java.lang.String getCanonicalHostName();
  public int hashCode();
  public static void clearDnsCache();
  public java.lang.String toString();
  public static boolean isNumeric(java.lang.String);
  public static java.net.InetAddress parseNumericAddress(java.lang.String);
  public static java.net.InetAddress getLoopbackAddress();
  public boolean isAnyLocalAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isSiteLocalAddress();
public class java.net.InetSocketAddress extends java.net.SocketAddress {
  public java.net.InetSocketAddress();
  public java.net.InetSocketAddress(int);
  public java.net.InetSocketAddress(java.net.InetAddress, int);
  public java.net.InetSocketAddress(java.lang.String, int);
  public static java.net.InetSocketAddress createUnresolved(java.lang.String, int);
  public final int getPort();
  public final java.net.InetAddress getAddress();
  public final java.lang.String getHostName();
  public final java.lang.String getHostString();
  public final boolean isUnresolved();
  public java.lang.String toString();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
public class java.net.InterfaceAddress {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.net.InetAddress getAddress();
  public java.net.InetAddress getBroadcast();
  public short getNetworkPrefixLength();
public abstract class java.net.JarURLConnection extends java.net.URLConnection {
  public java.lang.String getEntryName();
  public java.net.URL getJarFileURL();
public class java.net.MalformedURLException extends java.io.IOException {
  public java.net.MalformedURLException();
  public java.net.MalformedURLException(java.lang.String);
  public java.net.MalformedURLException(java.lang.String, java.lang.Throwable);
public class java.net.MulticastSocket extends java.net.DatagramSocket {
public final class java.net.NetPermission extends java.security.BasicPermission {
  public java.net.NetPermission(java.lang.String);
  public java.net.NetPermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public final class java.net.NetworkInterface {
  public int getIndex();
  public java.lang.String getName();
  public java.util.Enumeration<java.net.InetAddress> getInetAddresses();
  public java.lang.String getDisplayName();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.util.List<java.net.InterfaceAddress> getInterfaceAddresses();
  public java.util.Enumeration<java.net.NetworkInterface> getSubInterfaces();
  public java.net.NetworkInterface getParent();
  public boolean isVirtual();
public final class java.net.PasswordAuthentication {
  public java.net.PasswordAuthentication(java.lang.String, char[]);
  public char[] getPassword();
  public java.lang.String getUserName();
public class java.net.PlainDatagramSocketImpl extends java.net.DatagramSocketImpl {
  public java.net.PlainDatagramSocketImpl(java.io.FileDescriptor, int);
  public java.net.PlainDatagramSocketImpl();
  public synchronized void close();
  public void disconnect();
public class java.net.PlainServerSocketImpl extends java.net.PlainSocketImpl {
  public java.net.PlainServerSocketImpl();
  public java.net.PlainServerSocketImpl(java.io.FileDescriptor);
  public java.net.PlainSocketImpl$PlainSocketInputStream(java.net.PlainSocketImpl);
  public java.net.PlainSocketImpl$PlainSocketOutputStream(java.net.PlainSocketImpl);
public class java.net.PlainSocketImpl extends java.net.SocketImpl {
  public java.net.PlainSocketImpl(java.io.FileDescriptor);
  public java.net.PlainSocketImpl(java.net.Proxy);
  public java.net.PlainSocketImpl();
  public java.net.PlainSocketImpl(java.io.FileDescriptor, int, java.net.InetAddress, int);
  public void initLocalPort(int);
  public void initRemoteAddressAndPort(java.net.InetAddress, int);
public class java.net.PortUnreachableException extends java.net.SocketException {
  public java.net.PortUnreachableException();
  public java.net.PortUnreachableException(java.lang.String);
  public java.net.PortUnreachableException(java.lang.String, java.lang.Throwable);
public class java.net.ProtocolException extends java.io.IOException {
  public java.net.ProtocolException();
  public java.net.ProtocolException(java.lang.String);
  public java.net.ProtocolException(java.lang.String, java.lang.Throwable);
public final class java.net.Proxy$Type extends java.lang.Enum<java.net.Proxy$Type> {
  public static java.net.Proxy$Type[] values();
  public static java.net.Proxy$Type valueOf(java.lang.String);
public class java.net.Proxy {
  public java.net.Proxy(java.net.Proxy$Type, java.net.SocketAddress);
  public java.net.Proxy$Type type();
  public java.net.SocketAddress address();
  public java.lang.String toString();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
public abstract class java.net.ProxySelector {
  public java.net.ProxySelector();
  public static java.net.ProxySelector getDefault();
  public static void setDefault(java.net.ProxySelector);
  public abstract java.util.List<java.net.Proxy> select(java.net.URI);
  public abstract void connectFailed(java.net.URI, java.net.SocketAddress, java.io.IOException);
  public void connectFailed(java.net.URI, java.net.SocketAddress, java.io.IOException);
  public java.util.List<java.net.Proxy> select(java.net.URI);
public abstract class java.net.ResponseCache {
  public java.net.ResponseCache();
  public static java.net.ResponseCache getDefault();
  public static void setDefault(java.net.ResponseCache);
public abstract class java.net.SecureCacheResponse extends java.net.CacheResponse {
  public java.net.SecureCacheResponse();
  public abstract java.lang.String getCipherSuite();
  public abstract java.util.List<java.security.cert.Certificate> getLocalCertificateChain();
  public abstract java.security.Principal getLocalPrincipal();
public class java.net.ServerSocket {
  public java.net.SocketImpl getImpl$();
  public java.net.InetAddress getInetAddress();
  public int getLocalPort();
  public java.lang.String toString();
  public java.net.SocketAddress getLocalSocketAddress();
  public boolean isBound();
  public boolean isClosed();
  public java.nio.channels.ServerSocketChannel getChannel();
  public void setPerformancePreferences(int, int, int);
public class java.net.Socket {
  public java.net.Socket();
  public java.net.Socket(java.net.Proxy);
  public java.net.InetAddress getInetAddress();
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public int getPort();
  public java.lang.String toString();
  public java.net.SocketAddress getLocalSocketAddress();
  public java.net.SocketAddress getRemoteSocketAddress();
  public boolean isBound();
  public boolean isConnected();
  public boolean isClosed();
  public boolean isInputShutdown();
  public boolean isOutputShutdown();
  public java.nio.channels.SocketChannel getChannel();
  public java.io.FileDescriptor getFileDescriptor$();
  public void setPerformancePreferences(int, int, int);
public abstract class java.net.SocketAddress implements java.io.Serializable {
  public java.net.SocketAddress();
public class java.net.SocketException extends java.io.IOException {
  public java.net.SocketException();
  public java.net.SocketException(java.lang.String);
  public java.net.SocketException(java.lang.Throwable);
  public java.net.SocketException(java.lang.String, java.lang.Throwable);
public abstract class java.net.SocketImpl implements java.net.SocketOptions {
  public java.net.SocketImpl();
  public java.io.FileDescriptor getFD$();
  public java.lang.String toString();
public interface java.net.SocketImplFactory {
  public abstract java.net.SocketImpl createSocketImpl();
public interface java.net.SocketOptions {
public final class java.net.SocketPermission extends java.security.Permission implements java.io.Serializable {
  public java.net.SocketPermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public class java.net.SocketTimeoutException extends java.io.InterruptedIOException {
  public java.net.SocketTimeoutException();
  public java.net.SocketTimeoutException(java.lang.String);
  public java.net.SocketTimeoutException(java.lang.Throwable);
  public java.net.SocketTimeoutException(java.lang.String, java.lang.Throwable);
public class java.net.SocketUtils {
  public static void setCreated(java.net.Socket);
  public java.net.Socks4Message();
  public int getCommandOrResult();
  public void setCommandOrResult(int);
  public int getPort();
  public void setPort(int);
  public int getIP();
  public void setIP(byte[]);
  public java.lang.String getUserId();
  public void setUserId(java.lang.String);
  public java.lang.String toString();
  public int getLength();
  public java.lang.String getErrorString(int);
  public byte[] getBytes();
public final class java.net.URI implements java.lang.Comparable<java.net.URI>, java.io.Serializable {
  public int compareTo(java.net.URI);
  public static java.net.URI create(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.String getScheme();
  public java.lang.String getSchemeSpecificPart();
  public java.lang.String getRawSchemeSpecificPart();
  public java.lang.String getAuthority();
  public java.lang.String getRawAuthority();
  public java.lang.String getUserInfo();
  public java.lang.String getRawUserInfo();
  public java.lang.String getHost();
  public int getPort();
  public int getEffectivePort();
  public static int getEffectivePort(java.lang.String, int);
  public java.lang.String getPath();
  public java.lang.String getRawPath();
  public java.lang.String getQuery();
  public java.lang.String getRawQuery();
  public java.lang.String getFragment();
  public java.lang.String getRawFragment();
  public int hashCode();
  public boolean isAbsolute();
  public boolean isOpaque();
  public java.net.URI normalize();
  public java.net.URI relativize(java.net.URI);
  public java.net.URI resolve(java.net.URI);
  public java.net.URI resolve(java.lang.String);
  public java.lang.String toASCIIString();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public class java.net.URISyntaxException extends java.lang.Exception {
  public java.net.URISyntaxException(java.lang.String, java.lang.String, int);
  public java.net.URISyntaxException(java.lang.String, java.lang.String);
  public int getIndex();
  public java.lang.String getReason();
  public java.lang.String getInput();
  public java.lang.String getMessage();
public final class java.net.URL implements java.io.Serializable {
  public static synchronized void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory);
  public boolean equals(java.lang.Object);
  public boolean sameFile(java.net.URL);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.String toExternalForm();
  public int getEffectivePort();
  public java.lang.String getProtocol();
  public java.lang.String getAuthority();
  public java.lang.String getUserInfo();
  public java.lang.String getHost();
  public int getPort();
  public int getDefaultPort();
  public java.lang.String getFile();
  public java.lang.String getPath();
  public java.lang.String getQuery();
  public java.lang.String getRef();
public abstract class java.net.URLConnection {
  public boolean getAllowUserInteraction();
  public java.lang.String getContentEncoding();
  public int getContentLength();
  public java.lang.String getContentType();
  public long getDate();
  public static boolean getDefaultAllowUserInteraction();
  public static java.lang.String getDefaultRequestProperty(java.lang.String);
  public boolean getDefaultUseCaches();
  public boolean getDoInput();
  public boolean getDoOutput();
  public long getExpiration();
  public static java.net.FileNameMap getFileNameMap();
  public java.lang.String getHeaderField(int);
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields();
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestProperties();
  public void addRequestProperty(java.lang.String, java.lang.String);
  public java.lang.String getHeaderField(java.lang.String);
  public long getHeaderFieldDate(java.lang.String, long);
  public int getHeaderFieldInt(java.lang.String, int);
  public java.lang.String getHeaderFieldKey(int);
  public long getIfModifiedSince();
  public long getLastModified();
  public java.lang.String getRequestProperty(java.lang.String);
  public java.net.URL getURL();
  public boolean getUseCaches();
  public static java.lang.String guessContentTypeFromName(java.lang.String);
  public void setAllowUserInteraction(boolean);
  public static synchronized void setContentHandlerFactory(java.net.ContentHandlerFactory);
  public static void setDefaultAllowUserInteraction(boolean);
  public static void setDefaultRequestProperty(java.lang.String, java.lang.String);
  public void setDefaultUseCaches(boolean);
  public void setDoInput(boolean);
  public void setDoOutput(boolean);
  public static void setFileNameMap(java.net.FileNameMap);
  public void setIfModifiedSince(long);
  public void setRequestProperty(java.lang.String, java.lang.String);
  public void setUseCaches(boolean);
  public void setConnectTimeout(int);
  public int getConnectTimeout();
  public void setReadTimeout(int);
  public int getReadTimeout();
  public java.lang.String toString();
public class java.net.URLDecoder {
  public java.net.URLDecoder();
  public static java.lang.String decode(java.lang.String);
public class java.net.URLEncoder {
  public static java.lang.String encode(java.lang.String);
public abstract class java.net.URLStreamHandler {
  public java.net.URLStreamHandler();
public interface java.net.URLStreamHandlerFactory {
  public abstract java.net.URLStreamHandler createURLStreamHandler(java.lang.String);
public class java.net.UnknownHostException extends java.io.IOException {
  public java.net.UnknownHostException();
  public java.net.UnknownHostException(java.lang.String);
public class java.net.UnknownServiceException extends java.io.IOException {
  public java.net.UnknownServiceException();
  public java.net.UnknownServiceException(java.lang.String);
  public java.net.UnknownServiceException(java.lang.String, java.lang.Throwable);
  public final java.nio.CharBuffer asCharBuffer();
  public final java.nio.DoubleBuffer asDoubleBuffer();
  public final java.nio.FloatBuffer asFloatBuffer();
  public final java.nio.IntBuffer asIntBuffer();
  public final java.nio.LongBuffer asLongBuffer();
  public final java.nio.ShortBuffer asShortBuffer();
  public char getChar();
  public char getChar(int);
  public java.nio.ByteBuffer putChar(char);
  public java.nio.ByteBuffer putChar(int, char);
public abstract class java.nio.Buffer {
  public abstract java.lang.Object array();
  public abstract int arrayOffset();
  public final int capacity();
  public final java.nio.Buffer clear();
  public final java.nio.Buffer flip();
  public abstract boolean hasArray();
  public final boolean hasRemaining();
  public abstract boolean isDirect();
  public abstract boolean isReadOnly();
  public final int limit();
  public final java.nio.Buffer limit(int);
  public final java.nio.Buffer mark();
  public final int position();
  public final java.nio.Buffer position(int);
  public final int remaining();
  public final java.nio.Buffer reset();
  public final java.nio.Buffer rewind();
  public java.lang.String toString();
public class java.nio.BufferOverflowException extends java.lang.RuntimeException {
  public java.nio.BufferOverflowException();
public class java.nio.BufferUnderflowException extends java.lang.RuntimeException {
  public java.nio.BufferUnderflowException();
public abstract class java.nio.ByteBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.ByteBuffer> {
  public static java.nio.ByteBuffer allocate(int);
  public static java.nio.ByteBuffer allocateDirect(int);
  public static java.nio.ByteBuffer wrap(byte[]);
  public static java.nio.ByteBuffer wrap(byte[], int, int);
  public final byte[] array();
  public final int arrayOffset();
  public abstract java.nio.CharBuffer asCharBuffer();
  public abstract java.nio.DoubleBuffer asDoubleBuffer();
  public abstract java.nio.FloatBuffer asFloatBuffer();
  public abstract java.nio.IntBuffer asIntBuffer();
  public abstract java.nio.LongBuffer asLongBuffer();
  public abstract java.nio.ByteBuffer asReadOnlyBuffer();
  public abstract java.nio.ShortBuffer asShortBuffer();
  public abstract java.nio.ByteBuffer compact();
  public int compareTo(java.nio.ByteBuffer);
  public abstract java.nio.ByteBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract byte get();
  public java.nio.ByteBuffer get(byte[]);
  public java.nio.ByteBuffer get(byte[], int, int);
  public abstract byte get(int);
  public abstract char getChar();
  public abstract char getChar(int);
  public abstract double getDouble();
  public abstract double getDouble(int);
  public abstract float getFloat();
  public abstract float getFloat(int);
  public abstract int getInt();
  public abstract int getInt(int);
  public abstract long getLong();
  public abstract long getLong(int);
  public abstract short getShort();
  public abstract short getShort(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public final java.nio.ByteOrder order();
  public final java.nio.ByteBuffer order(java.nio.ByteOrder);
  public abstract java.nio.ByteBuffer put(byte);
  public final java.nio.ByteBuffer put(byte[]);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer put(java.nio.ByteBuffer);
  public abstract java.nio.ByteBuffer put(int, byte);
  public abstract java.nio.ByteBuffer putChar(char);
  public abstract java.nio.ByteBuffer putChar(int, char);
  public abstract java.nio.ByteBuffer putDouble(double);
  public abstract java.nio.ByteBuffer putDouble(int, double);
  public abstract java.nio.ByteBuffer putFloat(float);
  public abstract java.nio.ByteBuffer putFloat(int, float);
  public abstract java.nio.ByteBuffer putInt(int);
  public abstract java.nio.ByteBuffer putInt(int, int);
  public abstract java.nio.ByteBuffer putLong(long);
  public abstract java.nio.ByteBuffer putLong(int, long);
  public abstract java.nio.ByteBuffer putShort(short);
  public abstract java.nio.ByteBuffer putShort(int, short);
  public abstract java.nio.ByteBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
public final class java.nio.ByteOrder {
  public static java.nio.ByteOrder nativeOrder();
  public java.lang.String toString();
  public final char get();
  public final char get(int);
  public final java.nio.CharBuffer get(char[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
  public final java.lang.CharSequence subSequence(int, int);
  public final java.lang.String toString();
public abstract class java.nio.CharBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.CharBuffer>, java.lang.CharSequence, java.lang.Appendable, java.lang.Readable {
  public static java.nio.CharBuffer allocate(int);
  public static java.nio.CharBuffer wrap(char[]);
  public static java.nio.CharBuffer wrap(char[], int, int);
  public static java.nio.CharBuffer wrap(java.lang.CharSequence);
  public static java.nio.CharBuffer wrap(java.lang.CharSequence, int, int);
  public final char[] array();
  public final int arrayOffset();
  public abstract java.nio.CharBuffer asReadOnlyBuffer();
  public final char charAt(int);
  public abstract java.nio.CharBuffer compact();
  public int compareTo(java.nio.CharBuffer);
  public abstract java.nio.CharBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract char get();
  public java.nio.CharBuffer get(char[]);
  public java.nio.CharBuffer get(char[], int, int);
  public abstract char get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public final int length();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.CharBuffer put(char);
  public final java.nio.CharBuffer put(char[]);
  public java.nio.CharBuffer put(char[], int, int);
  public java.nio.CharBuffer put(java.nio.CharBuffer);
  public abstract java.nio.CharBuffer put(int, char);
  public final java.nio.CharBuffer put(java.lang.String);
  public java.nio.CharBuffer put(java.lang.String, int, int);
  public abstract java.nio.CharBuffer slice();
  public abstract java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
  public java.nio.CharBuffer append(char);
  public java.nio.CharBuffer append(java.lang.CharSequence);
  public java.nio.CharBuffer append(java.lang.CharSequence, int, int);
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.CharBuffer asReadOnlyBuffer();
  public java.nio.CharBuffer compact();
  public java.nio.CharBuffer duplicate();
  public char get();
  public char get(int);
  public final java.nio.CharBuffer get(char[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.CharBuffer put(char);
  public java.nio.CharBuffer put(int, char);
  public final java.nio.CharBuffer put(char[], int, int);
  public java.nio.CharBuffer put(java.lang.String, int, int);
  public java.nio.CharBuffer slice();
  public java.lang.CharSequence subSequence(int, int);
  public java.nio.CharBuffer asReadOnlyBuffer();
  public java.nio.CharBuffer compact();
  public java.nio.CharBuffer duplicate();
  public char get();
  public char get(int);
  public java.nio.CharBuffer get(char[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.CharBuffer put(char);
  public java.nio.CharBuffer put(int, char);
  public java.nio.CharBuffer put(char[], int, int);
  public java.nio.CharBuffer slice();
  public java.lang.CharSequence subSequence(int, int);
  public java.nio.channels.DatagramChannel getChannel();
  public boolean isBound();
  public boolean isConnected();
  public java.net.InetAddress getInetAddress();
  public java.net.InetAddress getLocalAddress();
  public int getPort();
  public void close();
  public void disconnect();
  public synchronized java.net.DatagramSocket socket();
  public synchronized boolean isConnected();
  public java.io.FileDescriptor getFD();
  public final java.nio.ByteBuffer get(byte[], int, int);
  public final byte get();
  public final byte get(int);
  public final char getChar();
  public final char getChar(int);
  public final double getDouble();
  public final double getDouble(int);
  public final float getFloat();
  public final float getFloat(int);
  public final int getInt();
  public final int getInt(int);
  public final long getLong();
  public final long getLong(int);
  public final short getShort();
  public final short getShort(int);
  public final boolean isDirect();
  public final void free();
  public final double get();
  public final double get(int);
  public final java.nio.DoubleBuffer get(double[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
public abstract class java.nio.DoubleBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.DoubleBuffer> {
  public static java.nio.DoubleBuffer allocate(int);
  public static java.nio.DoubleBuffer wrap(double[]);
  public static java.nio.DoubleBuffer wrap(double[], int, int);
  public final double[] array();
  public final int arrayOffset();
  public abstract java.nio.DoubleBuffer asReadOnlyBuffer();
  public abstract java.nio.DoubleBuffer compact();
  public int compareTo(java.nio.DoubleBuffer);
  public abstract java.nio.DoubleBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract double get();
  public java.nio.DoubleBuffer get(double[]);
  public java.nio.DoubleBuffer get(double[], int, int);
  public abstract double get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.DoubleBuffer put(double);
  public final java.nio.DoubleBuffer put(double[]);
  public java.nio.DoubleBuffer put(double[], int, int);
  public java.nio.DoubleBuffer put(java.nio.DoubleBuffer);
  public abstract java.nio.DoubleBuffer put(int, double);
  public abstract java.nio.DoubleBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.DoubleBuffer asReadOnlyBuffer();
  public java.nio.DoubleBuffer compact();
  public java.nio.DoubleBuffer duplicate();
  public double get();
  public double get(int);
  public java.nio.DoubleBuffer get(double[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.DoubleBuffer put(double);
  public java.nio.DoubleBuffer put(int, double);
  public java.nio.DoubleBuffer put(double[], int, int);
  public java.nio.DoubleBuffer slice();
  public int compare(java.nio.channels.FileLock, java.nio.channels.FileLock);
  public int compare(java.lang.Object, java.lang.Object);
  public java.nio.FileChannelImpl$FileLockImpl(java.nio.channels.FileChannel, long, long, boolean);
  public boolean isValid();
  public java.nio.FileChannelImpl(java.lang.Object, java.io.FileDescriptor, int);
  public java.io.FileDescriptor getFD();
  public abstract java.io.FileDescriptor getFD();
  public final float get();
  public final float get(int);
  public final java.nio.FloatBuffer get(float[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
public abstract class java.nio.FloatBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.FloatBuffer> {
  public static java.nio.FloatBuffer allocate(int);
  public static java.nio.FloatBuffer wrap(float[]);
  public static java.nio.FloatBuffer wrap(float[], int, int);
  public final float[] array();
  public final int arrayOffset();
  public abstract java.nio.FloatBuffer asReadOnlyBuffer();
  public abstract java.nio.FloatBuffer compact();
  public int compareTo(java.nio.FloatBuffer);
  public abstract java.nio.FloatBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract float get();
  public java.nio.FloatBuffer get(float[]);
  public java.nio.FloatBuffer get(float[], int, int);
  public abstract float get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.FloatBuffer put(float);
  public final java.nio.FloatBuffer put(float[]);
  public java.nio.FloatBuffer put(float[], int, int);
  public java.nio.FloatBuffer put(java.nio.FloatBuffer);
  public abstract java.nio.FloatBuffer put(int, float);
  public abstract java.nio.FloatBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.FloatBuffer asReadOnlyBuffer();
  public java.nio.FloatBuffer compact();
  public java.nio.FloatBuffer duplicate();
  public float get();
  public float get(int);
  public java.nio.FloatBuffer get(float[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.FloatBuffer put(float);
  public java.nio.FloatBuffer put(int, float);
  public java.nio.FloatBuffer put(float[], int, int);
  public java.nio.FloatBuffer slice();
  public final java.nio.ByteBuffer get(byte[], int, int);
  public final byte get();
  public final byte get(int);
  public final char getChar();
  public final char getChar(int);
  public final double getDouble();
  public final double getDouble(int);
  public final float getFloat();
  public final float getFloat(int);
  public final int getInt();
  public final int getInt(int);
  public final long getLong();
  public final long getLong(int);
  public final short getShort();
  public final short getShort(int);
  public final boolean isDirect();
  public final int get();
  public final int get(int);
  public final java.nio.IntBuffer get(int[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
public abstract class java.nio.IntBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.IntBuffer> {
  public static java.nio.IntBuffer allocate(int);
  public static java.nio.IntBuffer wrap(int[]);
  public static java.nio.IntBuffer wrap(int[], int, int);
  public final int[] array();
  public final int arrayOffset();
  public abstract java.nio.IntBuffer asReadOnlyBuffer();
  public abstract java.nio.IntBuffer compact();
  public int compareTo(java.nio.IntBuffer);
  public abstract java.nio.IntBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract int get();
  public java.nio.IntBuffer get(int[]);
  public java.nio.IntBuffer get(int[], int, int);
  public abstract int get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.IntBuffer put(int);
  public final java.nio.IntBuffer put(int[]);
  public java.nio.IntBuffer put(int[], int, int);
  public java.nio.IntBuffer put(java.nio.IntBuffer);
  public abstract java.nio.IntBuffer put(int, int);
  public abstract java.nio.IntBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.IntBuffer asReadOnlyBuffer();
  public java.nio.IntBuffer compact();
  public java.nio.IntBuffer duplicate();
  public int get();
  public int get(int);
  public java.nio.IntBuffer get(int[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.IntBuffer put(int);
  public java.nio.IntBuffer put(int, int);
  public java.nio.IntBuffer put(int[], int, int);
  public java.nio.IntBuffer slice();
public class java.nio.InvalidMarkException extends java.lang.IllegalStateException {
  public java.nio.InvalidMarkException();
  public java.nio.InvalidMarkException(java.lang.String);
  public static java.nio.IoVec$Direction[] values();
  public static java.nio.IoVec$Direction valueOf(java.lang.String);
  public final long get();
  public final long get(int);
  public final java.nio.LongBuffer get(long[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
public abstract class java.nio.LongBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.LongBuffer> {
  public static java.nio.LongBuffer allocate(int);
  public static java.nio.LongBuffer wrap(long[]);
  public static java.nio.LongBuffer wrap(long[], int, int);
  public final long[] array();
  public final int arrayOffset();
  public abstract java.nio.LongBuffer asReadOnlyBuffer();
  public abstract java.nio.LongBuffer compact();
  public int compareTo(java.nio.LongBuffer);
  public abstract java.nio.LongBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract long get();
  public java.nio.LongBuffer get(long[]);
  public java.nio.LongBuffer get(long[], int, int);
  public abstract long get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.LongBuffer put(long);
  public final java.nio.LongBuffer put(long[]);
  public java.nio.LongBuffer put(long[], int, int);
  public java.nio.LongBuffer put(java.nio.LongBuffer);
  public abstract java.nio.LongBuffer put(int, long);
  public abstract java.nio.LongBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.LongBuffer asReadOnlyBuffer();
  public java.nio.LongBuffer compact();
  public java.nio.LongBuffer duplicate();
  public long get();
  public long get(int);
  public java.nio.LongBuffer get(long[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.LongBuffer put(long);
  public java.nio.LongBuffer put(int, long);
  public java.nio.LongBuffer put(long[], int, int);
  public java.nio.LongBuffer slice();
public abstract class java.nio.MappedByteBuffer extends java.nio.ByteBuffer {
  public final boolean isLoaded();
  public final java.nio.MappedByteBuffer load();
  public final java.nio.MappedByteBuffer force();
  public java.nio.MappedByteBufferAdapter(java.nio.MemoryBlock, int, int, java.nio.channels.FileChannel$MapMode);
  public java.nio.CharBuffer asCharBuffer();
  public java.nio.DoubleBuffer asDoubleBuffer();
  public java.nio.FloatBuffer asFloatBuffer();
  public java.nio.IntBuffer asIntBuffer();
  public java.nio.LongBuffer asLongBuffer();
  public java.nio.ByteBuffer asReadOnlyBuffer();
  public java.nio.ShortBuffer asShortBuffer();
  public java.nio.ByteBuffer compact();
  public java.nio.ByteBuffer duplicate();
  public byte get();
  public byte get(int);
  public java.nio.ByteBuffer get(byte[], int, int);
  public char getChar();
  public char getChar(int);
  public double getDouble();
  public double getDouble(int);
  public float getFloat();
  public float getFloat(int);
  public int getInt();
  public int getInt(int);
  public long getLong();
  public long getLong(int);
  public short getShort();
  public short getShort(int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteBuffer put(byte);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer put(int, byte);
  public java.nio.ByteBuffer putChar(char);
  public java.nio.ByteBuffer putChar(int, char);
  public java.nio.ByteBuffer putDouble(double);
  public java.nio.ByteBuffer putDouble(int, double);
  public java.nio.ByteBuffer putFloat(float);
  public java.nio.ByteBuffer putFloat(int, float);
  public java.nio.ByteBuffer putInt(int, int);
  public java.nio.ByteBuffer putInt(int);
  public java.nio.ByteBuffer putLong(int, long);
  public java.nio.ByteBuffer putLong(long);
  public java.nio.ByteBuffer putShort(int, short);
  public java.nio.ByteBuffer putShort(short);
  public java.nio.ByteBuffer slice();
  public final void free();
  public void free();
  public byte[] array();
  public void free();
  public static java.nio.MemoryBlock allocate(int);
  public static java.nio.MemoryBlock wrapFromJni(int, long);
  public byte[] array();
  public void free();
  public final void pokeByte(int, byte);
  public final void pokeByteArray(int, byte[], int, int);
  public final void pokeCharArray(int, char[], int, int, boolean);
  public final void pokeDoubleArray(int, double[], int, int, boolean);
  public final void pokeFloatArray(int, float[], int, int, boolean);
  public final void pokeIntArray(int, int[], int, int, boolean);
  public final void pokeLongArray(int, long[], int, int, boolean);
  public final void pokeShortArray(int, short[], int, int, boolean);
  public final byte peekByte(int);
  public final void peekByteArray(int, byte[], int, int);
  public final void peekCharArray(int, char[], int, int, boolean);
  public final void peekDoubleArray(int, double[], int, int, boolean);
  public final void peekFloatArray(int, float[], int, int, boolean);
  public final void peekIntArray(int, int[], int, int, boolean);
  public final void peekLongArray(int, long[], int, int, boolean);
  public final void peekShortArray(int, short[], int, int, boolean);
  public final void pokeShort(int, short, java.nio.ByteOrder);
  public final short peekShort(int, java.nio.ByteOrder);
  public final void pokeInt(int, int, java.nio.ByteOrder);
  public final int peekInt(int, java.nio.ByteOrder);
  public final void pokeLong(int, long, java.nio.ByteOrder);
  public final long peekLong(int, java.nio.ByteOrder);
  public final int toInt();
  public final java.lang.String toString();
  public final long getSize();
public final class java.nio.NioUtils {
  public static int getDirectBufferAddress(java.nio.Buffer);
  public static void freeDirectBuffer(java.nio.ByteBuffer);
  public static java.io.FileDescriptor getFD(java.nio.channels.FileChannel);
  public static java.nio.channels.FileChannel newFileChannel(java.lang.Object, java.io.FileDescriptor, int);
  public static byte[] unsafeArray(java.nio.ByteBuffer);
  public static int unsafeArrayOffset(java.nio.ByteBuffer);
  public java.io.FileDescriptor getFD();
  public java.io.FileDescriptor getFD();
  public java.nio.channels.Pipe$SinkChannel sink();
  public java.nio.channels.Pipe$SourceChannel source();
public class java.nio.ReadOnlyBufferException extends java.lang.UnsupportedOperationException {
  public java.nio.ReadOnlyBufferException();
  public java.nio.CharBuffer asReadOnlyBuffer();
  public java.nio.CharBuffer compact();
  public java.nio.CharBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.CharBuffer put(char);
  public java.nio.CharBuffer put(int, char);
  public final java.nio.CharBuffer put(char[], int, int);
  public final java.nio.CharBuffer put(java.nio.CharBuffer);
  public java.nio.CharBuffer put(java.lang.String, int, int);
  public java.nio.CharBuffer slice();
  public java.nio.ByteBuffer asReadOnlyBuffer();
  public java.nio.ByteBuffer compact();
  public java.nio.ByteBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ByteBuffer put(byte);
  public java.nio.ByteBuffer put(int, byte);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer putDouble(double);
  public java.nio.ByteBuffer putDouble(int, double);
  public java.nio.ByteBuffer putFloat(float);
  public java.nio.ByteBuffer putFloat(int, float);
  public java.nio.ByteBuffer putInt(int);
  public java.nio.ByteBuffer putInt(int, int);
  public java.nio.ByteBuffer putLong(int, long);
  public java.nio.ByteBuffer putLong(long);
  public java.nio.ByteBuffer putShort(int, short);
  public java.nio.ByteBuffer putShort(short);
  public java.nio.ByteBuffer put(java.nio.ByteBuffer);
  public java.nio.ByteBuffer slice();
  public java.nio.DoubleBuffer asReadOnlyBuffer();
  public java.nio.DoubleBuffer compact();
  public java.nio.DoubleBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.DoubleBuffer put(double);
  public java.nio.DoubleBuffer put(int, double);
  public final java.nio.DoubleBuffer put(double[], int, int);
  public final java.nio.DoubleBuffer put(java.nio.DoubleBuffer);
  public java.nio.DoubleBuffer slice();
  public java.nio.FloatBuffer asReadOnlyBuffer();
  public java.nio.FloatBuffer compact();
  public java.nio.FloatBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.FloatBuffer put(float);
  public java.nio.FloatBuffer put(int, float);
  public java.nio.FloatBuffer put(java.nio.FloatBuffer);
  public final java.nio.FloatBuffer put(float[], int, int);
  public java.nio.FloatBuffer slice();
  public java.nio.ByteBuffer asReadOnlyBuffer();
  public java.nio.ByteBuffer compact();
  public java.nio.ByteBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ByteBuffer put(byte);
  public java.nio.ByteBuffer put(int, byte);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer putDouble(double);
  public java.nio.ByteBuffer putDouble(int, double);
  public java.nio.ByteBuffer putFloat(float);
  public java.nio.ByteBuffer putFloat(int, float);
  public java.nio.ByteBuffer putInt(int);
  public java.nio.ByteBuffer putInt(int, int);
  public java.nio.ByteBuffer putLong(int, long);
  public java.nio.ByteBuffer putLong(long);
  public java.nio.ByteBuffer putShort(int, short);
  public java.nio.ByteBuffer putShort(short);
  public java.nio.ByteBuffer put(java.nio.ByteBuffer);
  public java.nio.ByteBuffer slice();
  public java.nio.IntBuffer asReadOnlyBuffer();
  public java.nio.IntBuffer compact();
  public java.nio.IntBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.IntBuffer put(int);
  public java.nio.IntBuffer put(int, int);
  public java.nio.IntBuffer put(java.nio.IntBuffer);
  public final java.nio.IntBuffer put(int[], int, int);
  public java.nio.IntBuffer slice();
  public java.nio.LongBuffer asReadOnlyBuffer();
  public java.nio.LongBuffer compact();
  public java.nio.LongBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.LongBuffer put(long);
  public java.nio.LongBuffer put(int, long);
  public java.nio.LongBuffer put(java.nio.LongBuffer);
  public final java.nio.LongBuffer put(long[], int, int);
  public java.nio.LongBuffer slice();
  public java.nio.ShortBuffer asReadOnlyBuffer();
  public java.nio.ShortBuffer compact();
  public java.nio.ShortBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ShortBuffer put(java.nio.ShortBuffer);
  public java.nio.ShortBuffer put(short);
  public java.nio.ShortBuffer put(int, short);
  public final java.nio.ShortBuffer put(short[], int, int);
  public java.nio.ShortBuffer slice();
  public java.nio.CharBuffer asReadOnlyBuffer();
  public java.nio.CharBuffer compact();
  public java.nio.CharBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.CharBuffer put(char);
  public java.nio.CharBuffer put(int, char);
  public java.nio.CharBuffer put(char[], int, int);
  public java.nio.CharBuffer slice();
  public java.nio.ByteBuffer asReadOnlyBuffer();
  public java.nio.ByteBuffer compact();
  public java.nio.ByteBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ByteBuffer put(byte);
  public java.nio.ByteBuffer put(int, byte);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer putChar(char);
  public java.nio.ByteBuffer putChar(int, char);
  public java.nio.ByteBuffer putDouble(double);
  public java.nio.ByteBuffer putDouble(int, double);
  public java.nio.ByteBuffer putFloat(float);
  public java.nio.ByteBuffer putFloat(int, float);
  public java.nio.ByteBuffer putInt(int);
  public java.nio.ByteBuffer putInt(int, int);
  public java.nio.ByteBuffer putLong(long);
  public java.nio.ByteBuffer putLong(int, long);
  public java.nio.ByteBuffer putShort(short);
  public java.nio.ByteBuffer putShort(int, short);
  public java.nio.ByteBuffer slice();
  public java.nio.DoubleBuffer asReadOnlyBuffer();
  public java.nio.DoubleBuffer compact();
  public java.nio.DoubleBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.DoubleBuffer put(double);
  public java.nio.DoubleBuffer put(int, double);
  public java.nio.DoubleBuffer put(double[], int, int);
  public java.nio.DoubleBuffer slice();
  public java.nio.FloatBuffer asReadOnlyBuffer();
  public java.nio.FloatBuffer compact();
  public java.nio.FloatBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.FloatBuffer put(float);
  public java.nio.FloatBuffer put(int, float);
  public java.nio.FloatBuffer put(float[], int, int);
  public java.nio.FloatBuffer slice();
  public java.nio.ByteBuffer asReadOnlyBuffer();
  public java.nio.ByteBuffer compact();
  public java.nio.ByteBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ByteBuffer put(byte);
  public java.nio.ByteBuffer put(int, byte);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer putChar(int, char);
  public java.nio.ByteBuffer putChar(char);
  public java.nio.ByteBuffer putDouble(double);
  public java.nio.ByteBuffer putDouble(int, double);
  public java.nio.ByteBuffer putFloat(float);
  public java.nio.ByteBuffer putFloat(int, float);
  public java.nio.ByteBuffer putInt(int);
  public java.nio.ByteBuffer putInt(int, int);
  public java.nio.ByteBuffer putLong(int, long);
  public java.nio.ByteBuffer putLong(long);
  public java.nio.ByteBuffer putShort(int, short);
  public java.nio.ByteBuffer putShort(short);
  public java.nio.ByteBuffer slice();
  public java.nio.IntBuffer asReadOnlyBuffer();
  public java.nio.IntBuffer compact();
  public java.nio.IntBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.IntBuffer put(int);
  public java.nio.IntBuffer put(int, int);
  public java.nio.IntBuffer put(int[], int, int);
  public java.nio.IntBuffer slice();
  public java.nio.LongBuffer asReadOnlyBuffer();
  public java.nio.LongBuffer compact();
  public java.nio.LongBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.LongBuffer put(long);
  public java.nio.LongBuffer put(int, long);
  public java.nio.LongBuffer put(long[], int, int);
  public java.nio.LongBuffer slice();
  public java.nio.ShortBuffer asReadOnlyBuffer();
  public java.nio.ShortBuffer compact();
  public java.nio.ShortBuffer duplicate();
  public boolean isReadOnly();
  public java.nio.ShortBuffer put(short);
  public java.nio.ShortBuffer put(int, short);
  public java.nio.ShortBuffer put(short[], int, int);
  public java.nio.ShortBuffer slice();
  public java.nio.SelectionKeyImpl(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object, java.nio.SelectorImpl);
  public java.nio.channels.SelectableChannel channel();
  public int interestOps();
  public java.nio.channels.SelectionKey interestOps(int);
  public int readyOps();
  public java.nio.channels.Selector selector();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public int size();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public synchronized java.util.Set<java.nio.channels.SelectionKey> keys();
  public synchronized java.util.Set<java.nio.channels.SelectionKey> selectedKeys();
  public java.nio.channels.Selector wakeup();
public final class java.nio.SelectorProviderImpl extends java.nio.channels.spi.SelectorProvider {
  public java.nio.SelectorProviderImpl();
  public java.nio.channels.ServerSocketChannel getChannel();
  public boolean isBound();
  public java.net.ServerSocket socket();
  public java.io.FileDescriptor getFD();
  public final short get();
  public final short get(int);
  public final java.nio.ShortBuffer get(short[], int, int);
  public final boolean isDirect();
  public final java.nio.ByteOrder order();
public abstract class java.nio.ShortBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.ShortBuffer> {
  public static java.nio.ShortBuffer allocate(int);
  public static java.nio.ShortBuffer wrap(short[]);
  public static java.nio.ShortBuffer wrap(short[], int, int);
  public final short[] array();
  public final int arrayOffset();
  public abstract java.nio.ShortBuffer asReadOnlyBuffer();
  public abstract java.nio.ShortBuffer compact();
  public int compareTo(java.nio.ShortBuffer);
  public abstract java.nio.ShortBuffer duplicate();
  public boolean equals(java.lang.Object);
  public abstract short get();
  public java.nio.ShortBuffer get(short[]);
  public java.nio.ShortBuffer get(short[], int, int);
  public abstract short get(int);
  public final boolean hasArray();
  public int hashCode();
  public abstract boolean isDirect();
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.ShortBuffer put(short);
  public final java.nio.ShortBuffer put(short[]);
  public java.nio.ShortBuffer put(short[], int, int);
  public java.nio.ShortBuffer put(java.nio.ShortBuffer);
  public abstract java.nio.ShortBuffer put(int, short);
  public abstract java.nio.ShortBuffer slice();
  public java.lang.Object array();
  public int compareTo(java.lang.Object);
  public java.nio.ShortBuffer asReadOnlyBuffer();
  public java.nio.ShortBuffer compact();
  public java.nio.ShortBuffer duplicate();
  public short get();
  public short get(int);
  public java.nio.ShortBuffer get(short[], int, int);
  public boolean isDirect();
  public boolean isReadOnly();
  public java.nio.ByteOrder order();
  public java.nio.ShortBuffer put(short);
  public java.nio.ShortBuffer put(int, short);
  public java.nio.ShortBuffer put(short[], int, int);
  public java.nio.ShortBuffer slice();
  public java.nio.channels.SocketChannel getChannel();
  public boolean isBound();
  public boolean isConnected();
  public java.net.InetAddress getLocalAddress();
  public java.io.FileDescriptor getFileDescriptor$();
  public java.nio.SocketChannelImpl$SocketChannelInputStream(java.nio.channels.SocketChannel);
  public java.nio.SocketChannelImpl$SocketChannelOutputStream(java.nio.channels.SocketChannel);
  public synchronized java.net.Socket socket();
  public synchronized boolean isConnected();
  public synchronized boolean isConnectionPending();
  public java.io.FileDescriptor getFD();
public class java.nio.channels.AlreadyConnectedException extends java.lang.IllegalStateException {
  public java.nio.channels.AlreadyConnectedException();
public class java.nio.channels.AsynchronousCloseException extends java.nio.channels.ClosedChannelException {
  public java.nio.channels.AsynchronousCloseException();
public interface java.nio.channels.ByteChannel extends java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel {
public class java.nio.channels.CancelledKeyException extends java.lang.IllegalStateException {
  public java.nio.channels.CancelledKeyException();
public interface java.nio.channels.Channel extends java.io.Closeable {
  public abstract boolean isOpen();
public final class java.nio.channels.Channels {
  public static java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel);
  public static java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel);
  public static java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream);
  public static java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream);
  public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int);
  public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.lang.String);
  public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int);
  public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.lang.String);
public class java.nio.channels.ClosedByInterruptException extends java.nio.channels.AsynchronousCloseException {
  public java.nio.channels.ClosedByInterruptException();
public class java.nio.channels.ClosedChannelException extends java.io.IOException {
  public java.nio.channels.ClosedChannelException();
public class java.nio.channels.ClosedSelectorException extends java.lang.IllegalStateException {
  public java.nio.channels.ClosedSelectorException();
public class java.nio.channels.ConnectionPendingException extends java.lang.IllegalStateException {
  public java.nio.channels.ConnectionPendingException();
public abstract class java.nio.channels.DatagramChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel,java.nio.channels.ScatteringByteChannel,java.nio.channels.GatheringByteChannel {
  public final int validOps();
  public abstract java.net.DatagramSocket socket();
  public abstract boolean isConnected();
public class java.nio.channels.FileChannel$MapMode {
  public java.lang.String toString();
public abstract class java.nio.channels.FileChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.GatheringByteChannel,java.nio.channels.ScatteringByteChannel,java.nio.channels.ByteChannel {
public abstract class java.nio.channels.FileLock {
  public final java.nio.channels.FileChannel channel();
  public final long position();
  public final long size();
  public final boolean isShared();
  public final boolean overlaps(long, long);
  public abstract boolean isValid();
  public final java.lang.String toString();
public interface java.nio.channels.GatheringByteChannel extends java.nio.channels.WritableByteChannel {
public class java.nio.channels.IllegalBlockingModeException extends java.lang.IllegalStateException {
  public java.nio.channels.IllegalBlockingModeException();
public class java.nio.channels.IllegalSelectorException extends java.lang.IllegalArgumentException {
  public java.nio.channels.IllegalSelectorException();
public interface java.nio.channels.InterruptibleChannel extends java.nio.channels.Channel {
public class java.nio.channels.NoConnectionPendingException extends java.lang.IllegalStateException {
  public java.nio.channels.NoConnectionPendingException();
public class java.nio.channels.NonReadableChannelException extends java.lang.IllegalStateException {
  public java.nio.channels.NonReadableChannelException();
public class java.nio.channels.NonWritableChannelException extends java.lang.IllegalStateException {
  public java.nio.channels.NonWritableChannelException();
public class java.nio.channels.NotYetBoundException extends java.lang.IllegalStateException {
  public java.nio.channels.NotYetBoundException();
public class java.nio.channels.NotYetConnectedException extends java.lang.IllegalStateException {
  public java.nio.channels.NotYetConnectedException();
public class java.nio.channels.OverlappingFileLockException extends java.lang.IllegalStateException {
  public java.nio.channels.OverlappingFileLockException();
public abstract class java.nio.channels.Pipe$SinkChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.WritableByteChannel,java.nio.channels.GatheringByteChannel {
  public final int validOps();
public abstract class java.nio.channels.Pipe$SourceChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ReadableByteChannel,java.nio.channels.ScatteringByteChannel {
  public final int validOps();
public abstract class java.nio.channels.Pipe {
  public abstract java.nio.channels.Pipe$SinkChannel sink();
  public abstract java.nio.channels.Pipe$SourceChannel source();
public interface java.nio.channels.ReadableByteChannel extends java.nio.channels.Channel {
public interface java.nio.channels.ScatteringByteChannel extends java.nio.channels.ReadableByteChannel {
public abstract class java.nio.channels.SelectableChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.Channel {
  public abstract java.lang.Object blockingLock();
  public abstract boolean isBlocking();
  public abstract boolean isRegistered();
  public abstract java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector);
  public abstract java.nio.channels.spi.SelectorProvider provider();
  public abstract int validOps();
public abstract class java.nio.channels.SelectionKey {
  public final java.lang.Object attach(java.lang.Object);
  public final java.lang.Object attachment();
  public abstract void cancel();
  public abstract java.nio.channels.SelectableChannel channel();
  public abstract int interestOps();
  public abstract java.nio.channels.SelectionKey interestOps(int);
  public final boolean isAcceptable();
  public final boolean isConnectable();
  public final boolean isReadable();
  public abstract boolean isValid();
  public final boolean isWritable();
  public abstract int readyOps();
  public abstract java.nio.channels.Selector selector();
public abstract class java.nio.channels.Selector {
  public abstract boolean isOpen();
  public abstract java.util.Set<java.nio.channels.SelectionKey> keys();
  public abstract java.nio.channels.spi.SelectorProvider provider();
  public abstract java.util.Set<java.nio.channels.SelectionKey> selectedKeys();
  public abstract java.nio.channels.Selector wakeup();
public abstract class java.nio.channels.ServerSocketChannel extends java.nio.channels.spi.AbstractSelectableChannel {
  public final int validOps();
  public abstract java.net.ServerSocket socket();
public abstract class java.nio.channels.SocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel,java.nio.channels.ScatteringByteChannel,java.nio.channels.GatheringByteChannel {
  public final int validOps();
  public abstract java.net.Socket socket();
  public abstract boolean isConnected();
  public abstract boolean isConnectionPending();
public class java.nio.channels.UnresolvedAddressException extends java.lang.IllegalArgumentException {
  public java.nio.channels.UnresolvedAddressException();
public class java.nio.channels.UnsupportedAddressTypeException extends java.lang.IllegalArgumentException {
  public java.nio.channels.UnsupportedAddressTypeException();
public interface java.nio.channels.WritableByteChannel extends java.nio.channels.Channel {
  public void run();
public abstract class java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.Channel,java.nio.channels.InterruptibleChannel {
  public final synchronized boolean isOpen();
public abstract class java.nio.channels.spi.AbstractSelectableChannel extends java.nio.channels.SelectableChannel {
  public final java.nio.channels.spi.SelectorProvider provider();
  public final synchronized boolean isRegistered();
  public final synchronized java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector);
  public final boolean isBlocking();
  public final java.lang.Object blockingLock();
public abstract class java.nio.channels.spi.AbstractSelectionKey extends java.nio.channels.SelectionKey {
  public final boolean isValid();
  public final void cancel();
  public void run();
public abstract class java.nio.channels.spi.AbstractSelector extends java.nio.channels.Selector {
  public final boolean isOpen();
  public final java.nio.channels.spi.SelectorProvider provider();
public abstract class java.nio.channels.spi.SelectorProvider {
  public static synchronized java.nio.channels.spi.SelectorProvider provider();
public class java.nio.charset.CharacterCodingException extends java.io.IOException {
  public java.nio.charset.CharacterCodingException();
public abstract class java.nio.charset.Charset implements java.lang.Comparable<java.nio.charset.Charset> {
  public static java.util.SortedMap<java.lang.String, java.nio.charset.Charset> availableCharsets();
  public static java.nio.charset.Charset forName(java.lang.String);
  public static boolean isSupported(java.lang.String);
  public abstract boolean contains(java.nio.charset.Charset);
  public abstract java.nio.charset.CharsetEncoder newEncoder();
  public abstract java.nio.charset.CharsetDecoder newDecoder();
  public final java.lang.String name();
  public final java.util.Set<java.lang.String> aliases();
  public java.lang.String displayName();
  public java.lang.String displayName(java.util.Locale);
  public final boolean isRegistered();
  public boolean canEncode();
  public final java.nio.ByteBuffer encode(java.nio.CharBuffer);
  public final java.nio.ByteBuffer encode(java.lang.String);
  public final java.nio.CharBuffer decode(java.nio.ByteBuffer);
  public final int compareTo(java.nio.charset.Charset);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
  public static java.nio.charset.Charset defaultCharset();
  public int compareTo(java.lang.Object);
public abstract class java.nio.charset.CharsetDecoder {
  public final float averageCharsPerByte();
  public final java.nio.charset.Charset charset();
  public final java.nio.charset.CoderResult decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean);
  public java.nio.charset.Charset detectedCharset();
  public final java.nio.charset.CoderResult flush(java.nio.CharBuffer);
  public boolean isAutoDetecting();
  public boolean isCharsetDetected();
  public java.nio.charset.CodingErrorAction malformedInputAction();
  public final float maxCharsPerByte();
  public final java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction);
  public final java.lang.String replacement();
  public final java.nio.charset.CharsetDecoder replaceWith(java.lang.String);
  public final java.nio.charset.CharsetDecoder reset();
  public java.nio.charset.CodingErrorAction unmappableCharacterAction();
public abstract class java.nio.charset.CharsetEncoder {
  public final float averageBytesPerChar();
  public boolean canEncode(char);
  public boolean canEncode(java.lang.CharSequence);
  public final java.nio.charset.Charset charset();
  public final java.nio.charset.CoderResult encode(java.nio.CharBuffer, java.nio.ByteBuffer, boolean);
  public final java.nio.charset.CoderResult flush(java.nio.ByteBuffer);
  public boolean isLegalReplacement(byte[]);
  public java.nio.charset.CodingErrorAction malformedInputAction();
  public final float maxBytesPerChar();
  public final java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction);
  public final byte[] replacement();
  public final java.nio.charset.CharsetEncoder replaceWith(byte[]);
  public final java.nio.charset.CharsetEncoder reset();
  public java.nio.charset.CodingErrorAction unmappableCharacterAction();
public class java.nio.charset.Charsets {
  public static native byte[] toAsciiBytes(char[], int, int);
  public static native byte[] toIsoLatin1Bytes(char[], int, int);
  public static native byte[] toUtf8Bytes(char[], int, int);
  public static byte[] toBigEndianUtf16Bytes(char[], int, int);
  public static native void asciiBytesToChars(byte[], int, int, char[]);
  public static native void isoLatin1BytesToChars(byte[], int, int, char[]);
public class java.nio.charset.CoderMalfunctionError extends java.lang.Error {
  public java.nio.charset.CoderMalfunctionError(java.lang.Exception);
public class java.nio.charset.CoderResult {
  public boolean isUnderflow();
  public boolean isError();
  public boolean isMalformed();
  public boolean isOverflow();
  public boolean isUnmappable();
  public java.lang.String toString();
public class java.nio.charset.CodingErrorAction {
  public java.lang.String toString();
public class java.nio.charset.IllegalCharsetNameException extends java.lang.IllegalArgumentException {
  public java.nio.charset.IllegalCharsetNameException(java.lang.String);
  public java.lang.String getCharsetName();
public class java.nio.charset.MalformedInputException extends java.nio.charset.CharacterCodingException {
  public java.nio.charset.MalformedInputException(int);
  public int getInputLength();
  public java.lang.String getMessage();
public class java.nio.charset.ModifiedUtf8 {
  public static void encode(byte[], int, java.lang.String);
public class java.nio.charset.UnmappableCharacterException extends java.nio.charset.CharacterCodingException {
  public java.nio.charset.UnmappableCharacterException(int);
  public int getInputLength();
  public java.lang.String getMessage();
public class java.nio.charset.UnsupportedCharsetException extends java.lang.IllegalArgumentException {
  public java.nio.charset.UnsupportedCharsetException(java.lang.String);
  public java.lang.String getCharsetName();
public abstract class java.nio.charset.spi.CharsetProvider {
  public abstract java.util.Iterator<java.nio.charset.Charset> charsets();
  public abstract java.nio.charset.Charset charsetForName(java.lang.String);
public final class java.security.AccessControlContext {
  public java.security.AccessControlContext(java.security.AccessControlContext, java.security.DomainCombiner);
  public java.security.AccessControlContext(java.security.ProtectionDomain[]);
  public java.security.DomainCombiner getDomainCombiner();
public class java.security.AccessControlException extends java.lang.SecurityException {
  public java.security.AccessControlException(java.lang.String);
  public java.security.AccessControlException(java.lang.String, java.security.Permission);
  public java.security.Permission getPermission();
public final class java.security.AccessController {
  public static <T extends java/lang/Object> T doPrivileged(java.security.PrivilegedAction<T>);
  public static <T extends java/lang/Object> T doPrivileged(java.security.PrivilegedAction<T>, java.security.AccessControlContext);
  public static <T extends java/lang/Object> T doPrivilegedWithCombiner(java.security.PrivilegedAction<T>);
  public static java.security.AccessControlContext getContext();
public class java.security.AlgorithmParameters {
  public final java.security.Provider getProvider();
  public final java.lang.String getAlgorithm();
  public final java.lang.String toString();
public abstract class java.security.AlgorithmParametersSpi {
  public java.security.AlgorithmParametersSpi();
public final class java.security.AllPermission extends java.security.Permission {
  public java.security.AllPermission(java.lang.String, java.lang.String);
  public java.security.AllPermission();
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
  public void add(java.security.Permission);
  public java.util.Enumeration<java.security.Permission> elements();
  public boolean implies(java.security.Permission);
public abstract class java.security.BasicPermission extends java.security.Permission implements java.io.Serializable {
  public java.security.BasicPermission(java.lang.String);
  public java.security.BasicPermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public final class java.security.CodeSigner implements java.io.Serializable {
  public java.security.CodeSigner(java.security.cert.CertPath, java.security.Timestamp);
  public boolean equals(java.lang.Object);
  public java.security.cert.CertPath getSignerCertPath();
  public java.security.Timestamp getTimestamp();
  public int hashCode();
  public java.lang.String toString();
public class java.security.DigestException extends java.security.GeneralSecurityException {
  public java.security.DigestException(java.lang.String);
  public java.security.DigestException();
  public java.security.DigestException(java.lang.String, java.lang.Throwable);
  public java.security.DigestException(java.lang.Throwable);
public class java.security.GeneralSecurityException extends java.lang.Exception {
  public java.security.GeneralSecurityException(java.lang.String);
  public java.security.GeneralSecurityException();
  public java.security.GeneralSecurityException(java.lang.String, java.lang.Throwable);
  public java.security.GeneralSecurityException(java.lang.Throwable);
public interface java.security.Guard {
public class java.security.InvalidAlgorithmParameterException extends java.security.GeneralSecurityException {
  public java.security.InvalidAlgorithmParameterException(java.lang.String);
  public java.security.InvalidAlgorithmParameterException();
  public java.security.InvalidAlgorithmParameterException(java.lang.String, java.lang.Throwable);
  public java.security.InvalidAlgorithmParameterException(java.lang.Throwable);
public class java.security.InvalidKeyException extends java.security.KeyException {
  public java.security.InvalidKeyException(java.lang.String);
  public java.security.InvalidKeyException();
  public java.security.InvalidKeyException(java.lang.String, java.lang.Throwable);
  public java.security.InvalidKeyException(java.lang.Throwable);
public class java.security.InvalidParameterException extends java.lang.IllegalArgumentException {
  public java.security.InvalidParameterException(java.lang.String);
  public java.security.InvalidParameterException();
public interface java.security.Key extends java.io.Serializable {
  public abstract java.lang.String getAlgorithm();
  public abstract java.lang.String getFormat();
  public abstract byte[] getEncoded();
public class java.security.KeyException extends java.security.GeneralSecurityException {
  public java.security.KeyException(java.lang.String);
  public java.security.KeyException();
  public java.security.KeyException(java.lang.String, java.lang.Throwable);
  public java.security.KeyException(java.lang.Throwable);
public class java.security.KeyFactory {
  public final java.security.Provider getProvider();
  public final java.lang.String getAlgorithm();
public abstract class java.security.KeyFactorySpi {
  public java.security.KeyFactorySpi();
public class java.security.KeyManagementException extends java.security.KeyException {
  public java.security.KeyManagementException(java.lang.String);
  public java.security.KeyManagementException();
  public java.security.KeyManagementException(java.lang.String, java.lang.Throwable);
  public java.security.KeyManagementException(java.lang.Throwable);
public final class java.security.KeyPair implements java.io.Serializable {
  public java.security.KeyPair(java.security.PublicKey, java.security.PrivateKey);
  public java.security.PrivateKey getPrivate();
  public java.security.PublicKey getPublic();
  public void initialize(int, java.security.SecureRandom);
  public java.security.KeyPair generateKeyPair();
public abstract class java.security.KeyPairGenerator extends java.security.KeyPairGeneratorSpi {
  public java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public void initialize(int);
  public final java.security.KeyPair genKeyPair();
  public java.security.KeyPair generateKeyPair();
  public void initialize(int, java.security.SecureRandom);
public abstract class java.security.KeyPairGeneratorSpi {
  public java.security.KeyPairGeneratorSpi();
  public abstract java.security.KeyPair generateKeyPair();
  public abstract void initialize(int, java.security.SecureRandom);
  public java.security.KeyStore$Builder$TmpLSParameter(java.security.KeyStore$ProtectionParameter);
  public java.security.KeyStore$ProtectionParameter getProtectionParameter();
public abstract class java.security.KeyStore$Builder {
  public static java.security.KeyStore$Builder newInstance(java.security.KeyStore, java.security.KeyStore$ProtectionParameter);
  public static java.security.KeyStore$Builder newInstance(java.lang.String, java.security.Provider, java.io.File, java.security.KeyStore$ProtectionParameter);
  public static java.security.KeyStore$Builder newInstance(java.lang.String, java.security.Provider, java.security.KeyStore$ProtectionParameter);
public class java.security.KeyStore$CallbackHandlerProtection implements java.security.KeyStore$ProtectionParameter {
  public java.security.KeyStore$CallbackHandlerProtection(javax.security.auth.callback.CallbackHandler);
  public javax.security.auth.callback.CallbackHandler getCallbackHandler();
public interface java.security.KeyStore$Entry {
public interface java.security.KeyStore$LoadStoreParameter {
  public abstract java.security.KeyStore$ProtectionParameter getProtectionParameter();
public class java.security.KeyStore$PasswordProtection implements java.security.KeyStore$ProtectionParameter,javax.security.auth.Destroyable {
  public java.security.KeyStore$PasswordProtection(char[]);
  public synchronized char[] getPassword();
  public synchronized boolean isDestroyed();
public final class java.security.KeyStore$PrivateKeyEntry implements java.security.KeyStore$Entry {
  public java.security.KeyStore$PrivateKeyEntry(java.security.PrivateKey, java.security.cert.Certificate[]);
  public java.security.PrivateKey getPrivateKey();
  public java.security.cert.Certificate[] getCertificateChain();
  public java.security.cert.Certificate getCertificate();
  public java.lang.String toString();
public interface java.security.KeyStore$ProtectionParameter {
public final class java.security.KeyStore$SecretKeyEntry implements java.security.KeyStore$Entry {
  public java.security.KeyStore$SecretKeyEntry(javax.crypto.SecretKey);
  public javax.crypto.SecretKey getSecretKey();
  public java.lang.String toString();
public final class java.security.KeyStore$TrustedCertificateEntry implements java.security.KeyStore$Entry {
  public java.security.KeyStore$TrustedCertificateEntry(java.security.cert.Certificate);
  public java.security.cert.Certificate getTrustedCertificate();
  public java.lang.String toString();
public class java.security.KeyStore {
  public static final java.lang.String getDefaultType();
  public final java.security.Provider getProvider();
  public final java.lang.String getType();
public class java.security.KeyStoreException extends java.security.GeneralSecurityException {
  public java.security.KeyStoreException(java.lang.String);
  public java.security.KeyStoreException();
  public java.security.KeyStoreException(java.lang.String, java.lang.Throwable);
  public java.security.KeyStoreException(java.lang.Throwable);
public abstract class java.security.KeyStoreSpi {
  public java.security.KeyStoreSpi();
  public abstract java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String);
  public abstract java.security.cert.Certificate engineGetCertificate(java.lang.String);
  public abstract java.util.Date engineGetCreationDate(java.lang.String);
  public abstract java.util.Enumeration<java.lang.String> engineAliases();
  public abstract boolean engineContainsAlias(java.lang.String);
  public abstract int engineSize();
  public abstract boolean engineIsKeyEntry(java.lang.String);
  public abstract boolean engineIsCertificateEntry(java.lang.String);
  public abstract java.lang.String engineGetCertificateAlias(java.security.cert.Certificate);
  public boolean engineEntryInstanceOf(java.lang.String, java.lang.Class<? extends java.security.KeyStore$Entry>);
public abstract class java.security.MessageDigest extends java.security.MessageDigestSpi {
  public void reset();
  public void update(byte);
  public void update(byte[], int, int);
  public void update(byte[]);
  public byte[] digest();
  public byte[] digest(byte[]);
  public java.lang.String toString();
  public static boolean isEqual(byte[], byte[]);
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final int getDigestLength();
  public final void update(java.nio.ByteBuffer);
public abstract class java.security.MessageDigestSpi {
  public java.security.MessageDigestSpi();
public class java.security.NoSuchAlgorithmException extends java.security.GeneralSecurityException {
  public java.security.NoSuchAlgorithmException(java.lang.String);
  public java.security.NoSuchAlgorithmException();
  public java.security.NoSuchAlgorithmException(java.lang.String, java.lang.Throwable);
  public java.security.NoSuchAlgorithmException(java.lang.Throwable);
public class java.security.NoSuchProviderException extends java.security.GeneralSecurityException {
  public java.security.NoSuchProviderException(java.lang.String);
  public java.security.NoSuchProviderException();
public abstract class java.security.Permission implements java.security.Guard,java.io.Serializable {
  public java.security.Permission(java.lang.String);
  public final java.lang.String getName();
  public java.security.PermissionCollection newPermissionCollection();
  public abstract java.lang.String getActions();
  public abstract boolean implies(java.security.Permission);
public abstract class java.security.PermissionCollection implements java.io.Serializable {
  public java.security.PermissionCollection();
  public abstract void add(java.security.Permission);
  public abstract java.util.Enumeration<java.security.Permission> elements();
  public abstract boolean implies(java.security.Permission);
  public boolean isReadOnly();
  public void setReadOnly();
public interface java.security.Principal {
  public abstract boolean equals(java.lang.Object);
  public abstract java.lang.String getName();
  public abstract int hashCode();
  public abstract java.lang.String toString();
public interface java.security.PrivateKey extends java.security.Key {
public interface java.security.PrivilegedAction<T> {
  public abstract T run();
public class java.security.PrivilegedActionException extends java.lang.Exception {
  public java.security.PrivilegedActionException(java.lang.Exception);
  public java.lang.Exception getException();
public interface java.security.PrivilegedExceptionAction<T> {
public class java.security.Provider$Service {
  public java.security.Provider$Service(java.security.Provider, java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.util.Map<java.lang.String, java.lang.String>);
  public final java.lang.String getType();
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final java.lang.String getClassName();
  public final java.lang.String getAttribute(java.lang.String);
  public boolean supportsParameter(java.lang.Object);
  public java.lang.String toString();
public abstract class java.security.Provider extends java.util.Properties {
  public java.lang.String getName();
  public double getVersion();
  public java.lang.String getInfo();
  public java.lang.String toString();
  public synchronized void clear();
  public synchronized void putAll(java.util.Map<?, ?>);
  public synchronized java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();
  public java.util.Set<java.lang.Object> keySet();
  public java.util.Collection<java.lang.Object> values();
  public synchronized java.lang.Object put(java.lang.Object, java.lang.Object);
  public synchronized java.lang.Object remove(java.lang.Object);
  public synchronized java.security.Provider$Service getService(java.lang.String, java.lang.String);
  public synchronized java.util.Set<java.security.Provider$Service> getServices();
public class java.security.ProviderException extends java.lang.RuntimeException {
  public java.security.ProviderException(java.lang.String);
  public java.security.ProviderException();
  public java.security.ProviderException(java.lang.String, java.lang.Throwable);
  public java.security.ProviderException(java.lang.Throwable);
public interface java.security.PublicKey extends java.security.Key {
public class java.security.SecureRandom extends java.util.Random {
  public java.security.SecureRandom();
  public java.security.SecureRandom(byte[]);
  public final java.security.Provider getProvider();
  public java.lang.String getAlgorithm();
  public synchronized void setSeed(byte[]);
  public void setSeed(long);
  public synchronized void nextBytes(byte[]);
  public static byte[] getSeed(int);
  public byte[] generateSeed(int);
public abstract class java.security.SecureRandomSpi implements java.io.Serializable {
  public java.security.SecureRandomSpi();
  public void renumProviders();
  public java.util.List<java.lang.String> getAliases(java.security.Provider$Service);
  public java.security.Provider$Service getService(java.security.Provider, java.lang.String);
public final class java.security.Security {
  public static java.lang.String getAlgorithmProperty(java.lang.String, java.lang.String);
  public static synchronized int insertProviderAt(java.security.Provider, int);
  public static int addProvider(java.security.Provider);
  public static synchronized void removeProvider(java.lang.String);
  public static synchronized java.security.Provider[] getProviders();
  public static synchronized java.security.Provider getProvider(java.lang.String);
  public static java.security.Provider[] getProviders(java.lang.String);
  public static synchronized java.security.Provider[] getProviders(java.util.Map<java.lang.String, java.lang.String>);
  public static java.lang.String getProperty(java.lang.String);
  public static void setProperty(java.lang.String, java.lang.String);
  public static java.util.Set<java.lang.String> getAlgorithms(java.lang.String);
  public java.security.Signature$SignatureImpl(java.security.SignatureSpi, java.security.Provider, java.lang.String);
public abstract class java.security.Signature extends java.security.SignatureSpi {
  public final java.security.Provider getProvider();
  public final java.lang.String getAlgorithm();
  public java.lang.String toString();
  public final java.security.AlgorithmParameters getParameters();
public class java.security.SignatureException extends java.security.GeneralSecurityException {
  public java.security.SignatureException(java.lang.String);
  public java.security.SignatureException();
  public java.security.SignatureException(java.lang.String, java.lang.Throwable);
  public java.security.SignatureException(java.lang.Throwable);
public abstract class java.security.SignatureSpi {
  public java.security.SignatureSpi();
public final class java.security.Timestamp implements java.io.Serializable {
  public java.security.Timestamp(java.util.Date, java.security.cert.CertPath);
  public boolean equals(java.lang.Object);
  public java.security.cert.CertPath getSignerCertPath();
  public java.util.Date getTimestamp();
  public int hashCode();
  public java.lang.String toString();
public class java.security.UnrecoverableEntryException extends java.security.GeneralSecurityException {
  public java.security.UnrecoverableEntryException();
  public java.security.UnrecoverableEntryException(java.lang.String);
public class java.security.UnrecoverableKeyException extends java.security.UnrecoverableEntryException {
  public java.security.UnrecoverableKeyException(java.lang.String);
  public java.security.UnrecoverableKeyException();
public abstract class java.security.cert.CRL {
  public final java.lang.String getType();
  public abstract boolean isRevoked(java.security.cert.Certificate);
  public abstract java.lang.String toString();
public class java.security.cert.CRLException extends java.security.GeneralSecurityException {
  public java.security.cert.CRLException(java.lang.String);
  public java.security.cert.CRLException();
  public java.security.cert.CRLException(java.lang.String, java.lang.Throwable);
  public java.security.cert.CRLException(java.lang.Throwable);
public class java.security.cert.CertPath$CertPathRep implements java.io.Serializable {
public abstract class java.security.cert.CertPath implements java.io.Serializable {
  public java.lang.String getType();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public abstract java.util.List<? extends java.security.cert.Certificate> getCertificates();
  public abstract java.util.Iterator<java.lang.String> getEncodings();
public interface java.security.cert.CertSelector extends java.lang.Cloneable {
  public abstract java.lang.Object clone();
  public abstract boolean match(java.security.cert.Certificate);
public class java.security.cert.Certificate$CertificateRep implements java.io.Serializable {
public abstract class java.security.cert.Certificate implements java.io.Serializable {
  public final java.lang.String getType();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public abstract java.lang.String toString();
  public abstract java.security.PublicKey getPublicKey();
public class java.security.cert.CertificateEncodingException extends java.security.cert.CertificateException {
  public java.security.cert.CertificateEncodingException(java.lang.String);
  public java.security.cert.CertificateEncodingException();
  public java.security.cert.CertificateEncodingException(java.lang.String, java.lang.Throwable);
  public java.security.cert.CertificateEncodingException(java.lang.Throwable);
public class java.security.cert.CertificateException extends java.security.GeneralSecurityException {
  public java.security.cert.CertificateException(java.lang.String);
  public java.security.cert.CertificateException();
  public java.security.cert.CertificateException(java.lang.String, java.lang.Throwable);
  public java.security.cert.CertificateException(java.lang.Throwable);
public class java.security.cert.CertificateExpiredException extends java.security.cert.CertificateException {
  public java.security.cert.CertificateExpiredException(java.lang.String);
  public java.security.cert.CertificateExpiredException();
public class java.security.cert.CertificateFactory {
  public final java.security.Provider getProvider();
  public final java.lang.String getType();
  public final java.util.Iterator<java.lang.String> getCertPathEncodings();
public abstract class java.security.cert.CertificateFactorySpi {
  public java.security.cert.CertificateFactorySpi();
  public java.util.Iterator<java.lang.String> engineGetCertPathEncodings();
public class java.security.cert.CertificateNotYetValidException extends java.security.cert.CertificateException {
  public java.security.cert.CertificateNotYetValidException(java.lang.String);
  public java.security.cert.CertificateNotYetValidException();
public class java.security.cert.CertificateParsingException extends java.security.cert.CertificateException {
  public java.security.cert.CertificateParsingException(java.lang.String);
  public java.security.cert.CertificateParsingException();
  public java.security.cert.CertificateParsingException(java.lang.String, java.lang.Throwable);
  public java.security.cert.CertificateParsingException(java.lang.Throwable);
public abstract class java.security.cert.X509CRL extends java.security.cert.CRL implements java.security.cert.X509Extension {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public abstract int getVersion();
  public abstract java.security.Principal getIssuerDN();
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  public abstract java.util.Date getThisUpdate();
  public abstract java.util.Date getNextUpdate();
  public abstract java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger);
  public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate);
  public abstract java.util.Set<? extends java.security.cert.X509CRLEntry> getRevokedCertificates();
  public abstract byte[] getSignature();
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract byte[] getSigAlgParams();
public abstract class java.security.cert.X509Certificate extends java.security.cert.Certificate implements java.security.cert.X509Extension {
  public abstract int getVersion();
  public abstract java.math.BigInteger getSerialNumber();
  public abstract java.security.Principal getIssuerDN();
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  public abstract java.security.Principal getSubjectDN();
  public javax.security.auth.x500.X500Principal getSubjectX500Principal();
  public abstract java.util.Date getNotBefore();
  public abstract java.util.Date getNotAfter();
  public abstract byte[] getSignature();
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract byte[] getSigAlgParams();
  public abstract boolean[] getIssuerUniqueID();
  public abstract boolean[] getSubjectUniqueID();
  public abstract boolean[] getKeyUsage();
  public abstract int getBasicConstraints();
public interface java.security.cert.X509Extension {
  public abstract java.util.Set<java.lang.String> getCriticalExtensionOIDs();
  public abstract byte[] getExtensionValue(java.lang.String);
  public abstract java.util.Set<java.lang.String> getNonCriticalExtensionOIDs();
  public abstract boolean hasUnsupportedCriticalExtension();
public interface java.security.interfaces.DSAKey {
  public abstract java.security.interfaces.DSAParams getParams();
public interface java.security.interfaces.DSAParams {
  public abstract java.math.BigInteger getG();
  public abstract java.math.BigInteger getP();
  public abstract java.math.BigInteger getQ();
public interface java.security.interfaces.DSAPrivateKey extends java.security.interfaces.DSAKey,java.security.PrivateKey {
  public abstract java.math.BigInteger getX();
public interface java.security.interfaces.DSAPublicKey extends java.security.interfaces.DSAKey,java.security.PublicKey {
  public abstract java.math.BigInteger getY();
public interface java.security.interfaces.ECKey {
  public abstract java.security.spec.ECParameterSpec getParams();
public interface java.security.interfaces.ECPrivateKey extends java.security.PrivateKey,java.security.interfaces.ECKey {
  public abstract java.math.BigInteger getS();
public interface java.security.interfaces.RSAKey {
  public abstract java.math.BigInteger getModulus();
public interface java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey {
  public abstract java.math.BigInteger getCrtCoefficient();
  public abstract java.math.BigInteger getPrimeP();
  public abstract java.math.BigInteger getPrimeQ();
  public abstract java.math.BigInteger getPrimeExponentP();
  public abstract java.math.BigInteger getPrimeExponentQ();
  public abstract java.math.BigInteger getPublicExponent();
public interface java.security.interfaces.RSAPrivateKey extends java.security.PrivateKey,java.security.interfaces.RSAKey {
  public abstract java.math.BigInteger getPrivateExponent();
public interface java.security.interfaces.RSAPublicKey extends java.security.PublicKey,java.security.interfaces.RSAKey {
  public abstract java.math.BigInteger getPublicExponent();
public interface java.security.spec.AlgorithmParameterSpec {
public class java.security.spec.DSAPrivateKeySpec implements java.security.spec.KeySpec {
  public java.security.spec.DSAPrivateKeySpec(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getQ();
  public java.math.BigInteger getX();
public class java.security.spec.DSAPublicKeySpec implements java.security.spec.KeySpec {
  public java.security.spec.DSAPublicKeySpec(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getQ();
  public java.math.BigInteger getY();
public abstract class java.security.spec.EncodedKeySpec implements java.security.spec.KeySpec {
  public java.security.spec.EncodedKeySpec(byte[]);
  public byte[] getEncoded();
  public abstract java.lang.String getFormat();
public class java.security.spec.InvalidKeySpecException extends java.security.GeneralSecurityException {
  public java.security.spec.InvalidKeySpecException(java.lang.String);
  public java.security.spec.InvalidKeySpecException();
  public java.security.spec.InvalidKeySpecException(java.lang.String, java.lang.Throwable);
  public java.security.spec.InvalidKeySpecException(java.lang.Throwable);
public class java.security.spec.InvalidParameterSpecException extends java.security.GeneralSecurityException {
  public java.security.spec.InvalidParameterSpecException(java.lang.String);
  public java.security.spec.InvalidParameterSpecException();
public interface java.security.spec.KeySpec {
public class java.security.spec.MGF1ParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public java.security.spec.MGF1ParameterSpec(java.lang.String);
  public java.lang.String getDigestAlgorithm();
public class java.security.spec.PKCS8EncodedKeySpec extends java.security.spec.EncodedKeySpec {
  public java.security.spec.PKCS8EncodedKeySpec(byte[]);
  public byte[] getEncoded();
  public final java.lang.String getFormat();
public class java.security.spec.PSSParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public java.security.spec.PSSParameterSpec(int);
  public java.security.spec.PSSParameterSpec(java.lang.String, java.lang.String, java.security.spec.AlgorithmParameterSpec, int, int);
  public int getSaltLength();
  public java.lang.String getDigestAlgorithm();
  public java.lang.String getMGFAlgorithm();
  public java.security.spec.AlgorithmParameterSpec getMGFParameters();
  public int getTrailerField();
public class java.security.spec.RSAPrivateCrtKeySpec extends java.security.spec.RSAPrivateKeySpec {
  public java.security.spec.RSAPrivateCrtKeySpec(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getCrtCoefficient();
  public java.math.BigInteger getPrimeExponentP();
  public java.math.BigInteger getPrimeExponentQ();
  public java.math.BigInteger getPrimeP();
  public java.math.BigInteger getPrimeQ();
  public java.math.BigInteger getPublicExponent();
public class java.security.spec.RSAPrivateKeySpec implements java.security.spec.KeySpec {
  public java.security.spec.RSAPrivateKeySpec(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getModulus();
  public java.math.BigInteger getPrivateExponent();
public class java.security.spec.RSAPublicKeySpec implements java.security.spec.KeySpec {
  public java.security.spec.RSAPublicKeySpec(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getModulus();
  public java.math.BigInteger getPublicExponent();
public class java.security.spec.X509EncodedKeySpec extends java.security.spec.EncodedKeySpec {
  public java.security.spec.X509EncodedKeySpec(byte[]);
  public byte[] getEncoded();
  public final java.lang.String getFormat();
public class java.sql.Date extends java.util.Date {
  public java.sql.Date(int, int, int);
  public java.sql.Date(long);
  public int getHours();
  public int getMinutes();
  public int getSeconds();
  public void setHours(int);
  public void setMinutes(int);
  public void setSeconds(int);
  public void setTime(long);
  public java.lang.String toString();
  public static java.sql.Date valueOf(java.lang.String);
public class java.sql.Time extends java.util.Date {
  public java.sql.Time(int, int, int);
  public java.sql.Time(long);
  public int getDate();
  public int getDay();
  public int getMonth();
  public int getYear();
  public void setDate(int);
  public void setMonth(int);
  public void setYear(int);
  public void setTime(long);
  public java.lang.String toString();
  public static java.sql.Time valueOf(java.lang.String);
public class java.sql.Timestamp extends java.util.Date {
  public java.sql.Timestamp(long);
  public boolean after(java.sql.Timestamp);
  public boolean before(java.sql.Timestamp);
  public int compareTo(java.sql.Timestamp);
  public boolean equals(java.lang.Object);
  public boolean equals(java.sql.Timestamp);
  public int getNanos();
  public long getTime();
  public void setTime(long);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public class java.text.Annotation {
  public java.text.Annotation(java.lang.Object);
  public java.lang.Object getValue();
  public java.lang.String toString();
public class java.text.AttributedCharacterIterator$Attribute implements java.io.Serializable {
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String toString();
public interface java.text.AttributedCharacterIterator extends java.text.CharacterIterator {
  public abstract java.util.Set<java.text.AttributedCharacterIterator$Attribute> getAllAttributeKeys();
  public abstract java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute);
  public abstract java.util.Map<java.text.AttributedCharacterIterator$Attribute, java.lang.Object> getAttributes();
  public abstract int getRunLimit();
  public abstract int getRunLimit(java.text.AttributedCharacterIterator$Attribute);
  public abstract int getRunLimit(java.util.Set<? extends java.text.AttributedCharacterIterator$Attribute>);
  public abstract int getRunStart();
  public abstract int getRunStart(java.text.AttributedCharacterIterator$Attribute);
  public abstract int getRunStart(java.util.Set<? extends java.text.AttributedCharacterIterator$Attribute>);
  public java.lang.Object clone();
  public char current();
  public char first();
  public int getBeginIndex();
  public int getEndIndex();
  public int getIndex();
  public java.util.Set<java.text.AttributedCharacterIterator$Attribute> getAllAttributeKeys();
  public java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute);
  public java.util.Map<java.text.AttributedCharacterIterator$Attribute, java.lang.Object> getAttributes();
  public int getRunLimit();
  public int getRunLimit(java.text.AttributedCharacterIterator$Attribute);
  public int getRunLimit(java.util.Set<? extends java.text.AttributedCharacterIterator$Attribute>);
  public int getRunStart();
  public int getRunStart(java.text.AttributedCharacterIterator$Attribute);
  public int getRunStart(java.util.Set<? extends java.text.AttributedCharacterIterator$Attribute>);
  public char last();
  public char next();
  public char previous();
  public char setIndex(int);
public class java.text.AttributedString {
  public java.text.AttributedString(java.text.AttributedCharacterIterator);
  public java.text.AttributedString(java.text.AttributedCharacterIterator, int, int);
  public java.text.AttributedString(java.text.AttributedCharacterIterator, int, int, java.text.AttributedCharacterIterator$Attribute[]);
  public java.text.AttributedString(java.lang.String);
  public java.text.AttributedString(java.lang.String, java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>);
  public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object);
  public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object, int, int);
  public void addAttributes(java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>, int, int);
  public java.text.AttributedCharacterIterator getIterator();
  public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[]);
  public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[], int, int);
public abstract class java.text.BreakIterator implements java.lang.Cloneable {
  public static java.util.Locale[] getAvailableLocales();
  public static java.text.BreakIterator getCharacterInstance();
  public static java.text.BreakIterator getCharacterInstance(java.util.Locale);
  public static java.text.BreakIterator getLineInstance();
  public static java.text.BreakIterator getLineInstance(java.util.Locale);
  public static java.text.BreakIterator getSentenceInstance();
  public static java.text.BreakIterator getSentenceInstance(java.util.Locale);
  public static java.text.BreakIterator getWordInstance();
  public static java.text.BreakIterator getWordInstance(java.util.Locale);
  public boolean isBoundary(int);
  public int preceding(int);
  public void setText(java.lang.String);
  public abstract int current();
  public abstract int first();
  public abstract int following(int);
  public abstract java.text.CharacterIterator getText();
  public abstract int last();
  public abstract int next();
  public abstract int next(int);
  public abstract int previous();
  public abstract void setText(java.text.CharacterIterator);
  public java.lang.Object clone();
public interface java.text.CharacterIterator extends java.lang.Cloneable {
  public abstract java.lang.Object clone();
  public abstract char current();
  public abstract char first();
  public abstract int getBeginIndex();
  public abstract int getEndIndex();
  public abstract int getIndex();
  public abstract char last();
  public abstract char next();
  public abstract char previous();
  public abstract char setIndex(int);
public class java.text.ChoiceFormat extends java.text.NumberFormat {
  public java.text.ChoiceFormat(double[], java.lang.String[]);
  public java.text.ChoiceFormat(java.lang.String);
  public void applyPattern(java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.Object[] getFormats();
  public double[] getLimits();
  public int hashCode();
  public static final double nextDouble(double);
  public static double nextDouble(double, boolean);
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public static final double previousDouble(double);
  public void setChoices(double[], java.lang.String[]);
  public java.lang.String toPattern();
public final class java.text.CollationElementIterator {
  public int getMaxExpansion(int);
  public int getOffset();
  public int next();
  public int previous();
  public static final int primaryOrder(int);
  public void reset();
  public static final short secondaryOrder(int);
  public void setOffset(int);
  public void setText(java.text.CharacterIterator);
  public void setText(java.lang.String);
  public static final short tertiaryOrder(int);
public abstract class java.text.CollationKey implements java.lang.Comparable<java.text.CollationKey> {
  public abstract int compareTo(java.text.CollationKey);
  public java.lang.String getSourceString();
  public abstract byte[] toByteArray();
  public int compareTo(java.lang.Object);
public abstract class java.text.Collator implements java.util.Comparator<java.lang.Object>, java.lang.Cloneable {
  public java.lang.Object clone();
  public int compare(java.lang.Object, java.lang.Object);
  public abstract int compare(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean equals(java.lang.String, java.lang.String);
  public static java.util.Locale[] getAvailableLocales();
  public abstract java.text.CollationKey getCollationKey(java.lang.String);
  public int getDecomposition();
  public static java.text.Collator getInstance();
  public static java.text.Collator getInstance(java.util.Locale);
  public int getStrength();
  public abstract int hashCode();
  public void setDecomposition(int);
  public void setStrength(int);
public class java.text.DateFormat$Field extends java.text.Format$Field {
  public int getCalendarField();
  public static java.text.DateFormat$Field ofCalendarField(int);
public abstract class java.text.DateFormat extends java.text.Format {
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.String format(java.util.Date);
  public abstract java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);
  public static java.util.Locale[] getAvailableLocales();
  public java.util.Calendar getCalendar();
  public static final java.text.DateFormat getDateInstance();
  public static final java.text.DateFormat getDateInstance(int);
  public static final java.text.DateFormat getDateInstance(int, java.util.Locale);
  public static final java.text.DateFormat getDateTimeInstance();
  public static final java.text.DateFormat getDateTimeInstance(int, int);
  public static final java.text.DateFormat getDateTimeInstance(int, int, java.util.Locale);
  public static final java.text.DateFormat getInstance();
  public java.text.NumberFormat getNumberFormat();
  public static final java.text.DateFormat getTimeInstance();
  public static final java.text.DateFormat getTimeInstance(int);
  public static final java.text.DateFormat getTimeInstance(int, java.util.Locale);
  public java.util.TimeZone getTimeZone();
  public int hashCode();
  public boolean isLenient();
  public abstract java.util.Date parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public void setCalendar(java.util.Calendar);
  public void setLenient(boolean);
  public void setNumberFormat(java.text.NumberFormat);
  public void setTimeZone(java.util.TimeZone);
public class java.text.DateFormatSymbols implements java.io.Serializable,java.lang.Cloneable {
  public java.text.DateFormatSymbols();
  public java.text.DateFormatSymbols(java.util.Locale);
  public static final java.text.DateFormatSymbols getInstance();
  public static final java.text.DateFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.lang.String[] getAmPmStrings();
  public java.lang.String[] getEras();
  public java.lang.String getLocalPatternChars();
  public java.lang.String[] getMonths();
  public java.lang.String[] getShortMonths();
  public java.lang.String[] getShortWeekdays();
  public java.lang.String[] getWeekdays();
  public java.lang.String[][] getZoneStrings();
  public int hashCode();
  public void setAmPmStrings(java.lang.String[]);
  public void setEras(java.lang.String[]);
  public void setLocalPatternChars(java.lang.String);
  public void setMonths(java.lang.String[]);
  public void setShortMonths(java.lang.String[]);
  public void setShortWeekdays(java.lang.String[]);
  public void setWeekdays(java.lang.String[]);
  public void setZoneStrings(java.lang.String[][]);
public class java.text.DecimalFormat extends java.text.NumberFormat {
  public java.text.DecimalFormat();
  public java.text.DecimalFormat(java.lang.String);
  public java.text.DecimalFormat(java.lang.String, java.text.DecimalFormatSymbols);
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.DecimalFormatSymbols getDecimalFormatSymbols();
  public java.util.Currency getCurrency();
  public int getGroupingSize();
  public int getMultiplier();
  public java.lang.String getNegativePrefix();
  public java.lang.String getNegativeSuffix();
  public java.lang.String getPositivePrefix();
  public java.lang.String getPositiveSuffix();
  public int hashCode();
  public boolean isDecimalSeparatorAlwaysShown();
  public boolean isParseBigDecimal();
  public void setParseIntegerOnly(boolean);
  public boolean isParseIntegerOnly();
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols);
  public void setCurrency(java.util.Currency);
  public void setDecimalSeparatorAlwaysShown(boolean);
  public void setGroupingSize(int);
  public void setGroupingUsed(boolean);
  public boolean isGroupingUsed();
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setMultiplier(int);
  public void setNegativePrefix(java.lang.String);
  public void setNegativeSuffix(java.lang.String);
  public void setPositivePrefix(java.lang.String);
  public void setPositiveSuffix(java.lang.String);
  public void setParseBigDecimal(boolean);
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.math.RoundingMode getRoundingMode();
  public void setRoundingMode(java.math.RoundingMode);
public class java.text.DecimalFormatSymbols implements java.lang.Cloneable,java.io.Serializable {
  public java.text.DecimalFormatSymbols();
  public java.text.DecimalFormatSymbols(java.util.Locale);
  public static java.text.DecimalFormatSymbols getInstance();
  public static java.text.DecimalFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public java.util.Currency getCurrency();
  public java.lang.String getInternationalCurrencySymbol();
  public java.lang.String getCurrencySymbol();
  public char getDecimalSeparator();
  public char getDigit();
  public char getGroupingSeparator();
  public java.lang.String getInfinity();
  public char getMinusSign();
  public char getMonetaryDecimalSeparator();
  public java.lang.String getNaN();
  public char getPatternSeparator();
  public char getPercent();
  public char getPerMill();
  public char getZeroDigit();
  public java.lang.String getExponentSeparator();
  public int hashCode();
  public void setCurrency(java.util.Currency);
  public void setInternationalCurrencySymbol(java.lang.String);
  public void setCurrencySymbol(java.lang.String);
  public void setDecimalSeparator(char);
  public void setDigit(char);
  public void setGroupingSeparator(char);
  public void setInfinity(java.lang.String);
  public void setMinusSign(char);
  public void setMonetaryDecimalSeparator(char);
  public void setNaN(java.lang.String);
  public void setPatternSeparator(char);
  public void setPercent(char);
  public void setPerMill(char);
  public void setZeroDigit(char);
  public void setExponentSeparator(java.lang.String);
public class java.text.FieldPosition {
  public java.text.FieldPosition(int);
  public java.text.FieldPosition(java.text.Format$Field);
  public java.text.FieldPosition(java.text.Format$Field, int);
  public boolean equals(java.lang.Object);
  public int getBeginIndex();
  public int getEndIndex();
  public int getField();
  public java.text.Format$Field getFieldAttribute();
  public int hashCode();
  public void setBeginIndex(int);
  public void setEndIndex(int);
  public java.lang.String toString();
public class java.text.Format$Field extends java.text.AttributedCharacterIterator$Attribute {
public abstract class java.text.Format implements java.io.Serializable,java.lang.Cloneable {
  public java.lang.Object clone();
  public final java.lang.String format(java.lang.Object);
  public abstract java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public abstract java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
public class java.text.MessageFormat$Field extends java.text.Format$Field {
  public java.text.MessageFormat$FieldContainer(int, int, java.text.AttributedCharacterIterator$Attribute, java.lang.Object);
public class java.text.MessageFormat extends java.text.Format {
  public java.text.MessageFormat(java.lang.String, java.util.Locale);
  public java.text.MessageFormat(java.lang.String);
  public void applyPattern(java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public final java.lang.StringBuffer format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public static java.lang.String format(java.lang.String, java.lang.Object...);
  public java.text.Format[] getFormats();
  public java.text.Format[] getFormatsByArgumentIndex();
  public void setFormatByArgumentIndex(int, java.text.Format);
  public void setFormatsByArgumentIndex(java.text.Format[]);
  public java.util.Locale getLocale();
  public int hashCode();
  public java.lang.Object[] parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public void setFormat(int, java.text.Format);
  public void setFormats(java.text.Format[]);
  public void setLocale(java.util.Locale);
  public java.lang.String toPattern();
public class java.text.NumberFormat$Field extends java.text.Format$Field {
public abstract class java.text.NumberFormat extends java.text.Format {
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public final java.lang.String format(double);
  public abstract java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.String format(long);
  public abstract java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public static java.util.Locale[] getAvailableLocales();
  public java.util.Currency getCurrency();
  public static final java.text.NumberFormat getCurrencyInstance();
  public static java.text.NumberFormat getCurrencyInstance(java.util.Locale);
  public static final java.text.NumberFormat getIntegerInstance();
  public static java.text.NumberFormat getIntegerInstance(java.util.Locale);
  public static final java.text.NumberFormat getInstance();
  public static java.text.NumberFormat getInstance(java.util.Locale);
  public int getMaximumFractionDigits();
  public int getMaximumIntegerDigits();
  public int getMinimumFractionDigits();
  public int getMinimumIntegerDigits();
  public static final java.text.NumberFormat getNumberInstance();
  public static java.text.NumberFormat getNumberInstance(java.util.Locale);
  public static final java.text.NumberFormat getPercentInstance();
  public static java.text.NumberFormat getPercentInstance(java.util.Locale);
  public int hashCode();
  public boolean isGroupingUsed();
  public boolean isParseIntegerOnly();
  public abstract java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public final java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public void setCurrency(java.util.Currency);
  public void setGroupingUsed(boolean);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setParseIntegerOnly(boolean);
  public java.math.RoundingMode getRoundingMode();
  public void setRoundingMode(java.math.RoundingMode);
public class java.text.ParseException extends java.lang.Exception {
  public java.text.ParseException(java.lang.String, int);
  public int getErrorOffset();
public class java.text.ParsePosition {
  public java.text.ParsePosition(int);
  public boolean equals(java.lang.Object);
  public int getErrorIndex();
  public int getIndex();
  public int hashCode();
  public void setErrorIndex(int);
  public void setIndex(int);
  public java.lang.String toString();
  public int current();
  public int first();
  public int following(int);
  public java.text.CharacterIterator getText();
  public int last();
  public int next();
  public int next(int);
  public int previous();
  public void setText(java.text.CharacterIterator);
  public boolean isBoundary(int);
  public int preceding(int);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int hashCode();
  public java.lang.Object clone();
public class java.text.RuleBasedCollator extends java.text.Collator {
  public java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator);
  public java.text.CollationElementIterator getCollationElementIterator(java.lang.String);
  public java.lang.String getRules();
  public java.lang.Object clone();
  public int compare(java.lang.String, java.lang.String);
  public java.text.CollationKey getCollationKey(java.lang.String);
  public int hashCode();
  public boolean equals(java.lang.Object);
public class java.text.SimpleDateFormat extends java.text.DateFormat {
  public java.text.SimpleDateFormat();
  public java.text.SimpleDateFormat(java.lang.String);
  public java.text.SimpleDateFormat(java.lang.String, java.text.DateFormatSymbols);
  public java.text.SimpleDateFormat(java.lang.String, java.util.Locale);
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);
  public java.util.Date get2DigitYearStart();
  public java.text.DateFormatSymbols getDateFormatSymbols();
  public int hashCode();
  public java.util.Date parse(java.lang.String, java.text.ParsePosition);
  public void set2DigitYearStart(java.util.Date);
  public void setDateFormatSymbols(java.text.DateFormatSymbols);
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
public final class java.text.StringCharacterIterator implements java.text.CharacterIterator {
  public java.text.StringCharacterIterator(java.lang.String);
  public java.text.StringCharacterIterator(java.lang.String, int);
  public java.text.StringCharacterIterator(java.lang.String, int, int, int);
  public java.lang.Object clone();
  public char current();
  public boolean equals(java.lang.Object);
  public char first();
  public int getBeginIndex();
  public int getEndIndex();
  public int getIndex();
  public int hashCode();
  public char last();
  public char next();
  public char previous();
  public char setIndex(int);
  public void setText(java.lang.String);
public abstract class java.util.AbstractCollection<E> implements java.util.Collection<E> {
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public abstract java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public abstract int size();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public void add(int, E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public boolean addAll(java.util.Collection<? extends E>);
  public E get(int);
  public java.util.Iterator<E> iterator();
  public java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public E set(int, E);
  public int size();
public abstract class java.util.AbstractList<E> extends java.util.AbstractCollection<E> implements java.util.List<E> {
  public void add(int, E);
  public boolean add(E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public void clear();
  public boolean equals(java.lang.Object);
  public abstract E get(int);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public java.util.Iterator<E> iterator();
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public E set(int, E);
  public java.util.List<E> subList(int, int);
public class java.util.AbstractMap$SimpleEntry<K, V> implements java.util.Map$Entry<K, V>, java.io.Serializable {
  public java.util.AbstractMap$SimpleEntry(K, V);
  public java.util.AbstractMap$SimpleEntry(java.util.Map$Entry<? extends K, ? extends V>);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public class java.util.AbstractMap$SimpleImmutableEntry<K, V> implements java.util.Map$Entry<K, V>, java.io.Serializable {
  public java.util.AbstractMap$SimpleImmutableEntry(K, V);
  public java.util.AbstractMap$SimpleImmutableEntry(java.util.Map$Entry<? extends K, ? extends V>);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public abstract class java.util.AbstractMap<K, V> implements java.util.Map<K, V> {
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public abstract java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public V get(java.lang.Object);
  public int hashCode();
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.lang.String toString();
  public java.util.Collection<V> values();
public abstract class java.util.AbstractQueue<E> extends java.util.AbstractCollection<E> implements java.util.Queue<E> {
  public boolean add(E);
  public E remove();
  public E element();
  public void clear();
  public boolean addAll(java.util.Collection<? extends E>);
public abstract class java.util.AbstractSequentialList<E> extends java.util.AbstractList<E> {
  public void add(int, E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public E get(int);
  public java.util.Iterator<E> iterator();
  public abstract java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public E set(int, E);
public abstract class java.util.AbstractSet<E> extends java.util.AbstractCollection<E> implements java.util.Set<E> {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean removeAll(java.util.Collection<?>);
  public boolean hasNext();
  public E next();
  public void remove();
  public boolean hasNext();
  public E next();
  public void remove();
public class java.util.ArrayDeque<E> extends java.util.AbstractCollection<E> implements java.util.Deque<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.ArrayDeque();
  public java.util.ArrayDeque(int);
  public java.util.ArrayDeque(java.util.Collection<? extends E>);
  public void addFirst(E);
  public void addLast(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E removeFirst();
  public E removeLast();
  public E pollFirst();
  public E pollLast();
  public E getFirst();
  public E getLast();
  public E peekFirst();
  public E peekLast();
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public boolean add(E);
  public boolean offer(E);
  public E remove();
  public E poll();
  public E element();
  public E peek();
  public void push(E);
  public E pop();
  public int size();
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.util.ArrayDeque<E> clone();
public class java.util.ArrayList<E> extends java.util.AbstractList<E> implements java.lang.Cloneable, java.io.Serializable, java.util.RandomAccess {
  public java.util.ArrayList(int);
  public java.util.ArrayList();
  public java.util.ArrayList(java.util.Collection<? extends E>);
  public boolean add(E);
  public void add(int, E);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public void clear();
  public java.lang.Object clone();
  public void ensureCapacity(int);
  public E get(int);
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public E remove(int);
  public boolean remove(java.lang.Object);
  public E set(int, E);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public void trimToSize();
  public java.util.Iterator<E> iterator();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean contains(java.lang.Object);
  public E get(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public E set(int, E);
  public int size();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
public class java.util.Arrays {
  public static <T extends java/lang/Object> java.util.List<T> asList(T...);
  public static int binarySearch(byte[], byte);
  public static int binarySearch(byte[], int, int, byte);
  public static int binarySearch(char[], char);
  public static int binarySearch(char[], int, int, char);
  public static int binarySearch(double[], double);
  public static int binarySearch(double[], int, int, double);
  public static int binarySearch(float[], float);
  public static int binarySearch(float[], int, int, float);
  public static int binarySearch(int[], int);
  public static int binarySearch(int[], int, int, int);
  public static int binarySearch(long[], long);
  public static int binarySearch(long[], int, int, long);
  public static int binarySearch(java.lang.Object[], java.lang.Object);
  public static int binarySearch(java.lang.Object[], int, int, java.lang.Object);
  public static <T extends java/lang/Object> int binarySearch(T[], T, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> int binarySearch(T[], int, int, T, java.util.Comparator<? super T>);
  public static int binarySearch(short[], short);
  public static int binarySearch(short[], int, int, short);
  public static void fill(byte[], byte);
  public static void fill(byte[], int, int, byte);
  public static void fill(short[], short);
  public static void fill(short[], int, int, short);
  public static void fill(char[], char);
  public static void fill(char[], int, int, char);
  public static void fill(int[], int);
  public static void fill(int[], int, int, int);
  public static void fill(long[], long);
  public static void fill(long[], int, int, long);
  public static void fill(float[], float);
  public static void fill(float[], int, int, float);
  public static void fill(double[], double);
  public static void fill(double[], int, int, double);
  public static void fill(boolean[], boolean);
  public static void fill(boolean[], int, int, boolean);
  public static void fill(java.lang.Object[], java.lang.Object);
  public static void fill(java.lang.Object[], int, int, java.lang.Object);
  public static int hashCode(boolean[]);
  public static int hashCode(int[]);
  public static int hashCode(short[]);
  public static int hashCode(char[]);
  public static int hashCode(byte[]);
  public static int hashCode(long[]);
  public static int hashCode(float[]);
  public static int hashCode(double[]);
  public static int hashCode(java.lang.Object[]);
  public static int deepHashCode(java.lang.Object[]);
  public static boolean equals(byte[], byte[]);
  public static boolean equals(short[], short[]);
  public static boolean equals(char[], char[]);
  public static boolean equals(int[], int[]);
  public static boolean equals(long[], long[]);
  public static boolean equals(float[], float[]);
  public static boolean equals(double[], double[]);
  public static boolean equals(boolean[], boolean[]);
  public static boolean equals(java.lang.Object[], java.lang.Object[]);
  public static boolean deepEquals(java.lang.Object[], java.lang.Object[]);
  public static void sort(byte[]);
  public static void sort(byte[], int, int);
  public static void checkOffsetAndCount(int, int, int);
  public static void checkStartAndEnd(int, int, int);
  public static void sort(char[]);
  public static void sort(char[], int, int);
  public static void sort(double[]);
  public static void sort(double[], int, int);
  public static void sort(float[]);
  public static void sort(float[], int, int);
  public static void sort(int[]);
  public static void sort(int[], int, int);
  public static void sort(long[]);
  public static void sort(long[], int, int);
  public static void sort(short[]);
  public static void sort(short[], int, int);
  public static void sort(java.lang.Object[]);
  public static void sort(java.lang.Object[], int, int);
  public static <T extends java/lang/Object> void sort(T[], int, int, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> void sort(T[], java.util.Comparator<? super T>);
  public static java.lang.String toString(boolean[]);
  public static java.lang.String toString(byte[]);
  public static java.lang.String toString(char[]);
  public static java.lang.String toString(double[]);
  public static java.lang.String toString(float[]);
  public static java.lang.String toString(int[]);
  public static java.lang.String toString(long[]);
  public static java.lang.String toString(short[]);
  public static java.lang.String toString(java.lang.Object[]);
  public static java.lang.String deepToString(java.lang.Object[]);
  public static boolean[] copyOf(boolean[], int);
  public static byte[] copyOf(byte[], int);
  public static char[] copyOf(char[], int);
  public static double[] copyOf(double[], int);
  public static float[] copyOf(float[], int);
  public static int[] copyOf(int[], int);
  public static long[] copyOf(long[], int);
  public static short[] copyOf(short[], int);
  public static <T extends java/lang/Object> T[] copyOf(T[], int);
  public static <T extends java/lang/Object, U extends java/lang/Object> T[] copyOf(U[], int, java.lang.Class<? extends T[]>);
  public static boolean[] copyOfRange(boolean[], int, int);
  public static byte[] copyOfRange(byte[], int, int);
  public static char[] copyOfRange(char[], int, int);
  public static double[] copyOfRange(double[], int, int);
  public static float[] copyOfRange(float[], int, int);
  public static int[] copyOfRange(int[], int, int);
  public static long[] copyOfRange(long[], int, int);
  public static short[] copyOfRange(short[], int, int);
  public static <T extends java/lang/Object> T[] copyOfRange(T[], int, int);
  public static <T extends java/lang/Object, U extends java/lang/Object> T[] copyOfRange(U[], int, int, java.lang.Class<? extends T[]>);
public class java.util.BitSet implements java.io.Serializable,java.lang.Cloneable {
  public java.util.BitSet();
  public java.util.BitSet(int);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean get(int);
  public void set(int);
  public void clear(int);
  public void flip(int);
  public java.util.BitSet get(int, int);
  public void set(int, boolean);
  public void set(int, int, boolean);
  public void clear();
  public void set(int, int);
  public void clear(int, int);
  public void flip(int, int);
  public boolean intersects(java.util.BitSet);
  public void and(java.util.BitSet);
  public void andNot(java.util.BitSet);
  public void or(java.util.BitSet);
  public void xor(java.util.BitSet);
  public int size();
  public int length();
  public java.lang.String toString();
  public int nextSetBit(int);
  public int nextClearBit(int);
  public int previousSetBit(int);
  public int previousClearBit(int);
  public boolean isEmpty();
  public int cardinality();
  public static java.util.BitSet valueOf(long[]);
  public static java.util.BitSet valueOf(java.nio.LongBuffer);
  public static java.util.BitSet valueOf(byte[]);
  public static java.util.BitSet valueOf(java.nio.ByteBuffer);
  public long[] toLongArray();
  public byte[] toByteArray();
public abstract class java.util.Calendar implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<java.util.Calendar> {
  public abstract void add(int, int);
  public boolean after(java.lang.Object);
  public boolean before(java.lang.Object);
  public final void clear();
  public final void clear(int);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public int get(int);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public static synchronized java.util.Locale[] getAvailableLocales();
  public int getFirstDayOfWeek();
  public abstract int getGreatestMinimum(int);
  public static synchronized java.util.Calendar getInstance();
  public static synchronized java.util.Calendar getInstance(java.util.Locale);
  public static synchronized java.util.Calendar getInstance(java.util.TimeZone);
  public static synchronized java.util.Calendar getInstance(java.util.TimeZone, java.util.Locale);
  public abstract int getLeastMaximum(int);
  public abstract int getMaximum(int);
  public int getMinimalDaysInFirstWeek();
  public abstract int getMinimum(int);
  public final java.util.Date getTime();
  public long getTimeInMillis();
  public java.util.TimeZone getTimeZone();
  public int hashCode();
  public boolean isLenient();
  public final boolean isSet(int);
  public void roll(int, int);
  public abstract void roll(int, boolean);
  public void set(int, int);
  public final void set(int, int, int);
  public final void set(int, int, int, int, int);
  public final void set(int, int, int, int, int, int);
  public void setFirstDayOfWeek(int);
  public void setLenient(boolean);
  public void setMinimalDaysInFirstWeek(int);
  public final void setTime(java.util.Date);
  public void setTimeInMillis(long);
  public void setTimeZone(java.util.TimeZone);
  public java.lang.String toString();
  public int compareTo(java.util.Calendar);
  public java.lang.String getDisplayName(int, int, java.util.Locale);
  public java.util.Map<java.lang.String, java.lang.Integer> getDisplayNames(int, int, java.util.Locale);
  public int compareTo(java.lang.Object);
public interface java.util.Collection<E> extends java.lang.Iterable<E> {
  public abstract boolean add(E);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract void clear();
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract boolean isEmpty();
  public abstract java.util.Iterator<E> iterator();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection<?>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract int size();
  public abstract java.lang.Object[] toArray();
  public abstract <T extends java/lang/Object> T[] toArray(T[]);
  public boolean hasNext();
  public java.lang.Object next();
  public void remove();
  public boolean hasMoreElements();
  public java.lang.Object nextElement();
  public boolean hasMoreElements();
  public T nextElement();
  public java.util.Iterator<E> iterator();
  public int size();
  public boolean offer(E);
  public E peek();
  public E poll();
  public boolean add(E);
  public void clear();
  public E element();
  public E remove();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public java.util.Collections$CheckedCollection(java.util.Collection<E>, java.lang.Class<E>);
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public java.util.Iterator<E> iterator();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public boolean add(E);
  public boolean remove(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public void clear();
  public java.lang.String toString();
  public java.util.Collections$CheckedList(java.util.List<E>, java.lang.Class<E>);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public E get(int);
  public E set(int, E);
  public void add(int, E);
  public E remove(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public java.util.List<E> subList(int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Collections$CheckedListIterator(java.util.ListIterator<E>, java.lang.Class<E>);
  public boolean hasNext();
  public E next();
  public void remove();
  public boolean hasPrevious();
  public E previous();
  public int nextIndex();
  public int previousIndex();
  public void set(E);
  public void add(E);
  public java.util.Collections$CheckedMap$CheckedEntry(java.util.Map$Entry<K, V>, java.lang.Class<V>);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntryIterator(java.util.Iterator<java.util.Map$Entry<K, V>>, java.lang.Class<V>);
  public boolean hasNext();
  public void remove();
  public java.util.Map$Entry<K, V> next();
  public java.lang.Object next();
  public java.util.Collections$CheckedMap$CheckedEntrySet(java.util.Set<java.util.Map$Entry<K, V>>, java.lang.Class<V>);
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public boolean retainAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean containsAll(java.util.Collection<?>);
  public boolean addAll(java.util.Collection<? extends java.util.Map$Entry<K, V>>);
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean add(java.util.Map$Entry<K, V>);
  public boolean isEmpty();
  public void clear();
  public int size();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean add(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V get(java.lang.Object);
  public V put(K, V);
  public V remove(java.lang.Object);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public void clear();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.util.Collections$CheckedRandomAccessList(java.util.List<E>, java.lang.Class<E>);
  public java.util.Collections$CheckedSet(java.util.Set<E>, java.lang.Class<E>);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Comparator<? super K> comparator();
  public java.util.SortedMap<K, V> subMap(K, K);
  public java.util.SortedMap<K, V> headMap(K);
  public java.util.SortedMap<K, V> tailMap(K);
  public K firstKey();
  public K lastKey();
  public java.util.Collections$CheckedSortedSet(java.util.SortedSet<E>, java.lang.Class<E>);
  public java.util.Comparator<? super E> comparator();
  public java.util.SortedSet<E> subSet(E, E);
  public java.util.SortedSet<E> headSet(E);
  public java.util.SortedSet<E> tailSet(E);
  public E first();
  public E last();
  public boolean contains(java.lang.Object);
  public int size();
  public E get(int);
  public boolean contains(java.lang.Object);
  public int size();
  public java.lang.Object get(int);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set entrySet();
  public java.lang.Object get(java.lang.Object);
  public java.util.Set keySet();
  public java.util.Collection values();
  public boolean contains(java.lang.Object);
  public int size();
  public java.util.Iterator iterator();
  public int compare(T, T);
  public int compare(T, T);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean add(E);
  public void clear();
  public java.lang.String toString();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean retainAll(java.util.Collection<?>);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.util.Iterator<E> iterator();
  public int size();
  public boolean contains(java.lang.Object);
  public E get(int);
  public int size();
  public V setValue(V);
  public boolean hasNext();
  public java.util.Map$Entry<K, V> next();
  public void remove();
  public java.lang.Object next();
  public boolean contains(java.lang.Object);
  public int size();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V get(java.lang.Object);
  public int size();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean hasNext();
  public E next();
  public void remove();
  public boolean contains(java.lang.Object);
  public int size();
  public java.util.Iterator<E> iterator();
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public int size();
  public java.lang.Object[] toArray();
  public java.lang.String toString();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public void add(int, E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public boolean equals(java.lang.Object);
  public E get(int);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public E set(int, E);
  public java.util.List<E> subList(int, int);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public V get(java.lang.Object);
  public int hashCode();
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.util.Collection<V> values();
  public java.lang.String toString();
  public java.util.List<E> subList(int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Comparator<? super K> comparator();
  public K firstKey();
  public java.util.SortedMap<K, V> headMap(K);
  public K lastKey();
  public java.util.SortedMap<K, V> subMap(K, K);
  public java.util.SortedMap<K, V> tailMap(K);
  public java.util.Comparator<? super E> comparator();
  public E first();
  public java.util.SortedSet<E> headSet(E);
  public E last();
  public java.util.SortedSet<E> subSet(E, E);
  public java.util.SortedSet<E> tailSet(E);
  public boolean hasNext();
  public E next();
  public void remove();
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public int size();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public void add(E);
  public boolean hasNext();
  public boolean hasPrevious();
  public E next();
  public int nextIndex();
  public E previous();
  public int previousIndex();
  public void remove();
  public void set(E);
  public void add(int, E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public boolean equals(java.lang.Object);
  public E get(int);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public E set(int, E);
  public java.util.List<E> subList(int, int);
  public boolean hasNext();
  public java.util.Map$Entry<K, V> next();
  public void remove();
  public java.lang.Object next();
  public boolean equals(java.lang.Object);
  public K getKey();
  public V getValue();
  public int hashCode();
  public V setValue(V);
  public java.lang.String toString();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public V get(java.lang.Object);
  public int hashCode();
  public boolean isEmpty();
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.util.Collection<V> values();
  public java.lang.String toString();
  public java.util.List<E> subList(int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Comparator<? super K> comparator();
  public K firstKey();
  public java.util.SortedMap<K, V> headMap(K);
  public K lastKey();
  public java.util.SortedMap<K, V> subMap(K, K);
  public java.util.SortedMap<K, V> tailMap(K);
  public java.util.Comparator<? super E> comparator();
  public E first();
  public java.util.SortedSet<E> headSet(E);
  public E last();
  public java.util.SortedSet<E> subSet(E, E);
  public java.util.SortedSet<E> tailSet(E);
public class java.util.Collections {
  public static <T extends java/lang/Object> int binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>, T);
  public static <T extends java/lang/Object> int binarySearch(java.util.List<? extends T>, T, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> void copy(java.util.List<? super T>, java.util.List<? extends T>);
  public static <T extends java/lang/Object> java.util.Enumeration<T> enumeration(java.util.Collection<T>);
  public static <T extends java/lang/Object> void fill(java.util.List<? super T>, T);
  public static <T extends java/lang/Object & java/lang/Comparable<? super T>> T max(java.util.Collection<? extends T>);
  public static <T extends java/lang/Object> T max(java.util.Collection<? extends T>, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object & java/lang/Comparable<? super T>> T min(java.util.Collection<? extends T>);
  public static <T extends java/lang/Object> T min(java.util.Collection<? extends T>, java.util.Comparator<? super T>);
  public static <T extends java/lang/Object> java.util.List<T> nCopies(int, T);
  public static void reverse(java.util.List<?>);
  public static <T extends java/lang/Object> java.util.Comparator<T> reverseOrder();
  public static <T extends java/lang/Object> java.util.Comparator<T> reverseOrder(java.util.Comparator<T>);
  public static void shuffle(java.util.List<?>);
  public static void shuffle(java.util.List<?>, java.util.Random);
  public static <E extends java/lang/Object> java.util.Set<E> singleton(E);
  public static <E extends java/lang/Object> java.util.List<E> singletonList(E);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> singletonMap(K, V);
  public static <T extends java/lang/Comparable<? super T>> void sort(java.util.List<T>);
  public static <T extends java/lang/Object> void sort(java.util.List<T>, java.util.Comparator<? super T>);
  public static void swap(java.util.List<?>, int, int);
  public static <T extends java/lang/Object> boolean replaceAll(java.util.List<T>, T, T);
  public static void rotate(java.util.List<?>, int);
  public static int indexOfSubList(java.util.List<?>, java.util.List<?>);
  public static int lastIndexOfSubList(java.util.List<?>, java.util.List<?>);
  public static <T extends java/lang/Object> java.util.ArrayList<T> list(java.util.Enumeration<T>);
  public static <T extends java/lang/Object> java.util.Collection<T> synchronizedCollection(java.util.Collection<T>);
  public static <T extends java/lang/Object> java.util.List<T> synchronizedList(java.util.List<T>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> synchronizedMap(java.util.Map<K, V>);
  public static <E extends java/lang/Object> java.util.Set<E> synchronizedSet(java.util.Set<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> synchronizedSortedMap(java.util.SortedMap<K, V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> synchronizedSortedSet(java.util.SortedSet<E>);
  public static <E extends java/lang/Object> java.util.Collection<E> unmodifiableCollection(java.util.Collection<? extends E>);
  public static <E extends java/lang/Object> java.util.List<E> unmodifiableList(java.util.List<? extends E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> unmodifiableMap(java.util.Map<? extends K, ? extends V>);
  public static <E extends java/lang/Object> java.util.Set<E> unmodifiableSet(java.util.Set<? extends E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> unmodifiableSortedMap(java.util.SortedMap<K, ? extends V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> unmodifiableSortedSet(java.util.SortedSet<E>);
  public static int frequency(java.util.Collection<?>, java.lang.Object);
  public static final <T extends java/lang/Object> java.util.List<T> emptyList();
  public static final <T extends java/lang/Object> java.util.Set<T> emptySet();
  public static final <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> emptyMap();
  public static <T extends java/lang/Object> java.util.Enumeration<T> emptyEnumeration();
  public static <T extends java/lang/Object> java.util.Iterator<T> emptyIterator();
  public static <T extends java/lang/Object> java.util.ListIterator<T> emptyListIterator();
  public static <E extends java/lang/Object> java.util.Collection<E> checkedCollection(java.util.Collection<E>, java.lang.Class<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.Map<K, V> checkedMap(java.util.Map<K, V>, java.lang.Class<K>, java.lang.Class<V>);
  public static <E extends java/lang/Object> java.util.List<E> checkedList(java.util.List<E>, java.lang.Class<E>);
  public static <E extends java/lang/Object> java.util.Set<E> checkedSet(java.util.Set<E>, java.lang.Class<E>);
  public static <K extends java/lang/Object, V extends java/lang/Object> java.util.SortedMap<K, V> checkedSortedMap(java.util.SortedMap<K, V>, java.lang.Class<K>, java.lang.Class<V>);
  public static <E extends java/lang/Object> java.util.SortedSet<E> checkedSortedSet(java.util.SortedSet<E>, java.lang.Class<E>);
  public static <T extends java/lang/Object> boolean addAll(java.util.Collection<? super T>, T...);
  public static boolean disjoint(java.util.Collection<?>, java.util.Collection<?>);
  public static <E extends java/lang/Object> java.util.Set<E> newSetFromMap(java.util.Map<E, java.lang.Boolean>);
  public static <T extends java/lang/Object> java.util.Queue<T> asLifoQueue(java.util.Deque<T>);
public interface java.util.Comparator<T> {
  public abstract int compare(T, T);
  public abstract boolean equals(java.lang.Object);
public class java.util.ConcurrentModificationException extends java.lang.RuntimeException {
  public java.util.ConcurrentModificationException();
  public java.util.ConcurrentModificationException(java.lang.String);
  public java.util.ConcurrentModificationException(java.lang.String, java.lang.Throwable);
  public java.util.ConcurrentModificationException(java.lang.Throwable);
public final class java.util.Currency implements java.io.Serializable {
  public static java.util.Currency getInstance(java.lang.String);
  public static java.util.Currency getInstance(java.util.Locale);
  public static java.util.Set<java.util.Currency> getAvailableCurrencies();
  public java.lang.String getCurrencyCode();
  public java.lang.String getDisplayName();
  public java.lang.String getDisplayName(java.util.Locale);
  public java.lang.String getSymbol();
  public java.lang.String getSymbol(java.util.Locale);
  public int getDefaultFractionDigits();
  public java.lang.String toString();
public class java.util.Date implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable<java.util.Date> {
  public java.util.Date();
  public java.util.Date(int, int, int);
  public java.util.Date(int, int, int, int, int);
  public java.util.Date(int, int, int, int, int, int);
  public java.util.Date(long);
  public java.util.Date(java.lang.String);
  public boolean after(java.util.Date);
  public boolean before(java.util.Date);
  public java.lang.Object clone();
  public int compareTo(java.util.Date);
  public boolean equals(java.lang.Object);
  public int getDate();
  public int getDay();
  public int getHours();
  public int getMinutes();
  public int getMonth();
  public int getSeconds();
  public long getTime();
  public int getTimezoneOffset();
  public int getYear();
  public int hashCode();
  public static long parse(java.lang.String);
  public void setDate(int);
  public void setHours(int);
  public void setMinutes(int);
  public void setMonth(int);
  public void setSeconds(int);
  public void setTime(long);
  public void setYear(int);
  public java.lang.String toGMTString();
  public java.lang.String toLocaleString();
  public java.lang.String toString();
  public static long UTC(int, int, int, int, int, int);
  public int compareTo(java.lang.Object);
public interface java.util.Deque<E> extends java.util.Queue<E> {
  public abstract void addFirst(E);
  public abstract void addLast(E);
  public abstract boolean offerFirst(E);
  public abstract boolean offerLast(E);
  public abstract E removeFirst();
  public abstract E removeLast();
  public abstract E pollFirst();
  public abstract E pollLast();
  public abstract E getFirst();
  public abstract E getLast();
  public abstract E peekFirst();
  public abstract E peekLast();
  public abstract boolean removeFirstOccurrence(java.lang.Object);
  public abstract boolean removeLastOccurrence(java.lang.Object);
  public abstract boolean add(E);
  public abstract boolean offer(E);
  public abstract E remove();
  public abstract E poll();
  public abstract E element();
  public abstract E peek();
  public abstract void push(E);
  public abstract E pop();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract int size();
  public abstract java.util.Iterator<E> iterator();
  public abstract java.util.Iterator<E> descendingIterator();
public abstract class java.util.Dictionary<K, V> {
  public java.util.Dictionary();
  public abstract java.util.Enumeration<V> elements();
  public abstract V get(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract java.util.Enumeration<K> keys();
  public abstract V put(K, V);
  public abstract V remove(java.lang.Object);
  public abstract int size();
  public static void sort(int[]);
  public static void sort(int[], int, int);
  public static void sort(long[]);
  public static void sort(long[], int, int);
  public static void sort(short[]);
  public static void sort(short[], int, int);
  public static void sort(char[]);
  public static void sort(char[], int, int);
  public static void sort(byte[]);
  public static void sort(byte[], int, int);
  public static void sort(float[]);
  public static void sort(float[], int, int);
  public static void sort(double[]);
  public static void sort(double[], int, int);
public class java.util.DuplicateFormatFlagsException extends java.util.IllegalFormatException {
  public java.util.DuplicateFormatFlagsException(java.lang.String);
  public java.lang.String getFlags();
  public java.lang.String getMessage();
public class java.util.EmptyStackException extends java.lang.RuntimeException {
  public java.util.EmptyStackException();
public class java.util.EnumMap<K extends java.lang.Enum<K>, V> extends java.util.AbstractMap<K, V> implements java.io.Serializable, java.lang.Cloneable, java.util.Map<K, V> {
  public java.util.EnumMap(java.lang.Class<K>);
  public java.util.EnumMap(java.util.EnumMap<K, ? extends V>);
  public java.util.EnumMap(java.util.Map<K, ? extends V>);
  public void clear();
  public java.util.EnumMap<K, V> clone();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public boolean equals(java.lang.Object);
  public V get(java.lang.Object);
  public java.util.Set<K> keySet();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
  public java.util.Collection<V> values();
  public java.lang.Object put(java.lang.Object, java.lang.Object);
public abstract class java.util.EnumSet<E extends java.lang.Enum<E>> extends java.util.AbstractSet<E> implements java.lang.Cloneable, java.io.Serializable {
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> noneOf(java.lang.Class<E>);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> allOf(java.lang.Class<E>);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> copyOf(java.util.EnumSet<E>);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> copyOf(java.util.Collection<E>);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> complementOf(java.util.EnumSet<E>);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E, E);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E, E, E);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E, E, E, E);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E, E, E, E, E);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> of(E, E...);
  public static <E extends java/lang/Enum<E>> java.util.EnumSet<E> range(E, E);
  public java.util.EnumSet<E> clone();
public interface java.util.Enumeration<E> {
  public abstract boolean hasMoreElements();
  public abstract E nextElement();
public interface java.util.EventListener {
public abstract class java.util.EventListenerProxy implements java.util.EventListener {
  public java.util.EventListenerProxy(java.util.EventListener);
  public java.util.EventListener getListener();
public class java.util.EventObject implements java.io.Serializable {
  public java.util.EventObject(java.lang.Object);
  public java.lang.Object getSource();
  public java.lang.String toString();
public class java.util.FormatFlagsConversionMismatchException extends java.util.IllegalFormatException implements java.io.Serializable {
  public java.util.FormatFlagsConversionMismatchException(java.lang.String, char);
  public java.lang.String getFlags();
  public char getConversion();
  public java.lang.String getMessage();
public interface java.util.Formattable {
public final class java.util.Formatter$BigDecimalLayoutForm extends java.lang.Enum<java.util.Formatter$BigDecimalLayoutForm> {
  public static java.util.Formatter$BigDecimalLayoutForm[] values();
  public static java.util.Formatter$BigDecimalLayoutForm valueOf(java.lang.String);
  public java.util.Formatter$CachedDecimalFormat();
  public libcore.icu.NativeDecimalFormat update(libcore.icu.LocaleData, java.lang.String);
  public java.util.UnknownFormatConversionException unknownFormatConversionException();
public final class java.util.Formatter implements java.io.Closeable,java.io.Flushable {
  public java.util.Formatter();
  public java.util.Formatter(java.lang.Appendable);
  public java.util.Formatter(java.util.Locale);
  public java.util.Formatter(java.lang.Appendable, java.util.Locale);
  public java.util.Formatter(java.io.OutputStream);
  public java.util.Formatter(java.io.PrintStream);
  public java.util.Locale locale();
  public java.lang.Appendable out();
  public java.lang.String toString();
  public void flush();
  public void close();
  public java.io.IOException ioException();
  public java.util.Formatter format(java.lang.String, java.lang.Object...);
  public java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object...);
public class java.util.FormatterClosedException extends java.lang.IllegalStateException implements java.io.Serializable {
  public java.util.FormatterClosedException();
  public static final boolean isLeapYear(int);
  public static final int monthLength(int, int);
  public static final int previousMonthLength(int, int);
  public static long fieldsToDay(int, int, int);
  public static int dayOfWeek(long);
  public static int[] dayToFields(long, int[]);
  public static int[] timeToFields(long, int[]);
  public static long floorDivide(long, long);
  public static int getDayOfWeekInMonth(int, int, int);
public class java.util.GregorianCalendar extends java.util.Calendar {
  public java.util.GregorianCalendar();
  public java.util.GregorianCalendar(int, int, int);
  public java.util.GregorianCalendar(int, int, int, int, int);
  public java.util.GregorianCalendar(int, int, int, int, int, int);
  public java.util.GregorianCalendar(java.util.Locale);
  public java.util.GregorianCalendar(java.util.TimeZone);
  public java.util.GregorianCalendar(java.util.TimeZone, java.util.Locale);
  public void add(int, int);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public int getGreatestMinimum(int);
  public final java.util.Date getGregorianChange();
  public int getLeastMaximum(int);
  public int getMaximum(int);
  public int getMinimum(int);
  public int hashCode();
  public boolean isLeapYear(int);
  public void roll(int, int);
  public void roll(int, boolean);
  public void setGregorianChange(java.util.Date);
  public void setFirstDayOfWeek(int);
  public void setMinimalDaysInFirstWeek(int);
public class java.util.HashMap<K, V> extends java.util.AbstractMap<K, V> implements java.lang.Cloneable, java.io.Serializable {
  public java.util.HashMap();
  public java.util.HashMap(int);
  public java.util.HashMap(int, float);
  public java.util.HashMap(java.util.Map<? extends K, ? extends V>);
  public java.lang.Object clone();
  public boolean isEmpty();
  public int size();
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public void clear();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
public class java.util.HashSet<E> extends java.util.AbstractSet<E> implements java.util.Set<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.HashSet();
  public java.util.HashSet(int);
  public java.util.HashSet(int, float);
  public java.util.HashSet(java.util.Collection<? extends E>);
  public boolean add(E);
  public void clear();
  public java.lang.Object clone();
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public int size();
  public final K getKey();
  public final V getValue();
  public final V setValue(V);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
  public boolean hasMoreElements();
  public K nextElement();
  public boolean hasMoreElements();
  public V nextElement();
public class java.util.Hashtable<K, V> extends java.util.Dictionary<K, V> implements java.util.Map<K, V>, java.lang.Cloneable, java.io.Serializable {
  public java.util.Hashtable();
  public java.util.Hashtable(int);
  public java.util.Hashtable(int, float);
  public java.util.Hashtable(java.util.Map<? extends K, ? extends V>);
  public synchronized java.lang.Object clone();
  public synchronized boolean isEmpty();
  public synchronized int size();
  public synchronized V get(java.lang.Object);
  public synchronized boolean containsKey(java.lang.Object);
  public synchronized boolean containsValue(java.lang.Object);
  public boolean contains(java.lang.Object);
  public synchronized V put(K, V);
  public synchronized void putAll(java.util.Map<? extends K, ? extends V>);
  public synchronized V remove(java.lang.Object);
  public synchronized void clear();
  public synchronized java.util.Set<K> keySet();
  public synchronized java.util.Collection<V> values();
  public synchronized java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public synchronized java.util.Enumeration<K> keys();
  public synchronized java.util.Enumeration<V> elements();
  public synchronized boolean equals(java.lang.Object);
  public synchronized int hashCode();
  public synchronized java.lang.String toString();
  public boolean hasNext();
  public E next();
  public void remove();
  public java.lang.Object next();
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public int size();
  public void clear();
  public boolean contains(java.lang.Object);
  public java.util.HugeEnumSet<E> clone();
  public boolean containsAll(java.util.Collection<?>);
  public boolean equals(java.lang.Object);
  public java.util.Iterator<E> iterator();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.util.EnumSet clone();
  public boolean add(java.lang.Object);
public class java.util.IllegalFormatCodePointException extends java.util.IllegalFormatException implements java.io.Serializable {
  public java.util.IllegalFormatCodePointException(int);
  public int getCodePoint();
  public java.lang.String getMessage();
public class java.util.IllegalFormatConversionException extends java.util.IllegalFormatException implements java.io.Serializable {
  public java.util.IllegalFormatConversionException(char, java.lang.Class<?>);
  public java.lang.Class<?> getArgumentClass();
  public char getConversion();
  public java.lang.String getMessage();
public class java.util.IllegalFormatException extends java.lang.IllegalArgumentException implements java.io.Serializable {
public class java.util.IllegalFormatFlagsException extends java.util.IllegalFormatException implements java.io.Serializable {
  public java.util.IllegalFormatFlagsException(java.lang.String);
  public java.lang.String getFlags();
  public java.lang.String getMessage();
public class java.util.IllegalFormatPrecisionException extends java.util.IllegalFormatException {
  public java.util.IllegalFormatPrecisionException(int);
  public int getPrecision();
  public java.lang.String getMessage();
public class java.util.IllegalFormatWidthException extends java.util.IllegalFormatException {
  public java.util.IllegalFormatWidthException(int);
  public int getWidth();
  public java.lang.String getMessage();
public class java.util.InputMismatchException extends java.util.NoSuchElementException implements java.io.Serializable {
  public java.util.InputMismatchException();
  public java.util.InputMismatchException(java.lang.String);
public class java.util.InvalidPropertiesFormatException extends java.io.IOException {
  public java.util.InvalidPropertiesFormatException(java.lang.String);
  public java.util.InvalidPropertiesFormatException(java.lang.Throwable);
public interface java.util.Iterator<E> {
  public abstract boolean hasNext();
  public abstract E next();
  public abstract void remove();
public class java.util.LinkedHashMap<K, V> extends java.util.HashMap<K, V> {
  public java.util.LinkedHashMap();
  public java.util.LinkedHashMap(int);
  public java.util.LinkedHashMap(int, float);
  public java.util.LinkedHashMap(int, float, boolean);
  public java.util.LinkedHashMap(java.util.Map<? extends K, ? extends V>);
  public java.util.Map$Entry<K, V> eldest();
  public V get(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public void clear();
public class java.util.LinkedHashSet<E> extends java.util.HashSet<E> implements java.util.Set<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.LinkedHashSet();
  public java.util.LinkedHashSet(int);
  public java.util.LinkedHashSet(int, float);
  public java.util.LinkedHashSet(java.util.Collection<? extends E>);
public class java.util.LinkedList<E> extends java.util.AbstractSequentialList<E> implements java.util.List<E>, java.util.Deque<E>, java.util.Queue<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.LinkedList();
  public java.util.LinkedList(java.util.Collection<? extends E>);
  public void add(int, E);
  public boolean add(E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public boolean addAll(java.util.Collection<? extends E>);
  public void addFirst(E);
  public void addLast(E);
  public void clear();
  public java.lang.Object clone();
  public boolean contains(java.lang.Object);
  public E get(int);
  public E getFirst();
  public E getLast();
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<E> listIterator(int);
  public E remove(int);
  public boolean remove(java.lang.Object);
  public E removeFirst();
  public E removeLast();
  public java.util.Iterator<E> descendingIterator();
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E peekFirst();
  public E peekLast();
  public E pollFirst();
  public E pollLast();
  public E pop();
  public void push(E);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public E set(int, E);
  public int size();
  public boolean offer(E);
  public E poll();
  public E remove();
  public E peek();
  public E element();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
public interface java.util.List<E> extends java.util.Collection<E> {
  public abstract void add(int, E);
  public abstract boolean add(E);
  public abstract boolean addAll(int, java.util.Collection<? extends E>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract void clear();
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean equals(java.lang.Object);
  public abstract E get(int);
  public abstract int hashCode();
  public abstract int indexOf(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract java.util.Iterator<E> iterator();
  public abstract int lastIndexOf(java.lang.Object);
  public abstract java.util.ListIterator<E> listIterator();
  public abstract java.util.ListIterator<E> listIterator(int);
  public abstract E remove(int);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection<?>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract E set(int, E);
  public abstract int size();
  public abstract java.util.List<E> subList(int, int);
  public abstract java.lang.Object[] toArray();
  public abstract <T extends java/lang/Object> T[] toArray(T[]);
public interface java.util.ListIterator<E> extends java.util.Iterator<E> {
  public abstract void add(E);
  public abstract boolean hasNext();
  public abstract boolean hasPrevious();
  public abstract E next();
  public abstract int nextIndex();
  public abstract E previous();
  public abstract int previousIndex();
  public abstract void remove();
  public abstract void set(E);
public final class java.util.Locale implements java.lang.Cloneable,java.io.Serializable {
  public java.util.Locale(java.lang.String);
  public java.util.Locale(java.lang.String, java.lang.String);
  public java.util.Locale(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public static java.util.Locale[] getAvailableLocales();
  public java.lang.String getCountry();
  public static java.util.Locale getDefault();
  public final java.lang.String getDisplayCountry();
  public java.lang.String getDisplayCountry(java.util.Locale);
  public final java.lang.String getDisplayLanguage();
  public java.lang.String getDisplayLanguage(java.util.Locale);
  public final java.lang.String getDisplayName();
  public java.lang.String getDisplayName(java.util.Locale);
  public final java.lang.String getDisplayVariant();
  public java.lang.String getDisplayVariant(java.util.Locale);
  public java.lang.String getISO3Country();
  public java.lang.String getISO3Language();
  public static java.lang.String[] getISOCountries();
  public static java.lang.String[] getISOLanguages();
  public java.lang.String getLanguage();
  public java.lang.String getVariant();
  public synchronized int hashCode();
  public static synchronized void setDefault(java.util.Locale);
  public final java.lang.String toString();
public interface java.util.Map$Entry<K, V> {
  public abstract boolean equals(java.lang.Object);
  public abstract K getKey();
  public abstract V getValue();
  public abstract int hashCode();
  public abstract V setValue(V);
public interface java.util.Map<K, V> {
  public abstract void clear();
  public abstract boolean containsKey(java.lang.Object);
  public abstract boolean containsValue(java.lang.Object);
  public abstract java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public abstract boolean equals(java.lang.Object);
  public abstract V get(java.lang.Object);
  public abstract int hashCode();
  public abstract boolean isEmpty();
  public abstract java.util.Set<K> keySet();
  public abstract V put(K, V);
  public abstract void putAll(java.util.Map<? extends K, ? extends V>);
  public abstract V remove(java.lang.Object);
  public abstract int size();
  public abstract java.util.Collection<V> values();
  public abstract RT get(java.util.MapEntry<KT, VT>);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public K getKey();
  public V getValue();
  public int hashCode();
  public V setValue(V);
  public java.lang.String toString();
  public boolean hasNext();
  public E next();
  public void remove();
  public java.lang.Object next();
  public java.util.Iterator<E> iterator();
  public int size();
  public void clear();
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public boolean remove(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean add(java.lang.Object);
public class java.util.MissingFormatArgumentException extends java.util.IllegalFormatException {
  public java.util.MissingFormatArgumentException(java.lang.String);
  public java.lang.String getFormatSpecifier();
  public java.lang.String getMessage();
public class java.util.MissingFormatWidthException extends java.util.IllegalFormatException {
  public java.util.MissingFormatWidthException(java.lang.String);
  public java.lang.String getFormatSpecifier();
  public java.lang.String getMessage();
public class java.util.MissingResourceException extends java.lang.RuntimeException {
  public java.util.MissingResourceException(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getClassName();
  public java.lang.String getKey();
public interface java.util.NavigableMap<K, V> extends java.util.SortedMap<K, V> {
  public abstract java.util.Map$Entry<K, V> lowerEntry(K);
  public abstract K lowerKey(K);
  public abstract java.util.Map$Entry<K, V> floorEntry(K);
  public abstract K floorKey(K);
  public abstract java.util.Map$Entry<K, V> ceilingEntry(K);
  public abstract K ceilingKey(K);
  public abstract java.util.Map$Entry<K, V> higherEntry(K);
  public abstract K higherKey(K);
  public abstract java.util.Map$Entry<K, V> firstEntry();
  public abstract java.util.Map$Entry<K, V> lastEntry();
  public abstract java.util.Map$Entry<K, V> pollFirstEntry();
  public abstract java.util.Map$Entry<K, V> pollLastEntry();
  public abstract java.util.NavigableMap<K, V> descendingMap();
  public abstract java.util.NavigableSet<K> navigableKeySet();
  public abstract java.util.NavigableSet<K> descendingKeySet();
  public abstract java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean);
  public abstract java.util.NavigableMap<K, V> headMap(K, boolean);
  public abstract java.util.NavigableMap<K, V> tailMap(K, boolean);
  public abstract java.util.SortedMap<K, V> subMap(K, K);
  public abstract java.util.SortedMap<K, V> headMap(K);
  public abstract java.util.SortedMap<K, V> tailMap(K);
public interface java.util.NavigableSet<E> extends java.util.SortedSet<E> {
  public abstract E lower(E);
  public abstract E floor(E);
  public abstract E ceiling(E);
  public abstract E higher(E);
  public abstract E pollFirst();
  public abstract E pollLast();
  public abstract java.util.Iterator<E> iterator();
  public abstract java.util.NavigableSet<E> descendingSet();
  public abstract java.util.Iterator<E> descendingIterator();
  public abstract java.util.NavigableSet<E> subSet(E, boolean, E, boolean);
  public abstract java.util.NavigableSet<E> headSet(E, boolean);
  public abstract java.util.NavigableSet<E> tailSet(E, boolean);
  public abstract java.util.SortedSet<E> subSet(E, E);
  public abstract java.util.SortedSet<E> headSet(E);
  public abstract java.util.SortedSet<E> tailSet(E);
public class java.util.NoSuchElementException extends java.lang.RuntimeException {
  public java.util.NoSuchElementException();
  public java.util.NoSuchElementException(java.lang.String);
public class java.util.Observable {
  public java.util.Observable();
  public void addObserver(java.util.Observer);
  public int countObservers();
  public synchronized void deleteObserver(java.util.Observer);
  public synchronized void deleteObservers();
  public boolean hasChanged();
  public void notifyObservers();
  public void notifyObservers(java.lang.Object);
public interface java.util.Observer {
  public abstract void update(java.util.Observable, java.lang.Object);
public class java.util.Properties extends java.util.Hashtable<java.lang.Object, java.lang.Object> {
  public java.util.Properties();
  public java.util.Properties(java.util.Properties);
  public java.lang.String getProperty(java.lang.String);
  public java.lang.String getProperty(java.lang.String, java.lang.String);
  public void list(java.io.PrintStream);
  public void list(java.io.PrintWriter);
  public java.util.Enumeration<?> propertyNames();
  public java.util.Set<java.lang.String> stringPropertyNames();
  public void save(java.io.OutputStream, java.lang.String);
  public java.lang.Object setProperty(java.lang.String, java.lang.String);
  public boolean hasMoreElements();
  public java.lang.String nextElement();
  public java.lang.Object nextElement();
public class java.util.PropertyResourceBundle extends java.util.ResourceBundle {
  public java.util.Enumeration<java.lang.String> getKeys();
  public java.lang.Object handleGetObject(java.lang.String);
public interface java.util.Queue<E> extends java.util.Collection<E> {
  public abstract boolean add(E);
  public abstract boolean offer(E);
  public abstract E remove();
  public abstract E poll();
  public abstract E element();
  public abstract E peek();
public class java.util.Random implements java.io.Serializable {
  public java.util.Random();
  public java.util.Random(long);
  public boolean nextBoolean();
  public void nextBytes(byte[]);
  public double nextDouble();
  public float nextFloat();
  public synchronized double nextGaussian();
  public int nextInt();
  public int nextInt(int);
  public long nextLong();
  public synchronized void setSeed(long);
public interface java.util.RandomAccess {
public class java.util.ResourceBundle$Control {
  public static java.util.ResourceBundle$Control getControl(java.util.List<java.lang.String>);
  public static java.util.ResourceBundle$Control getNoFallbackControl(java.util.List<java.lang.String>);
  public java.util.List<java.util.Locale> getCandidateLocales(java.lang.String, java.util.Locale);
  public java.util.List<java.lang.String> getFormats(java.lang.String);
  public java.util.Locale getFallbackLocale(java.lang.String, java.util.Locale);
  public long getTimeToLive(java.lang.String, java.util.Locale);
  public boolean needsReload(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long);
  public java.lang.String toBundleName(java.lang.String, java.util.Locale);
  public final java.lang.String toResourceName(java.lang.String, java.lang.String);
  public java.util.Enumeration<java.lang.String> getKeys();
  public java.lang.Object handleGetObject(java.lang.String);
  public java.util.ResourceBundle$NoFallbackControl(java.lang.String);
  public java.util.ResourceBundle$NoFallbackControl(java.util.List<java.lang.String>);
  public java.util.Locale getFallbackLocale(java.lang.String, java.util.Locale);
  public java.util.ResourceBundle$SimpleControl(java.lang.String);
public abstract class java.util.ResourceBundle {
  public java.util.ResourceBundle();
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale);
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle$Control);
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle$Control);
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control);
  public abstract java.util.Enumeration<java.lang.String> getKeys();
  public java.util.Locale getLocale();
  public final java.lang.Object getObject(java.lang.String);
  public final java.lang.String getString(java.lang.String);
  public final java.lang.String[] getStringArray(java.lang.String);
  public static void clearCache();
  public static void clearCache(java.lang.ClassLoader);
  public boolean containsKey(java.lang.String);
  public java.util.Set<java.lang.String> keySet();
  public static java.util.Scanner$DataType[] values();
  public static java.util.Scanner$DataType valueOf(java.lang.String);
public final class java.util.Scanner implements java.util.Iterator<java.lang.String> {
  public java.util.Scanner(java.lang.String);
  public java.util.Scanner(java.io.InputStream);
  public java.util.Scanner(java.io.InputStream, java.lang.String);
  public java.util.Scanner(java.lang.Readable);
  public java.util.Scanner(java.nio.channels.ReadableByteChannel);
  public java.util.Scanner(java.nio.channels.ReadableByteChannel, java.lang.String);
  public void close();
  public java.util.regex.Pattern delimiter();
  public java.lang.String findInLine(java.util.regex.Pattern);
  public java.lang.String findInLine(java.lang.String);
  public java.lang.String findWithinHorizon(java.util.regex.Pattern, int);
  public java.lang.String findWithinHorizon(java.lang.String, int);
  public boolean hasNext();
  public boolean hasNext(java.util.regex.Pattern);
  public boolean hasNext(java.lang.String);
  public boolean hasNextBigDecimal();
  public boolean hasNextBigInteger();
  public boolean hasNextBigInteger(int);
  public boolean hasNextBoolean();
  public boolean hasNextByte();
  public boolean hasNextByte(int);
  public boolean hasNextDouble();
  public boolean hasNextFloat();
  public boolean hasNextInt();
  public boolean hasNextInt(int);
  public boolean hasNextLine();
  public boolean hasNextLong();
  public boolean hasNextLong(int);
  public boolean hasNextShort();
  public boolean hasNextShort(int);
  public java.io.IOException ioException();
  public java.util.Locale locale();
  public java.util.regex.MatchResult match();
  public java.lang.String next();
  public java.lang.String next(java.util.regex.Pattern);
  public java.lang.String next(java.lang.String);
  public java.math.BigDecimal nextBigDecimal();
  public java.math.BigInteger nextBigInteger();
  public java.math.BigInteger nextBigInteger(int);
  public boolean nextBoolean();
  public byte nextByte();
  public byte nextByte(int);
  public double nextDouble();
  public float nextFloat();
  public int nextInt();
  public int nextInt(int);
  public java.lang.String nextLine();
  public long nextLong();
  public long nextLong(int);
  public short nextShort();
  public short nextShort(int);
  public int radix();
  public java.util.Scanner skip(java.util.regex.Pattern);
  public java.util.Scanner skip(java.lang.String);
  public java.lang.String toString();
  public java.util.Scanner useDelimiter(java.util.regex.Pattern);
  public java.util.Scanner useDelimiter(java.lang.String);
  public java.util.Scanner useLocale(java.util.Locale);
  public java.util.Scanner useRadix(int);
  public void remove();
  public java.util.Scanner reset();
  public java.lang.Object next();
public class java.util.ServiceConfigurationError extends java.lang.Error {
  public java.util.ServiceConfigurationError(java.lang.String);
  public java.util.ServiceConfigurationError(java.lang.String, java.lang.Throwable);
  public java.util.ServiceLoader$ServiceIterator(java.util.ServiceLoader<S>);
  public boolean hasNext();
  public S next();
  public void remove();
public final class java.util.ServiceLoader<S> implements java.lang.Iterable<S> {
  public void reload();
  public java.util.Iterator<S> iterator();
  public static <S extends java/lang/Object> java.util.ServiceLoader<S> load(java.lang.Class<S>, java.lang.ClassLoader);
  public static <S extends java/lang/Object> java.util.ServiceLoader<S> load(java.lang.Class<S>);
  public static <S extends java/lang/Object> java.util.ServiceLoader<S> loadInstalled(java.lang.Class<S>);
  public static <S extends java/lang/Object> S loadFromSystemProperty(java.lang.Class<S>);
  public java.lang.String toString();
public interface java.util.Set<E> extends java.util.Collection<E> {
  public abstract boolean add(E);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract void clear();
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract boolean isEmpty();
  public abstract java.util.Iterator<E> iterator();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection<?>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract int size();
  public abstract java.lang.Object[] toArray();
  public abstract <T extends java/lang/Object> T[] toArray(T[]);
public class java.util.SimpleTimeZone extends java.util.TimeZone {
  public java.util.SimpleTimeZone(int, java.lang.String);
  public java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int);
  public java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int);
  public java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int);
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public int getDSTSavings();
  public int getOffset(int, int, int, int, int, int);
  public int getOffset(long);
  public int getRawOffset();
  public synchronized int hashCode();
  public boolean hasSameRules(java.util.TimeZone);
  public boolean inDaylightTime(java.util.Date);
  public void setDSTSavings(int);
  public void setEndRule(int, int, int);
  public void setEndRule(int, int, int, int);
  public void setEndRule(int, int, int, int, boolean);
  public void setRawOffset(int);
  public void setStartRule(int, int, int);
  public void setStartRule(int, int, int, int);
  public void setStartRule(int, int, int, int, boolean);
  public void setStartYear(int);
  public java.lang.String toString();
  public boolean useDaylightTime();
public interface java.util.SortedMap<K, V> extends java.util.Map<K, V> {
  public abstract java.util.Comparator<? super K> comparator();
  public abstract K firstKey();
  public abstract java.util.SortedMap<K, V> headMap(K);
  public abstract K lastKey();
  public abstract java.util.SortedMap<K, V> subMap(K, K);
  public abstract java.util.SortedMap<K, V> tailMap(K);
public interface java.util.SortedSet<E> extends java.util.Set<E> {
  public abstract java.util.Comparator<? super E> comparator();
  public abstract E first();
  public abstract java.util.SortedSet<E> headSet(E);
  public abstract E last();
  public abstract java.util.SortedSet<E> subSet(E, E);
  public abstract java.util.SortedSet<E> tailSet(E);
public class java.util.Stack<E> extends java.util.Vector<E> {
  public java.util.Stack();
  public boolean empty();
  public synchronized E peek();
  public synchronized E pop();
  public E push(E);
  public synchronized int search(java.lang.Object);
public class java.util.StringTokenizer implements java.util.Enumeration<java.lang.Object> {
  public java.util.StringTokenizer(java.lang.String);
  public java.util.StringTokenizer(java.lang.String, java.lang.String);
  public java.util.StringTokenizer(java.lang.String, java.lang.String, boolean);
  public int countTokens();
  public boolean hasMoreElements();
  public boolean hasMoreTokens();
  public java.lang.Object nextElement();
  public java.lang.String nextToken();
  public java.lang.String nextToken(java.lang.String);
public abstract class java.util.TimeZone implements java.io.Serializable,java.lang.Cloneable {
  public java.util.TimeZone();
  public java.lang.Object clone();
  public static synchronized java.lang.String[] getAvailableIDs();
  public static synchronized java.lang.String[] getAvailableIDs(int);
  public static synchronized java.util.TimeZone getDefault();
  public final java.lang.String getDisplayName();
  public final java.lang.String getDisplayName(java.util.Locale);
  public final java.lang.String getDisplayName(boolean, int);
  public java.lang.String getDisplayName(boolean, int, java.util.Locale);
  public java.lang.String getID();
  public int getDSTSavings();
  public int getOffset(long);
  public abstract int getOffset(int, int, int, int, int, int);
  public abstract int getRawOffset();
  public static synchronized java.util.TimeZone getTimeZone(java.lang.String);
  public boolean hasSameRules(java.util.TimeZone);
  public abstract boolean inDaylightTime(java.util.Date);
  public static synchronized void setDefault(java.util.TimeZone);
  public void setID(java.lang.String);
  public abstract void setRawOffset(int);
  public abstract boolean useDaylightTime();
  public java.util.TimerTask minimum();
  public boolean isEmpty();
  public void insert(java.util.TimerTask);
  public void delete(int);
  public void reset();
  public void adjustMinimum();
  public void deleteIfCancelled();
  public void run();
  public synchronized void cancel();
  public int purge();
public class java.util.Timer {
  public java.util.Timer(java.lang.String, boolean);
  public java.util.Timer(java.lang.String);
  public java.util.Timer(boolean);
  public java.util.Timer();
  public void cancel();
  public int purge();
  public void schedule(java.util.TimerTask, java.util.Date);
  public void schedule(java.util.TimerTask, long);
  public void schedule(java.util.TimerTask, long, long);
  public void schedule(java.util.TimerTask, java.util.Date, long);
  public void scheduleAtFixedRate(java.util.TimerTask, long, long);
  public void scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long);
public abstract class java.util.TimerTask implements java.lang.Runnable {
  public boolean cancel();
  public long scheduledExecutionTime();
  public abstract void run();
public class java.util.TooManyListenersException extends java.lang.Exception {
  public java.util.TooManyListenersException();
  public java.util.TooManyListenersException(java.lang.String);
  public int compare(java.lang.Comparable, java.lang.Comparable);
  public int compare(java.lang.Object, java.lang.Object);
  public java.lang.String leftCap(java.lang.Object);
  public java.lang.String rightCap(java.lang.Object);
  public java.lang.String leftCap(java.lang.Object);
  public java.lang.String rightCap(java.lang.Object);
  public java.lang.String leftCap(java.lang.Object);
  public java.lang.String rightCap(java.lang.Object);
  public static java.util.TreeMap$Bound[] values();
  public static java.util.TreeMap$Bound valueOf(java.lang.String);
  public abstract java.lang.String leftCap(java.lang.Object);
  public abstract java.lang.String rightCap(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public java.util.Iterator<K> iterator();
  public java.util.Iterator<K> descendingIterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public K first();
  public K pollFirst();
  public K last();
  public K pollLast();
  public K lower(K);
  public K floor(K);
  public K ceiling(K);
  public K higher(K);
  public java.util.Comparator<? super K> comparator();
  public java.util.NavigableSet<K> subSet(K, boolean, K, boolean);
  public java.util.SortedSet<K> subSet(K, K);
  public java.util.NavigableSet<K> headSet(K, boolean);
  public java.util.SortedSet<K> headSet(K);
  public java.util.NavigableSet<K> tailSet(K, boolean);
  public java.util.SortedSet<K> tailSet(K);
  public java.util.NavigableSet<K> descendingSet();
  public int size();
  public boolean isEmpty();
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public V put(K, V);
  public V remove(java.lang.Object);
  public java.util.Map$Entry<K, V> firstEntry();
  public java.util.Map$Entry<K, V> pollFirstEntry();
  public K firstKey();
  public java.util.Map$Entry<K, V> lastEntry();
  public java.util.Map$Entry<K, V> pollLastEntry();
  public K lastKey();
  public java.util.Map$Entry<K, V> lowerEntry(K);
  public K lowerKey(K);
  public java.util.Map$Entry<K, V> floorEntry(K);
  public K floorKey(K);
  public java.util.Map$Entry<K, V> ceilingEntry(K);
  public K ceilingKey(K);
  public java.util.Map$Entry<K, V> higherEntry(K);
  public K higherKey(K);
  public java.util.Comparator<? super K> comparator();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.Set<K> keySet();
  public java.util.NavigableSet<K> navigableKeySet();
  public java.util.NavigableMap<K, V> descendingMap();
  public java.util.NavigableSet<K> descendingKeySet();
  public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean);
  public java.util.NavigableMap<K, V> subMap(K, K);
  public java.util.NavigableMap<K, V> headMap(K, boolean);
  public java.util.NavigableMap<K, V> headMap(K);
  public java.util.NavigableMap<K, V> tailMap(K, boolean);
  public java.util.NavigableMap<K, V> tailMap(K);
  public java.util.SortedMap tailMap(java.lang.Object);
  public java.util.SortedMap headMap(java.lang.Object);
  public java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public int size();
  public java.util.Iterator<K> iterator();
  public java.util.Iterator<K> descendingIterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
  public java.util.Comparator<? super K> comparator();
  public K first();
  public K last();
  public K lower(K);
  public K floor(K);
  public K ceiling(K);
  public K higher(K);
  public K pollFirst();
  public K pollLast();
  public java.util.NavigableSet<K> subSet(K, boolean, K, boolean);
  public java.util.SortedSet<K> subSet(K, K);
  public java.util.NavigableSet<K> headSet(K, boolean);
  public java.util.SortedSet<K> headSet(K);
  public java.util.NavigableSet<K> tailSet(K, boolean);
  public java.util.SortedSet<K> tailSet(K);
  public java.util.NavigableSet<K> descendingSet();
  public static java.util.TreeMap$Relation[] values();
  public static java.util.TreeMap$Relation valueOf(java.lang.String);
public class java.util.TreeMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.SortedMap<K, V>, java.util.NavigableMap<K, V>, java.lang.Cloneable, java.io.Serializable {
  public java.util.TreeMap();
  public java.util.TreeMap(java.util.Map<? extends K, ? extends V>);
  public java.util.TreeMap(java.util.Comparator<? super K>);
  public java.util.TreeMap(java.util.SortedMap<K, ? extends V>);
  public java.lang.Object clone();
  public int size();
  public boolean isEmpty();
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public V put(K, V);
  public void clear();
  public V remove(java.lang.Object);
  public java.util.Map$Entry<K, V> firstEntry();
  public java.util.Map$Entry<K, V> pollFirstEntry();
  public K firstKey();
  public java.util.Map$Entry<K, V> lastEntry();
  public java.util.Map$Entry<K, V> pollLastEntry();
  public K lastKey();
  public java.util.Map$Entry<K, V> lowerEntry(K);
  public K lowerKey(K);
  public java.util.Map$Entry<K, V> floorEntry(K);
  public K floorKey(K);
  public java.util.Map$Entry<K, V> ceilingEntry(K);
  public K ceilingKey(K);
  public java.util.Map$Entry<K, V> higherEntry(K);
  public K higherKey(K);
  public java.util.Comparator<? super K> comparator();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.Set<K> keySet();
  public java.util.NavigableSet<K> navigableKeySet();
  public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean);
  public java.util.SortedMap<K, V> subMap(K, K);
  public java.util.NavigableMap<K, V> headMap(K, boolean);
  public java.util.SortedMap<K, V> headMap(K);
  public java.util.NavigableMap<K, V> tailMap(K, boolean);
  public java.util.SortedMap<K, V> tailMap(K);
  public java.util.NavigableMap<K, V> descendingMap();
  public java.util.NavigableSet<K> descendingKeySet();
public class java.util.TreeSet<E> extends java.util.AbstractSet<E> implements java.util.NavigableSet<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.TreeSet();
  public java.util.TreeSet(java.util.Collection<? extends E>);
  public java.util.TreeSet(java.util.Comparator<? super E>);
  public java.util.TreeSet(java.util.SortedSet<E>);
  public boolean add(E);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public java.lang.Object clone();
  public java.util.Comparator<? super E> comparator();
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public boolean remove(java.lang.Object);
  public int size();
  public E first();
  public E last();
  public E pollFirst();
  public E pollLast();
  public E higher(E);
  public E lower(E);
  public E ceiling(E);
  public E floor(E);
  public java.util.NavigableSet<E> descendingSet();
  public java.util.NavigableSet<E> subSet(E, boolean, E, boolean);
  public java.util.NavigableSet<E> headSet(E, boolean);
  public java.util.NavigableSet<E> tailSet(E, boolean);
  public java.util.SortedSet<E> subSet(E, E);
  public java.util.SortedSet<E> headSet(E);
  public java.util.SortedSet<E> tailSet(E);
public final class java.util.UUID implements java.io.Serializable, java.lang.Comparable<java.util.UUID> {
  public java.util.UUID(long, long);
  public static java.util.UUID randomUUID();
  public static java.util.UUID nameUUIDFromBytes(byte[]);
  public static java.util.UUID fromString(java.lang.String);
  public long getLeastSignificantBits();
  public long getMostSignificantBits();
  public int version();
  public int variant();
  public long timestamp();
  public int clockSequence();
  public long node();
  public int compareTo(java.util.UUID);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
public class java.util.UnknownFormatConversionException extends java.util.IllegalFormatException {
  public java.util.UnknownFormatConversionException(java.lang.String);
  public java.lang.String getConversion();
  public java.lang.String getMessage();
public class java.util.UnsafeArrayList<T> extends java.util.AbstractList<T> {
  public java.util.UnsafeArrayList(java.lang.Class<T>, int);
  public boolean add(T);
  public T[] array();
  public T get(int);
  public int size();
public class java.util.Vector<E> extends java.util.AbstractList<E> implements java.util.List<E>, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable {
  public java.util.Vector();
  public java.util.Vector(int);
  public java.util.Vector(int, int);
  public java.util.Vector(java.util.Collection<? extends E>);
  public void add(int, E);
  public synchronized boolean add(E);
  public synchronized boolean addAll(int, java.util.Collection<? extends E>);
  public synchronized boolean addAll(java.util.Collection<? extends E>);
  public synchronized void addElement(E);
  public synchronized int capacity();
  public void clear();
  public synchronized java.lang.Object clone();
  public boolean contains(java.lang.Object);
  public synchronized boolean containsAll(java.util.Collection<?>);
  public synchronized void copyInto(java.lang.Object[]);
  public synchronized E elementAt(int);
  public java.util.Enumeration<E> elements();
  public synchronized void ensureCapacity(int);
  public synchronized boolean equals(java.lang.Object);
  public synchronized E firstElement();
  public E get(int);
  public synchronized int hashCode();
  public int indexOf(java.lang.Object);
  public synchronized int indexOf(java.lang.Object, int);
  public synchronized void insertElementAt(E, int);
  public synchronized boolean isEmpty();
  public synchronized E lastElement();
  public synchronized int lastIndexOf(java.lang.Object);
  public synchronized int lastIndexOf(java.lang.Object, int);
  public synchronized E remove(int);
  public boolean remove(java.lang.Object);
  public synchronized boolean removeAll(java.util.Collection<?>);
  public synchronized void removeAllElements();
  public synchronized boolean removeElement(java.lang.Object);
  public synchronized void removeElementAt(int);
  public synchronized boolean retainAll(java.util.Collection<?>);
  public synchronized E set(int, E);
  public synchronized void setElementAt(E, int);
  public synchronized void setSize(int);
  public synchronized int size();
  public synchronized java.util.List<E> subList(int, int);
  public synchronized java.lang.Object[] toArray();
  public synchronized <T extends java/lang/Object> T[] toArray(T[]);
  public synchronized java.lang.String toString();
  public synchronized void trimToSize();
  public java.util.Map$Entry<K, V> get(java.util.Map$Entry<K, V>);
  public java.lang.Object get(java.util.Map$Entry);
  public int size();
  public void clear();
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public abstract R get(java.util.Map$Entry<K, V>);
  public K getKey();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public boolean hasNext();
  public R next();
  public void remove();
public class java.util.WeakHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.Map<K, V> {
  public java.util.WeakHashMap();
  public java.util.WeakHashMap(int);
  public java.util.WeakHashMap(int, float);
  public java.util.WeakHashMap(java.util.Map<? extends K, ? extends V>);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public V get(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean isEmpty();
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public int size();
public abstract class java.util.concurrent.AbstractExecutorService implements java.util.concurrent.ExecutorService {
  public java.util.concurrent.AbstractExecutorService();
  public java.util.concurrent.Future<?> submit(java.lang.Runnable);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
  public boolean hasNext();
  public E next();
  public void remove();
public class java.util.concurrent.ArrayBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E>, java.io.Serializable {
  public java.util.concurrent.ArrayBlockingQueue(int);
  public java.util.concurrent.ArrayBlockingQueue(int, boolean);
  public java.util.concurrent.ArrayBlockingQueue(int, boolean, java.util.Collection<? extends E>);
  public boolean add(E);
  public boolean offer(E);
  public E poll();
  public E peek();
  public int size();
  public int remainingCapacity();
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public void clear();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public java.util.Iterator<E> iterator();
public interface java.util.concurrent.BlockingQueue<E> extends java.util.Queue<E> {
  public abstract boolean add(E);
  public abstract boolean offer(E);
  public abstract int remainingCapacity();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract int drainTo(java.util.Collection<? super E>);
  public abstract int drainTo(java.util.Collection<? super E>, int);
public interface java.util.concurrent.Callable<V> {
public class java.util.concurrent.CancellationException extends java.lang.IllegalStateException {
  public java.util.concurrent.CancellationException();
  public java.util.concurrent.CancellationException(java.lang.String);
public interface java.util.concurrent.CompletionService<V> {
  public abstract java.util.concurrent.Future<V> submit(java.util.concurrent.Callable<V>);
  public abstract java.util.concurrent.Future<V> submit(java.lang.Runnable, V);
  public abstract java.util.concurrent.Future<V> poll();
  public java.util.Map$Entry<K, V> next();
  public java.lang.Object next();
  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public void clear();
  public boolean hasMoreElements();
  public boolean hasNext();
  public void remove();
  public K next();
  public K nextElement();
  public java.util.Iterator<K> iterator();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public void clear();
  public V next();
  public V nextElement();
  public java.util.Iterator<V> iterator();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public void clear();
  public V setValue(V);
public class java.util.concurrent.ConcurrentHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V>, java.io.Serializable {
  public java.util.concurrent.ConcurrentHashMap(int, float, int);
  public java.util.concurrent.ConcurrentHashMap(int, float);
  public java.util.concurrent.ConcurrentHashMap(int);
  public java.util.concurrent.ConcurrentHashMap();
  public java.util.concurrent.ConcurrentHashMap(java.util.Map<? extends K, ? extends V>);
  public boolean isEmpty();
  public int size();
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean contains(java.lang.Object);
  public V put(K, V);
  public V putIfAbsent(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(K, V, V);
  public V replace(K, V);
  public void clear();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.Enumeration<K> keys();
  public java.util.Enumeration<V> elements();
  public boolean hasNext();
  public E next();
  public void remove();
public class java.util.concurrent.ConcurrentLinkedQueue<E> extends java.util.AbstractQueue<E> implements java.util.Queue<E>, java.io.Serializable {
  public java.util.concurrent.ConcurrentLinkedQueue();
  public java.util.concurrent.ConcurrentLinkedQueue(java.util.Collection<? extends E>);
  public boolean add(E);
  public boolean offer(E);
  public E poll();
  public E peek();
  public boolean isEmpty();
  public int size();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.util.Iterator<E> iterator();
public interface java.util.concurrent.ConcurrentMap<K, V> extends java.util.Map<K, V> {
  public abstract V putIfAbsent(K, V);
  public abstract boolean remove(java.lang.Object, java.lang.Object);
  public abstract boolean replace(K, V, V);
  public abstract V replace(K, V);
  public void add(E);
  public boolean hasNext();
  public boolean hasPrevious();
  public E next();
  public int nextIndex();
  public E previous();
  public int previousIndex();
  public void remove();
  public void set(E);
  public java.util.concurrent.CopyOnWriteArrayList$CowSubList(java.util.concurrent.CopyOnWriteArrayList, java.lang.Object[], int, int);
  public int size();
  public boolean isEmpty();
  public E get(int);
  public java.util.Iterator<E> iterator();
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public java.util.List<E> subList(int, int);
  public E remove(int);
  public void clear();
  public void add(int, E);
  public boolean add(E);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public boolean addAll(java.util.Collection<? extends E>);
  public E set(int, E);
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
public class java.util.concurrent.CopyOnWriteArrayList<E> implements java.util.List<E>, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable {
  public java.util.concurrent.CopyOnWriteArrayList();
  public java.util.concurrent.CopyOnWriteArrayList(java.util.Collection<? extends E>);
  public java.util.concurrent.CopyOnWriteArrayList(E[]);
  public java.lang.Object clone();
  public int size();
  public E get(int);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public int indexOf(E, int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(E, int);
  public int lastIndexOf(java.lang.Object);
  public boolean isEmpty();
  public java.util.Iterator<E> iterator();
  public java.util.ListIterator<E> listIterator(int);
  public java.util.ListIterator<E> listIterator();
  public java.util.List<E> subList(int, int);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public synchronized boolean add(E);
  public synchronized void add(int, E);
  public synchronized boolean addAll(java.util.Collection<? extends E>);
  public synchronized boolean addAll(int, java.util.Collection<? extends E>);
  public synchronized int addAllAbsent(java.util.Collection<? extends E>);
  public synchronized boolean addIfAbsent(E);
  public synchronized void clear();
  public synchronized E remove(int);
  public synchronized boolean remove(java.lang.Object);
  public synchronized boolean removeAll(java.util.Collection<?>);
  public synchronized boolean retainAll(java.util.Collection<?>);
  public synchronized E set(int, E);
public class java.util.concurrent.CopyOnWriteArraySet<E> extends java.util.AbstractSet<E> implements java.io.Serializable {
  public java.util.concurrent.CopyOnWriteArraySet();
  public java.util.concurrent.CopyOnWriteArraySet(java.util.Collection<? extends E>);
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public void clear();
  public boolean remove(java.lang.Object);
  public boolean add(E);
  public boolean containsAll(java.util.Collection<?>);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public java.util.Iterator<E> iterator();
  public boolean equals(java.lang.Object);
public class java.util.concurrent.CountDownLatch {
  public java.util.concurrent.CountDownLatch(int);
  public void countDown();
  public long getCount();
  public java.lang.String toString();
public interface java.util.concurrent.Delayed extends java.lang.Comparable<java.util.concurrent.Delayed> {
  public abstract long getDelay(java.util.concurrent.TimeUnit);
  public java.util.concurrent.Exchanger$Node(java.lang.Object);
public class java.util.concurrent.Exchanger<V> {
  public java.util.concurrent.Exchanger();
public class java.util.concurrent.ExecutionException extends java.lang.Exception {
  public java.util.concurrent.ExecutionException(java.lang.String, java.lang.Throwable);
  public java.util.concurrent.ExecutionException(java.lang.Throwable);
public interface java.util.concurrent.Executor {
  public abstract void execute(java.lang.Runnable);
public class java.util.concurrent.ExecutorCompletionService<V> implements java.util.concurrent.CompletionService<V> {
  public java.util.concurrent.ExecutorCompletionService(java.util.concurrent.Executor);
  public java.util.concurrent.ExecutorCompletionService(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue<java.util.concurrent.Future<V>>);
  public java.util.concurrent.Future<V> submit(java.util.concurrent.Callable<V>);
  public java.util.concurrent.Future<V> submit(java.lang.Runnable, V);
  public java.util.concurrent.Future<V> poll();
public interface java.util.concurrent.ExecutorService extends java.util.concurrent.Executor {
  public abstract void shutdown();
  public abstract java.util.List<java.lang.Runnable> shutdownNow();
  public abstract boolean isShutdown();
  public abstract boolean isTerminated();
  public abstract <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
  public abstract <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
  public abstract java.util.concurrent.Future<?> submit(java.lang.Runnable);
  public java.lang.Object call();
  public java.lang.Thread newThread(java.lang.Runnable);
  public void execute(java.lang.Runnable);
  public void shutdown();
  public java.util.List<java.lang.Runnable> shutdownNow();
  public boolean isShutdown();
  public boolean isTerminated();
  public java.util.concurrent.Future<?> submit(java.lang.Runnable);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
  public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public <V extends java/lang/Object> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public java.lang.Void run();
  public java.lang.Object run();
  public void run();
  public java.lang.Thread newThread(java.lang.Runnable);
  public T call();
public class java.util.concurrent.Executors {
  public static java.util.concurrent.ExecutorService newFixedThreadPool(int);
  public static java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService newSingleThreadExecutor();
  public static java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService newCachedThreadPool();
  public static java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor();
  public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int);
  public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService);
  public static java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService);
  public static java.util.concurrent.ThreadFactory defaultThreadFactory();
  public static java.util.concurrent.ThreadFactory privilegedThreadFactory();
  public static <T extends java/lang/Object> java.util.concurrent.Callable<T> callable(java.lang.Runnable, T);
  public static java.util.concurrent.Callable<java.lang.Object> callable(java.lang.Runnable);
  public static java.util.concurrent.Callable<java.lang.Object> callable(java.security.PrivilegedAction<?>);
  public static java.util.concurrent.Callable<java.lang.Object> callable(java.security.PrivilegedExceptionAction<?>);
  public static <T extends java/lang/Object> java.util.concurrent.Callable<T> privilegedCallable(java.util.concurrent.Callable<T>);
  public static <T extends java/lang/Object> java.util.concurrent.Callable<T> privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable<T>);
public interface java.util.concurrent.Future<V> {
  public abstract boolean cancel(boolean);
  public abstract boolean isCancelled();
  public abstract boolean isDone();
public class java.util.concurrent.FutureTask<V> implements java.util.concurrent.RunnableFuture<V> {
  public java.util.concurrent.FutureTask(java.util.concurrent.Callable<V>);
  public java.util.concurrent.FutureTask(java.lang.Runnable, V);
  public boolean isCancelled();
  public boolean isDone();
  public boolean cancel(boolean);
  public void run();
  public boolean hasNext();
  public E next();
  public void remove();
public class java.util.concurrent.LinkedBlockingDeque<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingDeque<E>, java.io.Serializable {
  public java.util.concurrent.LinkedBlockingDeque();
  public java.util.concurrent.LinkedBlockingDeque(int);
  public java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E>);
  public void addFirst(E);
  public void addLast(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E removeFirst();
  public E removeLast();
  public E pollFirst();
  public E pollLast();
  public E getFirst();
  public E getLast();
  public E peekFirst();
  public E peekLast();
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public boolean add(E);
  public boolean offer(E);
  public E remove();
  public E poll();
  public E element();
  public E peek();
  public int remainingCapacity();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public void push(E);
  public E pop();
  public boolean remove(java.lang.Object);
  public int size();
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public void clear();
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public boolean hasNext();
  public E next();
  public void remove();
public class java.util.concurrent.LinkedBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E>, java.io.Serializable {
  public java.util.concurrent.LinkedBlockingQueue();
  public java.util.concurrent.LinkedBlockingQueue(int);
  public java.util.concurrent.LinkedBlockingQueue(java.util.Collection<? extends E>);
  public int size();
  public int remainingCapacity();
  public boolean offer(E);
  public E poll();
  public E peek();
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.lang.String toString();
  public void clear();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public java.util.Iterator<E> iterator();
public class java.util.concurrent.RejectedExecutionException extends java.lang.RuntimeException {
  public java.util.concurrent.RejectedExecutionException();
  public java.util.concurrent.RejectedExecutionException(java.lang.String);
  public java.util.concurrent.RejectedExecutionException(java.lang.String, java.lang.Throwable);
  public java.util.concurrent.RejectedExecutionException(java.lang.Throwable);
public interface java.util.concurrent.RejectedExecutionHandler {
  public abstract void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
public interface java.util.concurrent.RunnableFuture<V> extends java.lang.Runnable, java.util.concurrent.Future<V> {
  public abstract void run();
public interface java.util.concurrent.RunnableScheduledFuture<V> extends java.util.concurrent.RunnableFuture<V>, java.util.concurrent.ScheduledFuture<V> {
  public abstract boolean isPeriodic();
public interface java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService {
  public abstract java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public abstract <V extends java/lang/Object> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit);
  public abstract java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public abstract java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
public interface java.util.concurrent.ScheduledFuture<V> extends java.util.concurrent.Delayed, java.util.concurrent.Future<V> {
  public boolean hasNext();
  public java.lang.Runnable next();
  public void remove();
  public java.lang.Object next();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public boolean isEmpty();
  public int remainingCapacity();
  public java.util.concurrent.RunnableScheduledFuture peek();
  public boolean offer(java.lang.Runnable);
  public void put(java.lang.Runnable);
  public boolean add(java.lang.Runnable);
  public boolean offer(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.RunnableScheduledFuture poll();
  public void clear();
  public int drainTo(java.util.Collection<? super java.lang.Runnable>);
  public int drainTo(java.util.Collection<? super java.lang.Runnable>, int);
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public java.util.Iterator<java.lang.Runnable> iterator();
  public boolean add(java.lang.Object);
  public java.lang.Object peek();
  public java.lang.Object poll();
  public boolean offer(java.lang.Object);
  public long getDelay(java.util.concurrent.TimeUnit);
  public int compareTo(java.util.concurrent.Delayed);
  public boolean isPeriodic();
  public boolean cancel(boolean);
  public void run();
  public int compareTo(java.lang.Object);
public class java.util.concurrent.ScheduledThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements java.util.concurrent.ScheduledExecutorService {
  public java.util.concurrent.ScheduledThreadPoolExecutor(int);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.RejectedExecutionHandler);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);
  public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public <V extends java/lang/Object> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public void execute(java.lang.Runnable);
  public java.util.concurrent.Future<?> submit(java.lang.Runnable);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
  public <T extends java/lang/Object> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
  public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean);
  public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();
  public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean);
  public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();
  public void shutdown();
  public java.util.List<java.lang.Runnable> shutdownNow();
  public java.util.concurrent.BlockingQueue<java.lang.Runnable> getQueue();
public class java.util.concurrent.Semaphore implements java.io.Serializable {
  public java.util.concurrent.Semaphore(int);
  public java.util.concurrent.Semaphore(int, boolean);
  public void acquireUninterruptibly();
  public boolean tryAcquire();
  public void release();
  public void acquireUninterruptibly(int);
  public boolean tryAcquire(int);
  public void release(int);
  public int availablePermits();
  public int drainPermits();
  public boolean isFair();
  public final boolean hasQueuedThreads();
  public final int getQueueLength();
  public java.lang.String toString();
public class java.util.concurrent.SynchronousQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E>, java.io.Serializable {
  public java.util.concurrent.SynchronousQueue();
  public java.util.concurrent.SynchronousQueue(boolean);
  public boolean offer(E);
  public E poll();
  public boolean isEmpty();
  public int size();
  public int remainingCapacity();
  public void clear();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public E peek();
  public java.util.Iterator<E> iterator();
  public java.lang.Object[] toArray();
  public <T extends java/lang/Object> T[] toArray(T[]);
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
public interface java.util.concurrent.ThreadFactory {
  public abstract java.lang.Thread newThread(java.lang.Runnable);
public class java.util.concurrent.ThreadPoolExecutor$AbortPolicy implements java.util.concurrent.RejectedExecutionHandler {
  public java.util.concurrent.ThreadPoolExecutor$AbortPolicy();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
public class java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy implements java.util.concurrent.RejectedExecutionHandler {
  public java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
public class java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy implements java.util.concurrent.RejectedExecutionHandler {
  public java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
public class java.util.concurrent.ThreadPoolExecutor$DiscardPolicy implements java.util.concurrent.RejectedExecutionHandler {
  public java.util.concurrent.ThreadPoolExecutor$DiscardPolicy();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
  public void run();
  public void lock();
  public boolean tryLock();
  public void unlock();
  public boolean isLocked();
public class java.util.concurrent.ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService {
  public java.util.concurrent.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>);
  public java.util.concurrent.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory);
  public java.util.concurrent.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.RejectedExecutionHandler);
  public java.util.concurrent.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);
  public void execute(java.lang.Runnable);
  public void shutdown();
  public java.util.List<java.lang.Runnable> shutdownNow();
  public boolean isShutdown();
  public boolean isTerminating();
  public boolean isTerminated();
  public void setThreadFactory(java.util.concurrent.ThreadFactory);
  public java.util.concurrent.ThreadFactory getThreadFactory();
  public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler);
  public java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler();
  public void setCorePoolSize(int);
  public int getCorePoolSize();
  public boolean prestartCoreThread();
  public int prestartAllCoreThreads();
  public boolean allowsCoreThreadTimeOut();
  public void allowCoreThreadTimeOut(boolean);
  public void setMaximumPoolSize(int);
  public int getMaximumPoolSize();
  public void setKeepAliveTime(long, java.util.concurrent.TimeUnit);
  public long getKeepAliveTime(java.util.concurrent.TimeUnit);
  public java.util.concurrent.BlockingQueue<java.lang.Runnable> getQueue();
  public boolean remove(java.lang.Runnable);
  public void purge();
  public int getPoolSize();
  public int getActiveCount();
  public int getLargestPoolSize();
  public long getTaskCount();
  public long getCompletedTaskCount();
  public java.lang.String toString();
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
  public long convert(long, java.util.concurrent.TimeUnit);
public abstract class java.util.concurrent.TimeUnit extends java.lang.Enum<java.util.concurrent.TimeUnit> {
  public static java.util.concurrent.TimeUnit[] values();
  public static java.util.concurrent.TimeUnit valueOf(java.lang.String);
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toNanos(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toSeconds(long);
  public long toMinutes(long);
  public long toHours(long);
  public long toDays(long);
public class java.util.concurrent.TimeoutException extends java.lang.Exception {
  public java.util.concurrent.TimeoutException();
  public java.util.concurrent.TimeoutException(java.lang.String);
public class java.util.concurrent.atomic.AtomicBoolean implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicBoolean(boolean);
  public java.util.concurrent.atomic.AtomicBoolean();
  public final boolean get();
  public final boolean compareAndSet(boolean, boolean);
  public boolean weakCompareAndSet(boolean, boolean);
  public final void set(boolean);
  public final void lazySet(boolean);
  public final boolean getAndSet(boolean);
  public java.lang.String toString();
public class java.util.concurrent.atomic.AtomicInteger extends java.lang.Number implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicInteger(int);
  public java.util.concurrent.atomic.AtomicInteger();
  public final int get();
  public final void set(int);
  public final void lazySet(int);
  public final int getAndSet(int);
  public final boolean compareAndSet(int, int);
  public final boolean weakCompareAndSet(int, int);
  public final int getAndIncrement();
  public final int getAndDecrement();
  public final int getAndAdd(int);
  public final int incrementAndGet();
  public final int decrementAndGet();
  public final int addAndGet(int);
  public java.lang.String toString();
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
public class java.util.concurrent.atomic.AtomicLong extends java.lang.Number implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicLong(long);
  public java.util.concurrent.atomic.AtomicLong();
  public final long get();
  public final void set(long);
  public final void lazySet(long);
  public final long getAndSet(long);
  public final boolean compareAndSet(long, long);
  public final boolean weakCompareAndSet(long, long);
  public final long getAndIncrement();
  public final long getAndDecrement();
  public final long getAndAdd(long);
  public final long incrementAndGet();
  public final long decrementAndGet();
  public final long addAndGet(long);
  public java.lang.String toString();
  public int intValue();
  public long longValue();
  public float floatValue();
  public double doubleValue();
public class java.util.concurrent.atomic.AtomicReference<V> implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicReference(V);
  public java.util.concurrent.atomic.AtomicReference();
  public final V get();
  public final void set(V);
  public final void lazySet(V);
  public final boolean compareAndSet(V, V);
  public final boolean weakCompareAndSet(V, V);
  public final V getAndSet(V);
  public java.lang.String toString();
public abstract class java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.Serializable {
public class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject implements java.util.concurrent.locks.Condition,java.io.Serializable {
  public java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject(java.util.concurrent.locks.AbstractQueuedSynchronizer);
  public final void signal();
  public final void signalAll();
  public final void awaitUninterruptibly();
public abstract class java.util.concurrent.locks.AbstractQueuedSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.Serializable {
  public final void acquire(int);
  public final boolean release(int);
  public final void acquireShared(int);
  public final boolean releaseShared(int);
  public final boolean hasQueuedThreads();
  public final boolean hasContended();
  public final java.lang.Thread getFirstQueuedThread();
  public final boolean isQueued(java.lang.Thread);
  public final boolean hasQueuedPredecessors();
  public final int getQueueLength();
  public final java.util.Collection<java.lang.Thread> getQueuedThreads();
  public final java.util.Collection<java.lang.Thread> getExclusiveQueuedThreads();
  public final java.util.Collection<java.lang.Thread> getSharedQueuedThreads();
  public java.lang.String toString();
  public final boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final java.util.Collection<java.lang.Thread> getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
public interface java.util.concurrent.locks.Condition {
  public abstract void awaitUninterruptibly();
  public abstract void signal();
  public abstract void signalAll();
public interface java.util.concurrent.locks.Lock {
  public abstract void lock();
  public abstract boolean tryLock();
  public abstract void unlock();
  public abstract java.util.concurrent.locks.Condition newCondition();
public class java.util.concurrent.locks.LockSupport {
  public static void unpark(java.lang.Thread);
  public static void park(java.lang.Object);
  public static void parkNanos(java.lang.Object, long);
  public static void parkUntil(java.lang.Object, long);
  public static java.lang.Object getBlocker(java.lang.Thread);
  public static void park();
  public static void parkNanos(long);
  public static void parkUntil(long);
public interface java.util.concurrent.locks.ReadWriteLock {
  public abstract java.util.concurrent.locks.Lock readLock();
  public abstract java.util.concurrent.locks.Lock writeLock();
public class java.util.concurrent.locks.ReentrantLock implements java.util.concurrent.locks.Lock,java.io.Serializable {
  public java.util.concurrent.locks.ReentrantLock();
  public java.util.concurrent.locks.ReentrantLock(boolean);
  public void lock();
  public boolean tryLock();
  public void unlock();
  public java.util.concurrent.locks.Condition newCondition();
  public int getHoldCount();
  public boolean isHeldByCurrentThread();
  public boolean isLocked();
  public final boolean isFair();
  public final boolean hasQueuedThreads();
  public final boolean hasQueuedThread(java.lang.Thread);
  public final int getQueueLength();
  public boolean hasWaiters(java.util.concurrent.locks.Condition);
  public int getWaitQueueLength(java.util.concurrent.locks.Condition);
  public java.lang.String toString();
public class java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock implements java.util.concurrent.locks.Lock,java.io.Serializable {
  public void lock();
  public boolean tryLock();
  public void unlock();
  public java.util.concurrent.locks.Condition newCondition();
  public java.lang.String toString();
  public java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter initialValue();
  public java.lang.Object initialValue();
public class java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock implements java.util.concurrent.locks.Lock,java.io.Serializable {
  public void lock();
  public boolean tryLock();
  public void unlock();
  public java.util.concurrent.locks.Condition newCondition();
  public java.lang.String toString();
  public boolean isHeldByCurrentThread();
  public int getHoldCount();
public class java.util.concurrent.locks.ReentrantReadWriteLock implements java.util.concurrent.locks.ReadWriteLock,java.io.Serializable {
  public java.util.concurrent.locks.ReentrantReadWriteLock();
  public java.util.concurrent.locks.ReentrantReadWriteLock(boolean);
  public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock();
  public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock();
  public final boolean isFair();
  public int getReadLockCount();
  public boolean isWriteLocked();
  public boolean isWriteLockedByCurrentThread();
  public int getWriteHoldCount();
  public int getReadHoldCount();
  public final boolean hasQueuedThreads();
  public final boolean hasQueuedThread(java.lang.Thread);
  public final int getQueueLength();
  public boolean hasWaiters(java.util.concurrent.locks.Condition);
  public int getWaitQueueLength(java.util.concurrent.locks.Condition);
  public java.lang.String toString();
  public java.util.concurrent.locks.Lock writeLock();
  public java.util.concurrent.locks.Lock readLock();
public class java.util.jar.Attributes$Name {
  public java.util.jar.Attributes$Name(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public class java.util.jar.Attributes implements java.lang.Cloneable, java.util.Map<java.lang.Object, java.lang.Object> {
  public java.util.jar.Attributes();
  public java.util.jar.Attributes(java.util.jar.Attributes);
  public java.util.jar.Attributes(int);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();
  public java.lang.Object get(java.lang.Object);
  public boolean isEmpty();
  public java.util.Set<java.lang.Object> keySet();
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public void putAll(java.util.Map<?, ?>);
  public java.lang.Object remove(java.lang.Object);
  public int size();
  public java.util.Collection<java.lang.Object> values();
  public java.lang.Object clone();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String getValue(java.util.jar.Attributes$Name);
  public java.lang.String getValue(java.lang.String);
  public java.lang.String putValue(java.lang.String, java.lang.String);
public class java.util.jar.JarEntry extends java.util.zip.ZipEntry {
  public java.util.jar.JarEntry(java.lang.String);
  public java.util.jar.JarEntry(java.util.zip.ZipEntry);
  public java.security.cert.Certificate[] getCertificates();
  public java.util.jar.JarEntry(java.util.jar.JarEntry);
  public java.security.CodeSigner[] getCodeSigners();
  public boolean hasMoreElements();
  public java.util.jar.JarEntry nextElement();
  public java.lang.Object nextElement();
public class java.util.jar.JarFile extends java.util.zip.ZipFile {
  public java.util.Enumeration<java.util.jar.JarEntry> entries();
  public java.util.jar.JarEntry getJarEntry(java.lang.String);
  public java.util.zip.ZipEntry getEntry(java.lang.String);
  public void write(int);
  public void write(byte[], int, int);
  public static java.util.Vector<java.security.cert.Certificate> getSignerCertificates(java.lang.String, java.util.Map<java.lang.String, java.security.cert.Certificate[]>);
public class java.util.jar.Manifest implements java.lang.Cloneable {
  public java.util.jar.Manifest();
  public java.util.jar.Manifest(java.util.jar.Manifest);
  public void clear();
  public java.util.jar.Attributes getAttributes(java.lang.String);
  public java.util.Map<java.lang.String, java.util.jar.Attributes> getEntries();
  public java.util.jar.Attributes getMainAttributes();
  public java.lang.Object clone();
  public int hashCode();
  public boolean equals(java.lang.Object);
public class java.util.logging.ErrorManager {
  public java.util.logging.ErrorManager();
  public void error(java.lang.String, java.lang.Exception, int);
public interface java.util.logging.Filter {
  public abstract boolean isLoggable(java.util.logging.LogRecord);
public abstract class java.util.logging.Formatter {
  public abstract java.lang.String format(java.util.logging.LogRecord);
  public java.lang.String formatMessage(java.util.logging.LogRecord);
  public java.lang.String getHead(java.util.logging.Handler);
  public java.lang.String getTail(java.util.logging.Handler);
public abstract class java.util.logging.Handler {
  public abstract void close();
  public abstract void flush();
  public abstract void publish(java.util.logging.LogRecord);
  public java.lang.String getEncoding();
  public java.util.logging.ErrorManager getErrorManager();
  public java.util.logging.Filter getFilter();
  public java.util.logging.Formatter getFormatter();
  public java.util.logging.Level getLevel();
  public boolean isLoggable(java.util.logging.LogRecord);
  public void setErrorManager(java.util.logging.ErrorManager);
  public void setFilter(java.util.logging.Filter);
  public void setFormatter(java.util.logging.Formatter);
  public void setLevel(java.util.logging.Level);
public class java.util.logging.Level implements java.io.Serializable {
  public java.lang.String getName();
  public java.lang.String getResourceBundleName();
  public final int intValue();
  public java.lang.String getLocalizedName();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public final java.lang.String toString();
  public void run();
public class java.util.logging.LogManager {
  public static java.util.logging.LoggingMXBean getLoggingMXBean();
  public void checkAccess();
  public synchronized boolean addLogger(java.util.logging.Logger);
  public synchronized java.util.logging.Logger getLogger(java.lang.String);
  public synchronized java.util.Enumeration<java.lang.String> getLoggerNames();
  public static java.util.logging.LogManager getLogManager();
  public java.lang.String getProperty(java.lang.String);
  public synchronized void reset();
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.beans.PropertyChangeListener);
public class java.util.logging.LogRecord implements java.io.Serializable {
  public java.util.logging.LogRecord(java.util.logging.Level, java.lang.String);
  public java.util.logging.Level getLevel();
  public void setLevel(java.util.logging.Level);
  public java.lang.String getLoggerName();
  public void setLoggerName(java.lang.String);
  public java.lang.String getMessage();
  public void setMessage(java.lang.String);
  public long getMillis();
  public void setMillis(long);
  public java.lang.Object[] getParameters();
  public void setParameters(java.lang.Object[]);
  public java.util.ResourceBundle getResourceBundle();
  public void setResourceBundle(java.util.ResourceBundle);
  public java.lang.String getResourceBundleName();
  public void setResourceBundleName(java.lang.String);
  public long getSequenceNumber();
  public void setSequenceNumber(long);
  public java.lang.String getSourceClassName();
  public void setSourceClassName(java.lang.String);
  public java.lang.String getSourceMethodName();
  public void setSourceMethodName(java.lang.String);
  public int getThreadID();
  public void setThreadID(int);
  public java.lang.Throwable getThrown();
  public void setThrown(java.lang.Throwable);
  public void publish(java.util.logging.Logger, java.lang.String, java.util.logging.Level, java.lang.String);
public class java.util.logging.Logger {
  public static java.util.logging.Logger getAnonymousLogger();
  public static java.util.logging.Logger getAnonymousLogger(java.lang.String);
  public static java.util.logging.Logger getLogger(java.lang.String);
  public static java.util.logging.Logger getLogger(java.lang.String, java.lang.String);
  public static java.util.logging.Logger getGlobal();
  public void addHandler(java.util.logging.Handler);
  public java.util.logging.Handler[] getHandlers();
  public void removeHandler(java.util.logging.Handler);
  public java.util.logging.Filter getFilter();
  public void setFilter(java.util.logging.Filter);
  public java.util.logging.Level getLevel();
  public void setLevel(java.util.logging.Level);
  public boolean getUseParentHandlers();
  public void setUseParentHandlers(boolean);
  public java.util.logging.Logger getParent();
  public void setParent(java.util.logging.Logger);
  public java.lang.String getName();
  public java.util.ResourceBundle getResourceBundle();
  public java.lang.String getResourceBundleName();
  public boolean isLoggable(java.util.logging.Level);
  public void entering(java.lang.String, java.lang.String);
  public void entering(java.lang.String, java.lang.String, java.lang.Object);
  public void entering(java.lang.String, java.lang.String, java.lang.Object[]);
  public void exiting(java.lang.String, java.lang.String);
  public void exiting(java.lang.String, java.lang.String, java.lang.Object);
  public void throwing(java.lang.String, java.lang.String, java.lang.Throwable);
  public void severe(java.lang.String);
  public void warning(java.lang.String);
  public void info(java.lang.String);
  public void config(java.lang.String);
  public void fine(java.lang.String);
  public void finer(java.lang.String);
  public void finest(java.lang.String);
  public void log(java.util.logging.Level, java.lang.String);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Object);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Object[]);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable);
  public void log(java.util.logging.LogRecord);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[]);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[]);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable);
public final class java.util.logging.LoggingPermission extends java.security.BasicPermission implements java.security.Guard,java.io.Serializable {
  public java.util.logging.LoggingPermission(java.lang.String, java.lang.String);
  public java.lang.String getActions();
  public boolean implies(java.security.Permission);
public interface java.util.regex.MatchResult {
  public abstract int end();
  public abstract int end(int);
  public abstract java.lang.String group();
  public abstract java.lang.String group(int);
  public abstract int groupCount();
  public abstract int start();
  public abstract int start(int);
  public int end();
  public int end(int);
  public java.lang.String group();
  public java.lang.String group(int);
  public int groupCount();
  public int start();
  public int start(int);
public final class java.util.regex.Matcher implements java.util.regex.MatchResult {
  public java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String);
  public java.util.regex.Matcher reset();
  public java.util.regex.Matcher reset(java.lang.CharSequence);
  public java.util.regex.Matcher usePattern(java.util.regex.Pattern);
  public java.util.regex.Matcher region(int, int);
  public java.lang.StringBuffer appendTail(java.lang.StringBuffer);
  public java.lang.String replaceFirst(java.lang.String);
  public java.lang.String replaceAll(java.lang.String);
  public java.util.regex.Pattern pattern();
  public java.lang.String group(int);
  public java.lang.String group();
  public boolean find(int);
  public boolean find();
  public boolean lookingAt();
  public boolean matches();
  public int end(int);
  public static java.lang.String quoteReplacement(java.lang.String);
  public int start();
  public int groupCount();
  public int end();
  public java.util.regex.MatchResult toMatchResult();
  public java.util.regex.Matcher useAnchoringBounds(boolean);
  public boolean hasAnchoringBounds();
  public java.util.regex.Matcher useTransparentBounds(boolean);
  public boolean hasTransparentBounds();
  public int regionStart();
  public int regionEnd();
  public boolean requireEnd();
  public boolean hitEnd();
public final class java.util.regex.Pattern implements java.io.Serializable {
  public java.util.regex.Matcher matcher(java.lang.CharSequence);
  public java.lang.String[] split(java.lang.CharSequence, int);
  public java.lang.String[] split(java.lang.CharSequence);
  public java.lang.String pattern();
  public java.lang.String toString();
  public int flags();
  public static java.util.regex.Pattern compile(java.lang.String);
  public static boolean matches(java.lang.String, java.lang.CharSequence);
  public static java.lang.String quote(java.lang.String);
public class java.util.regex.PatternSyntaxException extends java.lang.IllegalArgumentException {
  public java.util.regex.PatternSyntaxException(java.lang.String, java.lang.String, int);
  public java.lang.String getPattern();
  public java.lang.String getMessage();
  public java.lang.String getDescription();
  public int getIndex();
public class java.util.regex.Splitter {
  public static java.lang.String[] fastSplit(java.lang.String, java.lang.String, int);
  public static java.lang.String[] split(java.util.regex.Pattern, java.lang.String, java.lang.String, int);
public class java.util.zip.CRC32 implements java.util.zip.Checksum {
  public java.util.zip.CRC32();
  public long getValue();
  public void reset();
  public void update(int);
  public void update(byte[]);
  public void update(byte[], int, int);
public class java.util.zip.CheckedInputStream extends java.io.FilterInputStream {
  public java.util.zip.CheckedInputStream(java.io.InputStream, java.util.zip.Checksum);
  public java.util.zip.Checksum getChecksum();
public interface java.util.zip.Checksum {
  public abstract long getValue();
  public abstract void reset();
  public abstract void update(byte[], int, int);
  public abstract void update(int);
public class java.util.zip.DataFormatException extends java.lang.Exception {
  public java.util.zip.DataFormatException();
  public java.util.zip.DataFormatException(java.lang.String);
public class java.util.zip.Deflater {
  public java.util.zip.Deflater();
  public java.util.zip.Deflater(int);
  public java.util.zip.Deflater(int, boolean);
  public int deflate(byte[]);
  public synchronized int deflate(byte[], int, int);
  public synchronized int deflate(byte[], int, int, int);
  public synchronized void end();
  public synchronized void finish();
  public synchronized boolean finished();
  public synchronized int getAdler();
  public synchronized int getTotalIn();
  public synchronized int getTotalOut();
  public synchronized boolean needsInput();
  public synchronized void reset();
  public void setDictionary(byte[]);
  public synchronized void setDictionary(byte[], int, int);
  public void setInput(byte[]);
  public synchronized void setInput(byte[], int, int);
  public synchronized void setLevel(int);
  public synchronized void setStrategy(int);
  public synchronized long getBytesRead();
  public synchronized long getBytesWritten();
public class java.util.zip.DeflaterOutputStream extends java.io.FilterOutputStream {
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater);
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream);
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int);
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream, boolean);
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean);
  public java.util.zip.DeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, int, boolean);
public class java.util.zip.GZIPInputStream extends java.util.zip.InflaterInputStream {
public class java.util.zip.GZIPOutputStream extends java.util.zip.DeflaterOutputStream {
public class java.util.zip.Inflater {
  public java.util.zip.Inflater();
  public java.util.zip.Inflater(boolean);
  public synchronized void end();
  public synchronized boolean finished();
  public synchronized int getAdler();
  public synchronized long getBytesRead();
  public synchronized long getBytesWritten();
  public synchronized int getRemaining();
  public synchronized int getTotalIn();
  public synchronized int getTotalOut();
  public synchronized boolean needsDictionary();
  public synchronized boolean needsInput();
  public synchronized void reset();
  public synchronized void setDictionary(byte[]);
  public synchronized void setDictionary(byte[], int, int);
  public synchronized void setInput(byte[]);
  public synchronized void setInput(byte[], int, int);
public class java.util.zip.InflaterInputStream extends java.io.FilterInputStream {
  public java.util.zip.InflaterInputStream(java.io.InputStream);
  public java.util.zip.InflaterInputStream(java.io.InputStream, java.util.zip.Inflater);
  public java.util.zip.InflaterInputStream(java.io.InputStream, java.util.zip.Inflater, int);
  public void mark(int);
  public boolean markSupported();
public class java.util.zip.ZipEntry implements java.util.zip.ZipConstants,java.lang.Cloneable {
  public java.util.zip.ZipEntry(java.lang.String);
  public java.lang.String getComment();
  public long getCompressedSize();
  public long getCrc();
  public byte[] getExtra();
  public int getMethod();
  public java.lang.String getName();
  public long getSize();
  public long getTime();
  public boolean isDirectory();
  public void setComment(java.lang.String);
  public void setCompressedSize(long);
  public void setCrc(long);
  public void setExtra(byte[]);
  public void setMethod(int);
  public void setSize(long);
  public void setTime(long);
  public java.lang.String toString();
  public java.util.zip.ZipEntry(java.util.zip.ZipEntry);
  public java.lang.Object clone();
  public int hashCode();
public class java.util.zip.ZipException extends java.io.IOException {
  public java.util.zip.ZipException();
  public java.util.zip.ZipException(java.lang.String);
  public boolean hasMoreElements();
  public java.util.zip.ZipEntry nextElement();
  public java.lang.Object nextElement();
  public java.util.zip.ZipFile$ZipInflaterInputStream(java.io.InputStream, java.util.zip.Inflater, int, java.util.zip.ZipEntry);
public class java.util.zip.ZipFile implements java.util.zip.ZipConstants {
  public java.util.Enumeration<? extends java.util.zip.ZipEntry> entries();
  public java.util.zip.ZipEntry getEntry(java.lang.String);
  public java.lang.String getName();
  public int size();
public class java.util.zip.ZipOutputStream extends java.util.zip.DeflaterOutputStream implements java.util.zip.ZipConstants {
  public java.util.zip.ZipOutputStream(java.io.OutputStream);
  public void setComment(java.lang.String);
  public void setLevel(int);
  public void setMethod(int);
public class javax.crypto.BadPaddingException extends java.security.GeneralSecurityException {
  public javax.crypto.BadPaddingException(java.lang.String);
  public javax.crypto.BadPaddingException();
public class javax.crypto.Cipher {
  public final java.security.Provider getProvider();
  public final java.lang.String getAlgorithm();
  public final int getBlockSize();
  public final int getOutputSize(int);
  public final byte[] getIV();
  public final java.security.AlgorithmParameters getParameters();
  public final javax.crypto.ExemptionMechanism getExemptionMechanism();
  public final byte[] update(byte[]);
  public final byte[] update(byte[], int, int);
public class javax.crypto.CipherInputStream extends java.io.FilterInputStream {
  public javax.crypto.CipherInputStream(java.io.InputStream, javax.crypto.Cipher);
  public boolean markSupported();
public class javax.crypto.CipherOutputStream extends java.io.FilterOutputStream {
  public javax.crypto.CipherOutputStream(java.io.OutputStream, javax.crypto.Cipher);
public abstract class javax.crypto.CipherSpi {
  public javax.crypto.CipherSpi();
public class javax.crypto.EncryptedPrivateKeyInfo {
  public java.lang.String getAlgName();
  public java.security.AlgorithmParameters getAlgParameters();
  public byte[] getEncryptedData();
public class javax.crypto.IllegalBlockSizeException extends java.security.GeneralSecurityException {
  public javax.crypto.IllegalBlockSizeException(java.lang.String);
  public javax.crypto.IllegalBlockSizeException();
public class javax.crypto.KeyAgreement {
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
public abstract class javax.crypto.KeyAgreementSpi {
  public javax.crypto.KeyAgreementSpi();
public class javax.crypto.KeyGenerator {
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.crypto.SecretKey generateKey();
  public final void init(int);
  public final void init(int, java.security.SecureRandom);
  public final void init(java.security.SecureRandom);
public abstract class javax.crypto.KeyGeneratorSpi {
  public javax.crypto.KeyGeneratorSpi();
public class javax.crypto.Mac implements java.lang.Cloneable {
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final int getMacLength();
  public final void update(java.nio.ByteBuffer);
  public final void reset();
public abstract class javax.crypto.MacSpi {
  public javax.crypto.MacSpi();
public class javax.crypto.NoSuchPaddingException extends java.security.GeneralSecurityException {
  public javax.crypto.NoSuchPaddingException(java.lang.String);
  public javax.crypto.NoSuchPaddingException();
public class javax.crypto.NullCipher extends javax.crypto.Cipher {
  public javax.crypto.NullCipher();
public interface javax.crypto.SecretKey extends java.security.Key {
public class javax.crypto.SecretKeyFactory {
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
public abstract class javax.crypto.SecretKeyFactorySpi {
  public javax.crypto.SecretKeyFactorySpi();
public class javax.crypto.ShortBufferException extends java.security.GeneralSecurityException {
  public javax.crypto.ShortBufferException(java.lang.String);
  public javax.crypto.ShortBufferException();
public interface javax.crypto.interfaces.DHKey {
  public abstract javax.crypto.spec.DHParameterSpec getParams();
public interface javax.crypto.interfaces.DHPublicKey extends javax.crypto.interfaces.DHKey,java.security.PublicKey {
  public abstract java.math.BigInteger getY();
public class javax.crypto.spec.DHParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public javax.crypto.spec.DHParameterSpec(java.math.BigInteger, java.math.BigInteger);
  public javax.crypto.spec.DHParameterSpec(java.math.BigInteger, java.math.BigInteger, int);
  public java.math.BigInteger getP();
  public java.math.BigInteger getG();
  public int getL();
public class javax.crypto.spec.DHPublicKeySpec implements java.security.spec.KeySpec {
  public javax.crypto.spec.DHPublicKeySpec(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getY();
  public java.math.BigInteger getP();
  public java.math.BigInteger getG();
public class javax.crypto.spec.IvParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public javax.crypto.spec.IvParameterSpec(byte[]);
  public javax.crypto.spec.IvParameterSpec(byte[], int, int);
  public byte[] getIV();
public class javax.crypto.spec.PBEKeySpec implements java.security.spec.KeySpec {
  public javax.crypto.spec.PBEKeySpec(char[]);
  public javax.crypto.spec.PBEKeySpec(char[], byte[], int, int);
  public javax.crypto.spec.PBEKeySpec(char[], byte[], int);
  public final void clearPassword();
  public final char[] getPassword();
  public final byte[] getSalt();
  public final int getIterationCount();
  public final int getKeyLength();
public class javax.crypto.spec.PBEParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public javax.crypto.spec.PBEParameterSpec(byte[], int);
  public byte[] getSalt();
  public int getIterationCount();
public class javax.crypto.spec.RC2ParameterSpec implements java.security.spec.AlgorithmParameterSpec {
  public javax.crypto.spec.RC2ParameterSpec(int);
  public javax.crypto.spec.RC2ParameterSpec(int, byte[]);
  public javax.crypto.spec.RC2ParameterSpec(int, byte[], int);
  public int getEffectiveKeyBits();
  public byte[] getIV();
  public boolean equals(java.lang.Object);
  public int hashCode();
public class javax.crypto.spec.SecretKeySpec implements javax.crypto.SecretKey,java.security.spec.KeySpec,java.io.Serializable {
  public javax.crypto.spec.SecretKeySpec(byte[], java.lang.String);
  public javax.crypto.spec.SecretKeySpec(byte[], int, int, java.lang.String);
  public java.lang.String getAlgorithm();
  public java.lang.String getFormat();
  public byte[] getEncoded();
  public int hashCode();
  public boolean equals(java.lang.Object);
public interface javax.microedition.khronos.egl.EGL {
public interface javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL {
  public abstract boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay, int[], javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public abstract boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, java.lang.Object);
  public abstract javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, javax.microedition.khronos.egl.EGLContext, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public abstract boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public abstract boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public abstract boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int[]);
  public abstract boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public abstract javax.microedition.khronos.egl.EGLContext eglGetCurrentContext();
  public abstract javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay();
  public abstract javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int);
  public abstract javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object);
  public abstract int eglGetError();
  public abstract boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay, int[]);
  public abstract boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLContext);
  public abstract boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext, int, int[]);
  public abstract java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay, int);
  public abstract boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, int, int[]);
  public abstract boolean eglReleaseThread();
  public abstract boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public abstract boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay);
  public abstract boolean eglWaitGL();
  public abstract boolean eglWaitNative(int, java.lang.Object);
public interface javax.microedition.khronos.egl.EGL11 extends javax.microedition.khronos.egl.EGL10 {
public abstract class javax.microedition.khronos.egl.EGLConfig {
  public javax.microedition.khronos.egl.EGLConfig();
public abstract class javax.microedition.khronos.egl.EGLContext {
  public javax.microedition.khronos.egl.EGLContext();
  public static javax.microedition.khronos.egl.EGL getEGL();
  public abstract javax.microedition.khronos.opengles.GL getGL();
public abstract class javax.microedition.khronos.egl.EGLDisplay {
  public javax.microedition.khronos.egl.EGLDisplay();
public abstract class javax.microedition.khronos.egl.EGLSurface {
  public javax.microedition.khronos.egl.EGLSurface();
public interface javax.microedition.khronos.opengles.GL {
public interface javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL {
  public abstract void glActiveTexture(int);
  public abstract void glAlphaFunc(int, float);
  public abstract void glAlphaFuncx(int, int);
  public abstract void glBindTexture(int, int);
  public abstract void glBlendFunc(int, int);
  public abstract void glClear(int);
  public abstract void glClearColor(float, float, float, float);
  public abstract void glClearColorx(int, int, int, int);
  public abstract void glClearDepthf(float);
  public abstract void glClearDepthx(int);
  public abstract void glClearStencil(int);
  public abstract void glClientActiveTexture(int);
  public abstract void glColor4f(float, float, float, float);
  public abstract void glColor4x(int, int, int, int);
  public abstract void glColorMask(boolean, boolean, boolean, boolean);
  public abstract void glColorPointer(int, int, int, java.nio.Buffer);
  public abstract void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public abstract void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public abstract void glCullFace(int);
  public abstract void glDeleteTextures(int, int[], int);
  public abstract void glDeleteTextures(int, java.nio.IntBuffer);
  public abstract void glDepthFunc(int);
  public abstract void glDepthMask(boolean);
  public abstract void glDepthRangef(float, float);
  public abstract void glDepthRangex(int, int);
  public abstract void glDisable(int);
  public abstract void glDisableClientState(int);
  public abstract void glDrawArrays(int, int, int);
  public abstract void glDrawElements(int, int, int, java.nio.Buffer);
  public abstract void glEnable(int);
  public abstract void glEnableClientState(int);
  public abstract void glFinish();
  public abstract void glFlush();
  public abstract void glFogf(int, float);
  public abstract void glFogfv(int, float[], int);
  public abstract void glFogfv(int, java.nio.FloatBuffer);
  public abstract void glFogx(int, int);
  public abstract void glFogxv(int, int[], int);
  public abstract void glFogxv(int, java.nio.IntBuffer);
  public abstract void glFrontFace(int);
  public abstract void glFrustumf(float, float, float, float, float, float);
  public abstract void glFrustumx(int, int, int, int, int, int);
  public abstract void glGenTextures(int, int[], int);
  public abstract void glGenTextures(int, java.nio.IntBuffer);
  public abstract int glGetError();
  public abstract void glGetIntegerv(int, int[], int);
  public abstract void glGetIntegerv(int, java.nio.IntBuffer);
  public abstract java.lang.String glGetString(int);
  public abstract void glHint(int, int);
  public abstract void glLightModelf(int, float);
  public abstract void glLightModelfv(int, float[], int);
  public abstract void glLightModelfv(int, java.nio.FloatBuffer);
  public abstract void glLightModelx(int, int);
  public abstract void glLightModelxv(int, int[], int);
  public abstract void glLightModelxv(int, java.nio.IntBuffer);
  public abstract void glLightf(int, int, float);
  public abstract void glLightfv(int, int, float[], int);
  public abstract void glLightfv(int, int, java.nio.FloatBuffer);
  public abstract void glLightx(int, int, int);
  public abstract void glLightxv(int, int, int[], int);
  public abstract void glLightxv(int, int, java.nio.IntBuffer);
  public abstract void glLineWidth(float);
  public abstract void glLineWidthx(int);
  public abstract void glLoadIdentity();
  public abstract void glLoadMatrixf(float[], int);
  public abstract void glLoadMatrixf(java.nio.FloatBuffer);
  public abstract void glLoadMatrixx(int[], int);
  public abstract void glLoadMatrixx(java.nio.IntBuffer);
  public abstract void glLogicOp(int);
  public abstract void glMaterialf(int, int, float);
  public abstract void glMaterialfv(int, int, float[], int);
  public abstract void glMaterialfv(int, int, java.nio.FloatBuffer);
  public abstract void glMaterialx(int, int, int);
  public abstract void glMaterialxv(int, int, int[], int);
  public abstract void glMaterialxv(int, int, java.nio.IntBuffer);
  public abstract void glMatrixMode(int);
  public abstract void glMultMatrixf(float[], int);
  public abstract void glMultMatrixf(java.nio.FloatBuffer);
  public abstract void glMultMatrixx(int[], int);
  public abstract void glMultMatrixx(java.nio.IntBuffer);
  public abstract void glMultiTexCoord4f(int, float, float, float, float);
  public abstract void glMultiTexCoord4x(int, int, int, int, int);
  public abstract void glNormal3f(float, float, float);
  public abstract void glNormal3x(int, int, int);
  public abstract void glNormalPointer(int, int, java.nio.Buffer);
  public abstract void glOrthof(float, float, float, float, float, float);
  public abstract void glOrthox(int, int, int, int, int, int);
  public abstract void glPixelStorei(int, int);
  public abstract void glPointSize(float);
  public abstract void glPointSizex(int);
  public abstract void glPolygonOffset(float, float);
  public abstract void glPolygonOffsetx(int, int);
  public abstract void glPopMatrix();
  public abstract void glPushMatrix();
  public abstract void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glRotatef(float, float, float, float);
  public abstract void glRotatex(int, int, int, int);
  public abstract void glSampleCoverage(float, boolean);
  public abstract void glSampleCoveragex(int, boolean);
  public abstract void glScalef(float, float, float);
  public abstract void glScalex(int, int, int);
  public abstract void glScissor(int, int, int, int);
  public abstract void glShadeModel(int);
  public abstract void glStencilFunc(int, int, int);
  public abstract void glStencilMask(int);
  public abstract void glStencilOp(int, int, int);
  public abstract void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public abstract void glTexEnvf(int, int, float);
  public abstract void glTexEnvfv(int, int, float[], int);
  public abstract void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexEnvx(int, int, int);
  public abstract void glTexEnvxv(int, int, int[], int);
  public abstract void glTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glTexParameterf(int, int, float);
  public abstract void glTexParameterx(int, int, int);
  public abstract void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glTranslatef(float, float, float);
  public abstract void glTranslatex(int, int, int);
  public abstract void glVertexPointer(int, int, int, java.nio.Buffer);
  public abstract void glViewport(int, int, int, int);
public interface javax.microedition.khronos.opengles.GL10Ext extends javax.microedition.khronos.opengles.GL {
  public abstract int glQueryMatrixxOES(int[], int, int[], int);
  public abstract int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
public interface javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10 {
  public abstract void glGetPointerv(int, java.nio.Buffer[]);
  public abstract void glBindBuffer(int, int);
  public abstract void glBufferData(int, int, java.nio.Buffer, int);
  public abstract void glBufferSubData(int, int, int, java.nio.Buffer);
  public abstract void glClipPlanef(int, float[], int);
  public abstract void glClipPlanef(int, java.nio.FloatBuffer);
  public abstract void glClipPlanex(int, int[], int);
  public abstract void glClipPlanex(int, java.nio.IntBuffer);
  public abstract void glColor4ub(byte, byte, byte, byte);
  public abstract void glColorPointer(int, int, int, int);
  public abstract void glDeleteBuffers(int, int[], int);
  public abstract void glDeleteBuffers(int, java.nio.IntBuffer);
  public abstract void glDrawElements(int, int, int, int);
  public abstract void glGenBuffers(int, int[], int);
  public abstract void glGenBuffers(int, java.nio.IntBuffer);
  public abstract void glGetBooleanv(int, boolean[], int);
  public abstract void glGetBooleanv(int, java.nio.IntBuffer);
  public abstract void glGetBufferParameteriv(int, int, int[], int);
  public abstract void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glGetClipPlanef(int, float[], int);
  public abstract void glGetClipPlanef(int, java.nio.FloatBuffer);
  public abstract void glGetClipPlanex(int, int[], int);
  public abstract void glGetClipPlanex(int, java.nio.IntBuffer);
  public abstract void glGetFixedv(int, int[], int);
  public abstract void glGetFixedv(int, java.nio.IntBuffer);
  public abstract void glGetFloatv(int, float[], int);
  public abstract void glGetFloatv(int, java.nio.FloatBuffer);
  public abstract void glGetLightfv(int, int, float[], int);
  public abstract void glGetLightfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetLightxv(int, int, int[], int);
  public abstract void glGetLightxv(int, int, java.nio.IntBuffer);
  public abstract void glGetMaterialfv(int, int, float[], int);
  public abstract void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetMaterialxv(int, int, int[], int);
  public abstract void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexEnviv(int, int, int[], int);
  public abstract void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexEnvxv(int, int, int[], int);
  public abstract void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexParameterfv(int, int, float[], int);
  public abstract void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetTexParameteriv(int, int, int[], int);
  public abstract void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexParameterxv(int, int, int[], int);
  public abstract void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public abstract boolean glIsBuffer(int);
  public abstract boolean glIsEnabled(int);
  public abstract boolean glIsTexture(int);
  public abstract void glNormalPointer(int, int, int);
  public abstract void glPointParameterf(int, float);
  public abstract void glPointParameterfv(int, float[], int);
  public abstract void glPointParameterfv(int, java.nio.FloatBuffer);
  public abstract void glPointParameterx(int, int);
  public abstract void glPointParameterxv(int, int[], int);
  public abstract void glPointParameterxv(int, java.nio.IntBuffer);
  public abstract void glPointSizePointerOES(int, int, java.nio.Buffer);
  public abstract void glTexCoordPointer(int, int, int, int);
  public abstract void glTexEnvi(int, int, int);
  public abstract void glTexEnviv(int, int, int[], int);
  public abstract void glTexEnviv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterfv(int, int, float[], int);
  public abstract void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexParameteri(int, int, int);
  public abstract void glTexParameteriv(int, int, int[], int);
  public abstract void glTexParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterxv(int, int, int[], int);
  public abstract void glTexParameterxv(int, int, java.nio.IntBuffer);
  public abstract void glVertexPointer(int, int, int, int);
public interface javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL {
  public abstract void glTexParameterfv(int, int, float[], int);
  public abstract void glCurrentPaletteMatrixOES(int);
  public abstract void glDrawTexfOES(float, float, float, float, float);
  public abstract void glDrawTexfvOES(float[], int);
  public abstract void glDrawTexfvOES(java.nio.FloatBuffer);
  public abstract void glDrawTexiOES(int, int, int, int, int);
  public abstract void glDrawTexivOES(int[], int);
  public abstract void glDrawTexivOES(java.nio.IntBuffer);
  public abstract void glDrawTexsOES(short, short, short, short, short);
  public abstract void glDrawTexsvOES(short[], int);
  public abstract void glDrawTexsvOES(java.nio.ShortBuffer);
  public abstract void glDrawTexxOES(int, int, int, int, int);
  public abstract void glDrawTexxvOES(int[], int);
  public abstract void glDrawTexxvOES(java.nio.IntBuffer);
  public abstract void glEnable(int);
  public abstract void glEnableClientState(int);
  public abstract void glLoadPaletteFromModelViewMatrixOES();
  public abstract void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public abstract void glMatrixIndexPointerOES(int, int, int, int);
  public abstract void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public abstract void glWeightPointerOES(int, int, int, int);
public interface javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL {
  public abstract void glBindFramebufferOES(int, int);
  public abstract void glBindRenderbufferOES(int, int);
  public abstract void glBindTexture(int, int);
  public abstract void glBlendEquation(int);
  public abstract void glBlendEquationSeparate(int, int);
  public abstract void glBlendFuncSeparate(int, int, int, int);
  public abstract int glCheckFramebufferStatusOES(int);
  public abstract void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public abstract void glDeleteFramebuffersOES(int, int[], int);
  public abstract void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public abstract void glDeleteRenderbuffersOES(int, int[], int);
  public abstract void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public abstract void glEnable(int);
  public abstract void glFramebufferRenderbufferOES(int, int, int, int);
  public abstract void glFramebufferTexture2DOES(int, int, int, int, int);
  public abstract void glGenerateMipmapOES(int);
  public abstract void glGenFramebuffersOES(int, int[], int);
  public abstract void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public abstract void glGenRenderbuffersOES(int, int[], int);
  public abstract void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public abstract void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public abstract void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public abstract void glGetIntegerv(int, int[], int);
  public abstract void glGetIntegerv(int, java.nio.IntBuffer);
  public abstract void glGetRenderbufferParameterivOES(int, int, int[], int);
  public abstract void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public abstract void glGetTexGenfv(int, int, float[], int);
  public abstract void glGetTexGenfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetTexGeniv(int, int, int[], int);
  public abstract void glGetTexGeniv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexGenxv(int, int, int[], int);
  public abstract void glGetTexGenxv(int, int, java.nio.IntBuffer);
  public abstract boolean glIsFramebufferOES(int);
  public abstract boolean glIsRenderbufferOES(int);
  public abstract void glRenderbufferStorageOES(int, int, int, int);
  public abstract void glStencilOp(int, int, int);
  public abstract void glTexEnvf(int, int, float);
  public abstract void glTexEnvfv(int, int, float[], int);
  public abstract void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexEnvx(int, int, int);
  public abstract void glTexEnvxv(int, int, int[], int);
  public abstract void glTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glTexGenf(int, int, float);
  public abstract void glTexGenfv(int, int, float[], int);
  public abstract void glTexGenfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexGeni(int, int, int);
  public abstract void glTexGeniv(int, int, int[], int);
  public abstract void glTexGeniv(int, int, java.nio.IntBuffer);
  public abstract void glTexGenx(int, int, int);
  public abstract void glTexGenxv(int, int, int[], int);
  public abstract void glTexGenxv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterf(int, int, float);
public abstract class javax.net.ServerSocketFactory {
  public static synchronized javax.net.ServerSocketFactory getDefault();
public abstract class javax.net.SocketFactory {
  public static synchronized javax.net.SocketFactory getDefault();
  public final boolean verify(java.lang.String, javax.net.ssl.SSLSession);
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public class javax.net.ssl.HandshakeCompletedEvent extends java.util.EventObject {
  public javax.net.ssl.HandshakeCompletedEvent(javax.net.ssl.SSLSocket, javax.net.ssl.SSLSession);
  public javax.net.ssl.SSLSession getSession();
  public java.lang.String getCipherSuite();
  public java.security.cert.Certificate[] getLocalCertificates();
  public java.security.Principal getLocalPrincipal();
  public javax.net.ssl.SSLSocket getSocket();
public interface javax.net.ssl.HandshakeCompletedListener extends java.util.EventListener {
  public abstract void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent);
public interface javax.net.ssl.HostnameVerifier {
  public abstract boolean verify(java.lang.String, javax.net.ssl.SSLSession);
public abstract class javax.net.ssl.HttpsURLConnection extends java.net.HttpURLConnection {
  public static void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier);
  public static javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier();
  public static void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory);
  public static javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory();
  public abstract java.lang.String getCipherSuite();
  public abstract java.security.cert.Certificate[] getLocalCertificates();
  public java.security.Principal getLocalPrincipal();
  public void setHostnameVerifier(javax.net.ssl.HostnameVerifier);
  public javax.net.ssl.HostnameVerifier getHostnameVerifier();
  public void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory);
  public javax.net.ssl.SSLSocketFactory getSSLSocketFactory();
public interface javax.net.ssl.KeyManager {
public class javax.net.ssl.KeyManagerFactory {
  public static final java.lang.String getDefaultAlgorithm();
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.KeyManager[] getKeyManagers();
public abstract class javax.net.ssl.KeyManagerFactorySpi {
  public javax.net.ssl.KeyManagerFactorySpi();
public class javax.net.ssl.SSLContext {
  public static void setDefault(javax.net.ssl.SSLContext);
  public final java.lang.String getProtocol();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.SSLSocketFactory getSocketFactory();
  public final javax.net.ssl.SSLServerSocketFactory getServerSocketFactory();
  public final javax.net.ssl.SSLEngine createSSLEngine();
  public final javax.net.ssl.SSLEngine createSSLEngine(java.lang.String, int);
  public final javax.net.ssl.SSLSessionContext getServerSessionContext();
  public final javax.net.ssl.SSLSessionContext getClientSessionContext();
  public final javax.net.ssl.SSLParameters getDefaultSSLParameters();
  public final javax.net.ssl.SSLParameters getSupportedSSLParameters();
public abstract class javax.net.ssl.SSLContextSpi {
  public javax.net.ssl.SSLContextSpi();
public abstract class javax.net.ssl.SSLEngine {
  public java.lang.String getPeerHost();
  public int getPeerPort();
  public abstract void closeOutbound();
  public abstract java.lang.Runnable getDelegatedTask();
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract boolean getEnableSessionCreation();
  public abstract javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
  public abstract boolean getNeedClientAuth();
  public abstract javax.net.ssl.SSLSession getSession();
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getSupportedProtocols();
  public abstract boolean getUseClientMode();
  public abstract boolean getWantClientAuth();
  public abstract boolean isInboundDone();
  public abstract boolean isOutboundDone();
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract void setEnableSessionCreation(boolean);
  public abstract void setNeedClientAuth(boolean);
  public abstract void setUseClientMode(boolean);
  public abstract void setWantClientAuth(boolean);
  public javax.net.ssl.SSLParameters getSSLParameters();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
public final class javax.net.ssl.SSLEngineResult$HandshakeStatus extends java.lang.Enum<javax.net.ssl.SSLEngineResult$HandshakeStatus> {
  public static javax.net.ssl.SSLEngineResult$HandshakeStatus[] values();
  public static javax.net.ssl.SSLEngineResult$HandshakeStatus valueOf(java.lang.String);
public final class javax.net.ssl.SSLEngineResult$Status extends java.lang.Enum<javax.net.ssl.SSLEngineResult$Status> {
  public static javax.net.ssl.SSLEngineResult$Status[] values();
  public static javax.net.ssl.SSLEngineResult$Status valueOf(java.lang.String);
public class javax.net.ssl.SSLEngineResult {
  public javax.net.ssl.SSLEngineResult(javax.net.ssl.SSLEngineResult$Status, javax.net.ssl.SSLEngineResult$HandshakeStatus, int, int);
  public final javax.net.ssl.SSLEngineResult$Status getStatus();
  public final javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
  public final int bytesConsumed();
  public final int bytesProduced();
  public java.lang.String toString();
public class javax.net.ssl.SSLException extends java.io.IOException {
  public javax.net.ssl.SSLException(java.lang.String);
  public javax.net.ssl.SSLException(java.lang.String, java.lang.Throwable);
  public javax.net.ssl.SSLException(java.lang.Throwable);
public class javax.net.ssl.SSLHandshakeException extends javax.net.ssl.SSLException {
  public javax.net.ssl.SSLHandshakeException(java.lang.String);
  public javax.net.ssl.SSLHandshakeException(java.lang.Throwable);
  public javax.net.ssl.SSLHandshakeException(java.lang.String, java.lang.Throwable);
public class javax.net.ssl.SSLParameters {
  public javax.net.ssl.SSLParameters();
  public javax.net.ssl.SSLParameters(java.lang.String[]);
  public javax.net.ssl.SSLParameters(java.lang.String[], java.lang.String[]);
  public java.lang.String[] getCipherSuites();
  public void setCipherSuites(java.lang.String[]);
  public java.lang.String[] getProtocols();
  public void setProtocols(java.lang.String[]);
  public boolean getNeedClientAuth();
  public void setNeedClientAuth(boolean);
  public boolean getWantClientAuth();
  public void setWantClientAuth(boolean);
public class javax.net.ssl.SSLPeerUnverifiedException extends javax.net.ssl.SSLException {
  public javax.net.ssl.SSLPeerUnverifiedException(java.lang.String);
public class javax.net.ssl.SSLProtocolException extends javax.net.ssl.SSLException {
  public javax.net.ssl.SSLProtocolException(java.lang.String);
public abstract class javax.net.ssl.SSLServerSocket extends java.net.ServerSocket {
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getSupportedProtocols();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract void setNeedClientAuth(boolean);
  public abstract boolean getNeedClientAuth();
  public abstract void setWantClientAuth(boolean);
  public abstract boolean getWantClientAuth();
  public abstract void setUseClientMode(boolean);
  public abstract boolean getUseClientMode();
  public abstract void setEnableSessionCreation(boolean);
  public abstract boolean getEnableSessionCreation();
public abstract class javax.net.ssl.SSLServerSocketFactory extends javax.net.ServerSocketFactory {
  public static synchronized javax.net.ServerSocketFactory getDefault();
  public abstract java.lang.String[] getDefaultCipherSuites();
  public abstract java.lang.String[] getSupportedCipherSuites();
public interface javax.net.ssl.SSLSession {
  public abstract int getApplicationBufferSize();
  public abstract java.lang.String getCipherSuite();
  public abstract long getCreationTime();
  public abstract byte[] getId();
  public abstract long getLastAccessedTime();
  public abstract java.security.cert.Certificate[] getLocalCertificates();
  public abstract java.security.Principal getLocalPrincipal();
  public abstract int getPacketBufferSize();
  public abstract java.lang.String getPeerHost();
  public abstract int getPeerPort();
  public abstract java.lang.String getProtocol();
  public abstract javax.net.ssl.SSLSessionContext getSessionContext();
  public abstract java.lang.Object getValue(java.lang.String);
  public abstract java.lang.String[] getValueNames();
  public abstract void invalidate();
  public abstract boolean isValid();
  public abstract void putValue(java.lang.String, java.lang.Object);
  public abstract void removeValue(java.lang.String);
public class javax.net.ssl.SSLSessionBindingEvent extends java.util.EventObject {
  public javax.net.ssl.SSLSessionBindingEvent(javax.net.ssl.SSLSession, java.lang.String);
  public java.lang.String getName();
  public javax.net.ssl.SSLSession getSession();
public interface javax.net.ssl.SSLSessionBindingListener extends java.util.EventListener {
  public abstract void valueBound(javax.net.ssl.SSLSessionBindingEvent);
  public abstract void valueUnbound(javax.net.ssl.SSLSessionBindingEvent);
public interface javax.net.ssl.SSLSessionContext {
  public abstract java.util.Enumeration<byte[]> getIds();
  public abstract javax.net.ssl.SSLSession getSession(byte[]);
  public abstract int getSessionCacheSize();
  public abstract int getSessionTimeout();
public abstract class javax.net.ssl.SSLSocket extends java.net.Socket {
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract java.lang.String[] getSupportedProtocols();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract javax.net.ssl.SSLSession getSession();
  public abstract void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public abstract void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public abstract void setUseClientMode(boolean);
  public abstract boolean getUseClientMode();
  public abstract void setNeedClientAuth(boolean);
  public abstract void setWantClientAuth(boolean);
  public abstract boolean getNeedClientAuth();
  public abstract boolean getWantClientAuth();
  public abstract void setEnableSessionCreation(boolean);
  public abstract boolean getEnableSessionCreation();
  public javax.net.ssl.SSLParameters getSSLParameters();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
public abstract class javax.net.ssl.SSLSocketFactory extends javax.net.SocketFactory {
  public static synchronized javax.net.SocketFactory getDefault();
  public javax.net.ssl.SSLSocketFactory();
  public abstract java.lang.String[] getDefaultCipherSuites();
  public abstract java.lang.String[] getSupportedCipherSuites();
public interface javax.net.ssl.TrustManager {
public class javax.net.ssl.TrustManagerFactory {
  public static final java.lang.String getDefaultAlgorithm();
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.TrustManager[] getTrustManagers();
public abstract class javax.net.ssl.TrustManagerFactorySpi {
  public javax.net.ssl.TrustManagerFactorySpi();
public abstract class javax.net.ssl.X509ExtendedKeyManager implements javax.net.ssl.X509KeyManager {
  public java.lang.String chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine);
  public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine);
public interface javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager {
  public abstract java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket);
  public abstract java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket);
  public abstract java.security.cert.X509Certificate[] getCertificateChain(java.lang.String);
  public abstract java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[]);
  public abstract java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[]);
  public abstract java.security.PrivateKey getPrivateKey(java.lang.String);
public interface javax.net.ssl.X509TrustManager extends javax.net.ssl.TrustManager {
  public abstract java.security.cert.X509Certificate[] getAcceptedIssuers();
public class javax.security.auth.DestroyFailedException extends java.lang.Exception {
  public javax.security.auth.DestroyFailedException();
  public javax.security.auth.DestroyFailedException(java.lang.String);
public interface javax.security.auth.Destroyable {
  public abstract boolean isDestroyed();
public interface javax.security.auth.callback.Callback {
public interface javax.security.auth.callback.CallbackHandler {
public class javax.security.auth.callback.PasswordCallback implements javax.security.auth.callback.Callback,java.io.Serializable {
  public javax.security.auth.callback.PasswordCallback(java.lang.String, boolean);
  public java.lang.String getPrompt();
  public boolean isEchoOn();
  public void setPassword(char[]);
  public char[] getPassword();
  public void clearPassword();
public class javax.security.auth.callback.UnsupportedCallbackException extends java.lang.Exception {
  public javax.security.auth.callback.UnsupportedCallbackException(javax.security.auth.callback.Callback);
  public javax.security.auth.callback.UnsupportedCallbackException(javax.security.auth.callback.Callback, java.lang.String);
  public javax.security.auth.callback.Callback getCallback();
public final class javax.security.auth.x500.X500Principal implements java.io.Serializable,java.security.Principal {
  public javax.security.auth.x500.X500Principal(byte[]);
  public javax.security.auth.x500.X500Principal(java.io.InputStream);
  public javax.security.auth.x500.X500Principal(java.lang.String);
  public javax.security.auth.x500.X500Principal(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);
  public boolean equals(java.lang.Object);
  public byte[] getEncoded();
  public java.lang.String getName();
  public java.lang.String getName(java.lang.String);
  public java.lang.String getName(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);
  public int hashCode();
  public java.lang.String toString();
public abstract class javax.security.cert.Certificate {
  public javax.security.cert.Certificate();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public abstract java.lang.String toString();
  public abstract java.security.PublicKey getPublicKey();
public class javax.security.cert.CertificateEncodingException extends javax.security.cert.CertificateException {
  public javax.security.cert.CertificateEncodingException(java.lang.String);
  public javax.security.cert.CertificateEncodingException();
public class javax.security.cert.CertificateException extends java.lang.Exception {
  public javax.security.cert.CertificateException(java.lang.String);
  public javax.security.cert.CertificateException();
public class javax.security.cert.CertificateExpiredException extends javax.security.cert.CertificateException {
  public javax.security.cert.CertificateExpiredException(java.lang.String);
  public javax.security.cert.CertificateExpiredException();
public class javax.security.cert.CertificateNotYetValidException extends javax.security.cert.CertificateException {
  public javax.security.cert.CertificateNotYetValidException(java.lang.String);
  public javax.security.cert.CertificateNotYetValidException();
  public java.lang.String toString();
  public java.security.PublicKey getPublicKey();
  public int getVersion();
  public java.math.BigInteger getSerialNumber();
  public java.security.Principal getIssuerDN();
  public java.security.Principal getSubjectDN();
  public java.util.Date getNotBefore();
  public java.util.Date getNotAfter();
  public java.lang.String getSigAlgName();
  public java.lang.String getSigAlgOID();
  public byte[] getSigAlgParams();
public abstract class javax.security.cert.X509Certificate extends javax.security.cert.Certificate {
  public javax.security.cert.X509Certificate();
  public abstract int getVersion();
  public abstract java.math.BigInteger getSerialNumber();
  public abstract java.security.Principal getIssuerDN();
  public abstract java.security.Principal getSubjectDN();
  public abstract java.util.Date getNotBefore();
  public abstract java.util.Date getNotAfter();
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract byte[] getSigAlgParams();
public interface javax.sip.ClientTransaction extends javax.sip.Transaction {
  public abstract void alertIfStillInCallingStateBy(int);
  public abstract javax.sip.address.Hop getNextHop();
  public abstract void setNotifyOnRetransmit(boolean);
public interface javax.sip.Dialog extends java.io.Serializable {
  public abstract java.lang.Object getApplicationData();
  public abstract void setApplicationData(java.lang.Object);
  public abstract javax.sip.header.CallIdHeader getCallId();
  public abstract java.lang.String getDialogId();
  public abstract javax.sip.Transaction getFirstTransaction();
  public abstract javax.sip.address.Address getLocalParty();
  public abstract int getLocalSequenceNumber();
  public abstract long getLocalSeqNumber();
  public abstract java.lang.String getLocalTag();
  public abstract javax.sip.address.Address getRemoteParty();
  public abstract int getRemoteSequenceNumber();
  public abstract long getRemoteSeqNumber();
  public abstract java.lang.String getRemoteTag();
  public abstract javax.sip.address.Address getRemoteTarget();
  public abstract java.util.Iterator getRouteSet();
  public abstract javax.sip.SipProvider getSipProvider();
  public abstract javax.sip.DialogState getState();
  public abstract boolean isSecure();
  public abstract boolean isServer();
  public abstract void delete();
  public abstract void incrementLocalSequenceNumber();
  public abstract void setBackToBackUserAgent();
public class javax.sip.DialogDoesNotExistException extends javax.sip.SipException {
  public javax.sip.DialogDoesNotExistException();
  public javax.sip.DialogDoesNotExistException(java.lang.String);
  public javax.sip.DialogDoesNotExistException(java.lang.String, java.lang.Throwable);
public final class javax.sip.DialogState extends java.lang.Enum<javax.sip.DialogState> {
  public static javax.sip.DialogState[] values();
  public static javax.sip.DialogState valueOf(java.lang.String);
  public static javax.sip.DialogState getObject(int);
  public int getValue();
public class javax.sip.DialogTerminatedEvent extends java.util.EventObject {
  public javax.sip.DialogTerminatedEvent(java.lang.Object, javax.sip.Dialog);
  public javax.sip.Dialog getDialog();
public class javax.sip.IOExceptionEvent extends java.util.EventObject {
  public javax.sip.IOExceptionEvent(java.lang.Object, java.lang.String, int, java.lang.String);
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getTransport();
public class javax.sip.InvalidArgumentException extends javax.sip.SipException {
  public javax.sip.InvalidArgumentException();
  public javax.sip.InvalidArgumentException(java.lang.String);
  public javax.sip.InvalidArgumentException(java.lang.String, java.lang.Throwable);
public interface javax.sip.ListeningPoint extends java.lang.Cloneable {
  public abstract java.lang.String getIPAddress();
  public abstract int getPort();
  public abstract java.lang.String getTransport();
  public abstract java.lang.String getSentBy();
  public abstract javax.sip.header.ContactHeader createContactHeader();
public class javax.sip.ObjectInUseException extends javax.sip.SipException {
  public javax.sip.ObjectInUseException();
  public javax.sip.ObjectInUseException(java.lang.String);
  public javax.sip.ObjectInUseException(java.lang.String, java.lang.Throwable);
public class javax.sip.PeerUnavailableException extends javax.sip.SipException {
  public javax.sip.PeerUnavailableException();
  public javax.sip.PeerUnavailableException(java.lang.String);
  public javax.sip.PeerUnavailableException(java.lang.String, java.lang.Throwable);
public class javax.sip.ProviderDoesNotExistException extends javax.sip.SipException {
  public javax.sip.ProviderDoesNotExistException();
  public javax.sip.ProviderDoesNotExistException(java.lang.String);
  public javax.sip.ProviderDoesNotExistException(java.lang.String, java.lang.Throwable);
public class javax.sip.RequestEvent extends java.util.EventObject {
  public javax.sip.RequestEvent(java.lang.Object, javax.sip.ServerTransaction, javax.sip.Dialog, javax.sip.message.Request);
  public javax.sip.Dialog getDialog();
  public javax.sip.message.Request getRequest();
  public javax.sip.ServerTransaction getServerTransaction();
public class javax.sip.ResponseEvent extends java.util.EventObject {
  public javax.sip.ResponseEvent(java.lang.Object, javax.sip.ClientTransaction, javax.sip.Dialog, javax.sip.message.Response);
  public javax.sip.Dialog getDialog();
  public javax.sip.message.Response getResponse();
  public javax.sip.ClientTransaction getClientTransaction();
public interface javax.sip.ServerTransaction extends javax.sip.Transaction {
  public abstract javax.sip.ServerTransaction getCanceledInviteTransaction();
public class javax.sip.SipException extends java.lang.Exception {
  public javax.sip.SipException();
  public javax.sip.SipException(java.lang.String);
  public javax.sip.SipException(java.lang.String, java.lang.Throwable);
public class javax.sip.SipFactory {
  public static synchronized javax.sip.SipFactory getInstance();
  public synchronized void resetFactory();
public interface javax.sip.SipListener {
  public abstract void processDialogTerminated(javax.sip.DialogTerminatedEvent);
  public abstract void processIOException(javax.sip.IOExceptionEvent);
  public abstract void processRequest(javax.sip.RequestEvent);
  public abstract void processResponse(javax.sip.ResponseEvent);
  public abstract void processTimeout(javax.sip.TimeoutEvent);
  public abstract void processTransactionTerminated(javax.sip.TransactionTerminatedEvent);
public interface javax.sip.SipProvider {
  public abstract void removeListeningPoints();
  public abstract javax.sip.ListeningPoint getListeningPoint();
  public abstract javax.sip.ListeningPoint getListeningPoint(java.lang.String);
  public abstract javax.sip.ListeningPoint[] getListeningPoints();
  public abstract void removeSipListener(javax.sip.SipListener);
  public abstract javax.sip.header.CallIdHeader getNewCallId();
  public abstract boolean isAutomaticDialogSupportEnabled();
  public abstract void setAutomaticDialogSupportEnabled(boolean);
  public abstract javax.sip.SipStack getSipStack();
public interface javax.sip.SipStack {
  public abstract java.util.Collection getDialogs();
  public abstract java.lang.String getIPAddress();
  public abstract java.util.Iterator getListeningPoints();
  public abstract javax.sip.address.Router getRouter();
  public abstract java.util.Iterator getSipProviders();
  public abstract java.lang.String getStackName();
  public abstract boolean isRetransmissionFilterActive();
  public abstract void stop();
public final class javax.sip.Timeout extends java.lang.Enum<javax.sip.Timeout> {
  public static javax.sip.Timeout[] values();
  public static javax.sip.Timeout valueOf(java.lang.String);
public class javax.sip.TimeoutEvent extends javax.sip.TransactionTerminatedEvent {
  public javax.sip.TimeoutEvent(java.lang.Object, javax.sip.ServerTransaction, javax.sip.Timeout);
  public javax.sip.TimeoutEvent(java.lang.Object, javax.sip.ClientTransaction, javax.sip.Timeout);
  public javax.sip.Timeout getTimeout();
public interface javax.sip.Transaction extends java.io.Serializable {
  public abstract java.lang.Object getApplicationData();
  public abstract void setApplicationData(java.lang.Object);
  public abstract java.lang.String getBranchId();
  public abstract javax.sip.Dialog getDialog();
  public abstract java.lang.String getHost();
  public abstract java.lang.String getPeerAddress();
  public abstract int getPeerPort();
  public abstract int getPort();
  public abstract javax.sip.message.Request getRequest();
  public abstract javax.sip.SipProvider getSipProvider();
  public abstract javax.sip.TransactionState getState();
  public abstract java.lang.String getTransport();
public class javax.sip.TransactionAlreadyExistsException extends javax.sip.SipException {
  public javax.sip.TransactionAlreadyExistsException();
  public javax.sip.TransactionAlreadyExistsException(java.lang.String);
  public javax.sip.TransactionAlreadyExistsException(java.lang.String, java.lang.Throwable);
public class javax.sip.TransactionDoesNotExistException extends javax.sip.SipException {
  public javax.sip.TransactionDoesNotExistException();
  public javax.sip.TransactionDoesNotExistException(java.lang.String);
  public javax.sip.TransactionDoesNotExistException(java.lang.String, java.lang.Throwable);
public final class javax.sip.TransactionState extends java.lang.Enum<javax.sip.TransactionState> {
  public static javax.sip.TransactionState[] values();
  public static javax.sip.TransactionState valueOf(java.lang.String);
public class javax.sip.TransactionTerminatedEvent extends java.util.EventObject {
  public javax.sip.TransactionTerminatedEvent(java.lang.Object, javax.sip.ServerTransaction);
  public javax.sip.TransactionTerminatedEvent(java.lang.Object, javax.sip.ClientTransaction);
  public boolean isServerTransaction();
  public javax.sip.ClientTransaction getClientTransaction();
  public javax.sip.ServerTransaction getServerTransaction();
public class javax.sip.TransactionUnavailableException extends javax.sip.SipException {
  public javax.sip.TransactionUnavailableException();
  public javax.sip.TransactionUnavailableException(java.lang.String);
  public javax.sip.TransactionUnavailableException(java.lang.String, java.lang.Throwable);
public class javax.sip.TransportNotSupportedException extends javax.sip.SipException {
  public javax.sip.TransportNotSupportedException();
  public javax.sip.TransportNotSupportedException(java.lang.String);
  public javax.sip.TransportNotSupportedException(java.lang.String, java.lang.Throwable);
public interface javax.sip.address.Address extends java.lang.Cloneable,java.io.Serializable {
  public abstract java.lang.String getDisplayName();
  public abstract boolean hasDisplayName();
  public abstract java.lang.String getHost();
  public abstract int getPort();
  public abstract java.lang.String getUserAtHostPort();
  public abstract boolean isSIPAddress();
  public abstract javax.sip.address.URI getURI();
  public abstract void setURI(javax.sip.address.URI);
  public abstract boolean isWildcard();
  public abstract void setWildCardFlag();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.Object clone();
public interface javax.sip.address.AddressFactory {
  public abstract javax.sip.address.Address createAddress();
  public abstract javax.sip.address.Address createAddress(javax.sip.address.URI);
public interface javax.sip.address.Hop {
  public abstract java.lang.String getHost();
  public abstract int getPort();
  public abstract java.lang.String getTransport();
  public abstract boolean isURIRoute();
  public abstract void setURIRouteFlag();
  public abstract java.lang.String toString();
public interface javax.sip.address.Router {
  public abstract java.util.ListIterator getNextHops(javax.sip.message.Request);
  public abstract javax.sip.address.Hop getOutboundProxy();
public interface javax.sip.address.SipURI extends javax.sip.address.URI,javax.sip.header.Parameters {
  public abstract boolean isSecure();
  public abstract void setSecure(boolean);
  public abstract java.lang.String getHeader(java.lang.String);
  public abstract void setHeader(java.lang.String, java.lang.String);
  public abstract java.util.Iterator getHeaderNames();
  public abstract java.lang.String getHost();
  public abstract java.lang.String getLrParam();
  public abstract void setLrParam();
  public abstract boolean hasLrParam();
  public abstract java.lang.String getMAddrParam();
  public abstract int getPort();
  public abstract int getTTLParam();
  public abstract void setTTLParam(int);
  public abstract java.lang.String getTransportParam();
  public abstract boolean hasTransport();
  public abstract java.lang.String getUser();
  public abstract void setUser(java.lang.String);
  public abstract java.lang.String getUserParam();
  public abstract void setUserParam(java.lang.String);
  public abstract java.lang.String getUserType();
  public abstract void removeUserType();
  public abstract java.lang.String getUserPassword();
  public abstract void setUserPassword(java.lang.String);
  public abstract java.lang.String getUserAtHost();
  public abstract java.lang.String getUserAtHostPort();
  public abstract java.lang.String getMethodParam();
public interface javax.sip.address.TelURL extends javax.sip.address.URI,javax.sip.header.Parameters {
  public abstract java.lang.String getIsdnSubAddress();
  public abstract java.lang.String getPhoneContext();
  public abstract java.lang.String getPhoneNumber();
  public abstract java.lang.String getPostDial();
  public abstract boolean isGlobal();
  public abstract void setGlobal(boolean);
public interface javax.sip.address.URI extends java.lang.Cloneable,java.io.Serializable {
  public abstract java.lang.String getScheme();
  public abstract boolean isSipURI();
  public abstract java.lang.Object clone();
  public abstract java.lang.String toString();
public interface javax.sip.header.AcceptEncodingHeader extends javax.sip.header.Encoding,javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract float getQValue();
public interface javax.sip.header.AcceptHeader extends javax.sip.header.Header,javax.sip.header.MediaType,javax.sip.header.Parameters {
  public abstract boolean allowsAllContentSubTypes();
  public abstract boolean allowsAllContentTypes();
  public abstract float getQValue();
  public abstract boolean hasQValue();
  public abstract void removeQValue();
public interface javax.sip.header.AcceptLanguageHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.util.Locale getAcceptLanguage();
  public abstract void setAcceptLanguage(java.util.Locale);
  public abstract void setLanguageRange(java.lang.String);
  public abstract float getQValue();
  public abstract boolean hasQValue();
  public abstract void removeQValue();
public interface javax.sip.header.AlertInfoHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract javax.sip.address.URI getAlertInfo();
  public abstract void setAlertInfo(javax.sip.address.URI);
  public abstract void setAlertInfo(java.lang.String);
public interface javax.sip.header.AllowEventsHeader extends javax.sip.header.Header {
  public abstract java.lang.String getEventType();
public interface javax.sip.header.AllowHeader extends javax.sip.header.Header {
  public abstract java.lang.String getMethod();
public interface javax.sip.header.AuthenticationInfoHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getCNonce();
  public abstract java.lang.String getNextNonce();
  public abstract int getNonceCount();
  public abstract java.lang.String getQop();
  public abstract java.lang.String getResponse();
public interface javax.sip.header.AuthorizationHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getAlgorithm();
  public abstract java.lang.String getCNonce();
  public abstract java.lang.String getNonce();
  public abstract int getNonceCount();
  public abstract java.lang.String getOpaque();
  public abstract java.lang.String getQop();
  public abstract java.lang.String getRealm();
  public abstract java.lang.String getResponse();
  public abstract java.lang.String getScheme();
  public abstract void setScheme(java.lang.String);
  public abstract boolean isStale();
  public abstract void setStale(boolean);
  public abstract javax.sip.address.URI getURI();
  public abstract void setURI(javax.sip.address.URI);
  public abstract java.lang.String getUsername();
public interface javax.sip.header.CSeqHeader extends javax.sip.header.AllowHeader,javax.sip.header.RSeqHeader {
public interface javax.sip.header.CallIdHeader extends javax.sip.header.Header {
  public abstract java.lang.String getCallId();
public interface javax.sip.header.CallInfoHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract javax.sip.address.URI getInfo();
  public abstract void setInfo(javax.sip.address.URI);
  public abstract java.lang.String getPurpose();
  public abstract void setPurpose(java.lang.String);
public interface javax.sip.header.ContactHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract int getExpires();
  public abstract float getQValue();
  public abstract boolean isWildCard();
  public abstract void setWildCard();
  public abstract void setWildCardFlag(boolean);
public interface javax.sip.header.ContentDispositionHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getDispositionType();
  public abstract java.lang.String getHandling();
public interface javax.sip.header.ContentEncodingHeader extends javax.sip.header.Encoding,javax.sip.header.Header {
public interface javax.sip.header.ContentLanguageHeader extends javax.sip.header.Header {
  public abstract java.util.Locale getContentLanguage();
  public abstract void setContentLanguage(java.util.Locale);
  public abstract java.lang.String getLanguageTag();
  public abstract void setLanguageTag(java.lang.String);
public interface javax.sip.header.ContentLengthHeader extends javax.sip.header.Header {
  public abstract int getContentLength();
public interface javax.sip.header.ContentTypeHeader extends javax.sip.header.Header,javax.sip.header.MediaType,javax.sip.header.Parameters {
  public abstract java.lang.String getCharset();
public interface javax.sip.header.DateHeader extends javax.sip.header.Header {
  public abstract java.util.Calendar getDate();
  public abstract void setDate(java.util.Calendar);
public interface javax.sip.header.Encoding {
  public abstract java.lang.String getEncoding();
public interface javax.sip.header.ErrorInfoHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract javax.sip.address.URI getErrorInfo();
  public abstract void setErrorInfo(javax.sip.address.URI);
  public abstract java.lang.String getErrorMessage();
public interface javax.sip.header.EventHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getEventId();
  public abstract java.lang.String getEventType();
public interface javax.sip.header.ExpiresHeader extends javax.sip.header.Header {
  public abstract int getExpires();
public interface javax.sip.header.ExtensionHeader extends javax.sip.header.Header {
  public abstract java.lang.String getValue();
public interface javax.sip.header.FromHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getTag();
  public abstract boolean hasTag();
  public abstract void removeTag();
  public abstract java.lang.String getDisplayName();
  public abstract java.lang.String getUserAtHostPort();
public interface javax.sip.header.Header extends java.lang.Cloneable,java.io.Serializable {
  public abstract java.lang.String getName();
  public abstract java.lang.Object clone();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.String toString();
public interface javax.sip.header.HeaderAddress {
  public abstract javax.sip.address.Address getAddress();
  public abstract void setAddress(javax.sip.address.Address);
public interface javax.sip.header.HeaderFactory {
  public abstract void setPrettyEncoding(boolean);
  public abstract javax.sip.header.AcceptLanguageHeader createAcceptLanguageHeader(java.util.Locale);
  public abstract javax.sip.header.AlertInfoHeader createAlertInfoHeader(javax.sip.address.URI);
  public abstract javax.sip.header.CallInfoHeader createCallInfoHeader(javax.sip.address.URI);
  public abstract javax.sip.header.ContactHeader createContactHeader();
  public abstract javax.sip.header.ContactHeader createContactHeader(javax.sip.address.Address);
  public abstract javax.sip.header.ContentLanguageHeader createContentLanguageHeader(java.util.Locale);
  public abstract javax.sip.header.DateHeader createDateHeader(java.util.Calendar);
  public abstract javax.sip.header.ErrorInfoHeader createErrorInfoHeader(javax.sip.address.URI);
  public abstract javax.sip.header.RecordRouteHeader createRecordRouteHeader(javax.sip.address.Address);
  public abstract javax.sip.header.ReferToHeader createReferToHeader(javax.sip.address.Address);
  public abstract javax.sip.header.ReplyToHeader createReplyToHeader(javax.sip.address.Address);
  public abstract javax.sip.header.RouteHeader createRouteHeader(javax.sip.address.Address);
public interface javax.sip.header.InReplyToHeader extends javax.sip.header.CallIdHeader {
public interface javax.sip.header.MaxForwardsHeader extends javax.sip.header.Header {
  public abstract int getMaxForwards();
  public abstract boolean hasReachedZero();
public interface javax.sip.header.MediaType {
  public abstract java.lang.String getContentSubType();
  public abstract java.lang.String getContentType();
public interface javax.sip.header.MimeVersionHeader extends javax.sip.header.Header {
  public abstract int getMajorVersion();
  public abstract int getMinorVersion();
public interface javax.sip.header.MinExpiresHeader extends javax.sip.header.ExpiresHeader {
public interface javax.sip.header.OptionTag {
  public abstract java.lang.String getOptionTag();
public interface javax.sip.header.OrganizationHeader extends javax.sip.header.Header {
  public abstract java.lang.String getOrganization();
public interface javax.sip.header.Parameters {
  public abstract java.lang.String getParameter(java.lang.String);
  public abstract java.util.Iterator getParameterNames();
  public abstract void removeParameter(java.lang.String);
public interface javax.sip.header.PriorityHeader extends javax.sip.header.Header {
  public abstract java.lang.String getPriority();
public interface javax.sip.header.ProxyAuthenticateHeader extends javax.sip.header.WWWAuthenticateHeader {
public interface javax.sip.header.ProxyAuthorizationHeader extends javax.sip.header.AuthorizationHeader {
public interface javax.sip.header.ProxyRequireHeader extends javax.sip.header.RequireHeader {
public interface javax.sip.header.RAckHeader extends javax.sip.header.Header {
  public abstract java.lang.String getMethod();
  public abstract long getCSequenceNumber();
  public abstract long getRSequenceNumber();
  public abstract int getCSeqNumber();
  public abstract int getRSeqNumber();
public interface javax.sip.header.RSeqHeader extends javax.sip.header.Header {
  public abstract long getSeqNumber();
  public abstract int getSequenceNumber();
public interface javax.sip.header.ReasonHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract int getCause();
  public abstract java.lang.String getProtocol();
  public abstract java.lang.String getText();
public interface javax.sip.header.RecordRouteHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
public interface javax.sip.header.ReferToHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
public interface javax.sip.header.ReplyToHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getDisplayName();
public interface javax.sip.header.RequireHeader extends javax.sip.header.OptionTag,javax.sip.header.Header {
public interface javax.sip.header.RetryAfterHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getComment();
  public abstract boolean hasComment();
  public abstract void removeComment();
  public abstract int getDuration();
  public abstract void removeDuration();
  public abstract int getRetryAfter();
public interface javax.sip.header.RouteHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
public interface javax.sip.header.SIPETagHeader extends javax.sip.header.ExtensionHeader {
  public abstract java.lang.String getETag();
public interface javax.sip.header.SIPIfMatchHeader extends javax.sip.header.SIPETagHeader {
public interface javax.sip.header.ServerHeader extends javax.sip.header.Header {
  public abstract java.util.ListIterator getProduct();
  public abstract void addProductToken(java.lang.String);
public interface javax.sip.header.SubjectHeader extends javax.sip.header.Header {
  public abstract java.lang.String getSubject();
public interface javax.sip.header.SubscriptionStateHeader extends javax.sip.header.ExpiresHeader,javax.sip.header.Parameters {
  public abstract java.lang.String getReasonCode();
  public abstract int getRetryAfter();
  public abstract java.lang.String getState();
public interface javax.sip.header.SupportedHeader extends javax.sip.header.OptionTag,javax.sip.header.Header {
public interface javax.sip.header.TimeStampHeader extends javax.sip.header.Header {
  public abstract float getDelay();
  public abstract boolean hasDelay();
  public abstract void removeDelay();
  public abstract long getTime();
  public abstract int getTimeDelay();
  public abstract float getTimeStamp();
public interface javax.sip.header.ToHeader extends javax.sip.header.HeaderAddress,javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getTag();
  public abstract boolean hasTag();
  public abstract void removeTag();
  public abstract java.lang.String getDisplayName();
  public abstract java.lang.String getUserAtHostPort();
public class javax.sip.header.TooManyHopsException extends java.lang.Exception {
  public javax.sip.header.TooManyHopsException();
  public javax.sip.header.TooManyHopsException(java.lang.String);
  public javax.sip.header.TooManyHopsException(java.lang.String, java.lang.Throwable);
public interface javax.sip.header.UnsupportedHeader extends javax.sip.header.OptionTag,javax.sip.header.Header {
public interface javax.sip.header.UserAgentHeader extends javax.sip.header.Header {
  public abstract java.util.ListIterator getProduct();
  public abstract void addProductToken(java.lang.String);
public interface javax.sip.header.ViaHeader extends javax.sip.header.Header,javax.sip.header.Parameters {
  public abstract java.lang.String getBranch();
  public abstract java.lang.String getHost();
  public abstract java.lang.String getMAddr();
  public abstract int getPort();
  public abstract java.lang.String getProtocol();
  public abstract java.lang.String getReceived();
  public abstract int getRPort();
  public abstract java.lang.String getTransport();
  public abstract int getTTL();
  public abstract java.lang.String getSentByField();
  public abstract java.lang.String getSentProtocolField();
public interface javax.sip.header.WWWAuthenticateHeader extends javax.sip.header.AuthorizationHeader {
  public abstract javax.sip.address.URI getURI();
  public abstract void setURI(javax.sip.address.URI);
public interface javax.sip.header.WarningHeader extends javax.sip.header.Header {
  public abstract java.lang.String getAgent();
  public abstract int getCode();
  public abstract java.lang.String getText();
public interface javax.sip.message.Message extends java.lang.Cloneable,java.io.Serializable {
  public abstract void addHeader(javax.sip.header.Header);
  public abstract javax.sip.header.Header getHeader(java.lang.String);
  public abstract void setHeader(javax.sip.header.Header);
  public abstract void removeHeader(java.lang.String);
  public abstract java.util.ListIterator getHeaderNames();
  public abstract java.util.ListIterator getHeaders(java.lang.String);
  public abstract java.util.ListIterator getUnrecognizedHeaders();
  public abstract java.lang.Object getApplicationData();
  public abstract void setApplicationData(java.lang.Object);
  public abstract javax.sip.header.ContentLengthHeader getContentLength();
  public abstract void setContentLength(javax.sip.header.ContentLengthHeader);
  public abstract javax.sip.header.ContentLanguageHeader getContentLanguage();
  public abstract void setContentLanguage(javax.sip.header.ContentLanguageHeader);
  public abstract javax.sip.header.ContentEncodingHeader getContentEncoding();
  public abstract void setContentEncoding(javax.sip.header.ContentEncodingHeader);
  public abstract javax.sip.header.ContentDispositionHeader getContentDisposition();
  public abstract void setContentDisposition(javax.sip.header.ContentDispositionHeader);
  public abstract java.lang.Object getContent();
  public abstract byte[] getRawContent();
  public abstract void removeContent();
  public abstract javax.sip.header.ExpiresHeader getExpires();
  public abstract void setExpires(javax.sip.header.ExpiresHeader);
  public abstract java.lang.String getSIPVersion();
  public abstract java.lang.Object clone();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.String toString();
public interface javax.sip.message.MessageFactory {
  public abstract void setDefaultServerHeader(javax.sip.header.ServerHeader);
  public abstract void setDefaultUserAgentHeader(javax.sip.header.UserAgentHeader);
public interface javax.sip.message.Request extends javax.sip.message.Message {
  public abstract java.lang.String getMethod();
  public abstract javax.sip.address.URI getRequestURI();
  public abstract void setRequestURI(javax.sip.address.URI);
public interface javax.sip.message.Response extends javax.sip.message.Message {
  public abstract int getStatusCode();
  public abstract java.lang.String getReasonPhrase();
public abstract class javax.xml.parsers.DocumentBuilder {
  public void reset();
  public abstract boolean isNamespaceAware();
  public abstract boolean isValidating();
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract org.w3c.dom.Document newDocument();
  public abstract org.w3c.dom.DOMImplementation getDOMImplementation();
  public javax.xml.validation.Schema getSchema();
  public boolean isXIncludeAware();
public abstract class javax.xml.parsers.DocumentBuilderFactory {
  public static javax.xml.parsers.DocumentBuilderFactory newInstance();
  public static javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String, java.lang.ClassLoader);
  public void setNamespaceAware(boolean);
  public void setValidating(boolean);
  public void setIgnoringElementContentWhitespace(boolean);
  public void setExpandEntityReferences(boolean);
  public void setIgnoringComments(boolean);
  public void setCoalescing(boolean);
  public boolean isNamespaceAware();
  public boolean isValidating();
  public boolean isIgnoringElementContentWhitespace();
  public boolean isExpandEntityReferences();
  public boolean isIgnoringComments();
  public boolean isCoalescing();
  public javax.xml.validation.Schema getSchema();
  public void setSchema(javax.xml.validation.Schema);
  public void setXIncludeAware(boolean);
  public boolean isXIncludeAware();
public class javax.xml.parsers.FactoryConfigurationError extends java.lang.Error {
  public javax.xml.parsers.FactoryConfigurationError();
  public javax.xml.parsers.FactoryConfigurationError(java.lang.String);
  public javax.xml.parsers.FactoryConfigurationError(java.lang.Exception);
  public javax.xml.parsers.FactoryConfigurationError(java.lang.Exception, java.lang.String);
  public java.lang.String getMessage();
  public java.lang.Exception getException();
  public static java.lang.String filepath2URI(java.lang.String);
public class javax.xml.parsers.ParserConfigurationException extends java.lang.Exception {
  public javax.xml.parsers.ParserConfigurationException();
  public javax.xml.parsers.ParserConfigurationException(java.lang.String);
public abstract class javax.xml.parsers.SAXParser {
  public void reset();
  public abstract boolean isNamespaceAware();
  public abstract boolean isValidating();
  public javax.xml.validation.Schema getSchema();
  public boolean isXIncludeAware();
public abstract class javax.xml.parsers.SAXParserFactory {
  public static javax.xml.parsers.SAXParserFactory newInstance();
  public static javax.xml.parsers.SAXParserFactory newInstance(java.lang.String, java.lang.ClassLoader);
  public void setNamespaceAware(boolean);
  public void setValidating(boolean);
  public boolean isNamespaceAware();
  public boolean isValidating();
  public javax.xml.validation.Schema getSchema();
  public void setSchema(javax.xml.validation.Schema);
  public void setXIncludeAware(boolean);
  public boolean isXIncludeAware();
public class javax.xml.transform.OutputKeys {
public interface javax.xml.transform.Result {
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
public interface javax.xml.transform.Source {
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
public interface javax.xml.transform.SourceLocator {
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
  public abstract int getLineNumber();
  public abstract int getColumnNumber();
public abstract class javax.xml.transform.Transformer {
  public void reset();
  public abstract void setParameter(java.lang.String, java.lang.Object);
  public abstract java.lang.Object getParameter(java.lang.String);
  public abstract void clearParameters();
  public abstract void setURIResolver(javax.xml.transform.URIResolver);
  public abstract javax.xml.transform.URIResolver getURIResolver();
  public abstract void setOutputProperties(java.util.Properties);
  public abstract java.util.Properties getOutputProperties();
  public abstract javax.xml.transform.ErrorListener getErrorListener();
public class javax.xml.transform.TransformerConfigurationException extends javax.xml.transform.TransformerException {
  public javax.xml.transform.TransformerConfigurationException();
  public javax.xml.transform.TransformerConfigurationException(java.lang.String);
  public javax.xml.transform.TransformerConfigurationException(java.lang.Throwable);
  public javax.xml.transform.TransformerConfigurationException(java.lang.String, java.lang.Throwable);
  public javax.xml.transform.TransformerConfigurationException(java.lang.String, javax.xml.transform.SourceLocator);
  public javax.xml.transform.TransformerConfigurationException(java.lang.String, javax.xml.transform.SourceLocator, java.lang.Throwable);
public class javax.xml.transform.TransformerException extends java.lang.Exception {
  public javax.xml.transform.SourceLocator getLocator();
  public void setLocator(javax.xml.transform.SourceLocator);
  public java.lang.Throwable getException();
  public java.lang.Throwable getCause();
  public synchronized java.lang.Throwable initCause(java.lang.Throwable);
  public javax.xml.transform.TransformerException(java.lang.String);
  public javax.xml.transform.TransformerException(java.lang.Throwable);
  public javax.xml.transform.TransformerException(java.lang.String, java.lang.Throwable);
  public javax.xml.transform.TransformerException(java.lang.String, javax.xml.transform.SourceLocator);
  public javax.xml.transform.TransformerException(java.lang.String, javax.xml.transform.SourceLocator, java.lang.Throwable);
  public java.lang.String getMessageAndLocation();
  public java.lang.String getLocationAsString();
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
public abstract class javax.xml.transform.TransformerFactory {
  public abstract void setURIResolver(javax.xml.transform.URIResolver);
  public abstract javax.xml.transform.URIResolver getURIResolver();
  public abstract boolean getFeature(java.lang.String);
  public abstract void setAttribute(java.lang.String, java.lang.Object);
  public abstract java.lang.Object getAttribute(java.lang.String);
  public abstract void setErrorListener(javax.xml.transform.ErrorListener);
  public abstract javax.xml.transform.ErrorListener getErrorListener();
public class javax.xml.transform.TransformerFactoryConfigurationError extends java.lang.Error {
  public javax.xml.transform.TransformerFactoryConfigurationError();
  public javax.xml.transform.TransformerFactoryConfigurationError(java.lang.String);
  public javax.xml.transform.TransformerFactoryConfigurationError(java.lang.Exception);
  public javax.xml.transform.TransformerFactoryConfigurationError(java.lang.Exception, java.lang.String);
  public java.lang.String getMessage();
  public java.lang.Exception getException();
public class javax.xml.transform.dom.DOMSource implements javax.xml.transform.Source {
  public javax.xml.transform.dom.DOMSource();
  public javax.xml.transform.dom.DOMSource(org.w3c.dom.Node);
  public javax.xml.transform.dom.DOMSource(org.w3c.dom.Node, java.lang.String);
  public void setNode(org.w3c.dom.Node);
  public org.w3c.dom.Node getNode();
  public void setSystemId(java.lang.String);
  public java.lang.String getSystemId();
  public static java.lang.String filepath2URI(java.lang.String);
public class javax.xml.transform.stream.StreamResult implements javax.xml.transform.Result {
  public javax.xml.transform.stream.StreamResult();
  public javax.xml.transform.stream.StreamResult(java.io.OutputStream);
  public javax.xml.transform.stream.StreamResult(java.io.Writer);
  public javax.xml.transform.stream.StreamResult(java.lang.String);
  public javax.xml.transform.stream.StreamResult(java.io.File);
  public void setOutputStream(java.io.OutputStream);
  public java.io.OutputStream getOutputStream();
  public void setWriter(java.io.Writer);
  public java.io.Writer getWriter();
  public void setSystemId(java.lang.String);
  public void setSystemId(java.io.File);
  public java.lang.String getSystemId();
public class junit.framework.Assert {
  public static void assertTrue(java.lang.String, boolean);
  public static void assertTrue(boolean);
  public static void assertFalse(java.lang.String, boolean);
  public static void assertFalse(boolean);
  public static void fail(java.lang.String);
  public static void fail();
  public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertEquals(java.lang.Object, java.lang.Object);
  public static void assertEquals(java.lang.String, java.lang.String, java.lang.String);
  public static void assertEquals(java.lang.String, java.lang.String);
  public static void assertEquals(java.lang.String, double, double, double);
  public static void assertEquals(double, double, double);
  public static void assertEquals(java.lang.String, float, float, float);
  public static void assertEquals(float, float, float);
  public static void assertEquals(java.lang.String, long, long);
  public static void assertEquals(long, long);
  public static void assertEquals(java.lang.String, boolean, boolean);
  public static void assertEquals(boolean, boolean);
  public static void assertEquals(java.lang.String, byte, byte);
  public static void assertEquals(byte, byte);
  public static void assertEquals(java.lang.String, char, char);
  public static void assertEquals(char, char);
  public static void assertEquals(java.lang.String, short, short);
  public static void assertEquals(short, short);
  public static void assertEquals(java.lang.String, int, int);
  public static void assertEquals(int, int);
  public static void assertNotNull(java.lang.Object);
  public static void assertNotNull(java.lang.String, java.lang.Object);
  public static void assertNull(java.lang.Object);
  public static void assertNull(java.lang.String, java.lang.Object);
  public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertSame(java.lang.Object, java.lang.Object);
  public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertNotSame(java.lang.Object, java.lang.Object);
public class junit.framework.AssertionFailedError extends java.lang.Error {
  public junit.framework.AssertionFailedError();
  public junit.framework.AssertionFailedError(java.lang.String);
public class junit.framework.ComparisonFailure extends junit.framework.AssertionFailedError {
  public junit.framework.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getMessage();
public interface junit.framework.Protectable {
public interface junit.framework.Test {
  public abstract int countTestCases();
  public abstract void run(junit.framework.TestResult);
public abstract class junit.framework.TestCase extends junit.framework.Assert implements junit.framework.Test {
  public junit.framework.TestCase();
  public junit.framework.TestCase(java.lang.String);
  public int countTestCases();
  public junit.framework.TestResult run();
  public void run(junit.framework.TestResult);
  public java.lang.String toString();
  public java.lang.String getName();
  public void setName(java.lang.String);
public class junit.framework.TestFailure {
  public junit.framework.TestFailure(junit.framework.Test, java.lang.Throwable);
  public junit.framework.Test failedTest();
  public java.lang.Throwable thrownException();
  public java.lang.String toString();
  public java.lang.String trace();
  public java.lang.String exceptionMessage();
  public boolean isFailure();
public interface junit.framework.TestListener {
  public abstract void addError(junit.framework.Test, java.lang.Throwable);
  public abstract void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public abstract void endTest(junit.framework.Test);
  public abstract void startTest(junit.framework.Test);
public class junit.framework.TestResult {
  public junit.framework.TestResult();
  public synchronized void addError(junit.framework.Test, java.lang.Throwable);
  public synchronized void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public synchronized void addListener(junit.framework.TestListener);
  public synchronized void removeListener(junit.framework.TestListener);
  public void endTest(junit.framework.Test);
  public synchronized int errorCount();
  public synchronized java.util.Enumeration errors();
  public synchronized int failureCount();
  public synchronized java.util.Enumeration failures();
  public synchronized int runCount();
  public void runProtected(junit.framework.Test, junit.framework.Protectable);
  public synchronized boolean shouldStop();
  public void startTest(junit.framework.Test);
  public synchronized void stop();
  public synchronized boolean wasSuccessful();
public class junit.framework.TestSuite implements junit.framework.Test {
  public junit.framework.TestSuite();
  public junit.framework.TestSuite(java.lang.Class, java.lang.String);
  public junit.framework.TestSuite(java.lang.Class);
  public junit.framework.TestSuite(java.lang.String);
  public void addTest(junit.framework.Test);
  public void addTestSuite(java.lang.Class);
  public static junit.framework.Test createTest(java.lang.Class, java.lang.String);
  public int countTestCases();
  public void run(junit.framework.TestResult);
  public void runTest(junit.framework.Test, junit.framework.TestResult);
  public junit.framework.Test testAt(int);
  public int testCount();
  public java.util.Enumeration tests();
  public java.lang.String toString();
  public void setName(java.lang.String);
  public java.lang.String getName();
public abstract class junit.runner.BaseTestRunner implements junit.framework.TestListener {
  public junit.runner.BaseTestRunner();
  public synchronized void startTest(junit.framework.Test);
  public void setPreference(java.lang.String, java.lang.String);
  public synchronized void endTest(junit.framework.Test);
  public synchronized void addError(junit.framework.Test, java.lang.Throwable);
  public synchronized void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public abstract void testStarted(java.lang.String);
  public abstract void testEnded(java.lang.String);
  public abstract void testFailed(int, junit.framework.Test, java.lang.Throwable);
  public junit.framework.Test getTest(java.lang.String);
  public java.lang.String elapsedTimeAsString(long);
  public void setLoading(boolean);
  public java.lang.String extractClassName(java.lang.String);
  public static java.lang.String truncate(java.lang.String);
  public junit.runner.TestSuiteLoader getLoader();
  public static java.lang.String getPreference(java.lang.String);
  public static int getPreference(java.lang.String, int);
  public static boolean inVAJava();
  public static java.lang.String getFilteredTrace(java.lang.Throwable);
  public static java.lang.String getFilteredTrace(java.lang.String);
public class junit.runner.ReloadingTestSuiteLoader implements junit.runner.TestSuiteLoader {
  public junit.runner.ReloadingTestSuiteLoader();
public class junit.runner.StandardTestSuiteLoader implements junit.runner.TestSuiteLoader {
  public junit.runner.StandardTestSuiteLoader();
public class junit.runner.TestCaseClassLoader extends java.lang.ClassLoader {
  public junit.runner.TestCaseClassLoader();
  public junit.runner.TestCaseClassLoader(java.lang.String);
  public java.net.URL getResource(java.lang.String);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public boolean isExcluded(java.lang.String);
public interface junit.runner.TestSuiteLoader {
public class junit.runner.Version {
  public static java.lang.String id();
public class junit.textui.ResultPrinter implements junit.framework.TestListener {
  public junit.textui.ResultPrinter(java.io.PrintStream);
  public void printDefect(junit.framework.TestFailure, int);
  public java.io.PrintStream getWriter();
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void endTest(junit.framework.Test);
  public void startTest(junit.framework.Test);
public class junit.textui.TestRunner extends junit.runner.BaseTestRunner {
  public junit.textui.TestRunner();
  public junit.textui.TestRunner(java.io.PrintStream);
  public junit.textui.TestRunner(junit.textui.ResultPrinter);
  public static void run(java.lang.Class);
  public static junit.framework.TestResult run(junit.framework.Test);
  public static void runAndWait(junit.framework.Test);
  public junit.runner.TestSuiteLoader getLoader();
  public void testFailed(int, junit.framework.Test, java.lang.Throwable);
  public void testStarted(java.lang.String);
  public void testEnded(java.lang.String);
  public junit.framework.TestResult doRun(junit.framework.Test);
  public junit.framework.TestResult doRun(junit.framework.Test, boolean);
  public static void main(java.lang.String[]);
  public void setPrinter(junit.textui.ResultPrinter);
public final class libcore.icu.CollationElementIteratorICU {
  public void reset();
  public int next();
  public int previous();
  public int getMaxExpansion(int);
  public void setText(java.lang.String);
  public void setText(java.text.CharacterIterator);
  public int getOffset();
  public void setOffset(int);
  public static int primaryOrder(int);
  public static int secondaryOrder(int);
  public static int tertiaryOrder(int);
  public static libcore.icu.CollationElementIteratorICU getInstance(int, java.lang.String);
public final class libcore.icu.CollationKeyICU extends java.text.CollationKey {
  public int compareTo(java.text.CollationKey);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public byte[] toByteArray();
  public int compareTo(java.lang.Object);
public final class libcore.icu.ICU {
  public libcore.icu.ICU();
  public static java.lang.String[] getISOLanguages();
  public static java.lang.String[] getISOCountries();
  public static java.util.Locale localeFromString(java.lang.String);
  public static java.util.Locale[] localesFromStrings(java.lang.String[]);
  public static java.util.Locale[] getAvailableLocales();
  public static java.util.Locale[] getAvailableBreakIteratorLocales();
  public static java.util.Locale[] getAvailableCalendarLocales();
  public static java.util.Locale[] getAvailableCollatorLocales();
  public static java.util.Locale[] getAvailableDateFormatLocales();
  public static java.util.Locale[] getAvailableDateFormatSymbolsLocales();
  public static java.util.Locale[] getAvailableDecimalFormatSymbolsLocales();
  public static java.util.Locale[] getAvailableNumberFormatLocales();
  public static native java.lang.String getIcuVersion();
  public static native java.lang.String getUnicodeVersion();
  public static native java.lang.String toLowerCase(java.lang.String, java.lang.String);
  public static native java.lang.String toUpperCase(java.lang.String, java.lang.String);
  public static native java.lang.String[] getAvailableCurrencyCodes();
  public static native java.lang.String getCurrencyCode(java.lang.String);
  public static native java.lang.String getCurrencyDisplayName(java.lang.String, java.lang.String);
  public static native int getCurrencyFractionDigits(java.lang.String);
  public static native java.lang.String getCurrencySymbol(java.lang.String, java.lang.String);
  public static native java.lang.String getDisplayCountryNative(java.lang.String, java.lang.String);
  public static native java.lang.String getDisplayLanguageNative(java.lang.String, java.lang.String);
  public static native java.lang.String getDisplayVariantNative(java.lang.String, java.lang.String);
  public static native java.lang.String getISO3CountryNative(java.lang.String);
  public static native java.lang.String getISO3LanguageNative(java.lang.String);
  public static native java.lang.String addLikelySubtags(java.lang.String);
  public static native java.lang.String getScript(java.lang.String);
public final class libcore.icu.LocaleData {
  public static libcore.icu.LocaleData get(java.util.Locale);
  public java.lang.String toString();
  public java.lang.String getDateFormat(int);
  public java.lang.String getTimeFormat(int);
public final class libcore.icu.NativeBreakIterator implements java.lang.Cloneable {
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int current();
  public int first();
  public int following(int);
  public java.text.CharacterIterator getText();
  public int last();
  public int next(int);
  public int next();
  public int previous();
  public void setText(java.text.CharacterIterator);
  public void setText(java.lang.String);
  public boolean isBoundary(int);
  public int preceding(int);
  public static libcore.icu.NativeBreakIterator getCharacterInstance(java.util.Locale);
  public static libcore.icu.NativeBreakIterator getLineInstance(java.util.Locale);
  public static libcore.icu.NativeBreakIterator getSentenceInstance(java.util.Locale);
  public static libcore.icu.NativeBreakIterator getWordInstance(java.util.Locale);
public final class libcore.icu.NativeCollation {
  public static native void closeCollator(int);
  public static native int compare(int, java.lang.String, java.lang.String);
  public static native int getAttribute(int, int);
  public static native int getCollationElementIterator(int, java.lang.String);
  public static native java.lang.String getRules(int);
  public static native byte[] getSortKey(int, java.lang.String);
  public static native int openCollator(java.lang.String);
  public static native int openCollatorFromRules(java.lang.String, int, int);
  public static native int safeClone(int);
  public static native void setAttribute(int, int, int);
  public static native void closeElements(int);
  public static native int getMaxExpansion(int, int);
  public static native int getOffset(int);
  public static native int next(int);
  public static native int previous(int);
  public static native void reset(int);
  public static native void setOffset(int, int);
  public static native void setText(int, java.lang.String);
public final class libcore.icu.NativeConverter {
  public libcore.icu.NativeConverter();
  public static native int decode(long, byte[], int, char[], int, int[], boolean);
  public static native int encode(long, char[], int, byte[], int, int[], boolean);
  public static native long openConverter(java.lang.String);
  public static native void closeConverter(long);
  public static native void resetByteToChar(long);
  public static native void resetCharToByte(long);
  public static native byte[] getSubstitutionBytes(long);
  public static native int getMaxBytesPerChar(long);
  public static native int getMinBytesPerChar(long);
  public static native float getAveBytesPerChar(long);
  public static native float getAveCharsPerByte(long);
  public static native boolean contains(java.lang.String, java.lang.String);
  public static native boolean canEncode(long, int);
  public static native java.lang.String[] getAvailableCharsetNames();
  public static native java.nio.charset.Charset charsetForName(java.lang.String);
  public static int setCallbackDecode(long, java.nio.charset.CharsetDecoder);
  public static int setCallbackEncode(long, java.nio.charset.CharsetEncoder);
  public static libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition);
  public boolean next();
  public int fieldId();
  public java.text.Format$Field field();
  public int start();
  public int limit();
public final class libcore.icu.NativeDecimalFormat {
  public libcore.icu.NativeDecimalFormat(java.lang.String, java.text.DecimalFormatSymbols);
  public libcore.icu.NativeDecimalFormat(java.lang.String, libcore.icu.LocaleData);
  public int hashCode();
  public synchronized void close();
  public java.lang.Object clone();
  public boolean equals(java.lang.Object);
  public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols);
  public void setDecimalFormatSymbols(libcore.icu.LocaleData);
  public char[] formatBigDecimal(java.math.BigDecimal, java.text.FieldPosition);
  public char[] formatBigInteger(java.math.BigInteger, java.text.FieldPosition);
  public char[] formatLong(long, java.text.FieldPosition);
  public char[] formatDouble(double, java.text.FieldPosition);
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public int getMaximumFractionDigits();
  public int getMaximumIntegerDigits();
  public int getMinimumFractionDigits();
  public int getMinimumIntegerDigits();
  public int getGroupingSize();
  public int getMultiplier();
  public java.lang.String getNegativePrefix();
  public java.lang.String getNegativeSuffix();
  public java.lang.String getPositivePrefix();
  public java.lang.String getPositiveSuffix();
  public boolean isDecimalSeparatorAlwaysShown();
  public boolean isParseBigDecimal();
  public boolean isParseIntegerOnly();
  public boolean isGroupingUsed();
  public void setDecimalSeparatorAlwaysShown(boolean);
  public void setCurrency(java.util.Currency);
  public void setGroupingSize(int);
  public void setGroupingUsed(boolean);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setMultiplier(int);
  public void setNegativePrefix(java.lang.String);
  public void setNegativeSuffix(java.lang.String);
  public void setPositivePrefix(java.lang.String);
  public void setPositiveSuffix(java.lang.String);
  public void setParseBigDecimal(boolean);
  public void setParseIntegerOnly(boolean);
  public void setRoundingMode(java.math.RoundingMode, double);
public final class libcore.icu.NativePluralRules {
  public static libcore.icu.NativePluralRules forLocale(java.util.Locale);
  public int quantityForInt(int);
public final class libcore.icu.RuleBasedCollatorICU implements java.lang.Cloneable {
  public libcore.icu.RuleBasedCollatorICU(java.util.Locale);
  public java.lang.Object clone();
  public int compare(java.lang.String, java.lang.String);
  public int getDecomposition();
  public void setDecomposition(int);
  public int getStrength();
  public void setStrength(int);
  public void setAttribute(int, int);
  public int getAttribute(int);
  public java.text.CollationKey getCollationKey(java.lang.String);
  public java.lang.String getRules();
  public libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.lang.String);
  public libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.text.CharacterIterator);
  public int hashCode();
  public boolean equals(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int compare(java.lang.String[], java.lang.String[]);
  public int compare(java.lang.Object, java.lang.Object);
public class libcore.icu.TimeZones$ZoneStringsCache extends libcore.util.BasicLruCache<java.util.Locale, java.lang.String[][]> {
  public libcore.icu.TimeZones$ZoneStringsCache();
public final class libcore.icu.TimeZones {
  public static java.lang.String getDisplayName(java.lang.String[][], java.lang.String, boolean, int);
  public static java.lang.String[][] getZoneStrings(java.util.Locale);
  public static java.lang.String[] forLocale(java.util.Locale);
public final class libcore.internal.StringPool {
  public libcore.internal.StringPool();
  public java.lang.String get(char[], int, int);
public final class libcore.io.AsynchronousCloseMonitor {
  public static native void signalBlockedThreads(java.io.FileDescriptor);
public final class libcore.io.Base64 {
  public static byte[] decode(byte[]);
  public static byte[] decode(byte[], int);
  public static java.lang.String encode(byte[]);
public class libcore.io.BlockGuardOs extends libcore.io.ForwardingOs {
  public libcore.io.BlockGuardOs(libcore.io.Os);
public abstract class libcore.io.BufferIterator {
  public libcore.io.BufferIterator();
  public abstract void seek(int);
  public abstract void skip(int);
  public abstract void readByteArray(byte[], int, int);
  public abstract byte readByte();
  public abstract int readInt();
  public abstract void readIntArray(int[], int, int);
  public abstract short readShort();
  public void write(int);
  public void write(byte[], int, int);
  public void close();
  public void flush();
public final class libcore.io.DiskLruCache$Editor {
  public java.io.File getCleanFile(int);
  public java.io.File getDirtyFile(int);
public final class libcore.io.DiskLruCache$Snapshot implements java.io.Closeable {
  public java.io.InputStream getInputStream(int);
  public void close();
public final class libcore.io.DiskLruCache implements java.io.Closeable {
  public java.io.File getDirectory();
  public long maxSize();
  public synchronized long size();
  public boolean isClosed();
public final class libcore.io.ErrnoException extends java.lang.Exception {
  public libcore.io.ErrnoException(java.lang.String, int);
  public libcore.io.ErrnoException(java.lang.String, int, java.lang.Throwable);
  public java.lang.String getMessage();
public class libcore.io.ForwardingOs implements libcore.io.Os {
  public libcore.io.ForwardingOs(libcore.io.Os);
  public java.lang.String[] environ();
  public java.lang.String gai_strerror(int);
  public int getegid();
  public int geteuid();
  public int getgid();
  public java.lang.String getenv(java.lang.String);
  public int getpid();
  public int getppid();
  public int getuid();
  public java.lang.String if_indextoname(int);
  public java.net.InetAddress inet_pton(int, java.lang.String);
  public boolean isatty(java.io.FileDescriptor);
  public java.lang.String strerror(int);
  public long sysconf(int);
  public libcore.io.StructUtsname uname();
public final class libcore.io.GaiException extends java.lang.RuntimeException {
  public libcore.io.GaiException(java.lang.String, int);
  public libcore.io.GaiException(java.lang.String, int, java.lang.Throwable);
  public java.lang.String getMessage();
public final class libcore.io.HeapBufferIterator extends libcore.io.BufferIterator {
  public void seek(int);
  public void skip(int);
  public void readByteArray(byte[], int, int);
  public byte readByte();
  public int readInt();
  public void readIntArray(int[], int, int);
  public short readShort();
  public static libcore.io.BufferIterator iterator(byte[], int, int, java.nio.ByteOrder);
public final class libcore.io.IoBridge {
  public static java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor);
  public static int getSocketLocalPort(java.io.FileDescriptor);
public final class libcore.io.IoUtils {
  public static void closeQuietly(java.lang.AutoCloseable);
  public static void closeQuietly(java.io.FileDescriptor);
  public static void closeQuietly(java.net.Socket);
public final class libcore.io.Libcore {
public final class libcore.io.Memory {
  public static native void unsafeBulkGet(java.lang.Object, int, int, byte[], int, int, boolean);
  public static native void unsafeBulkPut(byte[], int, int, java.lang.Object, int, int, boolean);
  public static int peekInt(byte[], int, java.nio.ByteOrder);
  public static long peekLong(byte[], int, java.nio.ByteOrder);
  public static short peekShort(byte[], int, java.nio.ByteOrder);
  public static void pokeInt(byte[], int, int, java.nio.ByteOrder);
  public static void pokeLong(byte[], int, long, java.nio.ByteOrder);
  public static void pokeShort(byte[], int, short, java.nio.ByteOrder);
  public static native void memmove(java.lang.Object, int, java.lang.Object, int, long);
  public static native byte peekByte(int);
  public static native int peekInt(int, boolean);
  public static native long peekLong(int, boolean);
  public static native short peekShort(int, boolean);
  public static native void peekByteArray(int, byte[], int, int);
  public static native void peekCharArray(int, char[], int, int, boolean);
  public static native void peekDoubleArray(int, double[], int, int, boolean);
  public static native void peekFloatArray(int, float[], int, int, boolean);
  public static native void peekIntArray(int, int[], int, int, boolean);
  public static native void peekLongArray(int, long[], int, int, boolean);
  public static native void peekShortArray(int, short[], int, int, boolean);
  public static native void pokeByte(int, byte);
  public static native void pokeInt(int, int, boolean);
  public static native void pokeLong(int, long, boolean);
  public static native void pokeShort(int, short, boolean);
  public static native void pokeByteArray(int, byte[], int, int);
  public static native void pokeCharArray(int, char[], int, int, boolean);
  public static native void pokeDoubleArray(int, double[], int, int, boolean);
  public static native void pokeFloatArray(int, float[], int, int, boolean);
  public static native void pokeIntArray(int, int[], int, int, boolean);
  public static native void pokeLongArray(int, long[], int, int, boolean);
  public static native void pokeShortArray(int, short[], int, int, boolean);
public final class libcore.io.MemoryMappedFile implements java.lang.AutoCloseable {
  public libcore.io.MemoryMappedFile(long, long);
  public libcore.io.BufferIterator bigEndianIterator();
  public libcore.io.BufferIterator littleEndianIterator();
  public long size();
public final class libcore.io.NioBufferIterator extends libcore.io.BufferIterator {
  public void seek(int);
  public void skip(int);
  public void readByteArray(byte[], int, int);
  public byte readByte();
  public int readInt();
  public void readIntArray(int[], int, int);
  public short readShort();
public interface libcore.io.Os {
  public abstract java.lang.String[] environ();
  public abstract java.lang.String gai_strerror(int);
  public abstract int getegid();
  public abstract int geteuid();
  public abstract int getgid();
  public abstract java.lang.String getenv(java.lang.String);
  public abstract int getpid();
  public abstract int getppid();
  public abstract int getuid();
  public abstract java.lang.String if_indextoname(int);
  public abstract java.net.InetAddress inet_pton(int, java.lang.String);
  public abstract boolean isatty(java.io.FileDescriptor);
  public abstract java.lang.String strerror(int);
  public abstract long sysconf(int);
  public abstract libcore.io.StructUtsname uname();
public final class libcore.io.OsConstants {
  public static boolean S_ISBLK(int);
  public static boolean S_ISCHR(int);
  public static boolean S_ISDIR(int);
  public static boolean S_ISFIFO(int);
  public static boolean S_ISREG(int);
  public static boolean S_ISLNK(int);
  public static boolean S_ISSOCK(int);
  public static int WEXITSTATUS(int);
  public static boolean WCOREDUMP(int);
  public static int WTERMSIG(int);
  public static int WSTOPSIG(int);
  public static boolean WIFEXITED(int);
  public static boolean WIFSTOPPED(int);
  public static boolean WIFSIGNALED(int);
  public static java.lang.String gaiName(int);
  public static java.lang.String errnoName(int);
public final class libcore.io.Posix implements libcore.io.Os {
  public native java.lang.String[] environ();
  public native java.lang.String gai_strerror(int);
  public native int getegid();
  public native int geteuid();
  public native int getgid();
  public native java.lang.String getenv(java.lang.String);
  public native int getpid();
  public native int getppid();
  public native int getuid();
  public native java.lang.String if_indextoname(int);
  public native java.net.InetAddress inet_pton(int, java.lang.String);
  public native boolean isatty(java.io.FileDescriptor);
  public native java.lang.String strerror(int);
  public native long sysconf(int);
  public native libcore.io.StructUtsname uname();
public final class libcore.io.Streams {
public final class libcore.io.StructAddrinfo {
  public libcore.io.StructAddrinfo();
public final class libcore.io.StructFlock {
  public libcore.io.StructFlock();
public final class libcore.io.StructGroupReq {
  public libcore.io.StructGroupReq(int, java.net.InetAddress);
  public java.lang.String toString();
public final class libcore.io.StructLinger {
  public libcore.io.StructLinger(int, int);
  public boolean isOn();
  public java.lang.String toString();
public final class libcore.io.StructPasswd {
  public libcore.io.StructPasswd(java.lang.String, int, int, java.lang.String, java.lang.String);
public final class libcore.io.StructPollfd {
  public libcore.io.StructPollfd();
  public java.lang.String toString();
public final class libcore.io.StructStat {
public final class libcore.io.StructStatFs {
public final class libcore.io.StructTimeval {
  public static libcore.io.StructTimeval fromMillis(long);
  public long toMillis();
  public java.lang.String toString();
public final class libcore.io.StructUtsname {
public final class libcore.math.MathUtils {
public final class libcore.net.MimeUtils {
  public static boolean hasMimeType(java.lang.String);
  public static java.lang.String guessMimeTypeFromExtension(java.lang.String);
  public static boolean hasExtension(java.lang.String);
  public static java.lang.String guessExtensionFromMimeType(java.lang.String);
public abstract class libcore.net.UriCodec {
  public libcore.net.UriCodec();
  public final java.lang.String encode(java.lang.String, java.nio.charset.Charset);
  public final void appendEncoded(java.lang.StringBuilder, java.lang.String);
  public final void appendPartiallyEncoded(java.lang.StringBuilder, java.lang.String);
  public static java.lang.String decode(java.lang.String, boolean, java.nio.charset.Charset);
  public static java.lang.String decode(java.lang.String);
  public libcore.net.http.ChunkedOutputStream(java.io.OutputStream, int);
  public libcore.net.http.FixedLengthOutputStream(java.io.OutputStream, int);
public interface libcore.net.http.HeaderParser$CacheControlHandler {
  public abstract void handle(java.lang.String, java.lang.String);
  public static void parseCacheControl(java.lang.String, libcore.net.http.HeaderParser$CacheControlHandler);
  public static int parseSeconds(java.lang.String);
public final class libcore.net.http.HttpConnection$Address {
  public libcore.net.http.HttpConnection$Address(java.net.URI);
  public libcore.net.http.HttpConnection$Address(java.net.URI, java.net.Proxy, boolean);
  public java.net.Proxy getProxy();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void closeSocketAndStreams();
  public libcore.net.http.HttpConnection$Address getAddress();
  public javax.net.ssl.SSLSocket getSecureSocketIfConnected();
  public void recycle(libcore.net.http.HttpConnection);
public final class libcore.net.http.HttpDate {
  public libcore.net.http.HttpDate();
  public static java.util.Date parse(java.lang.String);
  public static java.lang.String format(java.util.Date);
public class libcore.net.http.HttpEngine {
  public final java.io.OutputStream getRequestBody();
  public final boolean hasResponse();
  public final libcore.net.http.RequestHeaders getRequestHeaders();
  public final libcore.net.http.ResponseHeaders getResponseHeaders();
  public final int getResponseCode();
  public final java.io.InputStream getResponseBody();
  public final java.net.CacheResponse getCacheResponse();
  public final libcore.net.http.HttpConnection getConnection();
  public final void automaticallyReleaseConnectionToPool();
  public final void release(boolean);
  public final boolean hasResponseBody();
public final class libcore.net.http.HttpHandler extends java.net.URLStreamHandler {
  public libcore.net.http.HttpHandler();
  public void abort();
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaders();
  public java.io.InputStream getBody();
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaders();
  public java.io.InputStream getBody();
  public java.lang.String getCipherSuite();
  public java.util.List<java.security.cert.Certificate> getLocalCertificateChain();
  public java.security.Principal getLocalPrincipal();
  public libcore.net.http.HttpResponseCache$Entry(java.net.URI, libcore.net.http.RawHeaders, java.net.HttpURLConnection);
  public boolean matches(java.net.URI, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
  public java.net.CacheResponse newCacheResponse(java.io.InputStream);
  public java.net.SecureCacheResponse newSecureCacheResponse(java.io.InputStream);
public final class libcore.net.http.HttpResponseCache extends java.net.ResponseCache {
  public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
  public libcore.io.DiskLruCache getCache();
  public synchronized int getWriteAbortCount();
  public synchronized int getWriteSuccessCount();
  public synchronized int getNetworkCount();
  public synchronized int getHitCount();
  public synchronized int getRequestCount();
  public static libcore.net.http.HttpURLConnectionImpl$Retry[] values();
  public static libcore.net.http.HttpURLConnectionImpl$Retry valueOf(java.lang.String);
  public final void disconnect();
  public final java.io.InputStream getErrorStream();
  public final java.lang.String getHeaderField(int);
  public final java.lang.String getHeaderField(java.lang.String);
  public final java.lang.String getHeaderFieldKey(int);
  public final java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields();
  public final java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestProperties();
  public final java.lang.String getRequestProperty(java.lang.String);
  public final boolean usingProxy();
  public final void setRequestProperty(java.lang.String, java.lang.String);
  public final void addRequestProperty(java.lang.String, java.lang.String);
public final class libcore.net.http.HttpsHandler extends java.net.URLStreamHandler {
  public libcore.net.http.HttpsHandler();
  public java.net.SecureCacheResponse getCacheResponse();
  public javax.net.ssl.SSLSocket getSSLSocket();
  public java.lang.String getCipherSuite();
  public java.security.cert.Certificate[] getLocalCertificates();
  public java.security.Principal getLocalPrincipal();
  public void disconnect();
  public java.io.InputStream getErrorStream();
  public java.lang.String getRequestMethod();
  public boolean usingProxy();
  public boolean getInstanceFollowRedirects();
  public void setInstanceFollowRedirects(boolean);
  public boolean getAllowUserInteraction();
  public java.lang.String getContentEncoding();
  public int getContentLength();
  public java.lang.String getContentType();
  public long getDate();
  public boolean getDefaultUseCaches();
  public boolean getDoInput();
  public boolean getDoOutput();
  public long getExpiration();
  public java.lang.String getHeaderField(int);
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields();
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRequestProperties();
  public void addRequestProperty(java.lang.String, java.lang.String);
  public java.lang.String getHeaderField(java.lang.String);
  public long getHeaderFieldDate(java.lang.String, long);
  public int getHeaderFieldInt(java.lang.String, int);
  public java.lang.String getHeaderFieldKey(int);
  public long getIfModifiedSince();
  public long getLastModified();
  public java.lang.String getRequestProperty(java.lang.String);
  public java.net.URL getURL();
  public boolean getUseCaches();
  public void setAllowUserInteraction(boolean);
  public void setDefaultUseCaches(boolean);
  public void setDoInput(boolean);
  public void setDoOutput(boolean);
  public void setIfModifiedSince(long);
  public void setRequestProperty(java.lang.String, java.lang.String);
  public void setUseCaches(boolean);
  public void setConnectTimeout(int);
  public int getConnectTimeout();
  public void setReadTimeout(int);
  public int getReadTimeout();
  public java.lang.String toString();
  public void setFixedLengthStreamingMode(int);
  public void setChunkedStreamingMode(int);
  public int compare(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
public final class libcore.net.http.RawHeaders {
  public libcore.net.http.RawHeaders();
  public libcore.net.http.RawHeaders(libcore.net.http.RawHeaders);
  public void setStatusLine(java.lang.String);
  public java.lang.String getStatusLine();
  public int getHttpMinorVersion();
  public int getResponseCode();
  public java.lang.String getResponseMessage();
  public void addLine(java.lang.String);
  public void add(java.lang.String, java.lang.String);
  public void removeAll(java.lang.String);
  public void addAll(java.lang.String, java.util.List<java.lang.String>);
  public void set(java.lang.String, java.lang.String);
  public int length();
  public java.lang.String getFieldName(int);
  public java.lang.String getValue(int);
  public java.lang.String get(java.lang.String);
  public libcore.net.http.RawHeaders getAll(java.util.Set<java.lang.String>);
  public java.lang.String toHeaderString();
  public java.util.Map<java.lang.String, java.util.List<java.lang.String>> toMultimap();
  public static libcore.net.http.RawHeaders fromMultimap(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
  public void handle(java.lang.String, java.lang.String);
public final class libcore.net.http.RequestHeaders {
  public libcore.net.http.RequestHeaders(java.net.URI, libcore.net.http.RawHeaders);
  public boolean isChunked();
  public boolean hasConnectionClose();
  public java.net.URI getUri();
  public libcore.net.http.RawHeaders getHeaders();
  public boolean isNoCache();
  public int getMaxAgeSeconds();
  public int getMaxStaleSeconds();
  public int getMinFreshSeconds();
  public boolean isOnlyIfCached();
  public boolean hasAuthorization();
  public int getContentLength();
  public java.lang.String getTransferEncoding();
  public java.lang.String getUserAgent();
  public java.lang.String getHost();
  public java.lang.String getConnection();
  public java.lang.String getAcceptEncoding();
  public java.lang.String getContentType();
  public java.lang.String getIfModifiedSince();
  public java.lang.String getIfNoneMatch();
  public java.lang.String getProxyAuthorization();
  public void setChunked();
  public void setContentLength(int);
  public void setUserAgent(java.lang.String);
  public void setHost(java.lang.String);
  public void setConnection(java.lang.String);
  public void setAcceptEncoding(java.lang.String);
  public void setContentType(java.lang.String);
  public void setIfModifiedSince(java.util.Date);
  public void setIfNoneMatch(java.lang.String);
  public boolean hasConditions();
  public void addCookies(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
  public void handle(java.lang.String, java.lang.String);
public final class libcore.net.http.ResponseHeaders {
  public libcore.net.http.ResponseHeaders(java.net.URI, libcore.net.http.RawHeaders);
  public boolean isContentEncodingGzip();
  public void stripContentEncoding();
  public boolean isChunked();
  public boolean hasConnectionClose();
  public java.net.URI getUri();
  public libcore.net.http.RawHeaders getHeaders();
  public java.util.Date getServedDate();
  public java.util.Date getLastModified();
  public java.util.Date getExpires();
  public boolean isNoCache();
  public boolean isNoStore();
  public int getMaxAgeSeconds();
  public int getSMaxAgeSeconds();
  public boolean isPublic();
  public boolean isMustRevalidate();
  public java.lang.String getEtag();
  public java.util.Set<java.lang.String> getVaryFields();
  public java.lang.String getContentEncoding();
  public int getContentLength();
  public java.lang.String getConnection();
  public java.lang.String getProxyAuthenticate();
  public java.lang.String getWwwAuthenticate();
  public void setLocalTimestamps(long, long);
  public boolean isCacheable(libcore.net.http.RequestHeaders);
  public boolean hasVaryAll();
  public boolean varyMatches(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
  public libcore.net.http.ResponseSource chooseResponseSource(long, libcore.net.http.RequestHeaders);
  public boolean validate(libcore.net.http.ResponseHeaders);
  public libcore.net.http.ResponseHeaders combine(libcore.net.http.ResponseHeaders);
  public static libcore.net.http.ResponseSource[] values();
  public static libcore.net.http.ResponseSource valueOf(java.lang.String);
  public boolean requiresConnection();
  public libcore.net.http.RetryableOutputStream(int);
  public libcore.net.http.RetryableOutputStream();
public class libcore.net.url.FileHandler extends java.net.URLStreamHandler {
  public libcore.net.url.FileHandler();
public class libcore.net.url.FileURLConnection extends java.net.URLConnection {
  public libcore.net.url.FileURLConnection(java.net.URL);
  public int getContentLength();
  public java.lang.String getContentType();
public class libcore.net.url.FtpHandler extends java.net.URLStreamHandler {
  public libcore.net.url.FtpHandler();
public class libcore.net.url.FtpURLConnection extends java.net.URLConnection {
  public java.lang.String getContentType();
  public void setDoInput(boolean);
  public void setDoOutput(boolean);
  public libcore.net.url.FtpURLInputStream(java.io.InputStream, java.net.Socket);
  public synchronized void mark(int);
  public boolean markSupported();
  public void close();
public class libcore.net.url.JarHandler extends java.net.URLStreamHandler {
  public libcore.net.url.JarHandler();
public class libcore.net.url.JarURLConnectionImpl extends java.net.JarURLConnection {
  public java.lang.String getContentType();
  public int getContentLength();
  public boolean getUseCaches();
  public void setUseCaches(boolean);
  public boolean getDefaultUseCaches();
  public void setDefaultUseCaches(boolean);
  public static void closeCachedFiles();
public final class libcore.net.url.UrlUtils {
  public static java.lang.String canonicalizePath(java.lang.String, boolean);
  public static java.lang.String authoritySafePath(java.lang.String, java.lang.String);
  public static java.lang.String getSchemePrefix(java.lang.String);
  public static boolean isValidSchemeChar(int, char);
  public static int findFirstOf(java.lang.String, java.lang.String, int, int);
public class libcore.util.BasicLruCache<K, V> {
  public libcore.util.BasicLruCache(int);
  public final synchronized V get(K);
  public final synchronized V put(K, V);
  public final synchronized java.util.Map<K, V> snapshot();
  public final synchronized void evictAll();
  public boolean hasNext();
  public T next();
  public void remove();
  public java.util.Iterator<T> iterator();
public final class libcore.util.CollectionUtils {
  public static <T extends java/lang/Object> java.lang.Iterable<T> dereferenceIterable(java.lang.Iterable<? extends java.lang.ref.Reference<T>>, boolean);
  public static <T extends java/lang/Object> void removeDuplicates(java.util.List<T>, java.util.Comparator<? super T>);
public final class libcore.util.EmptyArray {
public final class libcore.util.MutableInt {
  public libcore.util.MutableInt(int);
public final class libcore.util.MutableLong {
  public libcore.util.MutableLong(long);
public final class libcore.util.Objects {
  public static boolean equal(java.lang.Object, java.lang.Object);
  public static int hashCode(java.lang.Object);
public final class libcore.util.SneakyThrow {
  public static void sneakyThrow(java.lang.Throwable);
public final class libcore.util.ZoneInfo extends java.util.TimeZone {
  public int getOffset(int, int, int, int, int, int);
  public int getOffset(long);
  public boolean inDaylightTime(java.util.Date);
  public int getRawOffset();
  public void setRawOffset(int);
  public boolean useDaylightTime();
  public boolean hasSameRules(java.util.TimeZone);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public final class libcore.util.ZoneInfoDB {
  public static java.lang.String[] getAvailableIDs();
  public static java.lang.String[] getAvailableIDs(int);
  public static java.util.TimeZone getSystemDefault();
  public static java.util.TimeZone getTimeZone(java.lang.String);
  public static java.lang.String getVersion();
public interface org.apache.commons.codec.BinaryDecoder extends org.apache.commons.codec.Decoder {
public interface org.apache.commons.codec.BinaryEncoder extends org.apache.commons.codec.Encoder {
public interface org.apache.commons.codec.Decoder {
public class org.apache.commons.codec.DecoderException extends java.lang.Exception {
  public org.apache.commons.codec.DecoderException(java.lang.String);
public interface org.apache.commons.codec.Encoder {
public class org.apache.commons.codec.EncoderException extends java.lang.Exception {
  public org.apache.commons.codec.EncoderException(java.lang.String);
public class org.apache.commons.codec.binary.Base64 implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder {
  public org.apache.commons.codec.binary.Base64();
  public static boolean isArrayByteBase64(byte[]);
  public static byte[] encodeBase64(byte[]);
  public static byte[] encodeBase64Chunked(byte[]);
  public byte[] decode(byte[]);
  public static byte[] encodeBase64(byte[], boolean);
  public static byte[] decodeBase64(byte[]);
  public byte[] encode(byte[]);
public class org.apache.commons.codec.binary.Hex implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder {
  public org.apache.commons.codec.binary.Hex();
  public static char[] encodeHex(byte[]);
  public byte[] encode(byte[]);
public interface org.apache.commons.logging.Log {
  public abstract boolean isDebugEnabled();
  public abstract boolean isErrorEnabled();
  public abstract boolean isFatalEnabled();
  public abstract boolean isInfoEnabled();
  public abstract boolean isTraceEnabled();
  public abstract boolean isWarnEnabled();
  public abstract void trace(java.lang.Object);
  public abstract void trace(java.lang.Object, java.lang.Throwable);
  public abstract void debug(java.lang.Object);
  public abstract void debug(java.lang.Object, java.lang.Throwable);
  public abstract void info(java.lang.Object);
  public abstract void info(java.lang.Object, java.lang.Throwable);
  public abstract void warn(java.lang.Object);
  public abstract void warn(java.lang.Object, java.lang.Throwable);
  public abstract void error(java.lang.Object);
  public abstract void error(java.lang.Object, java.lang.Throwable);
  public abstract void fatal(java.lang.Object);
  public abstract void fatal(java.lang.Object, java.lang.Throwable);
public class org.apache.commons.logging.LogConfigurationException extends java.lang.RuntimeException {
  public org.apache.commons.logging.LogConfigurationException();
  public org.apache.commons.logging.LogConfigurationException(java.lang.String);
  public org.apache.commons.logging.LogConfigurationException(java.lang.Throwable);
  public org.apache.commons.logging.LogConfigurationException(java.lang.String, java.lang.Throwable);
  public java.lang.Throwable getCause();
  public java.lang.Object run();
  public java.lang.Object run();
  public java.lang.Object run();
  public java.lang.Object run();
  public java.lang.Object run();
public abstract class org.apache.commons.logging.LogFactory {
  public abstract java.lang.Object getAttribute(java.lang.String);
  public abstract java.lang.String[] getAttributeNames();
  public abstract void release();
  public abstract void removeAttribute(java.lang.String);
  public abstract void setAttribute(java.lang.String, java.lang.Object);
  public static void release(java.lang.ClassLoader);
  public static void releaseAll();
  public static java.lang.String objectId(java.lang.Object);
public class org.apache.commons.logging.impl.Jdk14Logger implements org.apache.commons.logging.Log,java.io.Serializable {
  public org.apache.commons.logging.impl.Jdk14Logger(java.lang.String);
  public void debug(java.lang.Object);
  public void debug(java.lang.Object, java.lang.Throwable);
  public void error(java.lang.Object);
  public void error(java.lang.Object, java.lang.Throwable);
  public void fatal(java.lang.Object);
  public void fatal(java.lang.Object, java.lang.Throwable);
  public java.util.logging.Logger getLogger();
  public void info(java.lang.Object);
  public void info(java.lang.Object, java.lang.Throwable);
  public boolean isDebugEnabled();
  public boolean isErrorEnabled();
  public boolean isFatalEnabled();
  public boolean isInfoEnabled();
  public boolean isTraceEnabled();
  public boolean isWarnEnabled();
  public void trace(java.lang.Object);
  public void trace(java.lang.Object, java.lang.Throwable);
  public void warn(java.lang.Object);
  public void warn(java.lang.Object, java.lang.Throwable);
public class org.apache.harmony.crypto.internal.NullCipherSpi extends javax.crypto.CipherSpi {
  public org.apache.harmony.crypto.internal.NullCipherSpi();
  public int engineGetBlockSize();
  public int engineGetOutputSize(int);
  public byte[] engineGetIV();
  public java.security.AlgorithmParameters engineGetParameters();
  public byte[] engineUpdate(byte[], int, int);
public class org.apache.harmony.dalvik.ddmc.Chunk {
  public org.apache.harmony.dalvik.ddmc.Chunk();
  public org.apache.harmony.dalvik.ddmc.Chunk(int, byte[], int, int);
  public org.apache.harmony.dalvik.ddmc.Chunk(int, java.nio.ByteBuffer);
public abstract class org.apache.harmony.dalvik.ddmc.ChunkHandler {
  public org.apache.harmony.dalvik.ddmc.ChunkHandler();
  public abstract void connected();
  public abstract void disconnected();
  public abstract org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
  public static org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int, java.lang.String);
  public static java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk);
  public static java.lang.String getString(java.nio.ByteBuffer, int);
  public static void putString(java.nio.ByteBuffer, java.lang.String);
  public static int type(java.lang.String);
  public static java.lang.String name(int);
public class org.apache.harmony.dalvik.ddmc.DdmServer {
  public static void registerHandler(int, org.apache.harmony.dalvik.ddmc.ChunkHandler);
  public static org.apache.harmony.dalvik.ddmc.ChunkHandler unregisterHandler(int);
  public static void registrationComplete();
  public static void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk);
public class org.apache.harmony.dalvik.ddmc.DdmVmInternal {
  public static native void threadNotify(boolean);
  public static native boolean heapInfoNotify(int);
  public static native boolean heapSegmentNotify(int, int, boolean);
  public static native byte[] getThreadStats();
  public static native java.lang.StackTraceElement[] getStackTraceById(int);
  public static native void enableRecentAllocations(boolean);
  public static native boolean getRecentAllocationStatus();
  public static native byte[] getRecentAllocations();
public final class org.apache.harmony.kernel.vm.StringUtils {
  public static java.lang.String combineStrings(java.lang.Object[]);
public abstract class org.apache.harmony.luni.internal.util.TimezoneGetter {
  public org.apache.harmony.luni.internal.util.TimezoneGetter();
  public static org.apache.harmony.luni.internal.util.TimezoneGetter getInstance();
  public static void setInstance(org.apache.harmony.luni.internal.util.TimezoneGetter);
  public abstract java.lang.String getId();
public class org.apache.harmony.luni.lang.reflect.GenericSignatureParser {
  public org.apache.harmony.luni.lang.reflect.GenericSignatureParser(java.lang.ClassLoader);
  public void parseForClass(java.lang.reflect.GenericDeclaration, java.lang.String);
  public void parseForMethod(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.Class<?>[]);
  public void parseForConstructor(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.Class<?>[]);
  public void parseForField(java.lang.reflect.GenericDeclaration, java.lang.String);
public final class org.apache.harmony.luni.lang.reflect.ImplForArray implements java.lang.reflect.GenericArrayType {
  public org.apache.harmony.luni.lang.reflect.ImplForArray(java.lang.reflect.Type);
  public java.lang.reflect.Type getGenericComponentType();
  public java.lang.String toString();
public final class org.apache.harmony.luni.lang.reflect.ImplForType implements java.lang.reflect.ParameterizedType {
  public org.apache.harmony.luni.lang.reflect.ImplForType(org.apache.harmony.luni.lang.reflect.ImplForType, java.lang.String, org.apache.harmony.luni.lang.reflect.ListOfTypes, java.lang.ClassLoader);
  public java.lang.reflect.Type[] getActualTypeArguments();
  public java.lang.reflect.Type getOwnerType();
  public java.lang.Class getRawType();
  public java.lang.String toString();
  public java.lang.reflect.Type getRawType();
public final class org.apache.harmony.luni.lang.reflect.ImplForVariable<D extends java.lang.reflect.GenericDeclaration> implements java.lang.reflect.TypeVariable<D> {
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.reflect.Type[] getBounds();
  public D getGenericDeclaration();
  public java.lang.String getName();
  public java.lang.String toString();
public final class org.apache.harmony.luni.lang.reflect.ImplForWildcard implements java.lang.reflect.WildcardType {
  public org.apache.harmony.luni.lang.reflect.ImplForWildcard(org.apache.harmony.luni.lang.reflect.ListOfTypes, org.apache.harmony.luni.lang.reflect.ListOfTypes);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public final class org.apache.harmony.luni.lang.reflect.ListOfTypes {
  public java.lang.reflect.Type[] getResolvedTypes();
  public java.lang.String toString();
public class org.apache.harmony.luni.lang.reflect.Types {
  public org.apache.harmony.luni.lang.reflect.Types();
  public static java.lang.reflect.Type[] getClonedTypeArray(org.apache.harmony.luni.lang.reflect.ListOfTypes);
  public static java.lang.reflect.Type getType(java.lang.reflect.Type);
public class org.apache.harmony.luni.util.DeleteOnExit extends java.lang.Thread {
  public org.apache.harmony.luni.util.DeleteOnExit();
  public static synchronized org.apache.harmony.luni.util.DeleteOnExit getInstance();
  public void addFile(java.lang.String);
  public void run();
public class org.apache.harmony.luni.util.TwoKeyHashMap$Entry<E, K, V> implements java.util.Map$Entry<java.lang.String, V> {
  public org.apache.harmony.luni.util.TwoKeyHashMap$Entry(int, E, K, V, org.apache.harmony.luni.util.TwoKeyHashMap$Entry<E, K, V>);
  public java.lang.String getKey();
  public E getKey1();
  public K getKey2();
  public V getValue();
  public V setValue(V);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object getKey();
  public boolean hasNext();
  public java.util.Map$Entry<java.lang.String, V> next();
  public void remove();
  public java.lang.Object next();
  public int size();
  public void clear();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public java.util.Iterator<java.util.Map$Entry<java.lang.String, V>> iterator();
  public V next();
  public void remove();
  public boolean hasNext();
  public int size();
  public void clear();
  public boolean isEmpty();
  public java.util.Iterator<V> iterator();
  public boolean contains(java.lang.Object);
public class org.apache.harmony.luni.util.TwoKeyHashMap<E, K, V> extends java.util.AbstractMap<java.lang.String, V> {
  public org.apache.harmony.luni.util.TwoKeyHashMap();
  public org.apache.harmony.luni.util.TwoKeyHashMap(int);
  public org.apache.harmony.luni.util.TwoKeyHashMap(int, float);
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<java.lang.String, V>> entrySet();
  public void clear();
  public V remove(java.lang.Object, java.lang.Object);
  public V put(E, K, V);
  public boolean containsKey(java.lang.Object, java.lang.Object);
  public V get(java.lang.Object, java.lang.Object);
  public boolean isEmpty();
  public int size();
public final class org.apache.harmony.security.asn1.ASN1Any extends org.apache.harmony.security.asn1.ASN1Type {
  public org.apache.harmony.security.asn1.ASN1Any();
  public static org.apache.harmony.security.asn1.ASN1Any getInstance();
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList extends org.apache.harmony.security.asn1.ASN1BitString {
  public org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList(int);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1BitString extends org.apache.harmony.security.asn1.ASN1StringType {
  public org.apache.harmony.security.asn1.ASN1BitString();
  public static org.apache.harmony.security.asn1.ASN1BitString getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.asn1.ASN1Boolean extends org.apache.harmony.security.asn1.ASN1Primitive {
  public org.apache.harmony.security.asn1.ASN1Boolean();
  public static org.apache.harmony.security.asn1.ASN1Boolean getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public abstract class org.apache.harmony.security.asn1.ASN1Choice extends org.apache.harmony.security.asn1.ASN1Type {
  public org.apache.harmony.security.asn1.ASN1Choice(org.apache.harmony.security.asn1.ASN1Type[]);
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public abstract int getIndex(java.lang.Object);
  public abstract java.lang.Object getObjectToEncode(java.lang.Object);
  public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public interface org.apache.harmony.security.asn1.ASN1Constants {
public abstract class org.apache.harmony.security.asn1.ASN1Constructed extends org.apache.harmony.security.asn1.ASN1Type {
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.asn1.ASN1Enumerated extends org.apache.harmony.security.asn1.ASN1Primitive {
  public org.apache.harmony.security.asn1.ASN1Enumerated();
  public static org.apache.harmony.security.asn1.ASN1Enumerated getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.asn1.ASN1Exception extends java.io.IOException {
  public org.apache.harmony.security.asn1.ASN1Exception(java.lang.String);
public final class org.apache.harmony.security.asn1.ASN1Explicit extends org.apache.harmony.security.asn1.ASN1Constructed {
  public org.apache.harmony.security.asn1.ASN1Explicit(int, org.apache.harmony.security.asn1.ASN1Type);
  public org.apache.harmony.security.asn1.ASN1Explicit(int, int, org.apache.harmony.security.asn1.ASN1Type);
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public java.lang.String toString();
public final class org.apache.harmony.security.asn1.ASN1GeneralizedTime extends org.apache.harmony.security.asn1.ASN1Time {
  public org.apache.harmony.security.asn1.ASN1GeneralizedTime();
  public static org.apache.harmony.security.asn1.ASN1GeneralizedTime getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.asn1.ASN1Implicit extends org.apache.harmony.security.asn1.ASN1Type {
  public org.apache.harmony.security.asn1.ASN1Implicit(int, org.apache.harmony.security.asn1.ASN1Type);
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.asn1.ASN1Integer extends org.apache.harmony.security.asn1.ASN1Primitive {
  public org.apache.harmony.security.asn1.ASN1Integer();
  public static org.apache.harmony.security.asn1.ASN1Integer getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public static int toIntValue(java.lang.Object);
  public static java.math.BigInteger toBigIntegerValue(java.lang.Object);
  public static java.lang.Object fromIntValue(int);
public class org.apache.harmony.security.asn1.ASN1OctetString extends org.apache.harmony.security.asn1.ASN1StringType {
  public org.apache.harmony.security.asn1.ASN1OctetString();
  public static org.apache.harmony.security.asn1.ASN1OctetString getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1Oid extends org.apache.harmony.security.asn1.ASN1Primitive {
  public org.apache.harmony.security.asn1.ASN1Oid();
  public static org.apache.harmony.security.asn1.ASN1Oid getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public static org.apache.harmony.security.asn1.ASN1Oid getInstanceForString();
public abstract class org.apache.harmony.security.asn1.ASN1Primitive extends org.apache.harmony.security.asn1.ASN1Type {
  public org.apache.harmony.security.asn1.ASN1Primitive(int);
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1Sequence extends org.apache.harmony.security.asn1.ASN1TypeCollection {
  public org.apache.harmony.security.asn1.ASN1Sequence(org.apache.harmony.security.asn1.ASN1Type[]);
  public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1SequenceOf extends org.apache.harmony.security.asn1.ASN1ValueCollection {
  public org.apache.harmony.security.asn1.ASN1SequenceOf(org.apache.harmony.security.asn1.ASN1Type);
  public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public class org.apache.harmony.security.asn1.ASN1SetOf extends org.apache.harmony.security.asn1.ASN1ValueCollection {
  public org.apache.harmony.security.asn1.ASN1SetOf(org.apache.harmony.security.asn1.ASN1Type);
  public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public abstract class org.apache.harmony.security.asn1.ASN1StringType extends org.apache.harmony.security.asn1.ASN1Type {
  public org.apache.harmony.security.asn1.ASN1StringType(int);
  public final boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public abstract class org.apache.harmony.security.asn1.ASN1Time extends org.apache.harmony.security.asn1.ASN1StringType {
  public org.apache.harmony.security.asn1.ASN1Time(int);
public abstract class org.apache.harmony.security.asn1.ASN1Type implements org.apache.harmony.security.asn1.ASN1Constants {
  public org.apache.harmony.security.asn1.ASN1Type(int);
  public org.apache.harmony.security.asn1.ASN1Type(int, int);
  public final byte[] encode(java.lang.Object);
  public abstract boolean checkTag(int);
  public abstract void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public abstract void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public abstract void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream);
  public java.lang.String toString();
public abstract class org.apache.harmony.security.asn1.ASN1TypeCollection extends org.apache.harmony.security.asn1.ASN1Constructed {
public final class org.apache.harmony.security.asn1.ASN1UTCTime extends org.apache.harmony.security.asn1.ASN1Time {
  public org.apache.harmony.security.asn1.ASN1UTCTime();
  public static org.apache.harmony.security.asn1.ASN1UTCTime getInstance();
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public abstract class org.apache.harmony.security.asn1.ASN1ValueCollection extends org.apache.harmony.security.asn1.ASN1Constructed {
  public org.apache.harmony.security.asn1.ASN1ValueCollection(int, org.apache.harmony.security.asn1.ASN1Type);
  public java.util.Collection<?> getValues(java.lang.Object);
public class org.apache.harmony.security.asn1.BerInputStream {
  public static int getLength(byte[]);
  public byte[] getEncoded();
  public final byte[] getBuffer();
  public final int getLength();
  public final int getOffset();
  public final int getEndOffset();
  public final int getTagOffset();
  public final void setVerify();
  public void compactBuffer();
  public void put(java.lang.Object, java.lang.Object);
  public java.lang.Object get(java.lang.Object);
public class org.apache.harmony.security.asn1.BerOutputStream {
  public org.apache.harmony.security.asn1.BerOutputStream();
  public final void encodeTag(int);
  public void encodeANY();
  public void encodeBitString();
  public void encodeBoolean();
  public void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice);
  public void encodeExplicit(org.apache.harmony.security.asn1.ASN1Explicit);
  public void encodeGeneralizedTime();
  public void encodeUTCTime();
  public void encodeInteger();
  public void encodeOctetString();
  public void encodeOID();
  public void encodeSequence(org.apache.harmony.security.asn1.ASN1Sequence);
  public void encodeSequenceOf(org.apache.harmony.security.asn1.ASN1SequenceOf);
  public void encodeSet(org.apache.harmony.security.asn1.ASN1Set);
  public void encodeSetOf(org.apache.harmony.security.asn1.ASN1SetOf);
  public void encodeString();
  public void getChoiceLength(org.apache.harmony.security.asn1.ASN1Choice);
  public void getExplicitLength(org.apache.harmony.security.asn1.ASN1Explicit);
  public void getSequenceLength(org.apache.harmony.security.asn1.ASN1Sequence);
  public void getSequenceOfLength(org.apache.harmony.security.asn1.ASN1SequenceOf);
  public void getSetLength(org.apache.harmony.security.asn1.ASN1Set);
  public void getSetOfLength(org.apache.harmony.security.asn1.ASN1SetOf);
public final class org.apache.harmony.security.asn1.BitString {
  public org.apache.harmony.security.asn1.BitString(byte[], int);
  public org.apache.harmony.security.asn1.BitString(boolean[]);
  public boolean getBit(int);
  public void setBit(int, boolean);
  public boolean[] toBooleanArray();
public final class org.apache.harmony.security.asn1.DerInputStream extends org.apache.harmony.security.asn1.BerInputStream {
public final class org.apache.harmony.security.asn1.DerOutputStream extends org.apache.harmony.security.asn1.BerOutputStream {
  public org.apache.harmony.security.asn1.DerOutputStream(org.apache.harmony.security.asn1.ASN1Type, java.lang.Object);
  public void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice);
  public void encodeExplicit(org.apache.harmony.security.asn1.ASN1Explicit);
  public void encodeSequence(org.apache.harmony.security.asn1.ASN1Sequence);
  public void encodeSequenceOf(org.apache.harmony.security.asn1.ASN1SequenceOf);
  public void encodeSetOf(org.apache.harmony.security.asn1.ASN1SetOf);
  public void getChoiceLength(org.apache.harmony.security.asn1.ASN1Choice);
  public void getExplicitLength(org.apache.harmony.security.asn1.ASN1Explicit);
  public void getSequenceLength(org.apache.harmony.security.asn1.ASN1Sequence);
  public void getSequenceOfLength(org.apache.harmony.security.asn1.ASN1SequenceOf);
  public void getSetOfLength(org.apache.harmony.security.asn1.ASN1SetOf);
public final class org.apache.harmony.security.asn1.ObjectIdentifier {
  public org.apache.harmony.security.asn1.ObjectIdentifier(int[]);
  public org.apache.harmony.security.asn1.ObjectIdentifier(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int hashCode();
  public static void validate(int[]);
  public static java.lang.String toString(int[]);
  public static int[] toIntArray(java.lang.String);
  public static boolean isOID(java.lang.String);
public final class org.apache.harmony.security.fortress.Engine$SpiAndProvider {
public class org.apache.harmony.security.fortress.Engine {
  public org.apache.harmony.security.fortress.Engine(java.lang.String);
public interface org.apache.harmony.security.fortress.SecurityAccess {
  public abstract void renumProviders();
  public abstract java.util.List<java.lang.String> getAliases(java.security.Provider$Service);
  public abstract java.security.Provider$Service getService(java.security.Provider, java.lang.String);
public class org.apache.harmony.security.fortress.Services {
  public org.apache.harmony.security.fortress.Services();
  public static java.security.Provider[] getProviders();
  public static java.util.List<java.security.Provider> getProvidersList();
  public static java.security.Provider getProvider(java.lang.String);
  public static int insertProviderAt(java.security.Provider, int);
  public static void removeProvider(int);
  public static void initServiceInfo(java.security.Provider);
  public static void updateServiceInfo();
  public static boolean isEmpty();
  public static java.security.Provider$Service getService(java.lang.String);
  public static java.security.Provider$Service getSecureRandomService();
  public static void setNeedRefresh();
  public static void refresh();
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.List<org.apache.harmony.security.x501.AttributeTypeAndValue> getAttributes();
  public byte[] getEncoded();
public final class org.apache.harmony.security.pkcs7.ContentInfo {
  public org.apache.harmony.security.pkcs7.SignedData getSignedData();
  public java.lang.Object getContent();
  public int[] getContentType();
  public byte[] getEncoded();
  public java.lang.String toString();
public final class org.apache.harmony.security.pkcs7.SignedData {
  public java.util.List<org.apache.harmony.security.x509.Certificate> getCertificates();
  public java.util.List<org.apache.harmony.security.x509.CertificateList> getCRLs();
  public java.util.List<org.apache.harmony.security.pkcs7.SignerInfo> getSignerInfos();
  public int getVersion();
  public java.lang.String toString();
  public void getValues(java.lang.Object, java.lang.Object[]);
public final class org.apache.harmony.security.pkcs7.SignerInfo {
  public javax.security.auth.x500.X500Principal getIssuer();
  public java.math.BigInteger getSerialNumber();
  public java.lang.String getDigestAlgorithm();
  public java.lang.String getDigestEncryptionAlgorithm();
  public java.util.List<org.apache.harmony.security.x501.AttributeTypeAndValue> getAuthenticatedAttributes();
  public byte[] getEncodedAuthenticatedAttributes();
  public byte[] getEncryptedDigest();
  public java.lang.String toString();
public final class org.apache.harmony.security.provider.cert.X509CertImpl extends java.security.cert.X509Certificate {
  public org.apache.harmony.security.provider.cert.X509CertImpl(org.apache.harmony.security.x509.Certificate);
  public int getVersion();
  public java.math.BigInteger getSerialNumber();
  public java.security.Principal getIssuerDN();
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  public java.security.Principal getSubjectDN();
  public javax.security.auth.x500.X500Principal getSubjectX500Principal();
  public java.util.Date getNotBefore();
  public java.util.Date getNotAfter();
  public byte[] getSignature();
  public java.lang.String getSigAlgName();
  public java.lang.String getSigAlgOID();
  public byte[] getSigAlgParams();
  public boolean[] getIssuerUniqueID();
  public boolean[] getSubjectUniqueID();
  public boolean[] getKeyUsage();
  public int getBasicConstraints();
  public java.security.PublicKey getPublicKey();
  public java.lang.String toString();
  public java.util.Set<java.lang.String> getNonCriticalExtensionOIDs();
  public java.util.Set<java.lang.String> getCriticalExtensionOIDs();
  public byte[] getExtensionValue(java.lang.String);
  public boolean hasUnsupportedCriticalExtension();
public class org.apache.harmony.security.provider.crypto.RandomBitsSupplier implements org.apache.harmony.security.provider.crypto.SHA1_Data {
  public org.apache.harmony.security.provider.crypto.RandomBitsSupplier();
  public static byte[] getRandomBits(int);
public class org.apache.harmony.security.provider.crypto.SHA1Impl implements org.apache.harmony.security.provider.crypto.SHA1_Data {
  public org.apache.harmony.security.provider.crypto.SHA1Impl();
public class org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl extends java.security.SecureRandomSpi implements java.io.Serializable,org.apache.harmony.security.provider.crypto.SHA1_Data {
  public org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl();
public interface org.apache.harmony.security.provider.crypto.SHA1_Data {
public class org.apache.harmony.security.utils.AlgNameMapper {
  public static java.lang.String map2OID(java.lang.String);
  public static java.lang.String map2AlgName(java.lang.String);
  public static java.lang.String getStandardName(java.lang.String);
  public static boolean isOID(java.lang.String);
  public static java.lang.String normalize(java.lang.String);
public class org.apache.harmony.security.utils.Array {
  public static java.lang.String getBytesAsString(byte[]);
  public static java.lang.String toString(byte[], java.lang.String);
public class org.apache.harmony.security.utils.JarUtils {
  public org.apache.harmony.security.utils.JarUtils();
public final class org.apache.harmony.security.utils.ObjectIdentifier {
  public org.apache.harmony.security.utils.ObjectIdentifier(int[]);
  public org.apache.harmony.security.utils.ObjectIdentifier(int[], java.lang.String, java.lang.Object);
  public int[] getOid();
  public java.lang.String getName();
  public java.lang.Object getGroup();
  public boolean equals(java.lang.Object);
  public java.lang.String toOIDString();
  public java.lang.String toString();
  public int hashCode();
  public static void validateOid(int[]);
  public static int hashIntArray(int[]);
  public boolean checkTag(int);
  public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
  public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream);
  public int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.x501.AttributeTypeAndValue {
  public void appendName(java.lang.String, java.lang.StringBuilder);
  public org.apache.harmony.security.utils.ObjectIdentifier getType();
public class org.apache.harmony.security.x501.AttributeTypeAndValueComparator implements java.util.Comparator,java.io.Serializable {
  public org.apache.harmony.security.x501.AttributeTypeAndValueComparator();
  public int compare(java.lang.Object, java.lang.Object);
public final class org.apache.harmony.security.x501.AttributeValue {
  public org.apache.harmony.security.x501.AttributeValue(java.lang.String, boolean);
  public org.apache.harmony.security.x501.AttributeValue(java.lang.String, byte[]);
  public org.apache.harmony.security.x501.AttributeValue(java.lang.String, byte[], int);
  public int getTag();
  public java.lang.String getHexString();
  public void appendQEString(java.lang.StringBuilder);
  public java.lang.String makeCanonical();
  public int getIndex(java.lang.Object);
  public java.lang.Object getObjectToEncode(java.lang.Object);
public final class org.apache.harmony.security.x501.DirectoryString {
  public org.apache.harmony.security.x501.DirectoryString();
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x501.Name {
  public javax.security.auth.x500.X500Principal getX500Principal();
  public java.lang.String getName(java.lang.String);
  public byte[] getEncoded();
public final class org.apache.harmony.security.x509.AccessDescription {
  public byte[] getEncoded();
  public java.lang.String toString();
public final class org.apache.harmony.security.x509.AlgorithmIdentifier {
  public org.apache.harmony.security.x509.AlgorithmIdentifier(java.lang.String);
  public org.apache.harmony.security.x509.AlgorithmIdentifier(java.lang.String, byte[]);
  public java.lang.String getAlgorithm();
  public java.lang.String getAlgorithmName();
  public byte[] getParameters();
  public byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void dumpValue(java.lang.StringBuilder);
public final class org.apache.harmony.security.x509.AlternativeName extends org.apache.harmony.security.x509.ExtensionValue {
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.AuthorityKeyIdentifier extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.AuthorityKeyIdentifier(byte[], org.apache.harmony.security.x509.GeneralNames, java.math.BigInteger);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.BasicConstraints extends org.apache.harmony.security.x509.ExtensionValue {
  public int getPathLenConstraint();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection<?> getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.CRLDistributionPoints extends org.apache.harmony.security.x509.ExtensionValue {
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.CRLNumber extends org.apache.harmony.security.x509.ExtensionValue {
  public java.math.BigInteger getNumber();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.Certificate {
  public org.apache.harmony.security.x509.Certificate(org.apache.harmony.security.x509.TBSCertificate, org.apache.harmony.security.x509.AlgorithmIdentifier, byte[]);
  public org.apache.harmony.security.x509.TBSCertificate getTbsCertificate();
  public byte[] getSignatureValue();
  public java.lang.String toString();
  public byte[] getEncoded();
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
public final class org.apache.harmony.security.x509.CertificateIssuer extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.CertificateIssuer(byte[]);
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.CertificateList {
  public org.apache.harmony.security.x509.CertificateList(org.apache.harmony.security.x509.TBSCertList, org.apache.harmony.security.x509.AlgorithmIdentifier, byte[]);
  public org.apache.harmony.security.x509.TBSCertList getTbsCertList();
  public byte[] getSignatureValue();
  public java.lang.String toString();
  public byte[] getEncoded();
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.CertificatePolicies extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.CertificatePolicies();
  public java.util.List<org.apache.harmony.security.x509.PolicyInformation> getPolicyInformations();
  public org.apache.harmony.security.x509.CertificatePolicies addPolicyInformation(org.apache.harmony.security.x509.PolicyInformation);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.DNParser {
public final class org.apache.harmony.security.x509.DistributionPoint {
  public org.apache.harmony.security.x509.DistributionPoint(org.apache.harmony.security.x509.DistributionPointName, org.apache.harmony.security.x509.ReasonFlags, org.apache.harmony.security.x509.GeneralNames);
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public int getIndex(java.lang.Object);
  public java.lang.Object getObjectToEncode(java.lang.Object);
public final class org.apache.harmony.security.x509.DistributionPointName {
  public org.apache.harmony.security.x509.DistributionPointName(org.apache.harmony.security.x509.GeneralNames);
  public org.apache.harmony.security.x509.DistributionPointName(org.apache.harmony.security.x501.Name);
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.EDIPartyName {
  public byte[] getEncoded();
public final class org.apache.harmony.security.x509.ExtendedKeyUsage extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.ExtendedKeyUsage(byte[]);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.Extension {
  public org.apache.harmony.security.x509.Extension(java.lang.String, boolean, org.apache.harmony.security.x509.ExtensionValue);
  public org.apache.harmony.security.x509.Extension(java.lang.String, boolean, byte[]);
  public org.apache.harmony.security.x509.Extension(int[], boolean, byte[]);
  public org.apache.harmony.security.x509.Extension(java.lang.String, byte[]);
  public org.apache.harmony.security.x509.Extension(int[], byte[]);
  public java.lang.String getExtnID();
  public boolean getCritical();
  public byte[] getExtnValue();
  public byte[] getRawExtnValue();
  public byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public org.apache.harmony.security.x509.KeyUsage getKeyUsageValue();
  public org.apache.harmony.security.x509.BasicConstraints getBasicConstraintsValue();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public class org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.ExtensionValue();
  public org.apache.harmony.security.x509.ExtensionValue(byte[]);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public void dumpValue(java.lang.StringBuilder);
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.Extensions {
  public org.apache.harmony.security.x509.Extensions();
  public org.apache.harmony.security.x509.Extensions(java.util.List<org.apache.harmony.security.x509.Extension>);
  public int size();
  public java.util.Set<java.lang.String> getCriticalExtensions();
  public java.util.Set<java.lang.String> getNonCriticalExtensions();
  public boolean hasUnsupportedCritical();
  public org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String);
  public boolean[] valueOfKeyUsage();
  public int valueOfBasicConstrains();
  public byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public java.lang.Object getObjectToEncode(java.lang.Object);
  public int getIndex(java.lang.Object);
public final class org.apache.harmony.security.x509.GeneralName {
  public org.apache.harmony.security.x509.GeneralName(org.apache.harmony.security.x509.OtherName);
  public org.apache.harmony.security.x509.GeneralName(org.apache.harmony.security.x509.ORAddress);
  public org.apache.harmony.security.x509.GeneralName(org.apache.harmony.security.x501.Name);
  public org.apache.harmony.security.x509.GeneralName(org.apache.harmony.security.x509.EDIPartyName);
  public int getTag();
  public java.lang.Object getName();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public boolean isAcceptable(org.apache.harmony.security.x509.GeneralName);
  public java.util.List<java.lang.Object> getAsList();
  public java.lang.String toString();
  public byte[] getEncoded();
  public byte[] getEncodedName();
  public static java.lang.String ipBytesToStr(byte[]);
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.GeneralNames {
  public org.apache.harmony.security.x509.GeneralNames();
  public org.apache.harmony.security.x509.GeneralNames(java.util.List<org.apache.harmony.security.x509.GeneralName>);
  public java.util.List<org.apache.harmony.security.x509.GeneralName> getNames();
  public java.util.Collection<java.util.List<?>> getPairsList();
  public void addName(org.apache.harmony.security.x509.GeneralName);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.GeneralSubtree {
  public org.apache.harmony.security.x509.GeneralSubtree(org.apache.harmony.security.x509.GeneralName, int, int);
  public org.apache.harmony.security.x509.GeneralName getBase();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream);
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.GeneralSubtrees {
  public org.apache.harmony.security.x509.GeneralSubtrees(java.util.List<org.apache.harmony.security.x509.GeneralSubtree>);
  public java.util.List<org.apache.harmony.security.x509.GeneralSubtree> getSubtrees();
  public byte[] getEncoded();
  public java.util.Collection getValues(java.lang.Object);
public final class org.apache.harmony.security.x509.InfoAccessSyntax extends org.apache.harmony.security.x509.ExtensionValue {
  public byte[] getEncoded();
  public java.lang.String toString();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.InhibitAnyPolicy extends org.apache.harmony.security.x509.ExtensionValue {
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.InvalidityDate extends org.apache.harmony.security.x509.ExtensionValue {
  public java.util.Date getDate();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.IssuingDistributionPoint extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.IssuingDistributionPoint(org.apache.harmony.security.x509.DistributionPointName, org.apache.harmony.security.x509.ReasonFlags);
  public void setOnlyContainsUserCerts(boolean);
  public void setOnlyContainsCACerts(boolean);
  public void setIndirectCRL(boolean);
  public void setOnlyContainsAttributeCerts(boolean);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.KeyUsage extends org.apache.harmony.security.x509.ExtensionValue {
  public boolean[] getKeyUsage();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.NameConstraints extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.NameConstraints(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees);
  public byte[] getEncoded();
  public boolean isAcceptable(java.security.cert.X509Certificate);
  public boolean isAcceptable(java.util.List<org.apache.harmony.security.x509.GeneralName>);
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.ORAddress {
  public org.apache.harmony.security.x509.ORAddress();
  public byte[] getEncoded();
public final class org.apache.harmony.security.x509.OtherName {
  public org.apache.harmony.security.x509.OtherName(java.lang.String, byte[]);
  public byte[] getValue();
  public byte[] getEncoded();
public final class org.apache.harmony.security.x509.PolicyConstraints extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.PolicyConstraints(java.math.BigInteger, java.math.BigInteger);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.PolicyInformation {
  public org.apache.harmony.security.x509.PolicyInformation(java.lang.String);
  public java.lang.String getPolicyIdentifier();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder);
public final class org.apache.harmony.security.x509.ReasonCode extends org.apache.harmony.security.x509.ExtensionValue {
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
  public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream);
public final class org.apache.harmony.security.x509.ReasonFlags {
  public org.apache.harmony.security.x509.ReasonFlags(boolean[]);
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.SubjectKeyIdentifier extends org.apache.harmony.security.x509.ExtensionValue {
  public org.apache.harmony.security.x509.SubjectKeyIdentifier(byte[]);
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.SubjectPublicKeyInfo {
  public org.apache.harmony.security.x509.SubjectPublicKeyInfo(org.apache.harmony.security.x509.AlgorithmIdentifier, byte[]);
  public org.apache.harmony.security.x509.SubjectPublicKeyInfo(org.apache.harmony.security.x509.AlgorithmIdentifier, byte[], int);
  public org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier();
  public byte[] getSubjectPublicKey();
  public byte[] getEncoded();
  public java.security.PublicKey getPublicKey();
public class org.apache.harmony.security.x509.TBSCertList$RevokedCertificate {
  public org.apache.harmony.security.x509.TBSCertList$RevokedCertificate(java.math.BigInteger, java.util.Date, org.apache.harmony.security.x509.Extensions);
  public org.apache.harmony.security.x509.Extensions getCrlEntryExtensions();
  public java.math.BigInteger getUserCertificate();
  public java.util.Date getRevocationDate();
  public javax.security.auth.x500.X500Principal getIssuer();
  public byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void dumpValue(java.lang.StringBuilder, java.lang.String);
public final class org.apache.harmony.security.x509.TBSCertList {
  public int getVersion();
  public org.apache.harmony.security.x509.AlgorithmIdentifier getSignature();
  public org.apache.harmony.security.x501.Name getIssuer();
  public java.util.Date getThisUpdate();
  public java.util.Date getNextUpdate();
  public java.util.List<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate> getRevokedCertificates();
  public org.apache.harmony.security.x509.Extensions getCrlExtensions();
  public byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void dumpValue(java.lang.StringBuilder);
public final class org.apache.harmony.security.x509.TBSCertificate {
  public org.apache.harmony.security.x509.TBSCertificate(int, java.math.BigInteger, org.apache.harmony.security.x509.AlgorithmIdentifier, org.apache.harmony.security.x501.Name, org.apache.harmony.security.x509.Validity, org.apache.harmony.security.x501.Name, org.apache.harmony.security.x509.SubjectPublicKeyInfo, boolean[], boolean[], org.apache.harmony.security.x509.Extensions);
  public int getVersion();
  public java.math.BigInteger getSerialNumber();
  public org.apache.harmony.security.x509.AlgorithmIdentifier getSignature();
  public org.apache.harmony.security.x501.Name getIssuer();
  public org.apache.harmony.security.x509.Validity getValidity();
  public org.apache.harmony.security.x501.Name getSubject();
  public org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo();
  public boolean[] getIssuerUniqueID();
  public boolean[] getSubjectUniqueID();
  public org.apache.harmony.security.x509.Extensions getExtensions();
  public byte[] getEncoded();
  public void dumpValue(java.lang.StringBuilder);
  public int getIndex(java.lang.Object);
  public java.lang.Object getObjectToEncode(java.lang.Object);
public final class org.apache.harmony.security.x509.Time {
  public org.apache.harmony.security.x509.Time();
public final class org.apache.harmony.security.x509.Validity {
  public org.apache.harmony.security.x509.Validity(java.util.Date, java.util.Date);
  public java.util.Date getNotBefore();
  public java.util.Date getNotAfter();
  public byte[] getEncoded();
public final class org.apache.harmony.security.x509.X509PublicKey implements java.security.PublicKey {
  public org.apache.harmony.security.x509.X509PublicKey(java.lang.String, byte[], byte[]);
  public java.lang.String getAlgorithm();
  public java.lang.String getFormat();
  public byte[] getEncoded();
  public java.lang.String toString();
  public abstract int getLength();
  public abstract int getPointer();
  public java.lang.String getURI(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getQName(int);
  public java.lang.String getType(int);
  public java.lang.String getValue(int);
  public int getIndex(java.lang.String, java.lang.String);
  public int getIndex(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
  public java.lang.String getValue(java.lang.String);
  public org.apache.harmony.xml.ExpatException(java.lang.String);
  public int getParserPointer();
  public int getPointer();
  public int getLength();
  public int getParserPointer();
  public int getPointer();
  public int getLength();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
  public int getLineNumber();
  public int getColumnNumber();
  public java.lang.String toString();
public class org.apache.harmony.xml.ExpatReader implements org.xml.sax.XMLReader {
  public org.apache.harmony.xml.ExpatReader();
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public org.xml.sax.EntityResolver getEntityResolver();
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public org.xml.sax.DTDHandler getDTDHandler();
  public void setContentHandler(org.xml.sax.ContentHandler);
  public org.xml.sax.ContentHandler getContentHandler();
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public org.xml.sax.ErrorHandler getErrorHandler();
  public org.xml.sax.ext.LexicalHandler getLexicalHandler();
  public void setLexicalHandler(org.xml.sax.ext.LexicalHandler);
  public boolean isNamespaceProcessingEnabled();
  public void setNamespaceProcessingEnabled(boolean);
public final class org.apache.harmony.xml.dom.AttrImpl extends org.apache.harmony.xml.dom.NodeImpl implements org.w3c.dom.Attr {
  public java.lang.String getLocalName();
  public java.lang.String getName();
  public java.lang.String getNamespaceURI();
  public java.lang.String getNodeName();
  public short getNodeType();
  public java.lang.String getNodeValue();
  public org.w3c.dom.Element getOwnerElement();
  public java.lang.String getPrefix();
  public boolean getSpecified();
  public java.lang.String getValue();
  public void setPrefix(java.lang.String);
  public org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public boolean isId();
public final class org.apache.harmony.xml.dom.CDATASectionImpl extends org.apache.harmony.xml.dom.TextImpl implements org.w3c.dom.CDATASection {
  public org.apache.harmony.xml.dom.CDATASectionImpl(org.apache.harmony.xml.dom.DocumentImpl, java.lang.String);
  public java.lang.String getNodeName();
  public short getNodeType();
  public void split();
  public boolean needsSplitting();
  public org.apache.harmony.xml.dom.TextImpl replaceWithText();
public abstract class org.apache.harmony.xml.dom.CharacterDataImpl extends org.apache.harmony.xml.dom.LeafNodeImpl implements org.w3c.dom.CharacterData {
  public void appendDataTo(java.lang.StringBuilder);
  public int getLength();
  public java.lang.String getNodeValue();
public final class org.apache.harmony.xml.dom.CommentImpl extends org.apache.harmony.xml.dom.CharacterDataImpl implements org.w3c.dom.Comment {
  public java.lang.String getNodeName();
  public short getNodeType();
  public boolean containsDashDash();
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.String item(int);
  public int getLength();
  public boolean contains(java.lang.String);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public abstract java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl);
  public abstract void set(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
  public abstract boolean canSet(org.apache.harmony.xml.dom.DOMConfigurationImpl, java.lang.Object);
public final class org.apache.harmony.xml.dom.DOMConfigurationImpl implements org.w3c.dom.DOMConfiguration {
  public org.apache.harmony.xml.dom.DOMConfigurationImpl();
  public boolean canSetParameter(java.lang.String, java.lang.Object);
  public org.w3c.dom.DOMStringList getParameterNames();
  public void normalize(org.w3c.dom.Node);
  public int getLineNumber();
  public int getColumnNumber();
  public int getByteOffset();
  public int getUtf16Offset();
  public org.w3c.dom.Node getRelatedNode();
  public java.lang.String getUri();
public final class org.apache.harmony.xml.dom.DOMErrorImpl implements org.w3c.dom.DOMError {
  public org.apache.harmony.xml.dom.DOMErrorImpl(short, java.lang.String);
  public short getSeverity();
  public java.lang.String getMessage();
  public java.lang.String getType();
  public java.lang.Object getRelatedException();
  public java.lang.Object getRelatedData();
  public org.w3c.dom.DOMLocator getLocation();
public final class org.apache.harmony.xml.dom.DOMImplementationImpl implements org.w3c.dom.DOMImplementation {
  public boolean hasFeature(java.lang.String, java.lang.String);
  public static org.apache.harmony.xml.dom.DOMImplementationImpl getInstance();
  public java.lang.Object getFeature(java.lang.String, java.lang.String);
public class org.apache.harmony.xml.dom.DocumentFragmentImpl extends org.apache.harmony.xml.dom.InnerNodeImpl implements org.w3c.dom.DocumentFragment {
  public java.lang.String getNodeName();
  public short getNodeType();
public final class org.apache.harmony.xml.dom.DocumentImpl extends org.apache.harmony.xml.dom.InnerNodeImpl implements org.w3c.dom.Document {
  public org.apache.harmony.xml.dom.DocumentImpl(org.apache.harmony.xml.dom.DOMImplementationImpl, java.lang.String, java.lang.String, org.w3c.dom.DocumentType, java.lang.String);
  public org.w3c.dom.Node importNode(org.w3c.dom.Node, boolean);
  public org.w3c.dom.Node adoptNode(org.w3c.dom.Node);
  public org.w3c.dom.Node renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String);
  public org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String);
  public org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String, java.lang.String);
  public org.apache.harmony.xml.dom.CDATASectionImpl createCDATASection(java.lang.String);
  public org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String);
  public org.apache.harmony.xml.dom.DocumentFragmentImpl createDocumentFragment();
  public org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String);
  public org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String, java.lang.String);
  public org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String);
  public org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String, java.lang.String);
  public org.apache.harmony.xml.dom.TextImpl createTextNode(java.lang.String);
  public org.w3c.dom.DocumentType getDoctype();
  public org.w3c.dom.Element getDocumentElement();
  public org.w3c.dom.Element getElementById(java.lang.String);
  public org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String);
  public org.w3c.dom.DOMImplementation getImplementation();
  public java.lang.String getNodeName();
  public short getNodeType();
  public org.w3c.dom.Node insertChildAt(org.w3c.dom.Node, int);
  public java.lang.String getTextContent();
  public java.lang.String getInputEncoding();
  public java.lang.String getXmlEncoding();
  public boolean getXmlStandalone();
  public void setXmlStandalone(boolean);
  public java.lang.String getXmlVersion();
  public void setXmlVersion(java.lang.String);
  public boolean getStrictErrorChecking();
  public void setStrictErrorChecking(boolean);
  public java.lang.String getDocumentURI();
  public void setDocumentURI(java.lang.String);
  public org.w3c.dom.DOMConfiguration getDomConfig();
  public void normalizeDocument();
  public org.w3c.dom.Comment createComment(java.lang.String);
  public org.w3c.dom.Text createTextNode(java.lang.String);
  public org.w3c.dom.DocumentFragment createDocumentFragment();
public final class org.apache.harmony.xml.dom.DocumentTypeImpl extends org.apache.harmony.xml.dom.LeafNodeImpl implements org.w3c.dom.DocumentType {
  public org.apache.harmony.xml.dom.DocumentTypeImpl(org.apache.harmony.xml.dom.DocumentImpl, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getNodeName();
  public short getNodeType();
  public org.w3c.dom.NamedNodeMap getEntities();
  public java.lang.String getInternalSubset();
  public java.lang.String getName();
  public org.w3c.dom.NamedNodeMap getNotations();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
public class org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl implements org.w3c.dom.NamedNodeMap {
  public org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl(org.apache.harmony.xml.dom.ElementImpl);
  public int getLength();
  public org.w3c.dom.Node getNamedItem(java.lang.String);
  public org.w3c.dom.Node getNamedItemNS(java.lang.String, java.lang.String);
  public org.w3c.dom.Node item(int);
public class org.apache.harmony.xml.dom.ElementImpl extends org.apache.harmony.xml.dom.InnerNodeImpl implements org.w3c.dom.Element {
  public java.lang.String getAttribute(java.lang.String);
  public java.lang.String getAttributeNS(java.lang.String, java.lang.String);
  public org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String);
  public org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String, java.lang.String);
  public org.w3c.dom.NamedNodeMap getAttributes();
  public org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String);
  public java.lang.String getLocalName();
  public java.lang.String getNamespaceURI();
  public java.lang.String getNodeName();
  public short getNodeType();
  public java.lang.String getPrefix();
  public java.lang.String getTagName();
  public boolean hasAttribute(java.lang.String);
  public boolean hasAttributeNS(java.lang.String, java.lang.String);
  public boolean hasAttributes();
  public void setPrefix(java.lang.String);
  public org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public org.w3c.dom.Attr getAttributeNode(java.lang.String);
public class org.apache.harmony.xml.dom.EntityReferenceImpl extends org.apache.harmony.xml.dom.LeafNodeImpl implements org.w3c.dom.EntityReference {
  public java.lang.String getNodeName();
  public short getNodeType();
public abstract class org.apache.harmony.xml.dom.InnerNodeImpl extends org.apache.harmony.xml.dom.LeafNodeImpl {
  public org.w3c.dom.NodeList getChildNodes();
  public org.w3c.dom.Node getFirstChild();
  public org.w3c.dom.Node getLastChild();
  public org.w3c.dom.Node getNextSibling();
  public boolean hasChildNodes();
  public boolean isParentOf(org.w3c.dom.Node);
  public final void normalize();
public abstract class org.apache.harmony.xml.dom.LeafNodeImpl extends org.apache.harmony.xml.dom.NodeImpl {
  public org.w3c.dom.Node getNextSibling();
  public org.w3c.dom.Node getParentNode();
  public org.w3c.dom.Node getPreviousSibling();
  public java.lang.String getTypeName();
  public java.lang.String getTypeNamespace();
  public boolean isDerivedFrom(java.lang.String, java.lang.String, int);
public abstract class org.apache.harmony.xml.dom.NodeImpl implements org.w3c.dom.Node {
  public final org.w3c.dom.Node cloneNode(boolean);
  public org.w3c.dom.NamedNodeMap getAttributes();
  public org.w3c.dom.NodeList getChildNodes();
  public org.w3c.dom.Node getFirstChild();
  public org.w3c.dom.Node getLastChild();
  public java.lang.String getLocalName();
  public java.lang.String getNamespaceURI();
  public org.w3c.dom.Node getNextSibling();
  public java.lang.String getNodeName();
  public abstract short getNodeType();
  public final org.w3c.dom.Document getOwnerDocument();
  public org.w3c.dom.Node getParentNode();
  public java.lang.String getPrefix();
  public org.w3c.dom.Node getPreviousSibling();
  public boolean hasAttributes();
  public boolean hasChildNodes();
  public boolean isSupported(java.lang.String, java.lang.String);
  public void normalize();
  public final java.lang.String getBaseURI();
  public boolean isSameNode(org.w3c.dom.Node);
  public final java.lang.String lookupPrefix(java.lang.String);
  public final boolean isDefaultNamespace(java.lang.String);
  public final java.lang.String lookupNamespaceURI(java.lang.String);
  public final boolean isEqualNode(org.w3c.dom.Node);
  public final java.lang.Object getFeature(java.lang.String, java.lang.String);
  public final java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public final java.lang.Object getUserData(java.lang.String);
public class org.apache.harmony.xml.dom.NodeListImpl implements org.w3c.dom.NodeList {
  public int getLength();
  public org.w3c.dom.Node item(int);
public final class org.apache.harmony.xml.dom.ProcessingInstructionImpl extends org.apache.harmony.xml.dom.LeafNodeImpl implements org.w3c.dom.ProcessingInstruction {
  public java.lang.String getData();
  public java.lang.String getNodeName();
  public short getNodeType();
  public java.lang.String getNodeValue();
  public java.lang.String getTarget();
public class org.apache.harmony.xml.dom.TextImpl extends org.apache.harmony.xml.dom.CharacterDataImpl implements org.w3c.dom.Text {
  public org.apache.harmony.xml.dom.TextImpl(org.apache.harmony.xml.dom.DocumentImpl, java.lang.String);
  public java.lang.String getNodeName();
  public short getNodeType();
  public final boolean isElementContentWhitespace();
  public final java.lang.String getWholeText();
  public final org.apache.harmony.xml.dom.TextImpl minimize();
public class org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl extends javax.xml.parsers.DocumentBuilderFactory {
  public org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl();
  public void reset();
  public org.w3c.dom.DOMImplementation getDOMImplementation();
  public boolean isNamespaceAware();
  public boolean isValidating();
  public org.w3c.dom.Document newDocument();
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setIgnoreComments(boolean);
  public void setCoalescing(boolean);
  public void setIgnoreElementContentWhitespace(boolean);
  public void setNamespaceAware(boolean);
public class org.apache.harmony.xml.parsers.SAXParserFactoryImpl extends javax.xml.parsers.SAXParserFactory {
  public org.apache.harmony.xml.parsers.SAXParserFactoryImpl();
  public boolean isNamespaceAware();
  public boolean isValidating();
  public void setNamespaceAware(boolean);
  public void setValidating(boolean);
  public void reset();
  public org.xml.sax.Parser getParser();
  public org.xml.sax.XMLReader getXMLReader();
  public boolean isNamespaceAware();
  public boolean isValidating();
  public boolean hasMoreElements();
  public byte[] nextElement();
  public java.lang.Object nextElement();
  public final java.util.Enumeration getIds();
  public final int getSessionCacheSize();
  public final int getSessionTimeout();
  public javax.net.ssl.SSLSession getSession(byte[]);
public class org.apache.harmony.xnet.provider.jsse.AlertException extends java.lang.RuntimeException {
public class org.apache.harmony.xnet.provider.jsse.AlertProtocol {
public interface org.apache.harmony.xnet.provider.jsse.Appendable {
  public abstract void append(byte[]);
  public int hashCode();
  public boolean equals(java.lang.Object);
public class org.apache.harmony.xnet.provider.jsse.CertificateMessage extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.CertificateMessage(java.security.cert.X509Certificate[]);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public java.lang.String getAuthType();
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.CertificateRequest extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.CertificateRequest(byte[], java.security.cert.X509Certificate[]);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public int getType();
  public java.lang.String[] getTypesAsString();
public class org.apache.harmony.xnet.provider.jsse.CertificateVerify extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.CertificateVerify(byte[]);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.CipherSuite {
  public static org.apache.harmony.xnet.provider.jsse.CipherSuite getByName(java.lang.String);
  public static org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte, byte);
  public static org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte, byte, byte);
  public boolean isAnonymous();
  public static org.apache.harmony.xnet.provider.jsse.CipherSuite[] getSupported();
  public static java.lang.String[] getSupportedCipherSuiteNames();
  public java.lang.String getName();
  public byte[] toBytes();
  public java.lang.String toString();
  public java.lang.String getBulkEncryptionAlgorithm();
  public int getBlockSize();
  public java.lang.String getHmacName();
  public java.lang.String getHashName();
  public int getMACLength();
  public boolean isExportable();
  public java.lang.String getServerKeyType();
  public static java.lang.String getClientKeyType(byte);
  public java.lang.String getAuthType(boolean);
  public void run();
public class org.apache.harmony.xnet.provider.jsse.ClientHandshakeImpl extends org.apache.harmony.xnet.provider.jsse.HandshakeProtocol {
  public void start();
  public void unwrap(byte[]);
  public void unwrapSSLv2(byte[]);
  public void receiveChangeCipherSpec();
public class org.apache.harmony.xnet.provider.jsse.ClientHello extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.ClientHello(java.security.SecureRandom, byte[], byte[], org.apache.harmony.xnet.provider.jsse.CipherSuite[]);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public byte[] getRandom();
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.ClientKeyExchange extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.ClientKeyExchange(byte[], boolean);
  public org.apache.harmony.xnet.provider.jsse.ClientKeyExchange(java.math.BigInteger);
  public org.apache.harmony.xnet.provider.jsse.ClientKeyExchange();
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public int getType();
  public boolean isEmpty();
  public int hashCode();
  public boolean equals(java.lang.Object);
public class org.apache.harmony.xnet.provider.jsse.ClientSessionContext extends org.apache.harmony.xnet.provider.jsse.AbstractSessionContext {
  public org.apache.harmony.xnet.provider.jsse.ClientSessionContext();
  public int size();
  public void setPersistentCache(org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache);
  public javax.net.ssl.SSLSession getSession(java.lang.String, int);
  public void putSession(javax.net.ssl.SSLSession);
  public javax.net.ssl.SSLSession getSession(byte[]);
public abstract class org.apache.harmony.xnet.provider.jsse.ConnectionState {
  public org.apache.harmony.xnet.provider.jsse.ConnectionState();
public class org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 extends org.apache.harmony.xnet.provider.jsse.ConnectionState {
public class org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS extends org.apache.harmony.xnet.provider.jsse.ConnectionState {
public class org.apache.harmony.xnet.provider.jsse.DHParameters {
  public org.apache.harmony.xnet.provider.jsse.DHParameters();
  public static byte[] getPrime();
public interface org.apache.harmony.xnet.provider.jsse.DataStream {
  public abstract boolean hasData();
  public abstract byte[] getData(int);
public final class org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl extends org.apache.harmony.xnet.provider.jsse.OpenSSLContextImpl {
public class org.apache.harmony.xnet.provider.jsse.DelegatedTask implements java.lang.Runnable {
  public org.apache.harmony.xnet.provider.jsse.DelegatedTask(java.lang.Runnable, org.apache.harmony.xnet.provider.jsse.HandshakeProtocol);
  public void run();
public class org.apache.harmony.xnet.provider.jsse.DigitalSignature {
  public org.apache.harmony.xnet.provider.jsse.DigitalSignature(java.lang.String);
  public void init(java.security.PrivateKey);
  public void init(java.security.cert.Certificate);
  public void update(byte[]);
  public void setMD5(byte[]);
  public void setSHA(byte[]);
  public byte[] sign();
  public boolean verifySignature(byte[]);
public class org.apache.harmony.xnet.provider.jsse.EndOfBufferException extends java.io.IOException {
  public org.apache.harmony.xnet.provider.jsse.EndOfBufferException();
public class org.apache.harmony.xnet.provider.jsse.EndOfSourceException extends java.io.IOException {
  public org.apache.harmony.xnet.provider.jsse.EndOfSourceException();
  public long lastModified();
  public int compareTo(java.io.File);
  public int compareTo(java.lang.Object);
  public synchronized byte[] getSessionData(java.lang.String, int);
  public synchronized void putSessionData(javax.net.ssl.SSLSession, byte[]);
public class org.apache.harmony.xnet.provider.jsse.FileClientSessionCache {
public class org.apache.harmony.xnet.provider.jsse.Finished extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.Finished(byte[]);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public int getType();
  public byte[] getData();
public class org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream extends org.apache.harmony.xnet.provider.jsse.SSLInputStream implements org.apache.harmony.xnet.provider.jsse.Appendable,org.apache.harmony.xnet.provider.jsse.DataStream {
  public org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream();
  public int available();
  public boolean markSupported();
  public void mark(int);
  public void mark();
  public void reset();
  public void append(byte[]);
  public void write(byte);
  public void writeUint8(long);
  public void writeUint16(long);
  public void writeUint24(long);
  public void writeUint32(long);
  public void writeUint64(long);
  public void write(byte[]);
  public boolean hasData();
  public byte[] getData(int);
public abstract class org.apache.harmony.xnet.provider.jsse.HandshakeProtocol {
  public void setRecordProtocol(org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol);
  public abstract void start();
  public javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus();
  public org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession();
  public abstract void unwrap(byte[]);
  public abstract void unwrapSSLv2(byte[]);
  public byte[] wrap();
  public void send(org.apache.harmony.xnet.provider.jsse.Message);
  public void computerMasterSecret();
  public java.lang.Runnable getTask();
public class org.apache.harmony.xnet.provider.jsse.Logger$Stream extends java.io.PrintStream {
  public org.apache.harmony.xnet.provider.jsse.Logger$Stream(java.lang.String);
  public void print(java.lang.String);
  public void newIndent();
  public void endIndent();
  public void println(java.lang.String);
  public void print(byte[]);
  public void print(byte[], int, int);
  public void printAsHex(int, java.lang.String, java.lang.String, byte[]);
  public void printAsHex(int, java.lang.String, java.lang.String, byte[], int, int);
public class org.apache.harmony.xnet.provider.jsse.Logger {
  public org.apache.harmony.xnet.provider.jsse.Logger();
  public static org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String);
public abstract class org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.Message();
  public int length();
public interface org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks {
  public abstract void handshakeCompleted();
public final class org.apache.harmony.xnet.provider.jsse.NativeCrypto {
  public org.apache.harmony.xnet.provider.jsse.NativeCrypto();
  public static native int EVP_PKEY_new_DSA(byte[], byte[], byte[], byte[], byte[]);
  public static native int EVP_PKEY_new_RSA(byte[], byte[], byte[], byte[], byte[]);
  public static native void EVP_PKEY_free(int);
  public static native int EVP_get_digestbyname(java.lang.String);
  public static native int EVP_MD_size(int);
  public static native int EVP_MD_block_size(int);
  public static native void EVP_MD_CTX_destroy(int);
  public static native int EVP_MD_CTX_copy(int);
  public static native int EVP_DigestInit(int);
  public static native void EVP_DigestUpdate(int, byte[], int, int);
  public static native int EVP_DigestFinal(int, byte[], int);
  public static native int EVP_VerifyInit(java.lang.String);
  public static native void EVP_VerifyUpdate(int, byte[], int, int);
  public static native int EVP_VerifyFinal(int, byte[], int, int, int);
  public static native void RAND_seed(byte[]);
  public static native int RAND_load_file(java.lang.String, long);
  public static int X509_NAME_hash(javax.security.auth.x500.X500Principal);
  public static int X509_NAME_hash_old(javax.security.auth.x500.X500Principal);
  public static native int SSL_CTX_new();
  public static java.lang.String[] getDefaultCipherSuites();
  public static java.lang.String[] getSupportedCipherSuites();
  public static native void SSL_CTX_free(int);
  public static native void SSL_use_certificate(int, byte[][]);
  public static native void SSL_use_PrivateKey(int, byte[]);
  public static native void SSL_set_client_CA_list(int, byte[][]);
  public static native long SSL_get_mode(int);
  public static native long SSL_set_mode(int, long);
  public static native long SSL_clear_mode(int, long);
  public static native long SSL_get_options(int);
  public static native long SSL_set_options(int, long);
  public static native long SSL_clear_options(int, long);
  public static java.lang.String[] getSupportedProtocols();
  public static void setEnabledProtocols(int, java.lang.String[]);
  public static java.lang.String[] checkEnabledProtocols(java.lang.String[]);
  public static native void SSL_set_cipher_lists(int, java.lang.String[]);
  public static void setEnabledCipherSuites(int, java.lang.String[]);
  public static java.lang.String[] checkEnabledCipherSuites(java.lang.String[]);
  public static java.lang.String[] getSupportedCompressionMethods();
  public static final java.lang.String[] getDefaultCompressionMethods();
  public static java.lang.String[] checkEnabledCompressionMethods(java.lang.String[]);
  public static void setEnabledCompressionMethods(int, java.lang.String[]);
  public static native void SSL_set_verify(int, int);
  public static native java.lang.String SSL_get_servername(int);
  public static native byte[][] SSL_get_certificate(int);
  public static native byte[][] SSL_get_peer_cert_chain(int);
  public static native void SSL_interrupt(int);
  public static native void SSL_free(int);
  public static native byte[] SSL_SESSION_session_id(int);
  public static native long SSL_SESSION_get_time(int);
  public static native java.lang.String SSL_SESSION_get_version(int);
  public static native java.lang.String SSL_SESSION_cipher(int);
  public static native java.lang.String SSL_SESSION_compress_meth(int, int);
  public static native void SSL_SESSION_free(int);
  public static native byte[] i2d_SSL_SESSION(int);
  public static native int d2i_SSL_SESSION(byte[]);
public class org.apache.harmony.xnet.provider.jsse.OpenSSLContextImpl extends org.apache.harmony.xnet.provider.jsse.SSLContextImpl {
  public org.apache.harmony.xnet.provider.jsse.OpenSSLContextImpl();
  public javax.net.ssl.SSLSocketFactory engineGetSocketFactory();
  public javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory();
public class org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl extends javax.net.ssl.SSLServerSocketFactory {
  public org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl();
  public org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl(org.apache.harmony.xnet.provider.jsse.SSLParametersImpl);
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public class org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl extends javax.net.ssl.SSLServerSocket {
  public boolean getEnableSessionCreation();
  public void setEnableSessionCreation(boolean);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedCompressionMethods();
  public java.lang.String[] getEnabledCompressionMethods();
  public void setEnabledCompressionMethods(java.lang.String[]);
  public boolean getWantClientAuth();
  public void setWantClientAuth(boolean);
  public boolean getNeedClientAuth();
  public void setNeedClientAuth(boolean);
  public void setUseClientMode(boolean);
  public boolean getUseClientMode();
public class org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl implements javax.net.ssl.SSLSession {
  public byte[] getId();
  public long getCreationTime();
  public long getLastAccessedTime();
  public int getApplicationBufferSize();
  public int getPacketBufferSize();
  public java.security.Principal getLocalPrincipal();
  public java.security.cert.Certificate[] getLocalCertificates();
  public java.lang.String getPeerHost();
  public int getPeerPort();
  public java.lang.String getCipherSuite();
  public java.lang.String getProtocol();
  public java.lang.String getCompressionMethod();
  public javax.net.ssl.SSLSessionContext getSessionContext();
  public boolean isValid();
  public void invalidate();
  public java.lang.Object getValue(java.lang.String);
  public java.lang.String[] getValueNames();
  public void putValue(java.lang.String, java.lang.Object);
  public void removeValue(java.lang.String);
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$MD5RSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$SHA1DSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$SHA1RSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$SHA256RSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$SHA384RSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public final class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature$SHA512RSA extends org.apache.harmony.xnet.provider.jsse.OpenSSLSignature {
public class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature extends java.security.Signature {
public class org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl extends javax.net.ssl.SSLSocketFactory {
  public org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl();
  public org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl(org.apache.harmony.xnet.provider.jsse.SSLParametersImpl);
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public class org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl extends javax.net.ssl.SSLSocket implements org.apache.harmony.xnet.provider.jsse.NativeCrypto$SSLHandshakeCallbacks {
  public void handshakeCompleted();
  public javax.net.ssl.SSLSession getSession();
  public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public boolean getEnableSessionCreation();
  public void setEnableSessionCreation(boolean);
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public java.lang.String[] getSupportedCompressionMethods();
  public java.lang.String[] getEnabledCompressionMethods();
  public void setEnabledCompressionMethods(java.lang.String[]);
  public void setUseSessionTickets(boolean);
  public void setHostname(java.lang.String);
  public boolean getUseClientMode();
  public void setUseClientMode(boolean);
  public boolean getWantClientAuth();
  public boolean getNeedClientAuth();
  public void setNeedClientAuth(boolean);
  public void setWantClientAuth(boolean);
  public java.io.FileDescriptor getFileDescriptor$();
public class org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper extends org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl {
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public java.net.InetAddress getLocalAddress();
  public java.net.InetAddress getInetAddress();
  public java.lang.String toString();
  public boolean isConnected();
  public boolean isClosed();
  public boolean isBound();
  public boolean isOutputShutdown();
  public boolean isInputShutdown();
  public int getPort();
  public int getLocalPort();
public class org.apache.harmony.xnet.provider.jsse.PRF {
  public org.apache.harmony.xnet.provider.jsse.PRF();
public class org.apache.harmony.xnet.provider.jsse.ProtocolVersion {
  public static boolean isSupported(byte[]);
  public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByVersion(byte[]);
  public static boolean isSupported(java.lang.String);
  public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String);
  public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getLatestVersion(java.lang.String[]);
public class org.apache.harmony.xnet.provider.jsse.SSLBufferedInput extends org.apache.harmony.xnet.provider.jsse.SSLInputStream {
public interface org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache {
  public abstract byte[] getSessionData(java.lang.String, int);
  public abstract void putSessionData(javax.net.ssl.SSLSession, byte[]);
public class org.apache.harmony.xnet.provider.jsse.SSLContextImpl extends javax.net.ssl.SSLContextSpi {
  public org.apache.harmony.xnet.provider.jsse.SSLContextImpl();
  public javax.net.ssl.SSLSocketFactory engineGetSocketFactory();
  public javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory();
  public javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String, int);
  public javax.net.ssl.SSLEngine engineCreateSSLEngine();
  public org.apache.harmony.xnet.provider.jsse.ServerSessionContext engineGetServerSessionContext();
  public org.apache.harmony.xnet.provider.jsse.ClientSessionContext engineGetClientSessionContext();
  public javax.net.ssl.SSLSessionContext engineGetClientSessionContext();
  public javax.net.ssl.SSLSessionContext engineGetServerSessionContext();
public class org.apache.harmony.xnet.provider.jsse.SSLEngineAppData implements org.apache.harmony.xnet.provider.jsse.Appendable {
  public void append(byte[]);
public class org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream implements org.apache.harmony.xnet.provider.jsse.DataStream {
  public int available();
  public boolean hasData();
  public byte[] getData(int);
public class org.apache.harmony.xnet.provider.jsse.SSLEngineImpl extends javax.net.ssl.SSLEngine {
  public void closeOutbound();
  public java.lang.Runnable getDelegatedTask();
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public void setUseClientMode(boolean);
  public boolean getUseClientMode();
  public void setNeedClientAuth(boolean);
  public boolean getNeedClientAuth();
  public void setWantClientAuth(boolean);
  public boolean getWantClientAuth();
  public void setEnableSessionCreation(boolean);
  public boolean getEnableSessionCreation();
  public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
  public javax.net.ssl.SSLSession getSession();
  public boolean isInboundDone();
  public boolean isOutboundDone();
public abstract class org.apache.harmony.xnet.provider.jsse.SSLInputStream extends java.io.InputStream {
  public org.apache.harmony.xnet.provider.jsse.SSLInputStream();
public class org.apache.harmony.xnet.provider.jsse.SSLParametersImpl implements java.lang.Cloneable {
  public static javax.net.ssl.X509TrustManager getDefaultTrustManager();
public class org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol {
public interface org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache {
  public abstract byte[] getSessionData(byte[]);
  public abstract void putSessionData(javax.net.ssl.SSLSession, byte[]);
public class org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl extends javax.net.ssl.SSLServerSocketFactory {
  public org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl();
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public class org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl extends javax.net.ssl.SSLServerSocket {
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public void setUseClientMode(boolean);
  public boolean getUseClientMode();
  public void setNeedClientAuth(boolean);
  public boolean getNeedClientAuth();
  public void setWantClientAuth(boolean);
  public boolean getWantClientAuth();
  public void setEnableSessionCreation(boolean);
  public boolean getEnableSessionCreation();
  public java.lang.String toString();
public final class org.apache.harmony.xnet.provider.jsse.SSLSessionImpl implements javax.net.ssl.SSLSession,java.lang.Cloneable {
  public org.apache.harmony.xnet.provider.jsse.SSLSessionImpl(org.apache.harmony.xnet.provider.jsse.CipherSuite, java.security.SecureRandom);
  public org.apache.harmony.xnet.provider.jsse.SSLSessionImpl(java.security.SecureRandom);
  public int getApplicationBufferSize();
  public java.lang.String getCipherSuite();
  public long getCreationTime();
  public byte[] getId();
  public long getLastAccessedTime();
  public java.security.cert.Certificate[] getLocalCertificates();
  public java.security.Principal getLocalPrincipal();
  public int getPacketBufferSize();
  public java.lang.String getPeerHost();
  public int getPeerPort();
  public java.lang.String getProtocol();
  public javax.net.ssl.SSLSessionContext getSessionContext();
  public java.lang.Object getValue(java.lang.String);
  public java.lang.String[] getValueNames();
  public void invalidate();
  public boolean isValid();
  public void putValue(java.lang.String, java.lang.Object);
  public void removeValue(java.lang.String);
  public java.lang.Object clone();
public class org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl extends javax.net.ssl.SSLSocketFactory {
  public org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl();
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
public class org.apache.harmony.xnet.provider.jsse.SSLSocketImpl extends javax.net.ssl.SSLSocket {
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public void setUseClientMode(boolean);
  public boolean getUseClientMode();
  public void setNeedClientAuth(boolean);
  public boolean getNeedClientAuth();
  public void setWantClientAuth(boolean);
  public boolean getWantClientAuth();
  public void setEnableSessionCreation(boolean);
  public boolean getEnableSessionCreation();
  public javax.net.ssl.SSLSession getSession();
  public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public void append(byte[]);
public final class org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream extends java.io.InputStream {
public class org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream extends java.io.OutputStream {
public class org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper extends org.apache.harmony.xnet.provider.jsse.SSLSocketImpl {
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public java.net.InetAddress getLocalAddress();
  public java.net.InetAddress getInetAddress();
  public java.lang.String toString();
  public boolean isConnected();
  public boolean isClosed();
  public boolean isBound();
  public boolean isOutputShutdown();
  public boolean isInputShutdown();
  public int getPort();
  public int getLocalPort();
  public java.io.FileDescriptor getFileDescriptor$();
public class org.apache.harmony.xnet.provider.jsse.SSLStreamedInput extends org.apache.harmony.xnet.provider.jsse.SSLInputStream {
  public org.apache.harmony.xnet.provider.jsse.SSLStreamedInput(java.io.InputStream);
public class org.apache.harmony.xnet.provider.jsse.SSLv3Constants {
  public org.apache.harmony.xnet.provider.jsse.SSLv3Constants();
  public void run();
  public void run();
public class org.apache.harmony.xnet.provider.jsse.ServerHandshakeImpl extends org.apache.harmony.xnet.provider.jsse.HandshakeProtocol {
  public org.apache.harmony.xnet.provider.jsse.ServerHandshakeImpl(java.lang.Object);
  public void start();
  public void unwrap(byte[]);
  public void unwrapSSLv2(byte[]);
  public void receiveChangeCipherSpec();
public class org.apache.harmony.xnet.provider.jsse.ServerHello extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.ServerHello(java.security.SecureRandom, byte[], byte[], org.apache.harmony.xnet.provider.jsse.CipherSuite, byte);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public byte[] getRandom();
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.ServerHelloDone extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.ServerHelloDone();
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public int length();
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.ServerKeyExchange extends org.apache.harmony.xnet.provider.jsse.Message {
  public org.apache.harmony.xnet.provider.jsse.ServerKeyExchange(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, byte[]);
  public static byte[] toUnsignedByteArray(java.math.BigInteger);
  public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream);
  public java.security.interfaces.RSAPublicKey getRSAPublicKey();
  public int getType();
public class org.apache.harmony.xnet.provider.jsse.ServerSessionContext extends org.apache.harmony.xnet.provider.jsse.AbstractSessionContext {
  public org.apache.harmony.xnet.provider.jsse.ServerSessionContext();
  public void setPersistentCache(org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache);
  public javax.net.ssl.SSLSession getSession(byte[]);
  public boolean match(java.security.cert.X509Certificate);
  public boolean match(java.security.cert.X509Certificate);
  public boolean match(java.security.cert.X509Certificate);
  public abstract boolean match(java.security.cert.X509Certificate);
public final class org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore {
  public static final boolean isSystem(java.lang.String);
  public static final boolean isUser(java.lang.String);
  public org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore();
  public org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore(java.io.File, java.io.File, java.io.File);
  public java.security.cert.Certificate getCertificate(java.lang.String);
  public java.security.cert.Certificate getCertificate(java.lang.String, boolean);
  public java.util.Date getCreationDate(java.lang.String);
  public java.util.Set<java.lang.String> aliases();
  public java.util.Set<java.lang.String> userAliases();
  public java.util.Set<java.lang.String> allSystemAliases();
  public boolean containsAlias(java.lang.String);
  public java.lang.String getCertificateAlias(java.security.cert.Certificate);
  public boolean isTrustAnchor(java.security.cert.X509Certificate);
  public java.security.cert.X509Certificate findIssuer(java.security.cert.X509Certificate);
public interface org.apache.http.ConnectionReuseStrategy {
  public abstract boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public interface org.apache.http.FormattedHeader extends org.apache.http.Header {
  public abstract org.apache.http.util.CharArrayBuffer getBuffer();
  public abstract int getValuePos();
public interface org.apache.http.Header {
  public abstract java.lang.String getName();
  public abstract java.lang.String getValue();
public interface org.apache.http.HeaderElement {
  public abstract java.lang.String getName();
  public abstract java.lang.String getValue();
  public abstract org.apache.http.NameValuePair[] getParameters();
  public abstract org.apache.http.NameValuePair getParameterByName(java.lang.String);
  public abstract int getParameterCount();
  public abstract org.apache.http.NameValuePair getParameter(int);
public interface org.apache.http.HeaderElementIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract org.apache.http.HeaderElement nextElement();
public interface org.apache.http.HeaderIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract org.apache.http.Header nextHeader();
public interface org.apache.http.HttpClientConnection extends org.apache.http.HttpConnection {
public interface org.apache.http.HttpConnection {
  public abstract boolean isOpen();
  public abstract boolean isStale();
  public abstract void setSocketTimeout(int);
  public abstract int getSocketTimeout();
  public abstract org.apache.http.HttpConnectionMetrics getMetrics();
public interface org.apache.http.HttpConnectionMetrics {
  public abstract long getRequestCount();
  public abstract long getResponseCount();
  public abstract long getSentBytesCount();
  public abstract long getReceivedBytesCount();
  public abstract java.lang.Object getMetric(java.lang.String);
  public abstract void reset();
public interface org.apache.http.HttpEntity {
  public abstract boolean isRepeatable();
  public abstract boolean isChunked();
  public abstract long getContentLength();
  public abstract org.apache.http.Header getContentType();
  public abstract org.apache.http.Header getContentEncoding();
  public abstract boolean isStreaming();
public interface org.apache.http.HttpEntityEnclosingRequest extends org.apache.http.HttpRequest {
  public abstract boolean expectContinue();
  public abstract void setEntity(org.apache.http.HttpEntity);
  public abstract org.apache.http.HttpEntity getEntity();
public class org.apache.http.HttpException extends java.lang.Exception {
  public org.apache.http.HttpException();
  public org.apache.http.HttpException(java.lang.String);
  public org.apache.http.HttpException(java.lang.String, java.lang.Throwable);
public final class org.apache.http.HttpHost implements java.lang.Cloneable {
  public org.apache.http.HttpHost(java.lang.String, int, java.lang.String);
  public org.apache.http.HttpHost(java.lang.String, int);
  public org.apache.http.HttpHost(java.lang.String);
  public org.apache.http.HttpHost(org.apache.http.HttpHost);
  public java.lang.String getHostName();
  public int getPort();
  public java.lang.String getSchemeName();
  public java.lang.String toURI();
  public java.lang.String toHostString();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
public interface org.apache.http.HttpInetConnection extends org.apache.http.HttpConnection {
  public abstract java.net.InetAddress getLocalAddress();
  public abstract int getLocalPort();
  public abstract java.net.InetAddress getRemoteAddress();
  public abstract int getRemotePort();
public interface org.apache.http.HttpMessage {
  public abstract org.apache.http.ProtocolVersion getProtocolVersion();
  public abstract boolean containsHeader(java.lang.String);
  public abstract org.apache.http.Header[] getHeaders(java.lang.String);
  public abstract org.apache.http.Header getFirstHeader(java.lang.String);
  public abstract org.apache.http.Header getLastHeader(java.lang.String);
  public abstract org.apache.http.Header[] getAllHeaders();
  public abstract void addHeader(org.apache.http.Header);
  public abstract void addHeader(java.lang.String, java.lang.String);
  public abstract void setHeader(org.apache.http.Header);
  public abstract void setHeader(java.lang.String, java.lang.String);
  public abstract void setHeaders(org.apache.http.Header[]);
  public abstract void removeHeader(org.apache.http.Header);
  public abstract void removeHeaders(java.lang.String);
  public abstract org.apache.http.HeaderIterator headerIterator();
  public abstract org.apache.http.HeaderIterator headerIterator(java.lang.String);
  public abstract org.apache.http.params.HttpParams getParams();
  public abstract void setParams(org.apache.http.params.HttpParams);
public interface org.apache.http.HttpRequest extends org.apache.http.HttpMessage {
  public abstract org.apache.http.RequestLine getRequestLine();
public interface org.apache.http.HttpRequestInterceptor {
public interface org.apache.http.HttpResponse extends org.apache.http.HttpMessage {
  public abstract org.apache.http.StatusLine getStatusLine();
  public abstract void setStatusLine(org.apache.http.StatusLine);
  public abstract void setStatusLine(org.apache.http.ProtocolVersion, int);
  public abstract void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
  public abstract org.apache.http.HttpEntity getEntity();
  public abstract void setEntity(org.apache.http.HttpEntity);
  public abstract java.util.Locale getLocale();
  public abstract void setLocale(java.util.Locale);
public interface org.apache.http.HttpResponseFactory {
  public abstract org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
  public abstract org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
public interface org.apache.http.HttpResponseInterceptor {
public final class org.apache.http.HttpVersion extends org.apache.http.ProtocolVersion implements java.io.Serializable {
  public org.apache.http.HttpVersion(int, int);
  public org.apache.http.ProtocolVersion forVersion(int, int);
public class org.apache.http.MalformedChunkCodingException extends java.io.IOException {
  public org.apache.http.MalformedChunkCodingException();
  public org.apache.http.MalformedChunkCodingException(java.lang.String);
public interface org.apache.http.NameValuePair {
  public abstract java.lang.String getName();
  public abstract java.lang.String getValue();
public class org.apache.http.NoHttpResponseException extends java.io.IOException {
  public org.apache.http.NoHttpResponseException(java.lang.String);
public class org.apache.http.ParseException extends java.lang.RuntimeException {
  public org.apache.http.ParseException();
  public org.apache.http.ParseException(java.lang.String);
public class org.apache.http.ProtocolException extends org.apache.http.HttpException {
  public org.apache.http.ProtocolException();
  public org.apache.http.ProtocolException(java.lang.String);
  public org.apache.http.ProtocolException(java.lang.String, java.lang.Throwable);
public class org.apache.http.ProtocolVersion implements java.io.Serializable,java.lang.Cloneable {
  public org.apache.http.ProtocolVersion(java.lang.String, int, int);
  public final java.lang.String getProtocol();
  public final int getMajor();
  public final int getMinor();
  public org.apache.http.ProtocolVersion forVersion(int, int);
  public final int hashCode();
  public final boolean equals(java.lang.Object);
  public boolean isComparable(org.apache.http.ProtocolVersion);
  public int compareToVersion(org.apache.http.ProtocolVersion);
  public final boolean greaterEquals(org.apache.http.ProtocolVersion);
  public final boolean lessEquals(org.apache.http.ProtocolVersion);
  public java.lang.String toString();
public interface org.apache.http.ReasonPhraseCatalog {
  public abstract java.lang.String getReason(int, java.util.Locale);
public interface org.apache.http.RequestLine {
  public abstract java.lang.String getMethod();
  public abstract org.apache.http.ProtocolVersion getProtocolVersion();
  public abstract java.lang.String getUri();
public interface org.apache.http.StatusLine {
  public abstract org.apache.http.ProtocolVersion getProtocolVersion();
  public abstract int getStatusCode();
  public abstract java.lang.String getReasonPhrase();
public interface org.apache.http.TokenIterator extends java.util.Iterator {
  public abstract boolean hasNext();
  public abstract java.lang.String nextToken();
public interface org.apache.http.auth.AuthScheme {
  public abstract java.lang.String getSchemeName();
  public abstract java.lang.String getParameter(java.lang.String);
  public abstract java.lang.String getRealm();
  public abstract boolean isConnectionBased();
  public abstract boolean isComplete();
public interface org.apache.http.auth.AuthSchemeFactory {
  public abstract org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
public final class org.apache.http.auth.AuthSchemeRegistry {
  public org.apache.http.auth.AuthSchemeRegistry();
  public synchronized void register(java.lang.String, org.apache.http.auth.AuthSchemeFactory);
  public synchronized void unregister(java.lang.String);
  public synchronized java.util.List<java.lang.String> getSchemeNames();
  public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.auth.AuthSchemeFactory>);
public class org.apache.http.auth.AuthScope {
  public org.apache.http.auth.AuthScope(java.lang.String, int, java.lang.String, java.lang.String);
  public org.apache.http.auth.AuthScope(java.lang.String, int, java.lang.String);
  public org.apache.http.auth.AuthScope(java.lang.String, int);
  public org.apache.http.auth.AuthScope(org.apache.http.auth.AuthScope);
  public java.lang.String getHost();
  public int getPort();
  public java.lang.String getRealm();
  public java.lang.String getScheme();
  public int match(org.apache.http.auth.AuthScope);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
  public int hashCode();
public class org.apache.http.auth.AuthState {
  public org.apache.http.auth.AuthState();
  public void invalidate();
  public boolean isValid();
  public void setAuthScheme(org.apache.http.auth.AuthScheme);
  public org.apache.http.auth.AuthScheme getAuthScheme();
  public org.apache.http.auth.Credentials getCredentials();
  public void setCredentials(org.apache.http.auth.Credentials);
  public org.apache.http.auth.AuthScope getAuthScope();
  public void setAuthScope(org.apache.http.auth.AuthScope);
  public java.lang.String toString();
public class org.apache.http.auth.AuthenticationException extends org.apache.http.ProtocolException {
  public org.apache.http.auth.AuthenticationException();
  public org.apache.http.auth.AuthenticationException(java.lang.String);
  public org.apache.http.auth.AuthenticationException(java.lang.String, java.lang.Throwable);
public interface org.apache.http.auth.Credentials {
  public abstract java.security.Principal getUserPrincipal();
  public abstract java.lang.String getPassword();
public class org.apache.http.auth.MalformedChallengeException extends org.apache.http.ProtocolException {
  public org.apache.http.auth.MalformedChallengeException();
  public org.apache.http.auth.MalformedChallengeException(java.lang.String);
  public org.apache.http.auth.MalformedChallengeException(java.lang.String, java.lang.Throwable);
public class org.apache.http.auth.UsernamePasswordCredentials implements org.apache.http.auth.Credentials {
  public org.apache.http.auth.UsernamePasswordCredentials(java.lang.String);
  public org.apache.http.auth.UsernamePasswordCredentials(java.lang.String, java.lang.String);
  public java.security.Principal getUserPrincipal();
  public java.lang.String getUserName();
  public java.lang.String getPassword();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public final class org.apache.http.auth.params.AuthParams {
  public static java.lang.String getCredentialCharset(org.apache.http.params.HttpParams);
  public static void setCredentialCharset(org.apache.http.params.HttpParams, java.lang.String);
public interface org.apache.http.client.AuthenticationHandler {
  public abstract boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.client.CircularRedirectException extends org.apache.http.client.RedirectException {
  public org.apache.http.client.CircularRedirectException();
  public org.apache.http.client.CircularRedirectException(java.lang.String);
  public org.apache.http.client.CircularRedirectException(java.lang.String, java.lang.Throwable);
public class org.apache.http.client.ClientProtocolException extends java.io.IOException {
  public org.apache.http.client.ClientProtocolException();
  public org.apache.http.client.ClientProtocolException(java.lang.String);
  public org.apache.http.client.ClientProtocolException(java.lang.Throwable);
  public org.apache.http.client.ClientProtocolException(java.lang.String, java.lang.Throwable);
public interface org.apache.http.client.CookieStore {
  public abstract void addCookie(org.apache.http.cookie.Cookie);
  public abstract java.util.List<org.apache.http.cookie.Cookie> getCookies();
  public abstract boolean clearExpired(java.util.Date);
  public abstract void clear();
public interface org.apache.http.client.CredentialsProvider {
  public abstract void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  public abstract org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
  public abstract void clear();
public interface org.apache.http.client.HttpClient {
  public abstract org.apache.http.params.HttpParams getParams();
  public abstract org.apache.http.conn.ClientConnectionManager getConnectionManager();
public interface org.apache.http.client.HttpRequestRetryHandler {
  public abstract boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
public class org.apache.http.client.NonRepeatableRequestException extends org.apache.http.ProtocolException {
  public org.apache.http.client.NonRepeatableRequestException();
  public org.apache.http.client.NonRepeatableRequestException(java.lang.String);
public class org.apache.http.client.RedirectException extends org.apache.http.ProtocolException {
  public org.apache.http.client.RedirectException();
  public org.apache.http.client.RedirectException(java.lang.String);
  public org.apache.http.client.RedirectException(java.lang.String, java.lang.Throwable);
public interface org.apache.http.client.RedirectHandler {
  public abstract boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public interface org.apache.http.client.RequestDirector {
public interface org.apache.http.client.ResponseHandler<T> {
public interface org.apache.http.client.UserTokenHandler {
  public abstract java.lang.Object getUserToken(org.apache.http.protocol.HttpContext);
public class org.apache.http.client.entity.UrlEncodedFormEntity extends org.apache.http.entity.StringEntity {
public interface org.apache.http.client.methods.AbortableHttpRequest {
  public abstract void abort();
public abstract class org.apache.http.client.methods.HttpEntityEnclosingRequestBase extends org.apache.http.client.methods.HttpRequestBase implements org.apache.http.HttpEntityEnclosingRequest {
  public org.apache.http.client.methods.HttpEntityEnclosingRequestBase();
  public org.apache.http.HttpEntity getEntity();
  public void setEntity(org.apache.http.HttpEntity);
  public boolean expectContinue();
public class org.apache.http.client.methods.HttpGet extends org.apache.http.client.methods.HttpRequestBase {
  public org.apache.http.client.methods.HttpGet();
  public org.apache.http.client.methods.HttpGet(java.net.URI);
  public org.apache.http.client.methods.HttpGet(java.lang.String);
  public java.lang.String getMethod();
public class org.apache.http.client.methods.HttpPost extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
  public org.apache.http.client.methods.HttpPost();
  public org.apache.http.client.methods.HttpPost(java.net.URI);
  public org.apache.http.client.methods.HttpPost(java.lang.String);
  public java.lang.String getMethod();
public abstract class org.apache.http.client.methods.HttpRequestBase extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.methods.AbortableHttpRequest,java.lang.Cloneable {
  public org.apache.http.client.methods.HttpRequestBase();
  public abstract java.lang.String getMethod();
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public java.net.URI getURI();
  public org.apache.http.RequestLine getRequestLine();
  public void setURI(java.net.URI);
  public void abort();
  public boolean isAborted();
public interface org.apache.http.client.methods.HttpUriRequest extends org.apache.http.HttpRequest {
  public abstract java.lang.String getMethod();
  public abstract java.net.URI getURI();
  public abstract boolean isAborted();
public class org.apache.http.client.params.HttpClientParams {
  public static boolean isRedirecting(org.apache.http.params.HttpParams);
  public static void setRedirecting(org.apache.http.params.HttpParams, boolean);
  public static boolean isAuthenticating(org.apache.http.params.HttpParams);
  public static void setAuthenticating(org.apache.http.params.HttpParams, boolean);
  public static java.lang.String getCookiePolicy(org.apache.http.params.HttpParams);
  public static void setCookiePolicy(org.apache.http.params.HttpParams, java.lang.String);
public class org.apache.http.client.protocol.RequestAddCookies implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.client.protocol.RequestAddCookies();
public class org.apache.http.client.protocol.RequestDefaultHeaders implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.client.protocol.RequestDefaultHeaders();
public class org.apache.http.client.protocol.RequestProxyAuthentication implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.client.protocol.RequestProxyAuthentication();
public class org.apache.http.client.protocol.RequestTargetAuthentication implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.client.protocol.RequestTargetAuthentication();
public class org.apache.http.client.protocol.ResponseProcessCookies implements org.apache.http.HttpResponseInterceptor {
  public org.apache.http.client.protocol.ResponseProcessCookies();
public class org.apache.http.client.utils.CloneUtils {
public class org.apache.http.client.utils.URIUtils {
  public static java.net.URI resolve(java.net.URI, java.lang.String);
  public static java.net.URI resolve(java.net.URI, java.net.URI);
public class org.apache.http.client.utils.URLEncodedUtils {
  public org.apache.http.client.utils.URLEncodedUtils();
  public static java.util.List<org.apache.http.NameValuePair> parse(java.net.URI, java.lang.String);
  public static boolean isEncoded(org.apache.http.HttpEntity);
  public static void parse(java.util.List<org.apache.http.NameValuePair>, java.util.Scanner, java.lang.String);
  public static java.lang.String format(java.util.List<? extends org.apache.http.NameValuePair>, java.lang.String);
public class org.apache.http.conn.BasicManagedEntity extends org.apache.http.entity.HttpEntityWrapper implements org.apache.http.conn.ConnectionReleaseTrigger,org.apache.http.conn.EofSensorWatcher {
  public org.apache.http.conn.BasicManagedEntity(org.apache.http.HttpEntity, org.apache.http.conn.ManagedClientConnection, boolean);
  public boolean isRepeatable();
public interface org.apache.http.conn.ClientConnectionManager {
  public abstract org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
  public abstract org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public abstract void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
  public abstract void closeIdleConnections(long, java.util.concurrent.TimeUnit);
  public abstract void closeExpiredConnections();
  public abstract void shutdown();
public interface org.apache.http.conn.ClientConnectionManagerFactory {
  public abstract org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
public interface org.apache.http.conn.ClientConnectionOperator {
  public abstract org.apache.http.conn.OperatedClientConnection createConnection();
public interface org.apache.http.conn.ClientConnectionRequest {
  public abstract void abortRequest();
public class org.apache.http.conn.ConnectTimeoutException extends java.io.InterruptedIOException {
  public org.apache.http.conn.ConnectTimeoutException();
  public org.apache.http.conn.ConnectTimeoutException(java.lang.String);
public interface org.apache.http.conn.ConnectionKeepAliveStrategy {
  public abstract long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.conn.ConnectionPoolTimeoutException extends org.apache.http.conn.ConnectTimeoutException {
  public org.apache.http.conn.ConnectionPoolTimeoutException();
  public org.apache.http.conn.ConnectionPoolTimeoutException(java.lang.String);
public interface org.apache.http.conn.ConnectionReleaseTrigger {
public class org.apache.http.conn.EofSensorInputStream extends java.io.InputStream implements org.apache.http.conn.ConnectionReleaseTrigger {
  public org.apache.http.conn.EofSensorInputStream(java.io.InputStream, org.apache.http.conn.EofSensorWatcher);
public interface org.apache.http.conn.EofSensorWatcher {
public class org.apache.http.conn.HttpHostConnectException extends java.net.ConnectException {
  public org.apache.http.conn.HttpHostConnectException(org.apache.http.HttpHost, java.net.ConnectException);
  public org.apache.http.HttpHost getHost();
public interface org.apache.http.conn.ManagedClientConnection extends org.apache.http.HttpClientConnection,org.apache.http.HttpInetConnection,org.apache.http.conn.ConnectionReleaseTrigger {
  public abstract boolean isSecure();
  public abstract org.apache.http.conn.routing.HttpRoute getRoute();
  public abstract javax.net.ssl.SSLSession getSSLSession();
  public abstract void markReusable();
  public abstract void unmarkReusable();
  public abstract boolean isMarkedReusable();
  public abstract void setState(java.lang.Object);
  public abstract java.lang.Object getState();
  public abstract void setIdleDuration(long, java.util.concurrent.TimeUnit);
public interface org.apache.http.conn.OperatedClientConnection extends org.apache.http.HttpClientConnection,org.apache.http.HttpInetConnection {
  public abstract org.apache.http.HttpHost getTargetHost();
  public abstract boolean isSecure();
  public abstract java.net.Socket getSocket();
public interface org.apache.http.conn.params.ConnManagerPNames {
  public int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
public final class org.apache.http.conn.params.ConnManagerParams implements org.apache.http.conn.params.ConnManagerPNames {
  public org.apache.http.conn.params.ConnManagerParams();
  public static long getTimeout(org.apache.http.params.HttpParams);
  public static void setTimeout(org.apache.http.params.HttpParams, long);
  public static void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams, org.apache.http.conn.params.ConnPerRoute);
  public static org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams);
  public static void setMaxTotalConnections(org.apache.http.params.HttpParams, int);
  public static int getMaxTotalConnections(org.apache.http.params.HttpParams);
public interface org.apache.http.conn.params.ConnPerRoute {
  public abstract int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
public interface org.apache.http.conn.params.ConnRoutePNames {
public class org.apache.http.conn.params.ConnRouteParams implements org.apache.http.conn.params.ConnRoutePNames {
  public static org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams);
  public static void setDefaultProxy(org.apache.http.params.HttpParams, org.apache.http.HttpHost);
  public static org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams);
  public static void setForcedRoute(org.apache.http.params.HttpParams, org.apache.http.conn.routing.HttpRoute);
  public static java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams);
  public static void setLocalAddress(org.apache.http.params.HttpParams, java.net.InetAddress);
public class org.apache.http.conn.routing.BasicRouteDirector implements org.apache.http.conn.routing.HttpRouteDirector {
  public org.apache.http.conn.routing.BasicRouteDirector();
  public int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
public final class org.apache.http.conn.routing.HttpRoute implements org.apache.http.conn.routing.RouteInfo,java.lang.Cloneable {
  public org.apache.http.conn.routing.HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo$TunnelType, org.apache.http.conn.routing.RouteInfo$LayerType);
  public org.apache.http.conn.routing.HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean, org.apache.http.conn.routing.RouteInfo$TunnelType, org.apache.http.conn.routing.RouteInfo$LayerType);
  public org.apache.http.conn.routing.HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, boolean);
  public org.apache.http.conn.routing.HttpRoute(org.apache.http.HttpHost);
  public org.apache.http.conn.routing.HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean);
  public final org.apache.http.HttpHost getTargetHost();
  public final java.net.InetAddress getLocalAddress();
  public final int getHopCount();
  public final org.apache.http.HttpHost getHopTarget(int);
  public final org.apache.http.HttpHost getProxyHost();
  public final org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType();
  public final boolean isTunnelled();
  public final org.apache.http.conn.routing.RouteInfo$LayerType getLayerType();
  public final boolean isLayered();
  public final boolean isSecure();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
public interface org.apache.http.conn.routing.HttpRouteDirector {
  public abstract int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
public interface org.apache.http.conn.routing.HttpRoutePlanner {
public final class org.apache.http.conn.routing.RouteInfo$LayerType extends java.lang.Enum<org.apache.http.conn.routing.RouteInfo$LayerType> {
  public static org.apache.http.conn.routing.RouteInfo$LayerType[] values();
  public static org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String);
public final class org.apache.http.conn.routing.RouteInfo$TunnelType extends java.lang.Enum<org.apache.http.conn.routing.RouteInfo$TunnelType> {
  public static org.apache.http.conn.routing.RouteInfo$TunnelType[] values();
  public static org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String);
public interface org.apache.http.conn.routing.RouteInfo {
  public abstract org.apache.http.HttpHost getTargetHost();
  public abstract java.net.InetAddress getLocalAddress();
  public abstract int getHopCount();
  public abstract org.apache.http.HttpHost getHopTarget(int);
  public abstract org.apache.http.HttpHost getProxyHost();
  public abstract org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType();
  public abstract boolean isTunnelled();
  public abstract org.apache.http.conn.routing.RouteInfo$LayerType getLayerType();
  public abstract boolean isLayered();
  public abstract boolean isSecure();
public final class org.apache.http.conn.routing.RouteTracker implements org.apache.http.conn.routing.RouteInfo,java.lang.Cloneable {
  public org.apache.http.conn.routing.RouteTracker(org.apache.http.HttpHost, java.net.InetAddress);
  public org.apache.http.conn.routing.RouteTracker(org.apache.http.conn.routing.HttpRoute);
  public final void connectTarget(boolean);
  public final void connectProxy(org.apache.http.HttpHost, boolean);
  public final void tunnelTarget(boolean);
  public final void tunnelProxy(org.apache.http.HttpHost, boolean);
  public final void layerProtocol(boolean);
  public final org.apache.http.HttpHost getTargetHost();
  public final java.net.InetAddress getLocalAddress();
  public final int getHopCount();
  public final org.apache.http.HttpHost getHopTarget(int);
  public final org.apache.http.HttpHost getProxyHost();
  public final boolean isConnected();
  public final org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType();
  public final boolean isTunnelled();
  public final org.apache.http.conn.routing.RouteInfo$LayerType getLayerType();
  public final boolean isLayered();
  public final boolean isSecure();
  public final org.apache.http.conn.routing.HttpRoute toRoute();
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
public interface org.apache.http.conn.scheme.HostNameResolver {
public interface org.apache.http.conn.scheme.LayeredSocketFactory extends org.apache.http.conn.scheme.SocketFactory {
public final class org.apache.http.conn.scheme.PlainSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
  public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory();
  public org.apache.http.conn.scheme.PlainSocketFactory(org.apache.http.conn.scheme.HostNameResolver);
  public org.apache.http.conn.scheme.PlainSocketFactory();
  public java.net.Socket createSocket();
  public boolean equals(java.lang.Object);
  public int hashCode();
public final class org.apache.http.conn.scheme.Scheme {
  public org.apache.http.conn.scheme.Scheme(java.lang.String, org.apache.http.conn.scheme.SocketFactory, int);
  public final int getDefaultPort();
  public final org.apache.http.conn.scheme.SocketFactory getSocketFactory();
  public final java.lang.String getName();
  public final boolean isLayered();
  public final int resolvePort(int);
  public final java.lang.String toString();
  public final boolean equals(java.lang.Object);
  public int hashCode();
public final class org.apache.http.conn.scheme.SchemeRegistry {
  public org.apache.http.conn.scheme.SchemeRegistry();
  public final synchronized org.apache.http.conn.scheme.Scheme getScheme(java.lang.String);
  public final synchronized org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost);
  public final synchronized org.apache.http.conn.scheme.Scheme get(java.lang.String);
  public final synchronized org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme);
  public final synchronized org.apache.http.conn.scheme.Scheme unregister(java.lang.String);
  public final synchronized java.util.List<java.lang.String> getSchemeNames();
  public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.conn.scheme.Scheme>);
public interface org.apache.http.conn.scheme.SocketFactory {
public abstract class org.apache.http.conn.ssl.AbstractVerifier implements org.apache.http.conn.ssl.X509HostnameVerifier {
  public org.apache.http.conn.ssl.AbstractVerifier();
  public final boolean verify(java.lang.String, javax.net.ssl.SSLSession);
  public static boolean acceptableCountryWildcard(java.lang.String);
  public static java.lang.String[] getCNs(java.security.cert.X509Certificate);
  public static java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate);
  public static int countDots(java.lang.String);
public class org.apache.http.conn.ssl.AllowAllHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
  public org.apache.http.conn.ssl.AllowAllHostnameVerifier();
  public final void verify(java.lang.String, java.lang.String[], java.lang.String[]);
  public final java.lang.String toString();
public class org.apache.http.conn.ssl.BrowserCompatHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
  public org.apache.http.conn.ssl.BrowserCompatHostnameVerifier();
  public final java.lang.String toString();
public class org.apache.http.conn.ssl.SSLSocketFactory implements org.apache.http.conn.scheme.LayeredSocketFactory {
  public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory();
  public org.apache.http.conn.ssl.SSLSocketFactory(javax.net.ssl.SSLSocketFactory);
  public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier);
  public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier();
public class org.apache.http.conn.ssl.StrictHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
  public org.apache.http.conn.ssl.StrictHostnameVerifier();
  public final java.lang.String toString();
public interface org.apache.http.conn.ssl.X509HostnameVerifier extends javax.net.ssl.HostnameVerifier {
  public abstract boolean verify(java.lang.String, javax.net.ssl.SSLSession);
public class org.apache.http.conn.util.InetAddressUtils {
  public static boolean isIPv4Address(java.lang.String);
  public static boolean isIPv6StdAddress(java.lang.String);
  public static boolean isIPv6HexCompressedAddress(java.lang.String);
  public static boolean isIPv6Address(java.lang.String);
public interface org.apache.http.cookie.ClientCookie extends org.apache.http.cookie.Cookie {
  public abstract java.lang.String getAttribute(java.lang.String);
  public abstract boolean containsAttribute(java.lang.String);
public interface org.apache.http.cookie.Cookie {
  public abstract java.lang.String getName();
  public abstract java.lang.String getValue();
  public abstract java.lang.String getComment();
  public abstract java.lang.String getCommentURL();
  public abstract java.util.Date getExpiryDate();
  public abstract boolean isPersistent();
  public abstract java.lang.String getDomain();
  public abstract java.lang.String getPath();
  public abstract int[] getPorts();
  public abstract boolean isSecure();
  public abstract int getVersion();
  public abstract boolean isExpired(java.util.Date);
public interface org.apache.http.cookie.CookieAttributeHandler {
  public abstract boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.cookie.CookieIdentityComparator implements java.io.Serializable, java.util.Comparator<org.apache.http.cookie.Cookie> {
  public org.apache.http.cookie.CookieIdentityComparator();
  public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  public int compare(java.lang.Object, java.lang.Object);
public final class org.apache.http.cookie.CookieOrigin {
  public org.apache.http.cookie.CookieOrigin(java.lang.String, int, java.lang.String, boolean);
  public java.lang.String getHost();
  public java.lang.String getPath();
  public int getPort();
  public boolean isSecure();
  public java.lang.String toString();
public class org.apache.http.cookie.CookiePathComparator implements java.io.Serializable, java.util.Comparator<org.apache.http.cookie.Cookie> {
  public org.apache.http.cookie.CookiePathComparator();
  public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  public int compare(java.lang.Object, java.lang.Object);
public interface org.apache.http.cookie.CookieSpec {
  public abstract int getVersion();
  public abstract boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
  public abstract java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
  public abstract org.apache.http.Header getVersionHeader();
public interface org.apache.http.cookie.CookieSpecFactory {
  public abstract org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public final class org.apache.http.cookie.CookieSpecRegistry {
  public org.apache.http.cookie.CookieSpecRegistry();
  public synchronized void register(java.lang.String, org.apache.http.cookie.CookieSpecFactory);
  public synchronized void unregister(java.lang.String);
  public synchronized java.util.List<java.lang.String> getSpecNames();
  public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.cookie.CookieSpecFactory>);
public class org.apache.http.cookie.MalformedCookieException extends org.apache.http.ProtocolException {
  public org.apache.http.cookie.MalformedCookieException();
  public org.apache.http.cookie.MalformedCookieException(java.lang.String);
  public org.apache.http.cookie.MalformedCookieException(java.lang.String, java.lang.Throwable);
public interface org.apache.http.cookie.SetCookie extends org.apache.http.cookie.Cookie {
  public abstract void setValue(java.lang.String);
  public abstract void setComment(java.lang.String);
  public abstract void setExpiryDate(java.util.Date);
  public abstract void setDomain(java.lang.String);
  public abstract void setPath(java.lang.String);
  public abstract void setSecure(boolean);
  public abstract void setVersion(int);
public interface org.apache.http.cookie.SetCookie2 extends org.apache.http.cookie.SetCookie {
  public abstract void setCommentURL(java.lang.String);
  public abstract void setPorts(int[]);
  public abstract void setDiscard(boolean);
public abstract class org.apache.http.entity.AbstractHttpEntity implements org.apache.http.HttpEntity {
  public org.apache.http.Header getContentType();
  public org.apache.http.Header getContentEncoding();
  public boolean isChunked();
  public void setContentType(org.apache.http.Header);
  public void setContentType(java.lang.String);
  public void setContentEncoding(org.apache.http.Header);
  public void setContentEncoding(java.lang.String);
  public void setChunked(boolean);
public class org.apache.http.entity.BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity {
  public org.apache.http.entity.BasicHttpEntity();
  public long getContentLength();
  public boolean isRepeatable();
  public void setContentLength(long);
  public void setContent(java.io.InputStream);
  public boolean isStreaming();
public class org.apache.http.entity.BufferedHttpEntity extends org.apache.http.entity.HttpEntityWrapper {
  public long getContentLength();
  public boolean isChunked();
  public boolean isRepeatable();
  public boolean isStreaming();
public class org.apache.http.entity.ByteArrayEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
  public org.apache.http.entity.ByteArrayEntity(byte[]);
  public boolean isRepeatable();
  public long getContentLength();
  public java.io.InputStream getContent();
  public boolean isStreaming();
public interface org.apache.http.entity.ContentLengthStrategy {
public class org.apache.http.entity.EntityTemplate extends org.apache.http.entity.AbstractHttpEntity {
  public org.apache.http.entity.EntityTemplate(org.apache.http.entity.ContentProducer);
  public long getContentLength();
  public java.io.InputStream getContent();
  public boolean isRepeatable();
  public boolean isStreaming();
public class org.apache.http.entity.FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
  public org.apache.http.entity.FileEntity(java.io.File, java.lang.String);
  public boolean isRepeatable();
  public long getContentLength();
  public boolean isStreaming();
public class org.apache.http.entity.HttpEntityWrapper implements org.apache.http.HttpEntity {
  public org.apache.http.entity.HttpEntityWrapper(org.apache.http.HttpEntity);
  public boolean isRepeatable();
  public boolean isChunked();
  public long getContentLength();
  public org.apache.http.Header getContentType();
  public org.apache.http.Header getContentEncoding();
  public boolean isStreaming();
public class org.apache.http.entity.InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity {
  public org.apache.http.entity.InputStreamEntity(java.io.InputStream, long);
  public boolean isRepeatable();
  public long getContentLength();
  public boolean isStreaming();
public class org.apache.http.entity.SerializableEntity extends org.apache.http.entity.AbstractHttpEntity {
  public long getContentLength();
  public boolean isRepeatable();
  public boolean isStreaming();
public class org.apache.http.entity.StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
  public boolean isRepeatable();
  public long getContentLength();
  public boolean isStreaming();
public abstract class org.apache.http.impl.AbstractHttpClientConnection implements org.apache.http.HttpClientConnection {
  public org.apache.http.impl.AbstractHttpClientConnection();
  public boolean isStale();
  public org.apache.http.HttpConnectionMetrics getMetrics();
public class org.apache.http.impl.DefaultConnectionReuseStrategy implements org.apache.http.ConnectionReuseStrategy {
  public org.apache.http.impl.DefaultConnectionReuseStrategy();
  public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.DefaultHttpResponseFactory implements org.apache.http.HttpResponseFactory {
  public org.apache.http.impl.DefaultHttpResponseFactory(org.apache.http.ReasonPhraseCatalog);
  public org.apache.http.impl.DefaultHttpResponseFactory();
  public org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
  public org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.EnglishReasonPhraseCatalog implements org.apache.http.ReasonPhraseCatalog {
  public java.lang.String getReason(int, java.util.Locale);
public class org.apache.http.impl.HttpConnectionMetricsImpl implements org.apache.http.HttpConnectionMetrics {
  public org.apache.http.impl.HttpConnectionMetricsImpl(org.apache.http.io.HttpTransportMetrics, org.apache.http.io.HttpTransportMetrics);
  public long getReceivedBytesCount();
  public long getSentBytesCount();
  public long getRequestCount();
  public void incrementRequestCount();
  public long getResponseCount();
  public void incrementResponseCount();
  public java.lang.Object getMetric(java.lang.String);
  public void setMetric(java.lang.String, java.lang.Object);
  public void reset();
public class org.apache.http.impl.SocketHttpClientConnection extends org.apache.http.impl.AbstractHttpClientConnection implements org.apache.http.HttpInetConnection {
  public org.apache.http.impl.SocketHttpClientConnection();
  public boolean isOpen();
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public java.net.InetAddress getRemoteAddress();
  public int getRemotePort();
  public void setSocketTimeout(int);
  public int getSocketTimeout();
public abstract class org.apache.http.impl.auth.AuthSchemeBase implements org.apache.http.auth.AuthScheme {
  public org.apache.http.impl.auth.AuthSchemeBase();
  public boolean isProxy();
public class org.apache.http.impl.auth.BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme {
  public org.apache.http.impl.auth.BasicScheme();
  public java.lang.String getSchemeName();
  public boolean isComplete();
  public boolean isConnectionBased();
  public static org.apache.http.Header authenticate(org.apache.http.auth.Credentials, java.lang.String, boolean);
public class org.apache.http.impl.auth.BasicSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
  public org.apache.http.impl.auth.BasicSchemeFactory();
  public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
public class org.apache.http.impl.auth.DigestScheme extends org.apache.http.impl.auth.RFC2617Scheme {
  public org.apache.http.impl.auth.DigestScheme();
  public boolean isComplete();
  public java.lang.String getSchemeName();
  public boolean isConnectionBased();
  public void overrideParamter(java.lang.String, java.lang.String);
  public static java.lang.String createCnonce();
public class org.apache.http.impl.auth.DigestSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
  public org.apache.http.impl.auth.DigestSchemeFactory();
  public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
public abstract class org.apache.http.impl.auth.RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase {
  public org.apache.http.impl.auth.RFC2617Scheme();
  public java.lang.String getParameter(java.lang.String);
  public java.lang.String getRealm();
public class org.apache.http.impl.auth.UnsupportedDigestAlgorithmException extends java.lang.RuntimeException {
  public org.apache.http.impl.auth.UnsupportedDigestAlgorithmException();
  public org.apache.http.impl.auth.UnsupportedDigestAlgorithmException(java.lang.String);
  public org.apache.http.impl.auth.UnsupportedDigestAlgorithmException(java.lang.String, java.lang.Throwable);
public abstract class org.apache.http.impl.client.AbstractAuthenticationHandler implements org.apache.http.client.AuthenticationHandler {
  public org.apache.http.impl.client.AbstractAuthenticationHandler();
public abstract class org.apache.http.impl.client.AbstractHttpClient implements org.apache.http.client.HttpClient {
  public final synchronized org.apache.http.params.HttpParams getParams();
  public synchronized void setParams(org.apache.http.params.HttpParams);
  public final synchronized org.apache.http.conn.ClientConnectionManager getConnectionManager();
  public final synchronized org.apache.http.protocol.HttpRequestExecutor getRequestExecutor();
  public final synchronized org.apache.http.auth.AuthSchemeRegistry getAuthSchemes();
  public synchronized void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry);
  public final synchronized org.apache.http.cookie.CookieSpecRegistry getCookieSpecs();
  public synchronized void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry);
  public final synchronized org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy();
  public synchronized void setReuseStrategy(org.apache.http.ConnectionReuseStrategy);
  public final synchronized org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy();
  public synchronized void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy);
  public final synchronized org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler();
  public synchronized void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler);
  public final synchronized org.apache.http.client.RedirectHandler getRedirectHandler();
  public synchronized void setRedirectHandler(org.apache.http.client.RedirectHandler);
  public final synchronized org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler();
  public synchronized void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
  public final synchronized org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler();
  public synchronized void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
  public final synchronized org.apache.http.client.CookieStore getCookieStore();
  public synchronized void setCookieStore(org.apache.http.client.CookieStore);
  public final synchronized org.apache.http.client.CredentialsProvider getCredentialsProvider();
  public synchronized void setCredentialsProvider(org.apache.http.client.CredentialsProvider);
  public final synchronized org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner();
  public synchronized void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner);
  public final synchronized org.apache.http.client.UserTokenHandler getUserTokenHandler();
  public synchronized void setUserTokenHandler(org.apache.http.client.UserTokenHandler);
  public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
  public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
  public synchronized org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
  public synchronized int getResponseInterceptorCount();
  public synchronized void clearResponseInterceptors();
  public void removeResponseInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpResponseInterceptor>);
  public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
  public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
  public synchronized org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
  public synchronized int getRequestInterceptorCount();
  public synchronized void clearRequestInterceptors();
  public void removeRequestInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpRequestInterceptor>);
public class org.apache.http.impl.client.BasicCookieStore implements org.apache.http.client.CookieStore {
  public org.apache.http.impl.client.BasicCookieStore();
  public synchronized void addCookie(org.apache.http.cookie.Cookie);
  public synchronized void addCookies(org.apache.http.cookie.Cookie[]);
  public synchronized java.util.List<org.apache.http.cookie.Cookie> getCookies();
  public synchronized boolean clearExpired(java.util.Date);
  public java.lang.String toString();
  public synchronized void clear();
public class org.apache.http.impl.client.BasicCredentialsProvider implements org.apache.http.client.CredentialsProvider {
  public org.apache.http.impl.client.BasicCredentialsProvider();
  public synchronized void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  public synchronized org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
  public java.lang.String toString();
  public synchronized void clear();
public class org.apache.http.impl.client.BasicResponseHandler implements org.apache.http.client.ResponseHandler<java.lang.String> {
  public org.apache.http.impl.client.BasicResponseHandler();
public class org.apache.http.impl.client.ClientParamsStack extends org.apache.http.params.AbstractHttpParams {
  public org.apache.http.impl.client.ClientParamsStack(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
  public org.apache.http.impl.client.ClientParamsStack(org.apache.http.impl.client.ClientParamsStack);
  public org.apache.http.impl.client.ClientParamsStack(org.apache.http.impl.client.ClientParamsStack, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
  public final org.apache.http.params.HttpParams getApplicationParams();
  public final org.apache.http.params.HttpParams getClientParams();
  public final org.apache.http.params.HttpParams getRequestParams();
  public final org.apache.http.params.HttpParams getOverrideParams();
  public java.lang.Object getParameter(java.lang.String);
  public boolean removeParameter(java.lang.String);
  public org.apache.http.params.HttpParams copy();
public class org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy implements org.apache.http.conn.ConnectionKeepAliveStrategy {
  public org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy();
  public long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.client.DefaultHttpClient extends org.apache.http.impl.client.AbstractHttpClient {
  public org.apache.http.impl.client.DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams);
  public org.apache.http.impl.client.DefaultHttpClient(org.apache.http.params.HttpParams);
  public org.apache.http.impl.client.DefaultHttpClient();
public class org.apache.http.impl.client.DefaultHttpRequestRetryHandler implements org.apache.http.client.HttpRequestRetryHandler {
  public org.apache.http.impl.client.DefaultHttpRequestRetryHandler(int, boolean);
  public org.apache.http.impl.client.DefaultHttpRequestRetryHandler();
  public boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
  public boolean isRequestSentRetryEnabled();
  public int getRetryCount();
public class org.apache.http.impl.client.DefaultProxyAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
  public org.apache.http.impl.client.DefaultProxyAuthenticationHandler();
  public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.client.DefaultRedirectHandler implements org.apache.http.client.RedirectHandler {
  public org.apache.http.impl.client.DefaultRedirectHandler();
  public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.client.DefaultRequestDirector implements org.apache.http.client.RequestDirector {
  public org.apache.http.impl.client.DefaultRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams);
public class org.apache.http.impl.client.DefaultTargetAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
  public org.apache.http.impl.client.DefaultTargetAuthenticationHandler();
  public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.client.DefaultUserTokenHandler implements org.apache.http.client.UserTokenHandler {
  public org.apache.http.impl.client.DefaultUserTokenHandler();
  public java.lang.Object getUserToken(org.apache.http.protocol.HttpContext);
public class org.apache.http.impl.client.EntityEnclosingRequestWrapper extends org.apache.http.impl.client.RequestWrapper implements org.apache.http.HttpEntityEnclosingRequest {
  public org.apache.http.HttpEntity getEntity();
  public void setEntity(org.apache.http.HttpEntity);
  public boolean expectContinue();
  public boolean isRepeatable();
public class org.apache.http.impl.client.RedirectLocations {
  public org.apache.http.impl.client.RedirectLocations();
  public boolean contains(java.net.URI);
  public void add(java.net.URI);
  public boolean remove(java.net.URI);
public class org.apache.http.impl.client.RequestWrapper extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest {
  public void resetHeaders();
  public java.lang.String getMethod();
  public void setMethod(java.lang.String);
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public void setProtocolVersion(org.apache.http.ProtocolVersion);
  public java.net.URI getURI();
  public void setURI(java.net.URI);
  public org.apache.http.RequestLine getRequestLine();
  public boolean isAborted();
  public org.apache.http.HttpRequest getOriginal();
  public boolean isRepeatable();
  public int getExecCount();
  public void incrementExecCount();
public class org.apache.http.impl.client.RoutedRequest {
  public org.apache.http.impl.client.RoutedRequest(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute);
  public final org.apache.http.impl.client.RequestWrapper getRequest();
  public final org.apache.http.conn.routing.HttpRoute getRoute();
public class org.apache.http.impl.client.TunnelRefusedException extends org.apache.http.HttpException {
  public org.apache.http.impl.client.TunnelRefusedException(java.lang.String, org.apache.http.HttpResponse);
  public org.apache.http.HttpResponse getResponse();
public abstract class org.apache.http.impl.conn.AbstractClientConnAdapter implements org.apache.http.conn.ManagedClientConnection {
  public boolean isOpen();
  public boolean isStale();
  public void setSocketTimeout(int);
  public int getSocketTimeout();
  public org.apache.http.HttpConnectionMetrics getMetrics();
  public java.net.InetAddress getLocalAddress();
  public int getLocalPort();
  public java.net.InetAddress getRemoteAddress();
  public int getRemotePort();
  public boolean isSecure();
  public javax.net.ssl.SSLSession getSSLSession();
  public void markReusable();
  public void unmarkReusable();
  public boolean isMarkedReusable();
  public void setIdleDuration(long, java.util.concurrent.TimeUnit);
  public void releaseConnection();
  public void abortConnection();
public abstract class org.apache.http.impl.conn.AbstractPoolEntry {
  public java.lang.Object getState();
  public void setState(java.lang.Object);
public abstract class org.apache.http.impl.conn.AbstractPooledConnAdapter extends org.apache.http.impl.conn.AbstractClientConnAdapter {
  public org.apache.http.conn.routing.HttpRoute getRoute();
  public java.lang.Object getState();
  public void setState(java.lang.Object);
public class org.apache.http.impl.conn.DefaultClientConnection extends org.apache.http.impl.SocketHttpClientConnection implements org.apache.http.conn.OperatedClientConnection {
  public org.apache.http.impl.conn.DefaultClientConnection();
  public final org.apache.http.HttpHost getTargetHost();
  public final boolean isSecure();
  public final java.net.Socket getSocket();
public class org.apache.http.impl.conn.DefaultClientConnectionOperator implements org.apache.http.conn.ClientConnectionOperator {
  public org.apache.http.impl.conn.DefaultClientConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
  public org.apache.http.conn.OperatedClientConnection createConnection();
public class org.apache.http.impl.conn.DefaultResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
  public org.apache.http.impl.conn.DefaultResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
public class org.apache.http.impl.conn.IdleConnectionHandler {
  public org.apache.http.impl.conn.IdleConnectionHandler();
  public void add(org.apache.http.HttpConnection, long, java.util.concurrent.TimeUnit);
  public boolean remove(org.apache.http.HttpConnection);
  public void removeAll();
  public void closeIdleConnections(long);
  public void closeExpiredConnections();
public class org.apache.http.impl.conn.LoggingSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
  public org.apache.http.impl.conn.LoggingSessionInputBuffer(org.apache.http.io.SessionInputBuffer, org.apache.http.impl.conn.Wire);
  public org.apache.http.io.HttpTransportMetrics getMetrics();
public class org.apache.http.impl.conn.LoggingSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
  public org.apache.http.impl.conn.LoggingSessionOutputBuffer(org.apache.http.io.SessionOutputBuffer, org.apache.http.impl.conn.Wire);
  public org.apache.http.io.HttpTransportMetrics getMetrics();
public class org.apache.http.impl.conn.ProxySelectorRoutePlanner implements org.apache.http.conn.routing.HttpRoutePlanner {
  public org.apache.http.impl.conn.ProxySelectorRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector);
  public java.net.ProxySelector getProxySelector();
  public void setProxySelector(java.net.ProxySelector);
  public void abortRequest();
  public org.apache.http.conn.ManagedClientConnection getConnection(long, java.util.concurrent.TimeUnit);
public class org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
public class org.apache.http.impl.conn.SingleClientConnManager$PoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
public class org.apache.http.impl.conn.SingleClientConnManager implements org.apache.http.conn.ClientConnectionManager {
  public org.apache.http.impl.conn.SingleClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
  public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
  public final org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
  public void closeExpiredConnections();
  public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
  public void shutdown();
public class org.apache.http.impl.conn.Wire {
  public org.apache.http.impl.conn.Wire(org.apache.commons.logging.Log);
  public boolean enabled();
public abstract class org.apache.http.impl.conn.tsccm.AbstractConnPool implements org.apache.http.impl.conn.tsccm.RefQueueHandler {
  public abstract org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public abstract void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
  public void handleReference(java.lang.ref.Reference);
  public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
  public void closeExpiredConnections();
  public abstract void deleteClosedConnections();
  public void shutdown();
public class org.apache.http.impl.conn.tsccm.BasicPoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
  public org.apache.http.impl.conn.tsccm.BasicPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute, java.lang.ref.ReferenceQueue<java.lang.Object>);
public class org.apache.http.impl.conn.tsccm.BasicPoolEntryRef extends java.lang.ref.WeakReference<org.apache.http.impl.conn.tsccm.BasicPoolEntry> {
  public org.apache.http.impl.conn.tsccm.BasicPoolEntryRef(org.apache.http.impl.conn.tsccm.BasicPoolEntry, java.lang.ref.ReferenceQueue<java.lang.Object>);
  public final org.apache.http.conn.routing.HttpRoute getRoute();
public class org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
  public void abortRequest();
public class org.apache.http.impl.conn.tsccm.ConnPoolByRoute extends org.apache.http.impl.conn.tsccm.AbstractConnPool {
  public org.apache.http.impl.conn.tsccm.ConnPoolByRoute(org.apache.http.conn.ClientConnectionOperator, org.apache.http.params.HttpParams);
  public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
  public org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
  public void deleteClosedConnections();
  public void shutdown();
public interface org.apache.http.impl.conn.tsccm.PoolEntryRequest {
  public abstract void abortRequest();
public interface org.apache.http.impl.conn.tsccm.RefQueueHandler {
  public abstract void handleReference(java.lang.ref.Reference<?>);
public class org.apache.http.impl.conn.tsccm.RefQueueWorker implements java.lang.Runnable {
  public org.apache.http.impl.conn.tsccm.RefQueueWorker(java.lang.ref.ReferenceQueue<?>, org.apache.http.impl.conn.tsccm.RefQueueHandler);
  public void run();
  public void shutdown();
  public java.lang.String toString();
public class org.apache.http.impl.conn.tsccm.RouteSpecificPool {
  public org.apache.http.impl.conn.tsccm.RouteSpecificPool(org.apache.http.conn.routing.HttpRoute, int);
  public final org.apache.http.conn.routing.HttpRoute getRoute();
  public final int getMaxEntries();
  public boolean isUnused();
  public int getCapacity();
  public final int getEntryCount();
  public org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object);
  public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
  public void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
  public boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
  public void dropEntry();
  public void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread);
  public boolean hasThread();
  public org.apache.http.impl.conn.tsccm.WaitingThread nextThread();
  public void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread);
  public void abortRequest();
public class org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager implements org.apache.http.conn.ClientConnectionManager {
  public org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
  public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
  public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
  public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
  public void shutdown();
  public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
  public int getConnectionsInPool();
  public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
  public void closeExpiredConnections();
public class org.apache.http.impl.conn.tsccm.WaitingThread {
  public org.apache.http.impl.conn.tsccm.WaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool);
  public final java.util.concurrent.locks.Condition getCondition();
  public final org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool();
  public final java.lang.Thread getThread();
  public void wakeup();
  public void interrupt();
public class org.apache.http.impl.conn.tsccm.WaitingThreadAborter {
  public org.apache.http.impl.conn.tsccm.WaitingThreadAborter();
  public void abort();
  public void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread);
public abstract class org.apache.http.impl.cookie.AbstractCookieAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.AbstractCookieAttributeHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public abstract class org.apache.http.impl.cookie.AbstractCookieSpec implements org.apache.http.cookie.CookieSpec {
  public org.apache.http.impl.cookie.AbstractCookieSpec();
  public void registerAttribHandler(java.lang.String, org.apache.http.cookie.CookieAttributeHandler);
public class org.apache.http.impl.cookie.BasicClientCookie implements org.apache.http.cookie.SetCookie,org.apache.http.cookie.ClientCookie,java.lang.Cloneable {
  public org.apache.http.impl.cookie.BasicClientCookie(java.lang.String, java.lang.String);
  public java.lang.String getName();
  public java.lang.String getValue();
  public void setValue(java.lang.String);
  public java.lang.String getComment();
  public void setComment(java.lang.String);
  public java.lang.String getCommentURL();
  public java.util.Date getExpiryDate();
  public void setExpiryDate(java.util.Date);
  public boolean isPersistent();
  public java.lang.String getDomain();
  public void setDomain(java.lang.String);
  public java.lang.String getPath();
  public void setPath(java.lang.String);
  public boolean isSecure();
  public void setSecure(boolean);
  public int[] getPorts();
  public int getVersion();
  public void setVersion(int);
  public boolean isExpired(java.util.Date);
  public void setAttribute(java.lang.String, java.lang.String);
  public java.lang.String getAttribute(java.lang.String);
  public boolean containsAttribute(java.lang.String);
  public java.lang.String toString();
public class org.apache.http.impl.cookie.BasicClientCookie2 extends org.apache.http.impl.cookie.BasicClientCookie implements org.apache.http.cookie.SetCookie2 {
  public org.apache.http.impl.cookie.BasicClientCookie2(java.lang.String, java.lang.String);
  public int[] getPorts();
  public void setPorts(int[]);
  public java.lang.String getCommentURL();
  public void setCommentURL(java.lang.String);
  public void setDiscard(boolean);
  public boolean isPersistent();
  public boolean isExpired(java.util.Date);
public class org.apache.http.impl.cookie.BasicCommentHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicCommentHandler();
public class org.apache.http.impl.cookie.BasicDomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicDomainHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.BasicExpiresHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicExpiresHandler(java.lang.String[]);
public class org.apache.http.impl.cookie.BasicMaxAgeHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicMaxAgeHandler();
public class org.apache.http.impl.cookie.BasicPathHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicPathHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.BasicSecureHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
  public org.apache.http.impl.cookie.BasicSecureHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.BestMatchSpec implements org.apache.http.cookie.CookieSpec {
  public org.apache.http.impl.cookie.BestMatchSpec(java.lang.String[], boolean);
  public org.apache.http.impl.cookie.BestMatchSpec();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
  public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
  public int getVersion();
  public org.apache.http.Header getVersionHeader();
public class org.apache.http.impl.cookie.BestMatchSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
  public org.apache.http.impl.cookie.BestMatchSpecFactory();
  public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public class org.apache.http.impl.cookie.BrowserCompatSpec extends org.apache.http.impl.cookie.CookieSpecBase {
  public org.apache.http.impl.cookie.BrowserCompatSpec(java.lang.String[]);
  public org.apache.http.impl.cookie.BrowserCompatSpec();
  public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
  public int getVersion();
  public org.apache.http.Header getVersionHeader();
public class org.apache.http.impl.cookie.BrowserCompatSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
  public org.apache.http.impl.cookie.BrowserCompatSpecFactory();
  public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public abstract class org.apache.http.impl.cookie.CookieSpecBase extends org.apache.http.impl.cookie.AbstractCookieSpec {
  public org.apache.http.impl.cookie.CookieSpecBase();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.DateParseException extends java.lang.Exception {
  public org.apache.http.impl.cookie.DateParseException();
  public org.apache.http.impl.cookie.DateParseException(java.lang.String);
  public static java.text.SimpleDateFormat formatFor(java.lang.String);
public final class org.apache.http.impl.cookie.DateUtils {
  public static java.lang.String formatDate(java.util.Date);
  public static java.lang.String formatDate(java.util.Date, java.lang.String);
public class org.apache.http.impl.cookie.NetscapeDomainHandler extends org.apache.http.impl.cookie.BasicDomainHandler {
  public org.apache.http.impl.cookie.NetscapeDomainHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.NetscapeDraftHeaderParser {
  public org.apache.http.impl.cookie.NetscapeDraftHeaderParser();
public class org.apache.http.impl.cookie.NetscapeDraftSpec extends org.apache.http.impl.cookie.CookieSpecBase {
  public org.apache.http.impl.cookie.NetscapeDraftSpec(java.lang.String[]);
  public org.apache.http.impl.cookie.NetscapeDraftSpec();
  public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
  public int getVersion();
  public org.apache.http.Header getVersionHeader();
public class org.apache.http.impl.cookie.NetscapeDraftSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
  public org.apache.http.impl.cookie.NetscapeDraftSpecFactory();
  public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public class org.apache.http.impl.cookie.RFC2109DomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2109DomainHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.RFC2109Spec extends org.apache.http.impl.cookie.CookieSpecBase {
  public org.apache.http.impl.cookie.RFC2109Spec(java.lang.String[], boolean);
  public org.apache.http.impl.cookie.RFC2109Spec();
  public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
  public int getVersion();
  public org.apache.http.Header getVersionHeader();
public class org.apache.http.impl.cookie.RFC2109SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
  public org.apache.http.impl.cookie.RFC2109SpecFactory();
  public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public class org.apache.http.impl.cookie.RFC2109VersionHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2109VersionHandler();
public class org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.RFC2965DomainAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2965DomainAttributeHandler();
  public boolean domainMatch(java.lang.String, java.lang.String);
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.RFC2965PortAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2965PortAttributeHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.cookie.RFC2965Spec extends org.apache.http.impl.cookie.RFC2109Spec {
  public org.apache.http.impl.cookie.RFC2965Spec();
  public org.apache.http.impl.cookie.RFC2965Spec(java.lang.String[], boolean);
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
  public int getVersion();
  public org.apache.http.Header getVersionHeader();
public class org.apache.http.impl.cookie.RFC2965SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
  public org.apache.http.impl.cookie.RFC2965SpecFactory();
  public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
public class org.apache.http.impl.cookie.RFC2965VersionAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
  public org.apache.http.impl.cookie.RFC2965VersionAttributeHandler();
  public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
public class org.apache.http.impl.entity.EntityDeserializer {
  public org.apache.http.impl.entity.EntityDeserializer(org.apache.http.entity.ContentLengthStrategy);
public class org.apache.http.impl.entity.EntitySerializer {
  public org.apache.http.impl.entity.EntitySerializer(org.apache.http.entity.ContentLengthStrategy);
public class org.apache.http.impl.entity.LaxContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
  public org.apache.http.impl.entity.LaxContentLengthStrategy();
public class org.apache.http.impl.entity.StrictContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
  public org.apache.http.impl.entity.StrictContentLengthStrategy();
public abstract class org.apache.http.impl.io.AbstractMessageParser implements org.apache.http.io.HttpMessageParser {
  public org.apache.http.impl.io.AbstractMessageParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams);
public abstract class org.apache.http.impl.io.AbstractMessageWriter implements org.apache.http.io.HttpMessageWriter {
  public org.apache.http.impl.io.AbstractMessageWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
public abstract class org.apache.http.impl.io.AbstractSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
  public org.apache.http.impl.io.AbstractSessionInputBuffer();
  public org.apache.http.io.HttpTransportMetrics getMetrics();
public abstract class org.apache.http.impl.io.AbstractSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
  public org.apache.http.impl.io.AbstractSessionOutputBuffer();
  public org.apache.http.io.HttpTransportMetrics getMetrics();
public class org.apache.http.impl.io.ChunkedInputStream extends java.io.InputStream {
  public org.apache.http.impl.io.ChunkedInputStream(org.apache.http.io.SessionInputBuffer);
  public org.apache.http.Header[] getFooters();
public class org.apache.http.impl.io.ChunkedOutputStream extends java.io.OutputStream {
public class org.apache.http.impl.io.ContentLengthInputStream extends java.io.InputStream {
  public org.apache.http.impl.io.ContentLengthInputStream(org.apache.http.io.SessionInputBuffer, long);
public class org.apache.http.impl.io.ContentLengthOutputStream extends java.io.OutputStream {
  public org.apache.http.impl.io.ContentLengthOutputStream(org.apache.http.io.SessionOutputBuffer, long);
public class org.apache.http.impl.io.HttpRequestWriter extends org.apache.http.impl.io.AbstractMessageWriter {
  public org.apache.http.impl.io.HttpRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
public class org.apache.http.impl.io.HttpResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
  public org.apache.http.impl.io.HttpResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
public class org.apache.http.impl.io.HttpTransportMetricsImpl implements org.apache.http.io.HttpTransportMetrics {
  public org.apache.http.impl.io.HttpTransportMetricsImpl();
  public long getBytesTransferred();
  public void setBytesTransferred(long);
  public void incrementBytesTransferred(long);
  public void reset();
public class org.apache.http.impl.io.IdentityInputStream extends java.io.InputStream {
  public org.apache.http.impl.io.IdentityInputStream(org.apache.http.io.SessionInputBuffer);
public class org.apache.http.impl.io.IdentityOutputStream extends java.io.OutputStream {
  public org.apache.http.impl.io.IdentityOutputStream(org.apache.http.io.SessionOutputBuffer);
public class org.apache.http.impl.io.SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer {
public class org.apache.http.impl.io.SocketOutputBuffer extends org.apache.http.impl.io.AbstractSessionOutputBuffer {
public interface org.apache.http.io.HttpMessageParser {
public interface org.apache.http.io.HttpMessageWriter {
public interface org.apache.http.io.HttpTransportMetrics {
  public abstract long getBytesTransferred();
  public abstract void reset();
public interface org.apache.http.io.SessionInputBuffer {
  public abstract org.apache.http.io.HttpTransportMetrics getMetrics();
public interface org.apache.http.io.SessionOutputBuffer {
  public abstract org.apache.http.io.HttpTransportMetrics getMetrics();
public abstract class org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpMessage {
  public boolean containsHeader(java.lang.String);
  public org.apache.http.Header[] getHeaders(java.lang.String);
  public org.apache.http.Header getFirstHeader(java.lang.String);
  public org.apache.http.Header getLastHeader(java.lang.String);
  public org.apache.http.Header[] getAllHeaders();
  public void addHeader(org.apache.http.Header);
  public void addHeader(java.lang.String, java.lang.String);
  public void setHeader(org.apache.http.Header);
  public void setHeader(java.lang.String, java.lang.String);
  public void setHeaders(org.apache.http.Header[]);
  public void removeHeader(org.apache.http.Header);
  public void removeHeaders(java.lang.String);
  public org.apache.http.HeaderIterator headerIterator();
  public org.apache.http.HeaderIterator headerIterator(java.lang.String);
  public org.apache.http.params.HttpParams getParams();
  public void setParams(org.apache.http.params.HttpParams);
public class org.apache.http.message.BasicHeader implements org.apache.http.Header,java.lang.Cloneable {
  public org.apache.http.message.BasicHeader(java.lang.String, java.lang.String);
  public java.lang.String getName();
  public java.lang.String getValue();
  public java.lang.String toString();
public class org.apache.http.message.BasicHeaderElement implements org.apache.http.HeaderElement,java.lang.Cloneable {
  public org.apache.http.message.BasicHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[]);
  public org.apache.http.message.BasicHeaderElement(java.lang.String, java.lang.String);
  public java.lang.String getName();
  public java.lang.String getValue();
  public org.apache.http.NameValuePair[] getParameters();
  public int getParameterCount();
  public org.apache.http.NameValuePair getParameter(int);
  public org.apache.http.NameValuePair getParameterByName(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
public class org.apache.http.message.BasicHeaderElementIterator implements org.apache.http.HeaderElementIterator {
  public org.apache.http.message.BasicHeaderElementIterator(org.apache.http.HeaderIterator, org.apache.http.message.HeaderValueParser);
  public org.apache.http.message.BasicHeaderElementIterator(org.apache.http.HeaderIterator);
  public boolean hasNext();
public class org.apache.http.message.BasicHeaderIterator implements org.apache.http.HeaderIterator {
  public org.apache.http.message.BasicHeaderIterator(org.apache.http.Header[], java.lang.String);
  public boolean hasNext();
public class org.apache.http.message.BasicHeaderValueFormatter implements org.apache.http.message.HeaderValueFormatter {
  public org.apache.http.message.BasicHeaderValueFormatter();
  public static final java.lang.String formatElements(org.apache.http.HeaderElement[], boolean, org.apache.http.message.HeaderValueFormatter);
  public org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
  public static final java.lang.String formatHeaderElement(org.apache.http.HeaderElement, boolean, org.apache.http.message.HeaderValueFormatter);
  public org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
  public static final java.lang.String formatParameters(org.apache.http.NameValuePair[], boolean, org.apache.http.message.HeaderValueFormatter);
  public org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
  public static final java.lang.String formatNameValuePair(org.apache.http.NameValuePair, boolean, org.apache.http.message.HeaderValueFormatter);
  public org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
public class org.apache.http.message.BasicHeaderValueParser implements org.apache.http.message.HeaderValueParser {
  public org.apache.http.message.BasicHeaderValueParser();
  public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
  public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
  public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
  public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
  public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[]);
public class org.apache.http.message.BasicHttpEntityEnclosingRequest extends org.apache.http.message.BasicHttpRequest implements org.apache.http.HttpEntityEnclosingRequest {
  public org.apache.http.message.BasicHttpEntityEnclosingRequest(java.lang.String, java.lang.String);
  public org.apache.http.message.BasicHttpEntityEnclosingRequest(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
  public org.apache.http.message.BasicHttpEntityEnclosingRequest(org.apache.http.RequestLine);
  public org.apache.http.HttpEntity getEntity();
  public void setEntity(org.apache.http.HttpEntity);
  public boolean expectContinue();
public class org.apache.http.message.BasicHttpRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpRequest {
  public org.apache.http.message.BasicHttpRequest(java.lang.String, java.lang.String);
  public org.apache.http.message.BasicHttpRequest(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
  public org.apache.http.message.BasicHttpRequest(org.apache.http.RequestLine);
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public org.apache.http.RequestLine getRequestLine();
public class org.apache.http.message.BasicHttpResponse extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpResponse {
  public org.apache.http.message.BasicHttpResponse(org.apache.http.StatusLine, org.apache.http.ReasonPhraseCatalog, java.util.Locale);
  public org.apache.http.message.BasicHttpResponse(org.apache.http.StatusLine);
  public org.apache.http.message.BasicHttpResponse(org.apache.http.ProtocolVersion, int, java.lang.String);
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public org.apache.http.StatusLine getStatusLine();
  public org.apache.http.HttpEntity getEntity();
  public java.util.Locale getLocale();
  public void setStatusLine(org.apache.http.StatusLine);
  public void setStatusLine(org.apache.http.ProtocolVersion, int);
  public void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
  public void setStatusCode(int);
  public void setReasonPhrase(java.lang.String);
  public void setEntity(org.apache.http.HttpEntity);
  public void setLocale(java.util.Locale);
public class org.apache.http.message.BasicLineFormatter implements org.apache.http.message.LineFormatter {
  public org.apache.http.message.BasicLineFormatter();
  public static final java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion, org.apache.http.message.LineFormatter);
  public org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
  public static final java.lang.String formatRequestLine(org.apache.http.RequestLine, org.apache.http.message.LineFormatter);
  public org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
  public static final java.lang.String formatStatusLine(org.apache.http.StatusLine, org.apache.http.message.LineFormatter);
  public org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
  public static final java.lang.String formatHeader(org.apache.http.Header, org.apache.http.message.LineFormatter);
  public org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
public class org.apache.http.message.BasicLineParser implements org.apache.http.message.LineParser {
  public org.apache.http.message.BasicLineParser(org.apache.http.ProtocolVersion);
  public org.apache.http.message.BasicLineParser();
  public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
public class org.apache.http.message.BasicListHeaderIterator implements org.apache.http.HeaderIterator {
  public org.apache.http.message.BasicListHeaderIterator(java.util.List, java.lang.String);
  public boolean hasNext();
public class org.apache.http.message.BasicNameValuePair implements org.apache.http.NameValuePair,java.lang.Cloneable {
  public org.apache.http.message.BasicNameValuePair(java.lang.String, java.lang.String);
  public java.lang.String getName();
  public java.lang.String getValue();
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
public class org.apache.http.message.BasicRequestLine implements org.apache.http.RequestLine,java.lang.Cloneable {
  public org.apache.http.message.BasicRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
  public java.lang.String getMethod();
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public java.lang.String getUri();
  public java.lang.String toString();
public class org.apache.http.message.BasicStatusLine implements org.apache.http.StatusLine,java.lang.Cloneable {
  public org.apache.http.message.BasicStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
  public int getStatusCode();
  public org.apache.http.ProtocolVersion getProtocolVersion();
  public java.lang.String getReasonPhrase();
  public java.lang.String toString();
public class org.apache.http.message.BasicTokenIterator implements org.apache.http.TokenIterator {
  public org.apache.http.message.BasicTokenIterator(org.apache.http.HeaderIterator);
  public boolean hasNext();
public class org.apache.http.message.BufferedHeader implements org.apache.http.FormattedHeader,java.lang.Cloneable {
  public java.lang.String getName();
  public java.lang.String getValue();
  public int getValuePos();
  public org.apache.http.util.CharArrayBuffer getBuffer();
  public java.lang.String toString();
public class org.apache.http.message.HeaderGroup implements java.lang.Cloneable {
  public org.apache.http.message.HeaderGroup();
  public void clear();
  public void addHeader(org.apache.http.Header);
  public void removeHeader(org.apache.http.Header);
  public void updateHeader(org.apache.http.Header);
  public void setHeaders(org.apache.http.Header[]);
  public org.apache.http.Header getCondensedHeader(java.lang.String);
  public org.apache.http.Header[] getHeaders(java.lang.String);
  public org.apache.http.Header getFirstHeader(java.lang.String);
  public org.apache.http.Header getLastHeader(java.lang.String);
  public org.apache.http.Header[] getAllHeaders();
  public boolean containsHeader(java.lang.String);
  public org.apache.http.HeaderIterator iterator();
  public org.apache.http.HeaderIterator iterator(java.lang.String);
  public org.apache.http.message.HeaderGroup copy();
public interface org.apache.http.message.HeaderValueFormatter {
  public abstract org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
  public abstract org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
  public abstract org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
  public abstract org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
public interface org.apache.http.message.HeaderValueParser {
public interface org.apache.http.message.LineFormatter {
  public abstract org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
  public abstract org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
  public abstract org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
  public abstract org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
public interface org.apache.http.message.LineParser {
  public abstract boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
public class org.apache.http.message.ParserCursor {
  public org.apache.http.message.ParserCursor(int, int);
  public int getLowerBound();
  public int getUpperBound();
  public int getPos();
  public void updatePos(int);
  public boolean atEnd();
  public java.lang.String toString();
public abstract class org.apache.http.params.AbstractHttpParams implements org.apache.http.params.HttpParams {
  public long getLongParameter(java.lang.String, long);
  public org.apache.http.params.HttpParams setLongParameter(java.lang.String, long);
  public int getIntParameter(java.lang.String, int);
  public org.apache.http.params.HttpParams setIntParameter(java.lang.String, int);
  public double getDoubleParameter(java.lang.String, double);
  public org.apache.http.params.HttpParams setDoubleParameter(java.lang.String, double);
  public boolean getBooleanParameter(java.lang.String, boolean);
  public org.apache.http.params.HttpParams setBooleanParameter(java.lang.String, boolean);
  public boolean isParameterTrue(java.lang.String);
  public boolean isParameterFalse(java.lang.String);
public final class org.apache.http.params.BasicHttpParams extends org.apache.http.params.AbstractHttpParams implements java.io.Serializable,java.lang.Cloneable {
  public org.apache.http.params.BasicHttpParams();
  public java.lang.Object getParameter(java.lang.String);
  public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
  public boolean removeParameter(java.lang.String);
  public void setParameters(java.lang.String[], java.lang.Object);
  public boolean isParameterSet(java.lang.String);
  public boolean isParameterSetLocally(java.lang.String);
  public void clear();
  public org.apache.http.params.HttpParams copy();
public interface org.apache.http.params.CoreConnectionPNames {
public interface org.apache.http.params.CoreProtocolPNames {
public final class org.apache.http.params.HttpConnectionParams implements org.apache.http.params.CoreConnectionPNames {
  public static int getSoTimeout(org.apache.http.params.HttpParams);
  public static void setSoTimeout(org.apache.http.params.HttpParams, int);
  public static boolean getTcpNoDelay(org.apache.http.params.HttpParams);
  public static void setTcpNoDelay(org.apache.http.params.HttpParams, boolean);
  public static int getSocketBufferSize(org.apache.http.params.HttpParams);
  public static void setSocketBufferSize(org.apache.http.params.HttpParams, int);
  public static int getLinger(org.apache.http.params.HttpParams);
  public static void setLinger(org.apache.http.params.HttpParams, int);
  public static int getConnectionTimeout(org.apache.http.params.HttpParams);
  public static void setConnectionTimeout(org.apache.http.params.HttpParams, int);
  public static boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams);
  public static void setStaleCheckingEnabled(org.apache.http.params.HttpParams, boolean);
public interface org.apache.http.params.HttpParams {
  public abstract java.lang.Object getParameter(java.lang.String);
  public abstract org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
  public abstract org.apache.http.params.HttpParams copy();
  public abstract boolean removeParameter(java.lang.String);
  public abstract long getLongParameter(java.lang.String, long);
  public abstract org.apache.http.params.HttpParams setLongParameter(java.lang.String, long);
  public abstract int getIntParameter(java.lang.String, int);
  public abstract org.apache.http.params.HttpParams setIntParameter(java.lang.String, int);
  public abstract double getDoubleParameter(java.lang.String, double);
  public abstract org.apache.http.params.HttpParams setDoubleParameter(java.lang.String, double);
  public abstract boolean getBooleanParameter(java.lang.String, boolean);
  public abstract org.apache.http.params.HttpParams setBooleanParameter(java.lang.String, boolean);
  public abstract boolean isParameterTrue(java.lang.String);
  public abstract boolean isParameterFalse(java.lang.String);
public final class org.apache.http.params.HttpProtocolParams implements org.apache.http.params.CoreProtocolPNames {
  public static java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams);
  public static void setHttpElementCharset(org.apache.http.params.HttpParams, java.lang.String);
  public static java.lang.String getContentCharset(org.apache.http.params.HttpParams);
  public static void setContentCharset(org.apache.http.params.HttpParams, java.lang.String);
  public static org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams);
  public static void setVersion(org.apache.http.params.HttpParams, org.apache.http.ProtocolVersion);
  public static java.lang.String getUserAgent(org.apache.http.params.HttpParams);
  public static void setUserAgent(org.apache.http.params.HttpParams, java.lang.String);
  public static boolean useExpectContinue(org.apache.http.params.HttpParams);
  public static void setUseExpectContinue(org.apache.http.params.HttpParams, boolean);
public class org.apache.http.protocol.BasicHttpContext implements org.apache.http.protocol.HttpContext {
  public org.apache.http.protocol.BasicHttpContext();
  public org.apache.http.protocol.BasicHttpContext(org.apache.http.protocol.HttpContext);
  public java.lang.Object getAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.Object);
  public java.lang.Object removeAttribute(java.lang.String);
public final class org.apache.http.protocol.BasicHttpProcessor implements org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpRequestInterceptorList,org.apache.http.protocol.HttpResponseInterceptorList,java.lang.Cloneable {
  public org.apache.http.protocol.BasicHttpProcessor();
  public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
  public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
  public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
  public void removeRequestInterceptorByClass(java.lang.Class);
  public void removeResponseInterceptorByClass(java.lang.Class);
  public final void addInterceptor(org.apache.http.HttpRequestInterceptor);
  public final void addInterceptor(org.apache.http.HttpRequestInterceptor, int);
  public int getRequestInterceptorCount();
  public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
  public void clearRequestInterceptors();
  public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
  public final void addInterceptor(org.apache.http.HttpResponseInterceptor);
  public final void addInterceptor(org.apache.http.HttpResponseInterceptor, int);
  public int getResponseInterceptorCount();
  public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
  public void clearResponseInterceptors();
  public void setInterceptors(java.util.List);
  public void clearInterceptors();
  public org.apache.http.protocol.BasicHttpProcessor copy();
public final class org.apache.http.protocol.DefaultedHttpContext implements org.apache.http.protocol.HttpContext {
  public org.apache.http.protocol.DefaultedHttpContext(org.apache.http.protocol.HttpContext, org.apache.http.protocol.HttpContext);
  public java.lang.Object getAttribute(java.lang.String);
  public java.lang.Object removeAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.Object);
  public org.apache.http.protocol.HttpContext getDefaults();
public final class org.apache.http.protocol.HTTP {
  public static boolean isWhitespace(char);
public interface org.apache.http.protocol.HttpContext {
  public abstract java.lang.Object getAttribute(java.lang.String);
  public abstract void setAttribute(java.lang.String, java.lang.Object);
  public abstract java.lang.Object removeAttribute(java.lang.String);
public interface org.apache.http.protocol.HttpProcessor extends org.apache.http.HttpRequestInterceptor,org.apache.http.HttpResponseInterceptor {
public class org.apache.http.protocol.HttpRequestExecutor {
  public org.apache.http.protocol.HttpRequestExecutor();
public interface org.apache.http.protocol.HttpRequestInterceptorList {
  public abstract void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
  public abstract void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
  public abstract int getRequestInterceptorCount();
  public abstract org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
  public abstract void clearRequestInterceptors();
  public abstract void removeRequestInterceptorByClass(java.lang.Class);
  public abstract void setInterceptors(java.util.List);
public interface org.apache.http.protocol.HttpResponseInterceptorList {
  public abstract void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
  public abstract void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
  public abstract int getResponseInterceptorCount();
  public abstract org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
  public abstract void clearResponseInterceptors();
  public abstract void removeResponseInterceptorByClass(java.lang.Class);
  public abstract void setInterceptors(java.util.List);
public class org.apache.http.protocol.RequestConnControl implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.protocol.RequestConnControl();
public class org.apache.http.protocol.RequestContent implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.protocol.RequestContent();
public class org.apache.http.protocol.RequestExpectContinue implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.protocol.RequestExpectContinue();
public class org.apache.http.protocol.RequestTargetHost implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.protocol.RequestTargetHost();
public class org.apache.http.protocol.RequestUserAgent implements org.apache.http.HttpRequestInterceptor {
  public org.apache.http.protocol.RequestUserAgent();
public final class org.apache.http.util.ByteArrayBuffer {
  public org.apache.http.util.ByteArrayBuffer(int);
  public void append(byte[], int, int);
  public void append(int);
  public void append(char[], int, int);
  public void append(org.apache.http.util.CharArrayBuffer, int, int);
  public void clear();
  public byte[] toByteArray();
  public int byteAt(int);
  public int capacity();
  public int length();
  public byte[] buffer();
  public void setLength(int);
  public boolean isEmpty();
  public boolean isFull();
public final class org.apache.http.util.CharArrayBuffer {
  public org.apache.http.util.CharArrayBuffer(int);
  public void append(char[], int, int);
  public void append(java.lang.String);
  public void append(org.apache.http.util.CharArrayBuffer, int, int);
  public void append(org.apache.http.util.CharArrayBuffer);
  public void append(char);
  public void append(byte[], int, int);
  public void append(org.apache.http.util.ByteArrayBuffer, int, int);
  public void append(java.lang.Object);
  public void clear();
  public char[] toCharArray();
  public char charAt(int);
  public char[] buffer();
  public int capacity();
  public int length();
  public void ensureCapacity(int);
  public void setLength(int);
  public boolean isEmpty();
  public boolean isFull();
  public int indexOf(int, int, int);
  public int indexOf(int);
  public java.lang.String substring(int, int);
  public java.lang.String substringTrimmed(int, int);
  public java.lang.String toString();
public final class org.apache.http.util.EncodingUtils {
  public static java.lang.String getString(byte[], int, int, java.lang.String);
  public static java.lang.String getString(byte[], java.lang.String);
  public static byte[] getBytes(java.lang.String, java.lang.String);
  public static byte[] getAsciiBytes(java.lang.String);
  public static java.lang.String getAsciiString(byte[], int, int);
  public static java.lang.String getAsciiString(byte[]);
public final class org.apache.http.util.EntityUtils {
public final class org.apache.http.util.ExceptionUtils {
  public static void initCause(java.lang.Throwable, java.lang.Throwable);
public final class org.apache.http.util.LangUtils {
  public static int hashCode(int, int);
  public static int hashCode(int, boolean);
  public static int hashCode(int, java.lang.Object);
  public static boolean equals(java.lang.Object, java.lang.Object);
  public static boolean equals(java.lang.Object[], java.lang.Object[]);
public class org.apache.http.util.VersionInfo {
  public final java.lang.String getPackage();
  public final java.lang.String getModule();
  public final java.lang.String getRelease();
  public final java.lang.String getTimestamp();
  public final java.lang.String getClassloader();
  public java.lang.String toString();
  public static final org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[], java.lang.ClassLoader);
  public static final org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String, java.lang.ClassLoader);
public class org.ccil.cowan.tagsoup.AttributesImpl implements org.xml.sax.Attributes {
  public org.ccil.cowan.tagsoup.AttributesImpl();
  public org.ccil.cowan.tagsoup.AttributesImpl(org.xml.sax.Attributes);
  public int getLength();
  public java.lang.String getURI(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getQName(int);
  public java.lang.String getType(int);
  public java.lang.String getValue(int);
  public int getIndex(java.lang.String, java.lang.String);
  public int getIndex(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
  public java.lang.String getValue(java.lang.String);
  public void clear();
  public void setAttributes(org.xml.sax.Attributes);
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void setAttribute(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void removeAttribute(int);
  public void setURI(int, java.lang.String);
  public void setLocalName(int, java.lang.String);
  public void setQName(int, java.lang.String);
  public void setType(int, java.lang.String);
  public void setValue(int, java.lang.String);
public interface org.ccil.cowan.tagsoup.AutoDetector {
  public abstract java.io.Reader autoDetectingReader(java.io.InputStream);
public class org.ccil.cowan.tagsoup.Element {
  public org.ccil.cowan.tagsoup.Element(org.ccil.cowan.tagsoup.ElementType, boolean);
  public org.ccil.cowan.tagsoup.ElementType type();
  public org.ccil.cowan.tagsoup.AttributesImpl atts();
  public org.ccil.cowan.tagsoup.Element next();
  public void setNext(org.ccil.cowan.tagsoup.Element);
  public java.lang.String name();
  public java.lang.String namespace();
  public java.lang.String localName();
  public int model();
  public int memberOf();
  public int flags();
  public org.ccil.cowan.tagsoup.ElementType parent();
  public boolean canContain(org.ccil.cowan.tagsoup.Element);
  public void setAttribute(java.lang.String, java.lang.String, java.lang.String);
  public void anonymize();
  public void clean();
  public void preclose();
  public boolean isPreclosed();
public class org.ccil.cowan.tagsoup.ElementType {
  public org.ccil.cowan.tagsoup.ElementType(java.lang.String, int, int, int, org.ccil.cowan.tagsoup.Schema);
  public java.lang.String namespace(java.lang.String, boolean);
  public java.lang.String localName(java.lang.String);
  public java.lang.String name();
  public java.lang.String namespace();
  public java.lang.String localName();
  public int model();
  public int memberOf();
  public int flags();
  public org.ccil.cowan.tagsoup.AttributesImpl atts();
  public org.ccil.cowan.tagsoup.ElementType parent();
  public org.ccil.cowan.tagsoup.Schema schema();
  public boolean canContain(org.ccil.cowan.tagsoup.ElementType);
  public void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl, java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String normalize(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String, java.lang.String);
  public void setModel(int);
  public void setMemberOf(int);
  public void setFlags(int);
  public void setParent(org.ccil.cowan.tagsoup.ElementType);
public interface org.ccil.cowan.tagsoup.HTMLModels {
public class org.ccil.cowan.tagsoup.HTMLScanner implements org.ccil.cowan.tagsoup.Scanner,org.xml.sax.Locator {
  public org.ccil.cowan.tagsoup.HTMLScanner();
  public int getLineNumber();
  public int getColumnNumber();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
  public void resetDocumentLocator(java.lang.String, java.lang.String);
  public void startCDATA();
public class org.ccil.cowan.tagsoup.HTMLSchema extends org.ccil.cowan.tagsoup.Schema implements org.ccil.cowan.tagsoup.HTMLModels {
  public org.ccil.cowan.tagsoup.HTMLSchema();
public class org.ccil.cowan.tagsoup.PYXWriter implements org.ccil.cowan.tagsoup.ScanHandler,org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler {
  public int getEntity();
  public void setDocumentLocator(org.xml.sax.Locator);
  public org.ccil.cowan.tagsoup.PYXWriter(java.io.Writer);
  public java.io.Reader autoDetectingReader(java.io.InputStream);
public class org.ccil.cowan.tagsoup.Parser extends org.xml.sax.helpers.DefaultHandler implements org.ccil.cowan.tagsoup.ScanHandler,org.xml.sax.XMLReader,org.xml.sax.ext.LexicalHandler {
  public org.ccil.cowan.tagsoup.Parser();
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public org.xml.sax.EntityResolver getEntityResolver();
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public org.xml.sax.DTDHandler getDTDHandler();
  public void setContentHandler(org.xml.sax.ContentHandler);
  public org.xml.sax.ContentHandler getContentHandler();
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public org.xml.sax.ErrorHandler getErrorHandler();
  public int getEntity();
public interface org.ccil.cowan.tagsoup.ScanHandler {
  public abstract int getEntity();
public interface org.ccil.cowan.tagsoup.Scanner {
  public abstract void resetDocumentLocator(java.lang.String, java.lang.String);
  public abstract void startCDATA();
public abstract class org.ccil.cowan.tagsoup.Schema {
  public org.ccil.cowan.tagsoup.Schema();
  public void elementType(java.lang.String, int, int, int);
  public org.ccil.cowan.tagsoup.ElementType rootElementType();
  public void attribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void parent(java.lang.String, java.lang.String);
  public void entity(java.lang.String, int);
  public org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String);
  public int getEntity(java.lang.String);
  public java.lang.String getURI();
  public java.lang.String getPrefix();
  public void setURI(java.lang.String);
  public void setPrefix(java.lang.String);
public class org.json.JSONArray {
  public org.json.JSONArray();
  public org.json.JSONArray(java.util.Collection);
  public int length();
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(long);
  public org.json.JSONArray put(java.lang.Object);
  public boolean isNull(int);
  public java.lang.Object opt(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double optDouble(int);
  public double optDouble(int, double);
  public int optInt(int);
  public int optInt(int, int);
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONObject optJSONObject(int);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
public class org.json.JSONException extends java.lang.Exception {
  public org.json.JSONException(java.lang.String);
  public boolean equals(java.lang.Object);
  public java.lang.String toString();
public class org.json.JSONObject {
  public org.json.JSONObject();
  public org.json.JSONObject(java.util.Map);
  public int length();
  public java.lang.Object remove(java.lang.String);
  public boolean isNull(java.lang.String);
  public boolean has(java.lang.String);
  public java.lang.Object opt(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONObject optJSONObject(java.lang.String);
  public java.util.Iterator keys();
  public org.json.JSONArray names();
  public java.lang.String toString();
  public static java.lang.String quote(java.lang.String);
  public static org.json.JSONStringer$Scope[] values();
  public static org.json.JSONStringer$Scope valueOf(java.lang.String);
public class org.json.JSONStringer {
  public org.json.JSONStringer();
  public java.lang.String toString();
public class org.json.JSONTokener {
  public org.json.JSONTokener(java.lang.String);
  public org.json.JSONException syntaxError(java.lang.String);
  public java.lang.String toString();
  public boolean more();
  public char next();
  public java.lang.String nextTo(java.lang.String);
  public java.lang.String nextTo(char);
  public void skipPast(java.lang.String);
  public char skipTo(char);
  public void back();
  public static int dehexchar(char);
  public static org.kxml2.io.KXmlParser$ValueContext[] values();
  public static org.kxml2.io.KXmlParser$ValueContext valueOf(java.lang.String);
public class org.kxml2.io.KXmlParser implements org.xmlpull.v1.XmlPullParser,java.io.Closeable {
  public org.kxml2.io.KXmlParser();
  public void keepNamespaceAttributes();
  public boolean getFeature(java.lang.String);
  public java.lang.String getInputEncoding();
  public java.lang.Object getProperty(java.lang.String);
  public java.lang.String getRootElementName();
  public java.lang.String getSystemId();
  public java.lang.String getPublicId();
  public int getNamespaceCount(int);
  public java.lang.String getNamespacePrefix(int);
  public java.lang.String getNamespaceUri(int);
  public java.lang.String getNamespace(java.lang.String);
  public int getDepth();
  public java.lang.String getPositionDescription();
  public int getLineNumber();
  public int getColumnNumber();
  public java.lang.String getText();
  public char[] getTextCharacters(int[]);
  public java.lang.String getNamespace();
  public java.lang.String getName();
  public java.lang.String getPrefix();
  public int getAttributeCount();
  public java.lang.String getAttributeType(int);
  public boolean isAttributeDefault(int);
  public java.lang.String getAttributeNamespace(int);
  public java.lang.String getAttributeName(int);
  public java.lang.String getAttributePrefix(int);
  public java.lang.String getAttributeValue(int);
  public java.lang.String getAttributeValue(java.lang.String, java.lang.String);
public interface org.w3c.dom.Attr extends org.w3c.dom.Node {
  public abstract java.lang.String getName();
  public abstract boolean getSpecified();
  public abstract java.lang.String getValue();
  public abstract org.w3c.dom.Element getOwnerElement();
  public abstract org.w3c.dom.TypeInfo getSchemaTypeInfo();
  public abstract boolean isId();
public interface org.w3c.dom.CDATASection extends org.w3c.dom.Text {
public interface org.w3c.dom.CharacterData extends org.w3c.dom.Node {
  public abstract int getLength();
public interface org.w3c.dom.Comment extends org.w3c.dom.CharacterData {
public interface org.w3c.dom.DOMConfiguration {
  public abstract boolean canSetParameter(java.lang.String, java.lang.Object);
  public abstract org.w3c.dom.DOMStringList getParameterNames();
public interface org.w3c.dom.DOMError {
  public abstract short getSeverity();
  public abstract java.lang.String getMessage();
  public abstract java.lang.String getType();
  public abstract java.lang.Object getRelatedException();
  public abstract java.lang.Object getRelatedData();
  public abstract org.w3c.dom.DOMLocator getLocation();
public interface org.w3c.dom.DOMErrorHandler {
  public abstract boolean handleError(org.w3c.dom.DOMError);
public class org.w3c.dom.DOMException extends java.lang.RuntimeException {
  public org.w3c.dom.DOMException(short, java.lang.String);
public interface org.w3c.dom.DOMImplementation {
  public abstract boolean hasFeature(java.lang.String, java.lang.String);
  public abstract java.lang.Object getFeature(java.lang.String, java.lang.String);
public interface org.w3c.dom.DOMLocator {
  public abstract int getLineNumber();
  public abstract int getColumnNumber();
  public abstract int getByteOffset();
  public abstract int getUtf16Offset();
  public abstract org.w3c.dom.Node getRelatedNode();
  public abstract java.lang.String getUri();
public interface org.w3c.dom.DOMStringList {
  public abstract java.lang.String item(int);
  public abstract int getLength();
  public abstract boolean contains(java.lang.String);
public interface org.w3c.dom.Document extends org.w3c.dom.Node {
  public abstract org.w3c.dom.DocumentType getDoctype();
  public abstract org.w3c.dom.DOMImplementation getImplementation();
  public abstract org.w3c.dom.Element getDocumentElement();
  public abstract org.w3c.dom.DocumentFragment createDocumentFragment();
  public abstract org.w3c.dom.Text createTextNode(java.lang.String);
  public abstract org.w3c.dom.Comment createComment(java.lang.String);
  public abstract org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public abstract org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String);
  public abstract org.w3c.dom.Element getElementById(java.lang.String);
  public abstract java.lang.String getInputEncoding();
  public abstract java.lang.String getXmlEncoding();
  public abstract boolean getXmlStandalone();
  public abstract java.lang.String getXmlVersion();
  public abstract boolean getStrictErrorChecking();
  public abstract void setStrictErrorChecking(boolean);
  public abstract java.lang.String getDocumentURI();
  public abstract void setDocumentURI(java.lang.String);
  public abstract org.w3c.dom.DOMConfiguration getDomConfig();
  public abstract void normalizeDocument();
public interface org.w3c.dom.DocumentFragment extends org.w3c.dom.Node {
public interface org.w3c.dom.DocumentType extends org.w3c.dom.Node {
  public abstract java.lang.String getName();
  public abstract org.w3c.dom.NamedNodeMap getEntities();
  public abstract org.w3c.dom.NamedNodeMap getNotations();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
  public abstract java.lang.String getInternalSubset();
public interface org.w3c.dom.Element extends org.w3c.dom.Node {
  public abstract java.lang.String getTagName();
  public abstract java.lang.String getAttribute(java.lang.String);
  public abstract org.w3c.dom.Attr getAttributeNode(java.lang.String);
  public abstract org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public abstract boolean hasAttribute(java.lang.String);
  public abstract org.w3c.dom.TypeInfo getSchemaTypeInfo();
public interface org.w3c.dom.EntityReference extends org.w3c.dom.Node {
public interface org.w3c.dom.NamedNodeMap {
  public abstract org.w3c.dom.Node getNamedItem(java.lang.String);
  public abstract org.w3c.dom.Node item(int);
  public abstract int getLength();
public interface org.w3c.dom.Node {
  public abstract java.lang.String getNodeName();
  public abstract short getNodeType();
  public abstract org.w3c.dom.Node getParentNode();
  public abstract org.w3c.dom.NodeList getChildNodes();
  public abstract org.w3c.dom.Node getFirstChild();
  public abstract org.w3c.dom.Node getLastChild();
  public abstract org.w3c.dom.Node getPreviousSibling();
  public abstract org.w3c.dom.Node getNextSibling();
  public abstract org.w3c.dom.NamedNodeMap getAttributes();
  public abstract org.w3c.dom.Document getOwnerDocument();
  public abstract boolean hasChildNodes();
  public abstract org.w3c.dom.Node cloneNode(boolean);
  public abstract void normalize();
  public abstract boolean isSupported(java.lang.String, java.lang.String);
  public abstract java.lang.String getNamespaceURI();
  public abstract java.lang.String getPrefix();
  public abstract java.lang.String getLocalName();
  public abstract boolean hasAttributes();
  public abstract java.lang.String getBaseURI();
  public abstract boolean isSameNode(org.w3c.dom.Node);
  public abstract java.lang.String lookupPrefix(java.lang.String);
  public abstract boolean isDefaultNamespace(java.lang.String);
  public abstract java.lang.String lookupNamespaceURI(java.lang.String);
  public abstract boolean isEqualNode(org.w3c.dom.Node);
  public abstract java.lang.Object getFeature(java.lang.String, java.lang.String);
  public abstract java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public abstract java.lang.Object getUserData(java.lang.String);
public interface org.w3c.dom.NodeList {
  public abstract org.w3c.dom.Node item(int);
  public abstract int getLength();
public interface org.w3c.dom.ProcessingInstruction extends org.w3c.dom.Node {
  public abstract java.lang.String getTarget();
  public abstract java.lang.String getData();
public interface org.w3c.dom.Text extends org.w3c.dom.CharacterData {
  public abstract boolean isElementContentWhitespace();
  public abstract java.lang.String getWholeText();
public interface org.w3c.dom.TypeInfo {
  public abstract java.lang.String getTypeName();
  public abstract java.lang.String getTypeNamespace();
  public abstract boolean isDerivedFrom(java.lang.String, java.lang.String, int);
public interface org.w3c.dom.UserDataHandler {
  public abstract void handle(short, java.lang.String, java.lang.Object, org.w3c.dom.Node, org.w3c.dom.Node);
public interface org.xml.sax.AttributeList {
  public abstract int getLength();
  public abstract java.lang.String getName(int);
  public abstract java.lang.String getType(int);
  public abstract java.lang.String getValue(int);
  public abstract java.lang.String getType(java.lang.String);
  public abstract java.lang.String getValue(java.lang.String);
public interface org.xml.sax.Attributes {
  public abstract int getLength();
  public abstract java.lang.String getURI(int);
  public abstract java.lang.String getLocalName(int);
  public abstract java.lang.String getQName(int);
  public abstract java.lang.String getType(int);
  public abstract java.lang.String getValue(int);
  public abstract int getIndex(java.lang.String, java.lang.String);
  public abstract int getIndex(java.lang.String);
  public abstract java.lang.String getType(java.lang.String, java.lang.String);
  public abstract java.lang.String getType(java.lang.String);
  public abstract java.lang.String getValue(java.lang.String, java.lang.String);
  public abstract java.lang.String getValue(java.lang.String);
public interface org.xml.sax.ContentHandler {
  public abstract void setDocumentLocator(org.xml.sax.Locator);
public interface org.xml.sax.DTDHandler {
public interface org.xml.sax.DocumentHandler {
  public abstract void setDocumentLocator(org.xml.sax.Locator);
public interface org.xml.sax.EntityResolver {
public interface org.xml.sax.ErrorHandler {
public class org.xml.sax.InputSource {
  public org.xml.sax.InputSource();
  public org.xml.sax.InputSource(java.lang.String);
  public org.xml.sax.InputSource(java.io.InputStream);
  public org.xml.sax.InputSource(java.io.Reader);
  public void setPublicId(java.lang.String);
  public java.lang.String getPublicId();
  public void setSystemId(java.lang.String);
  public java.lang.String getSystemId();
  public void setByteStream(java.io.InputStream);
  public java.io.InputStream getByteStream();
  public void setEncoding(java.lang.String);
  public java.lang.String getEncoding();
  public void setCharacterStream(java.io.Reader);
  public java.io.Reader getCharacterStream();
public interface org.xml.sax.Locator {
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
  public abstract int getLineNumber();
  public abstract int getColumnNumber();
public interface org.xml.sax.Parser {
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract void setDTDHandler(org.xml.sax.DTDHandler);
  public abstract void setDocumentHandler(org.xml.sax.DocumentHandler);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
public class org.xml.sax.SAXException extends java.lang.Exception {
  public org.xml.sax.SAXException();
  public org.xml.sax.SAXException(java.lang.String);
  public org.xml.sax.SAXException(java.lang.Exception);
  public org.xml.sax.SAXException(java.lang.String, java.lang.Exception);
  public java.lang.String getMessage();
  public java.lang.Exception getException();
  public java.lang.String toString();
public class org.xml.sax.SAXNotRecognizedException extends org.xml.sax.SAXException {
  public org.xml.sax.SAXNotRecognizedException();
  public org.xml.sax.SAXNotRecognizedException(java.lang.String);
public class org.xml.sax.SAXNotSupportedException extends org.xml.sax.SAXException {
  public org.xml.sax.SAXNotSupportedException();
  public org.xml.sax.SAXNotSupportedException(java.lang.String);
public class org.xml.sax.SAXParseException extends org.xml.sax.SAXException {
  public org.xml.sax.SAXParseException(java.lang.String, org.xml.sax.Locator);
  public org.xml.sax.SAXParseException(java.lang.String, org.xml.sax.Locator, java.lang.Exception);
  public org.xml.sax.SAXParseException(java.lang.String, java.lang.String, java.lang.String, int, int);
  public org.xml.sax.SAXParseException(java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.Exception);
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
  public int getLineNumber();
  public int getColumnNumber();
public interface org.xml.sax.XMLReader {
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract org.xml.sax.EntityResolver getEntityResolver();
  public abstract void setDTDHandler(org.xml.sax.DTDHandler);
  public abstract org.xml.sax.DTDHandler getDTDHandler();
  public abstract void setContentHandler(org.xml.sax.ContentHandler);
  public abstract org.xml.sax.ContentHandler getContentHandler();
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract org.xml.sax.ErrorHandler getErrorHandler();
public interface org.xml.sax.ext.LexicalHandler {
public class org.xml.sax.helpers.AttributesImpl implements org.xml.sax.Attributes {
  public org.xml.sax.helpers.AttributesImpl();
  public org.xml.sax.helpers.AttributesImpl(org.xml.sax.Attributes);
  public int getLength();
  public java.lang.String getURI(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getQName(int);
  public java.lang.String getType(int);
  public java.lang.String getValue(int);
  public int getIndex(java.lang.String, java.lang.String);
  public int getIndex(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
  public java.lang.String getValue(java.lang.String);
  public void clear();
  public void setAttributes(org.xml.sax.Attributes);
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void setAttribute(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void removeAttribute(int);
  public void setURI(int, java.lang.String);
  public void setLocalName(int, java.lang.String);
  public void setQName(int, java.lang.String);
  public void setType(int, java.lang.String);
  public void setValue(int, java.lang.String);
public class org.xml.sax.helpers.DefaultHandler implements org.xml.sax.EntityResolver,org.xml.sax.DTDHandler,org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler {
  public org.xml.sax.helpers.DefaultHandler();
  public void setDocumentLocator(org.xml.sax.Locator);
public class org.xml.sax.helpers.LocatorImpl implements org.xml.sax.Locator {
  public org.xml.sax.helpers.LocatorImpl();
  public org.xml.sax.helpers.LocatorImpl(org.xml.sax.Locator);
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
  public int getLineNumber();
  public int getColumnNumber();
  public void setPublicId(java.lang.String);
  public void setSystemId(java.lang.String);
  public void setLineNumber(int);
  public void setColumnNumber(int);
public class org.xml.sax.helpers.NamespaceSupport {
  public org.xml.sax.helpers.NamespaceSupport();
  public void reset();
  public void pushContext();
  public void popContext();
  public boolean declarePrefix(java.lang.String, java.lang.String);
  public java.lang.String[] processName(java.lang.String, java.lang.String[], boolean);
  public java.lang.String getURI(java.lang.String);
  public java.util.Enumeration getPrefixes();
  public java.lang.String getPrefix(java.lang.String);
  public java.util.Enumeration getPrefixes(java.lang.String);
  public java.util.Enumeration getDeclaredPrefixes();
  public void setNamespaceDeclUris(boolean);
  public boolean isNamespaceDeclUris();
  public int getLength();
  public java.lang.String getURI(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getQName(int);
  public java.lang.String getType(int);
  public java.lang.String getValue(int);
  public int getIndex(java.lang.String, java.lang.String);
  public int getIndex(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
  public java.lang.String getValue(java.lang.String);
public class org.xml.sax.helpers.ParserAdapter implements org.xml.sax.XMLReader,org.xml.sax.DocumentHandler {
  public org.xml.sax.helpers.ParserAdapter(org.xml.sax.Parser);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public org.xml.sax.EntityResolver getEntityResolver();
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public org.xml.sax.DTDHandler getDTDHandler();
  public void setContentHandler(org.xml.sax.ContentHandler);
  public org.xml.sax.ContentHandler getContentHandler();
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public org.xml.sax.ErrorHandler getErrorHandler();
  public void setDocumentLocator(org.xml.sax.Locator);
public class org.xml.sax.helpers.ParserFactory {
  public int getLength();
  public java.lang.String getName(int);
  public java.lang.String getType(int);
  public java.lang.String getValue(int);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(java.lang.String);
public class org.xml.sax.helpers.XMLReaderAdapter implements org.xml.sax.Parser,org.xml.sax.ContentHandler {
  public org.xml.sax.helpers.XMLReaderAdapter(org.xml.sax.XMLReader);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public void setDocumentHandler(org.xml.sax.DocumentHandler);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setDocumentLocator(org.xml.sax.Locator);
  public void startPrefixMapping(java.lang.String, java.lang.String);
  public void endPrefixMapping(java.lang.String);
public final class org.xml.sax.helpers.XMLReaderFactory {
public interface org.xmlpull.v1.XmlPullParser {
  public abstract boolean getFeature(java.lang.String);
  public abstract java.lang.Object getProperty(java.lang.String);
  public abstract java.lang.String getInputEncoding();
  public abstract java.lang.String getNamespace(java.lang.String);
  public abstract int getDepth();
  public abstract java.lang.String getPositionDescription();
  public abstract int getLineNumber();
  public abstract int getColumnNumber();
  public abstract java.lang.String getText();
  public abstract char[] getTextCharacters(int[]);
  public abstract java.lang.String getNamespace();
  public abstract java.lang.String getName();
  public abstract java.lang.String getPrefix();
  public abstract int getAttributeCount();
  public abstract java.lang.String getAttributeNamespace(int);
  public abstract java.lang.String getAttributeName(int);
  public abstract java.lang.String getAttributePrefix(int);
  public abstract java.lang.String getAttributeType(int);
  public abstract boolean isAttributeDefault(int);
  public abstract java.lang.String getAttributeValue(int);
  public abstract java.lang.String getAttributeValue(java.lang.String, java.lang.String);
public class org.xmlpull.v1.XmlPullParserException extends java.lang.Exception {
  public org.xmlpull.v1.XmlPullParserException(java.lang.String);
  public org.xmlpull.v1.XmlPullParserException(java.lang.String, org.xmlpull.v1.XmlPullParser, java.lang.Throwable);
  public java.lang.Throwable getDetail();
  public int getLineNumber();
  public int getColumnNumber();
  public void printStackTrace();
public class org.xmlpull.v1.XmlPullParserFactory {
  public boolean getFeature(java.lang.String);
  public void setNamespaceAware(boolean);
  public boolean isNamespaceAware();
  public void setValidating(boolean);
  public boolean isValidating();
public interface org.xmlpull.v1.XmlSerializer {
  public abstract boolean getFeature(java.lang.String);
  public abstract java.lang.Object getProperty(java.lang.String);
  public abstract int getDepth();
  public abstract java.lang.String getNamespace();
  public abstract java.lang.String getName();
public final class sun.misc.Unsafe {
  public static sun.misc.Unsafe getUnsafe();
  public long objectFieldOffset(java.lang.reflect.Field);
  public int arrayBaseOffset(java.lang.Class);
  public int arrayIndexScale(java.lang.Class);
  public native boolean compareAndSwapInt(java.lang.Object, long, int, int);
  public native boolean compareAndSwapLong(java.lang.Object, long, long, long);
  public native boolean compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object);
  public native int getIntVolatile(java.lang.Object, long);
  public native void putIntVolatile(java.lang.Object, long, int);
  public native long getLongVolatile(java.lang.Object, long);
  public native void putLongVolatile(java.lang.Object, long, long);
  public native java.lang.Object getObjectVolatile(java.lang.Object, long);
  public native void putObjectVolatile(java.lang.Object, long, java.lang.Object);
  public native int getInt(java.lang.Object, long);
  public native void putInt(java.lang.Object, long, int);
  public native void putOrderedInt(java.lang.Object, long, int);
  public native long getLong(java.lang.Object, long);
  public native void putLong(java.lang.Object, long, long);
  public native void putOrderedLong(java.lang.Object, long, long);
  public native java.lang.Object getObject(java.lang.Object, long);
  public native void putObject(java.lang.Object, long, java.lang.Object);
  public native void putOrderedObject(java.lang.Object, long, java.lang.Object);
  public void park(boolean, long);
  public void unpark(java.lang.Object);
